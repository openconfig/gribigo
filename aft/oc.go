// Copyright 2022 The OpenConfig Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Package aft is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /usr/local/google/home/wenbli/gocode/pkg/mod/github.com/openconfig/ygot@v0.19.0/genutil/names.go
using the following YANG input files:
	- gribi/v1/yang/gribi-aft.yang
Imported modules were sourced from:
	- gribi/...
*/
package aft

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &RIB{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.ValidatedGoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Afts represents the /gribi-aft/afts YANG schema element.
type Afts struct {
	Ipv4Entry             map[string]*Afts_Ipv4Entry                       `path:"ipv4-unicast/ipv4-entry" module:"gribi-aft/gribi-aft"`
	Ipv6Entry             map[string]*Afts_Ipv6Entry                       `path:"ipv6-unicast/ipv6-entry" module:"gribi-aft/gribi-aft"`
	LabelEntry            map[Afts_LabelEntry_Label_Union]*Afts_LabelEntry `path:"mpls/label-entry" module:"gribi-aft/gribi-aft"`
	MacEntry              map[string]*Afts_MacEntry                        `path:"ethernet/mac-entry" module:"gribi-aft/gribi-aft"`
	NextHop               map[uint64]*Afts_NextHop                         `path:"next-hops/next-hop" module:"gribi-aft/gribi-aft"`
	NextHopGroup          map[uint64]*Afts_NextHopGroup                    `path:"next-hop-groups/next-hop-group" module:"gribi-aft/gribi-aft"`
	PolicyForwardingEntry map[uint64]*Afts_PolicyForwardingEntry           `path:"policy-forwarding/policy-forwarding-entry" module:"gribi-aft/gribi-aft"`
}

// IsYANGGoStruct ensures that Afts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Afts) IsYANGGoStruct() {}

// NewIpv4Entry creates a new entry in the Ipv4Entry list of the
// Afts struct. The keys of the list are populated from the input
// arguments.
func (t *Afts) NewIpv4Entry(Prefix string) (*Afts_Ipv4Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4Entry == nil {
		t.Ipv4Entry = make(map[string]*Afts_Ipv4Entry)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4Entry", key)
	}

	t.Ipv4Entry[key] = &Afts_Ipv4Entry{
		Prefix: &Prefix,
	}

	return t.Ipv4Entry[key], nil
}

// GetOrCreateIpv4Entry retrieves the value with the specified keys from
// the receiver Afts. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Afts) GetOrCreateIpv4Entry(Prefix string) *Afts_Ipv4Entry {

	key := Prefix

	if v, ok := t.Ipv4Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4Entry(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4Entry got unexpected error: %v", err))
	}
	return v
}

// GetIpv4Entry retrieves the value with the specified key from
// the Ipv4Entry map field of Afts. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Afts) GetIpv4Entry(Prefix string) *Afts_Ipv4Entry {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Ipv4Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4Entry deletes the value with the specified keys from
// the receiver Afts. If there is no such element, the function
// is a no-op.
func (t *Afts) DeleteIpv4Entry(Prefix string) {
	key := Prefix

	delete(t.Ipv4Entry, key)
}

// NewIpv6Entry creates a new entry in the Ipv6Entry list of the
// Afts struct. The keys of the list are populated from the input
// arguments.
func (t *Afts) NewIpv6Entry(Prefix string) (*Afts_Ipv6Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Entry == nil {
		t.Ipv6Entry = make(map[string]*Afts_Ipv6Entry)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6Entry", key)
	}

	t.Ipv6Entry[key] = &Afts_Ipv6Entry{
		Prefix: &Prefix,
	}

	return t.Ipv6Entry[key], nil
}

// GetOrCreateIpv6Entry retrieves the value with the specified keys from
// the receiver Afts. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Afts) GetOrCreateIpv6Entry(Prefix string) *Afts_Ipv6Entry {

	key := Prefix

	if v, ok := t.Ipv6Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6Entry(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6Entry got unexpected error: %v", err))
	}
	return v
}

// GetIpv6Entry retrieves the value with the specified key from
// the Ipv6Entry map field of Afts. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Afts) GetIpv6Entry(Prefix string) *Afts_Ipv6Entry {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Ipv6Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6Entry deletes the value with the specified keys from
// the receiver Afts. If there is no such element, the function
// is a no-op.
func (t *Afts) DeleteIpv6Entry(Prefix string) {
	key := Prefix

	delete(t.Ipv6Entry, key)
}

// NewLabelEntry creates a new entry in the LabelEntry list of the
// Afts struct. The keys of the list are populated from the input
// arguments.
func (t *Afts) NewLabelEntry(Label Afts_LabelEntry_Label_Union) (*Afts_LabelEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LabelEntry == nil {
		t.LabelEntry = make(map[Afts_LabelEntry_Label_Union]*Afts_LabelEntry)
	}

	key := Label

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LabelEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LabelEntry", key)
	}

	t.LabelEntry[key] = &Afts_LabelEntry{
		Label: Label,
	}

	return t.LabelEntry[key], nil
}

// GetOrCreateLabelEntry retrieves the value with the specified keys from
// the receiver Afts. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Afts) GetOrCreateLabelEntry(Label Afts_LabelEntry_Label_Union) *Afts_LabelEntry {

	key := Label

	if v, ok := t.LabelEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLabelEntry(Label)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLabelEntry got unexpected error: %v", err))
	}
	return v
}

// GetLabelEntry retrieves the value with the specified key from
// the LabelEntry map field of Afts. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Afts) GetLabelEntry(Label Afts_LabelEntry_Label_Union) *Afts_LabelEntry {

	if t == nil {
		return nil
	}

	key := Label

	if lm, ok := t.LabelEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteLabelEntry deletes the value with the specified keys from
// the receiver Afts. If there is no such element, the function
// is a no-op.
func (t *Afts) DeleteLabelEntry(Label Afts_LabelEntry_Label_Union) {
	key := Label

	delete(t.LabelEntry, key)
}

// NewMacEntry creates a new entry in the MacEntry list of the
// Afts struct. The keys of the list are populated from the input
// arguments.
func (t *Afts) NewMacEntry(MacAddress string) (*Afts_MacEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacEntry == nil {
		t.MacEntry = make(map[string]*Afts_MacEntry)
	}

	key := MacAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MacEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MacEntry", key)
	}

	t.MacEntry[key] = &Afts_MacEntry{
		MacAddress: &MacAddress,
	}

	return t.MacEntry[key], nil
}

// GetOrCreateMacEntry retrieves the value with the specified keys from
// the receiver Afts. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Afts) GetOrCreateMacEntry(MacAddress string) *Afts_MacEntry {

	key := MacAddress

	if v, ok := t.MacEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMacEntry(MacAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMacEntry got unexpected error: %v", err))
	}
	return v
}

// GetMacEntry retrieves the value with the specified key from
// the MacEntry map field of Afts. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Afts) GetMacEntry(MacAddress string) *Afts_MacEntry {

	if t == nil {
		return nil
	}

	key := MacAddress

	if lm, ok := t.MacEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteMacEntry deletes the value with the specified keys from
// the receiver Afts. If there is no such element, the function
// is a no-op.
func (t *Afts) DeleteMacEntry(MacAddress string) {
	key := MacAddress

	delete(t.MacEntry, key)
}

// NewNextHop creates a new entry in the NextHop list of the
// Afts struct. The keys of the list are populated from the input
// arguments.
func (t *Afts) NewNextHop(Index uint64) (*Afts_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*Afts_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &Afts_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver Afts. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Afts) GetOrCreateNextHop(Index uint64) *Afts_NextHop {

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of Afts. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Afts) GetNextHop(Index uint64) *Afts_NextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver Afts. If there is no such element, the function
// is a no-op.
func (t *Afts) DeleteNextHop(Index uint64) {
	key := Index

	delete(t.NextHop, key)
}

// NewNextHopGroup creates a new entry in the NextHopGroup list of the
// Afts struct. The keys of the list are populated from the input
// arguments.
func (t *Afts) NewNextHopGroup(Id uint64) (*Afts_NextHopGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHopGroup == nil {
		t.NextHopGroup = make(map[uint64]*Afts_NextHopGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHopGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHopGroup", key)
	}

	t.NextHopGroup[key] = &Afts_NextHopGroup{
		Id: &Id,
	}

	return t.NextHopGroup[key], nil
}

// GetOrCreateNextHopGroup retrieves the value with the specified keys from
// the receiver Afts. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Afts) GetOrCreateNextHopGroup(Id uint64) *Afts_NextHopGroup {

	key := Id

	if v, ok := t.NextHopGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHopGroup(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHopGroup got unexpected error: %v", err))
	}
	return v
}

// GetNextHopGroup retrieves the value with the specified key from
// the NextHopGroup map field of Afts. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Afts) GetNextHopGroup(Id uint64) *Afts_NextHopGroup {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.NextHopGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHopGroup deletes the value with the specified keys from
// the receiver Afts. If there is no such element, the function
// is a no-op.
func (t *Afts) DeleteNextHopGroup(Id uint64) {
	key := Id

	delete(t.NextHopGroup, key)
}

// NewPolicyForwardingEntry creates a new entry in the PolicyForwardingEntry list of the
// Afts struct. The keys of the list are populated from the input
// arguments.
func (t *Afts) NewPolicyForwardingEntry(Index uint64) (*Afts_PolicyForwardingEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyForwardingEntry == nil {
		t.PolicyForwardingEntry = make(map[uint64]*Afts_PolicyForwardingEntry)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicyForwardingEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicyForwardingEntry", key)
	}

	t.PolicyForwardingEntry[key] = &Afts_PolicyForwardingEntry{
		Index: &Index,
	}

	return t.PolicyForwardingEntry[key], nil
}

// GetOrCreatePolicyForwardingEntry retrieves the value with the specified keys from
// the receiver Afts. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Afts) GetOrCreatePolicyForwardingEntry(Index uint64) *Afts_PolicyForwardingEntry {

	key := Index

	if v, ok := t.PolicyForwardingEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicyForwardingEntry(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicyForwardingEntry got unexpected error: %v", err))
	}
	return v
}

// GetPolicyForwardingEntry retrieves the value with the specified key from
// the PolicyForwardingEntry map field of Afts. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Afts) GetPolicyForwardingEntry(Index uint64) *Afts_PolicyForwardingEntry {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.PolicyForwardingEntry[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicyForwardingEntry deletes the value with the specified keys from
// the receiver Afts. If there is no such element, the function
// is a no-op.
func (t *Afts) DeletePolicyForwardingEntry(Index uint64) {
	key := Index

	delete(t.PolicyForwardingEntry, key)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Afts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Afts) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Afts.
func (*Afts) ΛBelongingModule() string {
	return "gribi-aft"
}

// Afts_Ipv4Entry represents the /gribi-aft/afts/ipv4-unicast/ipv4-entry YANG schema element.
type Afts_Ipv4Entry struct {
	DecapsulateHeader           E_AftTypes_EncapsulationHeaderType `path:"state/decapsulate-header" module:"gribi-aft/gribi-aft"`
	EntryMetadata               Binary                             `path:"state/entry-metadata" module:"gribi-aft/gribi-aft"`
	NextHopGroup                *uint64                            `path:"state/next-hop-group" module:"gribi-aft/gribi-aft"`
	NextHopGroupNetworkInstance *string                            `path:"state/next-hop-group-network-instance" module:"gribi-aft/gribi-aft"`
	Prefix                      *string                            `path:"state/prefix|prefix" module:"gribi-aft/gribi-aft|gribi-aft"`
}

// IsYANGGoStruct ensures that Afts_Ipv4Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Afts_Ipv4Entry) IsYANGGoStruct() {}

// GetDecapsulateHeader retrieves the value of the leaf DecapsulateHeader from the Afts_Ipv4Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DecapsulateHeader is set, it can
// safely use t.GetDecapsulateHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DecapsulateHeader == nil' before retrieving the leaf's value.
func (t *Afts_Ipv4Entry) GetDecapsulateHeader() E_AftTypes_EncapsulationHeaderType {
	if t == nil || t.DecapsulateHeader == 0 {
		return 0
	}
	return t.DecapsulateHeader
}

// GetEntryMetadata retrieves the value of the leaf EntryMetadata from the Afts_Ipv4Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryMetadata is set, it can
// safely use t.GetEntryMetadata() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryMetadata == nil' before retrieving the leaf's value.
func (t *Afts_Ipv4Entry) GetEntryMetadata() Binary {
	if t == nil || t.EntryMetadata == nil {
		return nil
	}
	return t.EntryMetadata
}

// GetNextHopGroup retrieves the value of the leaf NextHopGroup from the Afts_Ipv4Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopGroup is set, it can
// safely use t.GetNextHopGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopGroup == nil' before retrieving the leaf's value.
func (t *Afts_Ipv4Entry) GetNextHopGroup() uint64 {
	if t == nil || t.NextHopGroup == nil {
		return 0
	}
	return *t.NextHopGroup
}

// GetNextHopGroupNetworkInstance retrieves the value of the leaf NextHopGroupNetworkInstance from the Afts_Ipv4Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopGroupNetworkInstance is set, it can
// safely use t.GetNextHopGroupNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopGroupNetworkInstance == nil' before retrieving the leaf's value.
func (t *Afts_Ipv4Entry) GetNextHopGroupNetworkInstance() string {
	if t == nil || t.NextHopGroupNetworkInstance == nil {
		return ""
	}
	return *t.NextHopGroupNetworkInstance
}

// GetPrefix retrieves the value of the leaf Prefix from the Afts_Ipv4Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *Afts_Ipv4Entry) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// ΛListKeyMap returns the keys of the Afts_Ipv4Entry struct, which is a YANG list entry.
func (t *Afts_Ipv4Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_Ipv4Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Afts_Ipv4Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_Ipv4Entry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Afts_Ipv4Entry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Afts_Ipv4Entry.
func (*Afts_Ipv4Entry) ΛBelongingModule() string {
	return "gribi-aft"
}

// Afts_Ipv6Entry represents the /gribi-aft/afts/ipv6-unicast/ipv6-entry YANG schema element.
type Afts_Ipv6Entry struct {
	DecapsulateHeader           E_AftTypes_EncapsulationHeaderType `path:"state/decapsulate-header" module:"gribi-aft/gribi-aft"`
	EntryMetadata               Binary                             `path:"state/entry-metadata" module:"gribi-aft/gribi-aft"`
	NextHopGroup                *uint64                            `path:"state/next-hop-group" module:"gribi-aft/gribi-aft"`
	NextHopGroupNetworkInstance *string                            `path:"state/next-hop-group-network-instance" module:"gribi-aft/gribi-aft"`
	Prefix                      *string                            `path:"state/prefix|prefix" module:"gribi-aft/gribi-aft|gribi-aft"`
}

// IsYANGGoStruct ensures that Afts_Ipv6Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Afts_Ipv6Entry) IsYANGGoStruct() {}

// GetDecapsulateHeader retrieves the value of the leaf DecapsulateHeader from the Afts_Ipv6Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DecapsulateHeader is set, it can
// safely use t.GetDecapsulateHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DecapsulateHeader == nil' before retrieving the leaf's value.
func (t *Afts_Ipv6Entry) GetDecapsulateHeader() E_AftTypes_EncapsulationHeaderType {
	if t == nil || t.DecapsulateHeader == 0 {
		return 0
	}
	return t.DecapsulateHeader
}

// GetEntryMetadata retrieves the value of the leaf EntryMetadata from the Afts_Ipv6Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryMetadata is set, it can
// safely use t.GetEntryMetadata() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryMetadata == nil' before retrieving the leaf's value.
func (t *Afts_Ipv6Entry) GetEntryMetadata() Binary {
	if t == nil || t.EntryMetadata == nil {
		return nil
	}
	return t.EntryMetadata
}

// GetNextHopGroup retrieves the value of the leaf NextHopGroup from the Afts_Ipv6Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopGroup is set, it can
// safely use t.GetNextHopGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopGroup == nil' before retrieving the leaf's value.
func (t *Afts_Ipv6Entry) GetNextHopGroup() uint64 {
	if t == nil || t.NextHopGroup == nil {
		return 0
	}
	return *t.NextHopGroup
}

// GetNextHopGroupNetworkInstance retrieves the value of the leaf NextHopGroupNetworkInstance from the Afts_Ipv6Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopGroupNetworkInstance is set, it can
// safely use t.GetNextHopGroupNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopGroupNetworkInstance == nil' before retrieving the leaf's value.
func (t *Afts_Ipv6Entry) GetNextHopGroupNetworkInstance() string {
	if t == nil || t.NextHopGroupNetworkInstance == nil {
		return ""
	}
	return *t.NextHopGroupNetworkInstance
}

// GetPrefix retrieves the value of the leaf Prefix from the Afts_Ipv6Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *Afts_Ipv6Entry) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// ΛListKeyMap returns the keys of the Afts_Ipv6Entry struct, which is a YANG list entry.
func (t *Afts_Ipv6Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_Ipv6Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Afts_Ipv6Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_Ipv6Entry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Afts_Ipv6Entry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Afts_Ipv6Entry.
func (*Afts_Ipv6Entry) ΛBelongingModule() string {
	return "gribi-aft"
}

// Afts_LabelEntry represents the /gribi-aft/afts/mpls/label-entry YANG schema element.
type Afts_LabelEntry struct {
	EntryMetadata               Binary                                       `path:"state/entry-metadata" module:"gribi-aft/gribi-aft"`
	Label                       Afts_LabelEntry_Label_Union                  `path:"state/label|label" module:"gribi-aft/gribi-aft|gribi-aft"`
	NextHopGroup                *uint64                                      `path:"state/next-hop-group" module:"gribi-aft/gribi-aft"`
	NextHopGroupNetworkInstance *string                                      `path:"state/next-hop-group-network-instance" module:"gribi-aft/gribi-aft"`
	PoppedMplsLabelStack        []Afts_LabelEntry_PoppedMplsLabelStack_Union `path:"state/popped-mpls-label-stack" module:"gribi-aft/gribi-aft"`
}

// IsYANGGoStruct ensures that Afts_LabelEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Afts_LabelEntry) IsYANGGoStruct() {}

// GetEntryMetadata retrieves the value of the leaf EntryMetadata from the Afts_LabelEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryMetadata is set, it can
// safely use t.GetEntryMetadata() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryMetadata == nil' before retrieving the leaf's value.
func (t *Afts_LabelEntry) GetEntryMetadata() Binary {
	if t == nil || t.EntryMetadata == nil {
		return nil
	}
	return t.EntryMetadata
}

// GetLabel retrieves the value of the leaf Label from the Afts_LabelEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *Afts_LabelEntry) GetLabel() Afts_LabelEntry_Label_Union {
	if t == nil || t.Label == nil {
		return nil
	}
	return t.Label
}

// GetNextHopGroup retrieves the value of the leaf NextHopGroup from the Afts_LabelEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopGroup is set, it can
// safely use t.GetNextHopGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopGroup == nil' before retrieving the leaf's value.
func (t *Afts_LabelEntry) GetNextHopGroup() uint64 {
	if t == nil || t.NextHopGroup == nil {
		return 0
	}
	return *t.NextHopGroup
}

// GetNextHopGroupNetworkInstance retrieves the value of the leaf NextHopGroupNetworkInstance from the Afts_LabelEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopGroupNetworkInstance is set, it can
// safely use t.GetNextHopGroupNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopGroupNetworkInstance == nil' before retrieving the leaf's value.
func (t *Afts_LabelEntry) GetNextHopGroupNetworkInstance() string {
	if t == nil || t.NextHopGroupNetworkInstance == nil {
		return ""
	}
	return *t.NextHopGroupNetworkInstance
}

// GetPoppedMplsLabelStack retrieves the value of the leaf PoppedMplsLabelStack from the Afts_LabelEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoppedMplsLabelStack is set, it can
// safely use t.GetPoppedMplsLabelStack() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoppedMplsLabelStack == nil' before retrieving the leaf's value.
func (t *Afts_LabelEntry) GetPoppedMplsLabelStack() []Afts_LabelEntry_PoppedMplsLabelStack_Union {
	if t == nil || t.PoppedMplsLabelStack == nil {
		return nil
	}
	return t.PoppedMplsLabelStack
}

// ΛListKeyMap returns the keys of the Afts_LabelEntry struct, which is a YANG list entry.
func (t *Afts_LabelEntry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"label": t.Label,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_LabelEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Afts_LabelEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_LabelEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Afts_LabelEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Afts_LabelEntry.
func (*Afts_LabelEntry) ΛBelongingModule() string {
	return "gribi-aft"
}

// Afts_LabelEntry_Label_Union is an interface that is implemented by valid types for the union
// for the leaf /gribi-aft/afts/mpls/label-entry/state/label within the YANG schema.
// Union type can be one of [E_MplsTypes_MplsLabel_Enum, UnionUint32].
type Afts_LabelEntry_Label_Union interface {
	// Union type can be one of [E_MplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_Afts_LabelEntry_Label_Union()
}

// Documentation_for_Afts_LabelEntry_Label_Union ensures that E_MplsTypes_MplsLabel_Enum
// implements the Afts_LabelEntry_Label_Union interface.
func (E_MplsTypes_MplsLabel_Enum) Documentation_for_Afts_LabelEntry_Label_Union() {}

// Documentation_for_Afts_LabelEntry_Label_Union ensures that UnionUint32
// implements the Afts_LabelEntry_Label_Union interface.
func (UnionUint32) Documentation_for_Afts_LabelEntry_Label_Union() {}

// To_Afts_LabelEntry_Label_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Afts_LabelEntry_Label_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Afts_LabelEntry) To_Afts_LabelEntry_Label_Union(i interface{}) (Afts_LabelEntry_Label_Union, error) {
	if v, ok := i.(Afts_LabelEntry_Label_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to Afts_LabelEntry_Label_Union, unknown union type, got: %T, want any of [E_MplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// Afts_LabelEntry_PoppedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /gribi-aft/afts/mpls/label-entry/state/popped-mpls-label-stack within the YANG schema.
// Union type can be one of [E_MplsTypes_MplsLabel_Enum, UnionUint32].
type Afts_LabelEntry_PoppedMplsLabelStack_Union interface {
	// Union type can be one of [E_MplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_Afts_LabelEntry_PoppedMplsLabelStack_Union()
}

// Documentation_for_Afts_LabelEntry_PoppedMplsLabelStack_Union ensures that E_MplsTypes_MplsLabel_Enum
// implements the Afts_LabelEntry_PoppedMplsLabelStack_Union interface.
func (E_MplsTypes_MplsLabel_Enum) Documentation_for_Afts_LabelEntry_PoppedMplsLabelStack_Union() {}

// Documentation_for_Afts_LabelEntry_PoppedMplsLabelStack_Union ensures that UnionUint32
// implements the Afts_LabelEntry_PoppedMplsLabelStack_Union interface.
func (UnionUint32) Documentation_for_Afts_LabelEntry_PoppedMplsLabelStack_Union() {}

// To_Afts_LabelEntry_PoppedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Afts_LabelEntry_PoppedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Afts_LabelEntry) To_Afts_LabelEntry_PoppedMplsLabelStack_Union(i interface{}) (Afts_LabelEntry_PoppedMplsLabelStack_Union, error) {
	if v, ok := i.(Afts_LabelEntry_PoppedMplsLabelStack_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to Afts_LabelEntry_PoppedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_MplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// Afts_MacEntry represents the /gribi-aft/afts/ethernet/mac-entry YANG schema element.
type Afts_MacEntry struct {
	EntryMetadata               Binary  `path:"state/entry-metadata" module:"gribi-aft/gribi-aft"`
	MacAddress                  *string `path:"state/mac-address|mac-address" module:"gribi-aft/gribi-aft|gribi-aft"`
	NextHopGroup                *uint64 `path:"state/next-hop-group" module:"gribi-aft/gribi-aft"`
	NextHopGroupNetworkInstance *string `path:"state/next-hop-group-network-instance" module:"gribi-aft/gribi-aft"`
}

// IsYANGGoStruct ensures that Afts_MacEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Afts_MacEntry) IsYANGGoStruct() {}

// GetEntryMetadata retrieves the value of the leaf EntryMetadata from the Afts_MacEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryMetadata is set, it can
// safely use t.GetEntryMetadata() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryMetadata == nil' before retrieving the leaf's value.
func (t *Afts_MacEntry) GetEntryMetadata() Binary {
	if t == nil || t.EntryMetadata == nil {
		return nil
	}
	return t.EntryMetadata
}

// GetMacAddress retrieves the value of the leaf MacAddress from the Afts_MacEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *Afts_MacEntry) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetNextHopGroup retrieves the value of the leaf NextHopGroup from the Afts_MacEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopGroup is set, it can
// safely use t.GetNextHopGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopGroup == nil' before retrieving the leaf's value.
func (t *Afts_MacEntry) GetNextHopGroup() uint64 {
	if t == nil || t.NextHopGroup == nil {
		return 0
	}
	return *t.NextHopGroup
}

// GetNextHopGroupNetworkInstance retrieves the value of the leaf NextHopGroupNetworkInstance from the Afts_MacEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopGroupNetworkInstance is set, it can
// safely use t.GetNextHopGroupNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopGroupNetworkInstance == nil' before retrieving the leaf's value.
func (t *Afts_MacEntry) GetNextHopGroupNetworkInstance() string {
	if t == nil || t.NextHopGroupNetworkInstance == nil {
		return ""
	}
	return *t.NextHopGroupNetworkInstance
}

// ΛListKeyMap returns the keys of the Afts_MacEntry struct, which is a YANG list entry.
func (t *Afts_MacEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MacAddress == nil {
		return nil, fmt.Errorf("nil value for key MacAddress")
	}

	return map[string]interface{}{
		"mac-address": *t.MacAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_MacEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Afts_MacEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_MacEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Afts_MacEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Afts_MacEntry.
func (*Afts_MacEntry) ΛBelongingModule() string {
	return "gribi-aft"
}

// Afts_NextHop represents the /gribi-aft/afts/next-hops/next-hop YANG schema element.
type Afts_NextHop struct {
	DecapsulateHeader    E_AftTypes_EncapsulationHeaderType        `path:"state/decapsulate-header" module:"gribi-aft/gribi-aft"`
	EncapsulateHeader    E_AftTypes_EncapsulationHeaderType        `path:"state/encapsulate-header" module:"gribi-aft/gribi-aft"`
	Index                *uint64                                   `path:"state/index|index" module:"gribi-aft/gribi-aft|gribi-aft"`
	InterfaceRef         *Afts_NextHop_InterfaceRef                `path:"interface-ref" module:"gribi-aft"`
	IpAddress            *string                                   `path:"state/ip-address" module:"gribi-aft/gribi-aft"`
	IpInIp               *Afts_NextHop_IpInIp                      `path:"ip-in-ip" module:"gribi-aft"`
	MacAddress           *string                                   `path:"state/mac-address" module:"gribi-aft/gribi-aft"`
	NetworkInstance      *string                                   `path:"state/network-instance" module:"gribi-aft/gribi-aft"`
	ProgrammedIndex      *uint64                                   `path:"state/programmed-index" module:"gribi-aft/gribi-aft"`
	PushedMplsLabelStack []Afts_NextHop_PushedMplsLabelStack_Union `path:"state/pushed-mpls-label-stack" module:"gribi-aft/gribi-aft"`
}

// IsYANGGoStruct ensures that Afts_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Afts_NextHop) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Afts_NextHop) GetOrCreateInterfaceRef() *Afts_NextHop_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Afts_NextHop_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateIpInIp retrieves the value of the IpInIp field
// or returns the existing field if it already exists.
func (t *Afts_NextHop) GetOrCreateIpInIp() *Afts_NextHop_IpInIp {
	if t.IpInIp != nil {
		return t.IpInIp
	}
	t.IpInIp = &Afts_NextHop_IpInIp{}
	return t.IpInIp
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Afts_NextHop. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Afts_NextHop) GetInterfaceRef() *Afts_NextHop_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetIpInIp returns the value of the IpInIp struct pointer
// from Afts_NextHop. If the receiver or the field IpInIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Afts_NextHop) GetIpInIp() *Afts_NextHop_IpInIp {
	if t != nil && t.IpInIp != nil {
		return t.IpInIp
	}
	return nil
}

// GetDecapsulateHeader retrieves the value of the leaf DecapsulateHeader from the Afts_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DecapsulateHeader is set, it can
// safely use t.GetDecapsulateHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DecapsulateHeader == nil' before retrieving the leaf's value.
func (t *Afts_NextHop) GetDecapsulateHeader() E_AftTypes_EncapsulationHeaderType {
	if t == nil || t.DecapsulateHeader == 0 {
		return 0
	}
	return t.DecapsulateHeader
}

// GetEncapsulateHeader retrieves the value of the leaf EncapsulateHeader from the Afts_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapsulateHeader is set, it can
// safely use t.GetEncapsulateHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapsulateHeader == nil' before retrieving the leaf's value.
func (t *Afts_NextHop) GetEncapsulateHeader() E_AftTypes_EncapsulationHeaderType {
	if t == nil || t.EncapsulateHeader == 0 {
		return 0
	}
	return t.EncapsulateHeader
}

// GetIndex retrieves the value of the leaf Index from the Afts_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *Afts_NextHop) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetIpAddress retrieves the value of the leaf IpAddress from the Afts_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *Afts_NextHop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetMacAddress retrieves the value of the leaf MacAddress from the Afts_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *Afts_NextHop) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the Afts_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *Afts_NextHop) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// GetProgrammedIndex retrieves the value of the leaf ProgrammedIndex from the Afts_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProgrammedIndex is set, it can
// safely use t.GetProgrammedIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProgrammedIndex == nil' before retrieving the leaf's value.
func (t *Afts_NextHop) GetProgrammedIndex() uint64 {
	if t == nil || t.ProgrammedIndex == nil {
		return 0
	}
	return *t.ProgrammedIndex
}

// GetPushedMplsLabelStack retrieves the value of the leaf PushedMplsLabelStack from the Afts_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PushedMplsLabelStack is set, it can
// safely use t.GetPushedMplsLabelStack() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PushedMplsLabelStack == nil' before retrieving the leaf's value.
func (t *Afts_NextHop) GetPushedMplsLabelStack() []Afts_NextHop_PushedMplsLabelStack_Union {
	if t == nil || t.PushedMplsLabelStack == nil {
		return nil
	}
	return t.PushedMplsLabelStack
}

// ΛListKeyMap returns the keys of the Afts_NextHop struct, which is a YANG list entry.
func (t *Afts_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Afts_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Afts_NextHop) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Afts_NextHop.
func (*Afts_NextHop) ΛBelongingModule() string {
	return "gribi-aft"
}

// Afts_NextHop_PushedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /gribi-aft/afts/next-hops/next-hop/state/pushed-mpls-label-stack within the YANG schema.
// Union type can be one of [E_MplsTypes_MplsLabel_Enum, UnionUint32].
type Afts_NextHop_PushedMplsLabelStack_Union interface {
	// Union type can be one of [E_MplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_Afts_NextHop_PushedMplsLabelStack_Union()
}

// Documentation_for_Afts_NextHop_PushedMplsLabelStack_Union ensures that E_MplsTypes_MplsLabel_Enum
// implements the Afts_NextHop_PushedMplsLabelStack_Union interface.
func (E_MplsTypes_MplsLabel_Enum) Documentation_for_Afts_NextHop_PushedMplsLabelStack_Union() {}

// Documentation_for_Afts_NextHop_PushedMplsLabelStack_Union ensures that UnionUint32
// implements the Afts_NextHop_PushedMplsLabelStack_Union interface.
func (UnionUint32) Documentation_for_Afts_NextHop_PushedMplsLabelStack_Union() {}

// To_Afts_NextHop_PushedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Afts_NextHop_PushedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Afts_NextHop) To_Afts_NextHop_PushedMplsLabelStack_Union(i interface{}) (Afts_NextHop_PushedMplsLabelStack_Union, error) {
	if v, ok := i.(Afts_NextHop_PushedMplsLabelStack_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to Afts_NextHop_PushedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_MplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// Afts_NextHopGroup represents the /gribi-aft/afts/next-hop-groups/next-hop-group YANG schema element.
type Afts_NextHopGroup struct {
	BackupNextHopGroup *uint64                               `path:"state/backup-next-hop-group" module:"gribi-aft/gribi-aft"`
	Color              *uint64                               `path:"state/color" module:"gribi-aft/gribi-aft"`
	Id                 *uint64                               `path:"state/id|id" module:"gribi-aft/gribi-aft|gribi-aft"`
	NextHop            map[uint64]*Afts_NextHopGroup_NextHop `path:"next-hops/next-hop" module:"gribi-aft/gribi-aft"`
	ProgrammedId       *uint64                               `path:"state/programmed-id" module:"gribi-aft/gribi-aft"`
}

// IsYANGGoStruct ensures that Afts_NextHopGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Afts_NextHopGroup) IsYANGGoStruct() {}

// NewNextHop creates a new entry in the NextHop list of the
// Afts_NextHopGroup struct. The keys of the list are populated from the input
// arguments.
func (t *Afts_NextHopGroup) NewNextHop(Index uint64) (*Afts_NextHopGroup_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*Afts_NextHopGroup_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &Afts_NextHopGroup_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver Afts_NextHopGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Afts_NextHopGroup) GetOrCreateNextHop(Index uint64) *Afts_NextHopGroup_NextHop {

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of Afts_NextHopGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Afts_NextHopGroup) GetNextHop(Index uint64) *Afts_NextHopGroup_NextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver Afts_NextHopGroup. If there is no such element, the function
// is a no-op.
func (t *Afts_NextHopGroup) DeleteNextHop(Index uint64) {
	key := Index

	delete(t.NextHop, key)
}

// GetBackupNextHopGroup retrieves the value of the leaf BackupNextHopGroup from the Afts_NextHopGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackupNextHopGroup is set, it can
// safely use t.GetBackupNextHopGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackupNextHopGroup == nil' before retrieving the leaf's value.
func (t *Afts_NextHopGroup) GetBackupNextHopGroup() uint64 {
	if t == nil || t.BackupNextHopGroup == nil {
		return 0
	}
	return *t.BackupNextHopGroup
}

// GetColor retrieves the value of the leaf Color from the Afts_NextHopGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *Afts_NextHopGroup) GetColor() uint64 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetId retrieves the value of the leaf Id from the Afts_NextHopGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Afts_NextHopGroup) GetId() uint64 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetProgrammedId retrieves the value of the leaf ProgrammedId from the Afts_NextHopGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProgrammedId is set, it can
// safely use t.GetProgrammedId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProgrammedId == nil' before retrieving the leaf's value.
func (t *Afts_NextHopGroup) GetProgrammedId() uint64 {
	if t == nil || t.ProgrammedId == nil {
		return 0
	}
	return *t.ProgrammedId
}

// ΛListKeyMap returns the keys of the Afts_NextHopGroup struct, which is a YANG list entry.
func (t *Afts_NextHopGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_NextHopGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Afts_NextHopGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_NextHopGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Afts_NextHopGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Afts_NextHopGroup.
func (*Afts_NextHopGroup) ΛBelongingModule() string {
	return "gribi-aft"
}

// Afts_NextHopGroup_NextHop represents the /gribi-aft/afts/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type Afts_NextHopGroup_NextHop struct {
	Index  *uint64 `path:"state/index|index" module:"gribi-aft/gribi-aft|gribi-aft"`
	Weight *uint64 `path:"state/weight" module:"gribi-aft/gribi-aft"`
}

// IsYANGGoStruct ensures that Afts_NextHopGroup_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Afts_NextHopGroup_NextHop) IsYANGGoStruct() {}

// GetIndex retrieves the value of the leaf Index from the Afts_NextHopGroup_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *Afts_NextHopGroup_NextHop) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetWeight retrieves the value of the leaf Weight from the Afts_NextHopGroup_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *Afts_NextHopGroup_NextHop) GetWeight() uint64 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// ΛListKeyMap returns the keys of the Afts_NextHopGroup_NextHop struct, which is a YANG list entry.
func (t *Afts_NextHopGroup_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_NextHopGroup_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Afts_NextHopGroup_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_NextHopGroup_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Afts_NextHopGroup_NextHop) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Afts_NextHopGroup_NextHop.
func (*Afts_NextHopGroup_NextHop) ΛBelongingModule() string {
	return "gribi-aft"
}

// Afts_NextHop_InterfaceRef represents the /gribi-aft/afts/next-hops/next-hop/interface-ref YANG schema element.
type Afts_NextHop_InterfaceRef struct {
	Interface    *string `path:"state/interface" module:"gribi-aft/gribi-aft"`
	Subinterface *uint32 `path:"state/subinterface" module:"gribi-aft/gribi-aft"`
}

// IsYANGGoStruct ensures that Afts_NextHop_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Afts_NextHop_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Afts_NextHop_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *Afts_NextHop_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Afts_NextHop_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *Afts_NextHop_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_NextHop_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Afts_NextHop_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_NextHop_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Afts_NextHop_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Afts_NextHop_InterfaceRef.
func (*Afts_NextHop_InterfaceRef) ΛBelongingModule() string {
	return "gribi-aft"
}

// Afts_NextHop_IpInIp represents the /gribi-aft/afts/next-hops/next-hop/ip-in-ip YANG schema element.
type Afts_NextHop_IpInIp struct {
	DstIp *string `path:"state/dst-ip" module:"gribi-aft/gribi-aft"`
	SrcIp *string `path:"state/src-ip" module:"gribi-aft/gribi-aft"`
}

// IsYANGGoStruct ensures that Afts_NextHop_IpInIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Afts_NextHop_IpInIp) IsYANGGoStruct() {}

// GetDstIp retrieves the value of the leaf DstIp from the Afts_NextHop_IpInIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstIp is set, it can
// safely use t.GetDstIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstIp == nil' before retrieving the leaf's value.
func (t *Afts_NextHop_IpInIp) GetDstIp() string {
	if t == nil || t.DstIp == nil {
		return ""
	}
	return *t.DstIp
}

// GetSrcIp retrieves the value of the leaf SrcIp from the Afts_NextHop_IpInIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIp is set, it can
// safely use t.GetSrcIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIp == nil' before retrieving the leaf's value.
func (t *Afts_NextHop_IpInIp) GetSrcIp() string {
	if t == nil || t.SrcIp == nil {
		return ""
	}
	return *t.SrcIp
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_NextHop_IpInIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Afts_NextHop_IpInIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_NextHop_IpInIp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Afts_NextHop_IpInIp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Afts_NextHop_IpInIp.
func (*Afts_NextHop_IpInIp) ΛBelongingModule() string {
	return "gribi-aft"
}

// Afts_PolicyForwardingEntry represents the /gribi-aft/afts/policy-forwarding/policy-forwarding-entry YANG schema element.
type Afts_PolicyForwardingEntry struct {
	EntryMetadata               Binary                                      `path:"state/entry-metadata" module:"gribi-aft/gribi-aft"`
	Index                       *uint64                                     `path:"state/index|index" module:"gribi-aft/gribi-aft|gribi-aft"`
	IpDscp                      *uint8                                      `path:"state/ip-dscp" module:"gribi-aft/gribi-aft"`
	IpPrefix                    *string                                     `path:"state/ip-prefix" module:"gribi-aft/gribi-aft"`
	IpProtocol                  Afts_PolicyForwardingEntry_IpProtocol_Union `path:"state/ip-protocol" module:"gribi-aft/gribi-aft"`
	L4DstPort                   *uint16                                     `path:"state/l4-dst-port" module:"gribi-aft/gribi-aft"`
	L4SrcPort                   *uint16                                     `path:"state/l4-src-port" module:"gribi-aft/gribi-aft"`
	MacAddress                  *string                                     `path:"state/mac-address" module:"gribi-aft/gribi-aft"`
	MplsLabel                   Afts_PolicyForwardingEntry_MplsLabel_Union  `path:"state/mpls-label" module:"gribi-aft/gribi-aft"`
	MplsTc                      *uint8                                      `path:"state/mpls-tc" module:"gribi-aft/gribi-aft"`
	NextHopGroup                *uint64                                     `path:"state/next-hop-group" module:"gribi-aft/gribi-aft"`
	NextHopGroupNetworkInstance *string                                     `path:"state/next-hop-group-network-instance" module:"gribi-aft/gribi-aft"`
}

// IsYANGGoStruct ensures that Afts_PolicyForwardingEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Afts_PolicyForwardingEntry) IsYANGGoStruct() {}

// GetEntryMetadata retrieves the value of the leaf EntryMetadata from the Afts_PolicyForwardingEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryMetadata is set, it can
// safely use t.GetEntryMetadata() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryMetadata == nil' before retrieving the leaf's value.
func (t *Afts_PolicyForwardingEntry) GetEntryMetadata() Binary {
	if t == nil || t.EntryMetadata == nil {
		return nil
	}
	return t.EntryMetadata
}

// GetIndex retrieves the value of the leaf Index from the Afts_PolicyForwardingEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *Afts_PolicyForwardingEntry) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetIpDscp retrieves the value of the leaf IpDscp from the Afts_PolicyForwardingEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpDscp is set, it can
// safely use t.GetIpDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpDscp == nil' before retrieving the leaf's value.
func (t *Afts_PolicyForwardingEntry) GetIpDscp() uint8 {
	if t == nil || t.IpDscp == nil {
		return 0
	}
	return *t.IpDscp
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the Afts_PolicyForwardingEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *Afts_PolicyForwardingEntry) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpProtocol retrieves the value of the leaf IpProtocol from the Afts_PolicyForwardingEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpProtocol is set, it can
// safely use t.GetIpProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpProtocol == nil' before retrieving the leaf's value.
func (t *Afts_PolicyForwardingEntry) GetIpProtocol() Afts_PolicyForwardingEntry_IpProtocol_Union {
	if t == nil || t.IpProtocol == nil {
		return nil
	}
	return t.IpProtocol
}

// GetL4DstPort retrieves the value of the leaf L4DstPort from the Afts_PolicyForwardingEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L4DstPort is set, it can
// safely use t.GetL4DstPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L4DstPort == nil' before retrieving the leaf's value.
func (t *Afts_PolicyForwardingEntry) GetL4DstPort() uint16 {
	if t == nil || t.L4DstPort == nil {
		return 0
	}
	return *t.L4DstPort
}

// GetL4SrcPort retrieves the value of the leaf L4SrcPort from the Afts_PolicyForwardingEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L4SrcPort is set, it can
// safely use t.GetL4SrcPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L4SrcPort == nil' before retrieving the leaf's value.
func (t *Afts_PolicyForwardingEntry) GetL4SrcPort() uint16 {
	if t == nil || t.L4SrcPort == nil {
		return 0
	}
	return *t.L4SrcPort
}

// GetMacAddress retrieves the value of the leaf MacAddress from the Afts_PolicyForwardingEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *Afts_PolicyForwardingEntry) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMplsLabel retrieves the value of the leaf MplsLabel from the Afts_PolicyForwardingEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsLabel is set, it can
// safely use t.GetMplsLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsLabel == nil' before retrieving the leaf's value.
func (t *Afts_PolicyForwardingEntry) GetMplsLabel() Afts_PolicyForwardingEntry_MplsLabel_Union {
	if t == nil || t.MplsLabel == nil {
		return nil
	}
	return t.MplsLabel
}

// GetMplsTc retrieves the value of the leaf MplsTc from the Afts_PolicyForwardingEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsTc is set, it can
// safely use t.GetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsTc == nil' before retrieving the leaf's value.
func (t *Afts_PolicyForwardingEntry) GetMplsTc() uint8 {
	if t == nil || t.MplsTc == nil {
		return 0
	}
	return *t.MplsTc
}

// GetNextHopGroup retrieves the value of the leaf NextHopGroup from the Afts_PolicyForwardingEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopGroup is set, it can
// safely use t.GetNextHopGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopGroup == nil' before retrieving the leaf's value.
func (t *Afts_PolicyForwardingEntry) GetNextHopGroup() uint64 {
	if t == nil || t.NextHopGroup == nil {
		return 0
	}
	return *t.NextHopGroup
}

// GetNextHopGroupNetworkInstance retrieves the value of the leaf NextHopGroupNetworkInstance from the Afts_PolicyForwardingEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopGroupNetworkInstance is set, it can
// safely use t.GetNextHopGroupNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopGroupNetworkInstance == nil' before retrieving the leaf's value.
func (t *Afts_PolicyForwardingEntry) GetNextHopGroupNetworkInstance() string {
	if t == nil || t.NextHopGroupNetworkInstance == nil {
		return ""
	}
	return *t.NextHopGroupNetworkInstance
}

// ΛListKeyMap returns the keys of the Afts_PolicyForwardingEntry struct, which is a YANG list entry.
func (t *Afts_PolicyForwardingEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_PolicyForwardingEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Afts_PolicyForwardingEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Afts_PolicyForwardingEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Afts_PolicyForwardingEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Afts_PolicyForwardingEntry.
func (*Afts_PolicyForwardingEntry) ΛBelongingModule() string {
	return "gribi-aft"
}

// Afts_PolicyForwardingEntry_IpProtocol_Union is an interface that is implemented by valid types for the union
// for the leaf /gribi-aft/afts/policy-forwarding/policy-forwarding-entry/state/ip-protocol within the YANG schema.
// Union type can be one of [E_PacketMatchTypes_IP_PROTOCOL, UnionUint8].
type Afts_PolicyForwardingEntry_IpProtocol_Union interface {
	// Union type can be one of [E_PacketMatchTypes_IP_PROTOCOL, UnionUint8]
	Documentation_for_Afts_PolicyForwardingEntry_IpProtocol_Union()
}

// Documentation_for_Afts_PolicyForwardingEntry_IpProtocol_Union ensures that E_PacketMatchTypes_IP_PROTOCOL
// implements the Afts_PolicyForwardingEntry_IpProtocol_Union interface.
func (E_PacketMatchTypes_IP_PROTOCOL) Documentation_for_Afts_PolicyForwardingEntry_IpProtocol_Union() {
}

// Documentation_for_Afts_PolicyForwardingEntry_IpProtocol_Union ensures that UnionUint8
// implements the Afts_PolicyForwardingEntry_IpProtocol_Union interface.
func (UnionUint8) Documentation_for_Afts_PolicyForwardingEntry_IpProtocol_Union() {}

// To_Afts_PolicyForwardingEntry_IpProtocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Afts_PolicyForwardingEntry_IpProtocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Afts_PolicyForwardingEntry) To_Afts_PolicyForwardingEntry_IpProtocol_Union(i interface{}) (Afts_PolicyForwardingEntry_IpProtocol_Union, error) {
	if v, ok := i.(Afts_PolicyForwardingEntry_IpProtocol_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint8:
		return UnionUint8(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to Afts_PolicyForwardingEntry_IpProtocol_Union, unknown union type, got: %T, want any of [E_PacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
}

// Afts_PolicyForwardingEntry_MplsLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /gribi-aft/afts/policy-forwarding/policy-forwarding-entry/state/mpls-label within the YANG schema.
// Union type can be one of [E_MplsTypes_MplsLabel_Enum, UnionUint32].
type Afts_PolicyForwardingEntry_MplsLabel_Union interface {
	// Union type can be one of [E_MplsTypes_MplsLabel_Enum, UnionUint32]
	Documentation_for_Afts_PolicyForwardingEntry_MplsLabel_Union()
}

// Documentation_for_Afts_PolicyForwardingEntry_MplsLabel_Union ensures that E_MplsTypes_MplsLabel_Enum
// implements the Afts_PolicyForwardingEntry_MplsLabel_Union interface.
func (E_MplsTypes_MplsLabel_Enum) Documentation_for_Afts_PolicyForwardingEntry_MplsLabel_Union() {}

// Documentation_for_Afts_PolicyForwardingEntry_MplsLabel_Union ensures that UnionUint32
// implements the Afts_PolicyForwardingEntry_MplsLabel_Union interface.
func (UnionUint32) Documentation_for_Afts_PolicyForwardingEntry_MplsLabel_Union() {}

// To_Afts_PolicyForwardingEntry_MplsLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Afts_PolicyForwardingEntry_MplsLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Afts_PolicyForwardingEntry) To_Afts_PolicyForwardingEntry_MplsLabel_Union(i interface{}) (Afts_PolicyForwardingEntry_MplsLabel_Union, error) {
	if v, ok := i.(Afts_PolicyForwardingEntry_MplsLabel_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to Afts_PolicyForwardingEntry_MplsLabel_Union, unknown union type, got: %T, want any of [E_MplsTypes_MplsLabel_Enum, uint32]", i, i)
}

// RIB represents the /RIB YANG schema element.
type RIB struct {
	Afts *Afts `path:"afts" module:"gribi-aft"`
}

// IsYANGGoStruct ensures that RIB implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RIB) IsYANGGoStruct() {}

// GetOrCreateAfts retrieves the value of the Afts field
// or returns the existing field if it already exists.
func (t *RIB) GetOrCreateAfts() *Afts {
	if t.Afts != nil {
		return t.Afts
	}
	t.Afts = &Afts{}
	return t.Afts
}

// GetAfts returns the value of the Afts struct pointer
// from RIB. If the receiver or the field Afts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RIB) GetAfts() *Afts {
	if t != nil && t.Afts != nil {
		return t.Afts
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RIB) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RIB"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RIB) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RIB) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RIB.
func (*RIB) ΛBelongingModule() string {
	return ""
}

// E_AftTypes_EncapsulationHeaderType is a derived int64 type which is used to represent
// the enumerated node AftTypes_EncapsulationHeaderType. An additional value named
// AftTypes_EncapsulationHeaderType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_AftTypes_EncapsulationHeaderType int64

// IsYANGGoEnum ensures that AftTypes_EncapsulationHeaderType implements the yang.GoEnum
// interface. This ensures that AftTypes_EncapsulationHeaderType can be identified as a
// mapped type for a YANG enumeration.
func (E_AftTypes_EncapsulationHeaderType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  AftTypes_EncapsulationHeaderType.
func (E_AftTypes_EncapsulationHeaderType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_AftTypes_EncapsulationHeaderType.
func (e E_AftTypes_EncapsulationHeaderType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_AftTypes_EncapsulationHeaderType")
}

const (
	// AftTypes_EncapsulationHeaderType_UNSET corresponds to the value UNSET of AftTypes_EncapsulationHeaderType
	AftTypes_EncapsulationHeaderType_UNSET E_AftTypes_EncapsulationHeaderType = 0
	// AftTypes_EncapsulationHeaderType_GRE corresponds to the value GRE of AftTypes_EncapsulationHeaderType
	AftTypes_EncapsulationHeaderType_GRE E_AftTypes_EncapsulationHeaderType = 1
	// AftTypes_EncapsulationHeaderType_IPV4 corresponds to the value IPV4 of AftTypes_EncapsulationHeaderType
	AftTypes_EncapsulationHeaderType_IPV4 E_AftTypes_EncapsulationHeaderType = 2
	// AftTypes_EncapsulationHeaderType_IPV6 corresponds to the value IPV6 of AftTypes_EncapsulationHeaderType
	AftTypes_EncapsulationHeaderType_IPV6 E_AftTypes_EncapsulationHeaderType = 3
	// AftTypes_EncapsulationHeaderType_MPLS corresponds to the value MPLS of AftTypes_EncapsulationHeaderType
	AftTypes_EncapsulationHeaderType_MPLS E_AftTypes_EncapsulationHeaderType = 4
)

// E_MplsTypes_MplsLabel_Enum is a derived int64 type which is used to represent
// the enumerated node MplsTypes_MplsLabel_Enum. An additional value named
// MplsTypes_MplsLabel_Enum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_MplsTypes_MplsLabel_Enum int64

// IsYANGGoEnum ensures that MplsTypes_MplsLabel_Enum implements the yang.GoEnum
// interface. This ensures that MplsTypes_MplsLabel_Enum can be identified as a
// mapped type for a YANG enumeration.
func (E_MplsTypes_MplsLabel_Enum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  MplsTypes_MplsLabel_Enum.
func (E_MplsTypes_MplsLabel_Enum) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_MplsTypes_MplsLabel_Enum.
func (e E_MplsTypes_MplsLabel_Enum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_MplsTypes_MplsLabel_Enum")
}

const (
	// MplsTypes_MplsLabel_Enum_UNSET corresponds to the value UNSET of MplsTypes_MplsLabel_Enum
	MplsTypes_MplsLabel_Enum_UNSET E_MplsTypes_MplsLabel_Enum = 0
	// MplsTypes_MplsLabel_Enum_IPV4_EXPLICIT_NULL corresponds to the value IPV4_EXPLICIT_NULL of MplsTypes_MplsLabel_Enum
	MplsTypes_MplsLabel_Enum_IPV4_EXPLICIT_NULL E_MplsTypes_MplsLabel_Enum = 1
	// MplsTypes_MplsLabel_Enum_ROUTER_ALERT corresponds to the value ROUTER_ALERT of MplsTypes_MplsLabel_Enum
	MplsTypes_MplsLabel_Enum_ROUTER_ALERT E_MplsTypes_MplsLabel_Enum = 2
	// MplsTypes_MplsLabel_Enum_IPV6_EXPLICIT_NULL corresponds to the value IPV6_EXPLICIT_NULL of MplsTypes_MplsLabel_Enum
	MplsTypes_MplsLabel_Enum_IPV6_EXPLICIT_NULL E_MplsTypes_MplsLabel_Enum = 3
	// MplsTypes_MplsLabel_Enum_IMPLICIT_NULL corresponds to the value IMPLICIT_NULL of MplsTypes_MplsLabel_Enum
	MplsTypes_MplsLabel_Enum_IMPLICIT_NULL E_MplsTypes_MplsLabel_Enum = 4
	// MplsTypes_MplsLabel_Enum_ENTROPY_LABEL_INDICATOR corresponds to the value ENTROPY_LABEL_INDICATOR of MplsTypes_MplsLabel_Enum
	MplsTypes_MplsLabel_Enum_ENTROPY_LABEL_INDICATOR E_MplsTypes_MplsLabel_Enum = 5
	// MplsTypes_MplsLabel_Enum_NO_LABEL corresponds to the value NO_LABEL of MplsTypes_MplsLabel_Enum
	MplsTypes_MplsLabel_Enum_NO_LABEL E_MplsTypes_MplsLabel_Enum = 6
)

// E_PacketMatchTypes_IP_PROTOCOL is a derived int64 type which is used to represent
// the enumerated node PacketMatchTypes_IP_PROTOCOL. An additional value named
// PacketMatchTypes_IP_PROTOCOL_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_PacketMatchTypes_IP_PROTOCOL int64

// IsYANGGoEnum ensures that PacketMatchTypes_IP_PROTOCOL implements the yang.GoEnum
// interface. This ensures that PacketMatchTypes_IP_PROTOCOL can be identified as a
// mapped type for a YANG enumeration.
func (E_PacketMatchTypes_IP_PROTOCOL) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  PacketMatchTypes_IP_PROTOCOL.
func (E_PacketMatchTypes_IP_PROTOCOL) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_PacketMatchTypes_IP_PROTOCOL.
func (e E_PacketMatchTypes_IP_PROTOCOL) String() string {
	return ygot.EnumLogString(e, int64(e), "E_PacketMatchTypes_IP_PROTOCOL")
}

const (
	// PacketMatchTypes_IP_PROTOCOL_UNSET corresponds to the value UNSET of PacketMatchTypes_IP_PROTOCOL
	PacketMatchTypes_IP_PROTOCOL_UNSET E_PacketMatchTypes_IP_PROTOCOL = 0
	// PacketMatchTypes_IP_PROTOCOL_IP_AUTH corresponds to the value IP_AUTH of PacketMatchTypes_IP_PROTOCOL
	PacketMatchTypes_IP_PROTOCOL_IP_AUTH E_PacketMatchTypes_IP_PROTOCOL = 1
	// PacketMatchTypes_IP_PROTOCOL_IP_GRE corresponds to the value IP_GRE of PacketMatchTypes_IP_PROTOCOL
	PacketMatchTypes_IP_PROTOCOL_IP_GRE E_PacketMatchTypes_IP_PROTOCOL = 2
	// PacketMatchTypes_IP_PROTOCOL_IP_ICMP corresponds to the value IP_ICMP of PacketMatchTypes_IP_PROTOCOL
	PacketMatchTypes_IP_PROTOCOL_IP_ICMP E_PacketMatchTypes_IP_PROTOCOL = 3
	// PacketMatchTypes_IP_PROTOCOL_IP_IGMP corresponds to the value IP_IGMP of PacketMatchTypes_IP_PROTOCOL
	PacketMatchTypes_IP_PROTOCOL_IP_IGMP E_PacketMatchTypes_IP_PROTOCOL = 4
	// PacketMatchTypes_IP_PROTOCOL_IP_IN_IP corresponds to the value IP_IN_IP of PacketMatchTypes_IP_PROTOCOL
	PacketMatchTypes_IP_PROTOCOL_IP_IN_IP E_PacketMatchTypes_IP_PROTOCOL = 5
	// PacketMatchTypes_IP_PROTOCOL_IP_L2TP corresponds to the value IP_L2TP of PacketMatchTypes_IP_PROTOCOL
	PacketMatchTypes_IP_PROTOCOL_IP_L2TP E_PacketMatchTypes_IP_PROTOCOL = 6
	// PacketMatchTypes_IP_PROTOCOL_IP_PIM corresponds to the value IP_PIM of PacketMatchTypes_IP_PROTOCOL
	PacketMatchTypes_IP_PROTOCOL_IP_PIM E_PacketMatchTypes_IP_PROTOCOL = 7
	// PacketMatchTypes_IP_PROTOCOL_IP_RSVP corresponds to the value IP_RSVP of PacketMatchTypes_IP_PROTOCOL
	PacketMatchTypes_IP_PROTOCOL_IP_RSVP E_PacketMatchTypes_IP_PROTOCOL = 8
	// PacketMatchTypes_IP_PROTOCOL_IP_TCP corresponds to the value IP_TCP of PacketMatchTypes_IP_PROTOCOL
	PacketMatchTypes_IP_PROTOCOL_IP_TCP E_PacketMatchTypes_IP_PROTOCOL = 9
	// PacketMatchTypes_IP_PROTOCOL_IP_UDP corresponds to the value IP_UDP of PacketMatchTypes_IP_PROTOCOL
	PacketMatchTypes_IP_PROTOCOL_IP_UDP E_PacketMatchTypes_IP_PROTOCOL = 10
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_AftTypes_EncapsulationHeaderType": {
		1: {Name: "GRE"},
		2: {Name: "IPV4"},
		3: {Name: "IPV6"},
		4: {Name: "MPLS"},
	},
	"E_MplsTypes_MplsLabel_Enum": {
		1: {Name: "IPV4_EXPLICIT_NULL"},
		2: {Name: "ROUTER_ALERT"},
		3: {Name: "IPV6_EXPLICIT_NULL"},
		4: {Name: "IMPLICIT_NULL"},
		5: {Name: "ENTROPY_LABEL_INDICATOR"},
		6: {Name: "NO_LABEL"},
	},
	"E_PacketMatchTypes_IP_PROTOCOL": {
		1:  {Name: "IP_AUTH", DefiningModule: "openconfig-packet-match-types"},
		2:  {Name: "IP_GRE", DefiningModule: "openconfig-packet-match-types"},
		3:  {Name: "IP_ICMP", DefiningModule: "openconfig-packet-match-types"},
		4:  {Name: "IP_IGMP", DefiningModule: "openconfig-packet-match-types"},
		5:  {Name: "IP_IN_IP", DefiningModule: "openconfig-packet-match-types"},
		6:  {Name: "IP_L2TP", DefiningModule: "openconfig-packet-match-types"},
		7:  {Name: "IP_PIM", DefiningModule: "openconfig-packet-match-types"},
		8:  {Name: "IP_RSVP", DefiningModule: "openconfig-packet-match-types"},
		9:  {Name: "IP_TCP", DefiningModule: "openconfig-packet-match-types"},
		10: {Name: "IP_UDP", DefiningModule: "openconfig-packet-match-types"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x6d, 0x6f, 0x9b, 0x48,
		0xd7, 0xfe, 0x9e, 0x5f, 0x81, 0xd0, 0x2d, 0x6d, 0x2c, 0x85, 0xf8, 0x25, 0xb6, 0x93, 0x58, 0x7a,
		0x3e, 0x74, 0xbb, 0xe9, 0x6e, 0xb4, 0x69, 0x1b, 0xa5, 0xbd, 0x6f, 0xad, 0x94, 0x7a, 0x2b, 0x62,
		0xc6, 0x0e, 0x8a, 0x3d, 0x20, 0x18, 0xb7, 0x8d, 0x12, 0xfe, 0xfb, 0x23, 0xe3, 0x77, 0x03, 0x31,
		0xf3, 0x82, 0x0d, 0xf8, 0xaa, 0xaa, 0x36, 0xc1, 0xcc, 0x31, 0xcc, 0x9c, 0x73, 0xae, 0x33, 0x67,
		0xae, 0x39, 0xf3, 0x72, 0xa4, 0x69, 0x9a, 0xa6, 0x7f, 0x32, 0x47, 0x44, 0xef, 0x68, 0xfa, 0xdd,
		0xf5, 0xef, 0xfa, 0xc9, 0xf4, 0xd2, 0xdf, 0x36, 0xb5, 0xf4, 0x8e, 0x56, 0x9f, 0xfd, 0xfa, 0xde,
		0xa1, 0x7d, 0x7b, 0xa0, 0x77, 0xb4, 0xda, 0xec, 0xc2, 0x1f, 0xb6, 0xa7, 0x77, 0xb4, 0x69, 0xfb,
		0xf0, 0x82, 0xd9, 0x67, 0xfe, 0xda, 0x95, 0x35, 0xc9, 0xe1, 0xa7, 0x27, 0xeb, 0x9f, 0xad, 0x7f,
		0xc5, 0xe2, 0xf2, 0xe2, 0xab, 0x1a, 0x1b, 0x1f, 0xdc, 0x7a, 0xa4, 0x6f, 0xff, 0x8a, 0x7c, 0xc7,
		0xda, 0xf7, 0x38, 0x3d, 0xc3, 0xec, 0xb3, 0x8d, 0x6f, 0x0a, 0xef, 0xf8, 0xe2, 0x8c, 0xbd, 0x1e,
		0x89, 0x6d, 0x3d, 0x7d, 0x1a, 0xf2, 0xfc, 0xd3, 0xf1, 0x26, 0x0f, 0xa4, 0xbb, 0xd3, 0x2f, 0x3a,
		0x89, 0xbf, 0xf1, 0x2f, 0xd3, 0x7f, 0xe7, 0x0d, 0xc6, 0x23, 0x42, 0x99, 0xde, 0xd1, 0x98, 0x37,
		0x26, 0x09, 0x37, 0xae, 0xdc, 0x35, 0x7f, 0xae, 0xc8, 0x8d, 0xc1, 0xda, 0x95, 0x60, 0xe3, 0x8d,
		0x37, 0x3b, 0x79, 0xf1, 0x01, 0x61, 0x8f, 0xc4, 0xa3, 0x84, 0x25, 0xbf, 0xce, 0xbc, 0x43, 0x16,
		0x77, 0x26, 0x3c, 0x64, 0xfc, 0x20, 0x44, 0x07, 0xa3, 0x96, 0x70, 0xc3, 0x1b, 0x83, 0x92, 0x7e,
		0x70, 0xd2, 0x0e, 0x12, 0xf7, 0x60, 0x71, 0x0f, 0x1a, 0xd7, 0xe0, 0xc5, 0x0f, 0x62, 0xc2, 0x60,
		0x6e, 0x1d, 0xd4, 0xc5, 0x0d, 0x23, 0xb3, 0x67, 0x10, 0xca, 0xbc, 0xe7, 0xed, 0xfd, 0x30, 0xef,
		0xd9, 0x65, 0x93, 0x2d, 0xaf, 0xf5, 0xf6, 0x70, 0xa7, 0x1e, 0x76, 0x9e, 0xe1, 0xe7, 0x57, 0x03,
		0x5e, 0x75, 0x10, 0x56, 0x0b, 0x61, 0xf5, 0x10, 0x52, 0x93, 0xb7, 0xd5, 0x65, 0x8b, 0xda, 0xa4,
		0x56, 0x9f, 0x35, 0x35, 0x32, 0x2d, 0xcb, 0x23, 0xbe, 0x9f, 0xbe, 0x07, 0x57, 0x15, 0x6a, 0xde,
		0x38, 0x65, 0x57, 0xcc, 0x54, 0xab, 0x96, 0xf2, 0xf6, 0xb4, 0x2a, 0x26, 0xa2, 0x6a, 0xe2, 0x2a,
		0x27, 0xaa, 0x7a, 0xd2, 0x2a, 0x28, 0xad, 0x8a, 0x52, 0x2a, 0x99, 0x4e, 0x35, 0x53, 0xaa, 0xe8,
		0xe2, 0x49, 0xbe, 0x3e, 0xbb, 0x44, 0x6c, 0xbc, 0x86, 0xc4, 0xec, 0x7b, 0xa4, 0xcf, 0x33, 0x60,
		0x73, 0xcf, 0x76, 0xce, 0xd1, 0xe6, 0xd6, 0x64, 0x8f, 0x93, 0xaf, 0x3b, 0x3d, 0xad, 0xfa, 0xcc,
		0x64, 0xa4, 0xba, 0xaa, 0xf6, 0x47, 0x6a, 0x3a, 0x2c, 0x45, 0x67, 0xe9, 0xe1, 0x97, 0xf3, 0x1b,
		0xe9, 0xb4, 0x19, 0x9f, 0x79, 0xd6, 0x79, 0xcd, 0xb3, 0x01, 0xf3, 0x2c, 0xa9, 0x79, 0xa6, 0x45,
		0x92, 0x65, 0xd4, 0x39, 0x89, 0x30, 0x8c, 0x11, 0x61, 0xa6, 0x65, 0x32, 0x93, 0xbf, 0xf3, 0x17,
		0x31, 0xe9, 0xba, 0x1c, 0xce, 0x0e, 0xe4, 0xc3, 0x19, 0x61, 0xbc, 0x91, 0x51, 0x6c, 0x79, 0x05,
		0x97, 0x55, 0x74, 0x65, 0x0a, 0xaf, 0x4c, 0xf1, 0x95, 0x18, 0x00, 0x9f, 0x21, 0x70, 0x1a, 0x84,
		0x38, 0x6e, 0x45, 0xc6, 0xfb, 0xc1, 0xa6, 0xe6, 0xd6, 0x60, 0xfc, 0x2d, 0xed, 0xbe, 0x14, 0x68,
		0x7a, 0x43, 0xe8, 0x20, 0xc4, 0xb3, 0x7b, 0xa1, 0x81, 0x11, 0x53, 0xb0, 0xf0, 0x9b, 0x3f, 0xda,
		0x54, 0x58, 0x43, 0x17, 0x42, 0xfe, 0x67, 0x0e, 0xc7, 0x84, 0xdf, 0x3e, 0x23, 0x72, 0x3e, 0x78,
		0x66, 0x8f, 0xd9, 0x0e, 0xfd, 0xc3, 0x1e, 0xd8, 0x61, 0x4a, 0x42, 0x56, 0xe0, 0x27, 0x32, 0x30,
		0x99, 0xfd, 0x63, 0xf2, 0x6c, 0x7d, 0x73, 0xe8, 0x13, 0x61, 0x69, 0xc1, 0x89, 0x44, 0x17, 0x9b,
		0xbf, 0xd4, 0x75, 0xf1, 0x45, 0x79, 0xbb, 0xf8, 0x68, 0x37, 0xad, 0xba, 0x47, 0xd9, 0xc8, 0xe7,
		0x50, 0x11, 0xa1, 0x09, 0x9e, 0x82, 0x89, 0x1e, 0x80, 0x18, 0x40, 0x5c, 0x18, 0x20, 0x16, 0x57,
		0xef, 0xb5, 0x49, 0x93, 0x80, 0xc3, 0x9c, 0x4c, 0x2e, 0x19, 0xf1, 0xa8, 0x30, 0x1e, 0xeb, 0xf7,
		0x35, 0xe3, 0xd2, 0x34, 0xfa, 0xef, 0x8c, 0x0f, 0xdd, 0x97, 0x46, 0x70, 0xdc, 0x59, 0xff, 0xbd,
		0xf2, 0xd2, 0x0a, 0xf8, 0xc7, 0xab, 0x2b, 0xf2, 0x22, 0x9f, 0xbf, 0x5c, 0xff, 0x23, 0xfd, 0x36,
		0xff, 0x6e, 0x7f, 0x9d, 0xff, 0xe8, 0x85, 0xf4, 0xc3, 0x94, 0xfc, 0x62, 0xc6, 0xa3, 0xe3, 0x1a,
		0x03, 0xcf, 0x19, 0xbb, 0xe2, 0xae, 0x78, 0x43, 0x0e, 0xbc, 0x31, 0xbc, 0x71, 0xc9, 0xbc, 0xf1,
		0xd8, 0xa6, 0xac, 0xdd, 0x94, 0x70, 0xc4, 0x22, 0x7e, 0xf8, 0xce, 0xa4, 0x03, 0x82, 0x59, 0x11,
		0x66, 0x45, 0xdb, 0xba, 0xb8, 0x7e, 0xd1, 0x6c, 0xb6, 0xcf, 0x9b, 0xcd, 0xda, 0xf9, 0xd9, 0x79,
		0xed, 0xb2, 0xd5, 0xaa, 0xb7, 0xeb, 0x2d, 0x4c, 0x94, 0x4a, 0x30, 0x51, 0x5a, 0x07, 0x56, 0x83,
		0x12, 0xf6, 0xd3, 0xf1, 0x9e, 0x0c, 0x9b, 0xfa, 0xcc, 0xa4, 0x22, 0x59, 0xe4, 0x78, 0xc4, 0x8e,
		0x0a, 0x06, 0x84, 0x03, 0xc2, 0x4b, 0x06, 0xe1, 0x3e, 0xf3, 0x6c, 0x3a, 0x90, 0x9a, 0x4b, 0x65,
		0xe5, 0x11, 0x94, 0x2e, 0x8e, 0xbc, 0xa3, 0xd4, 0x61, 0xe6, 0xc4, 0x77, 0xf3, 0xad, 0x91, 0xf8,
		0xbd, 0x47, 0x32, 0x32, 0xdd, 0xd9, 0xc2, 0x62, 0x75, 0xe0, 0xd9, 0x0f, 0xf6, 0x44, 0x13, 0xaa,
		0x66, 0x9f, 0xf9, 0xd5, 0x39, 0x1b, 0xa7, 0xba, 0x20, 0x6c, 0x4c, 0x17, 0x1e, 0x95, 0x2d, 0x36,
		0x4a, 0x51, 0x0b, 0xfe, 0x26, 0xcf, 0x7c, 0x73, 0x66, 0xfd, 0xc6, 0xf6, 0xd9, 0x3b, 0xc6, 0x52,
		0x32, 0x12, 0x3e, 0xda, 0xf4, 0x6a, 0x48, 0x26, 0x16, 0x92, 0x12, 0x0a, 0x27, 0xf8, 0xbe, 0xd2,
		0x42, 0x0c, 0xa0, 0xf5, 0xcf, 0x9e, 0x45, 0x3c, 0x62, 0xfd, 0x3e, 0x79, 0x39, 0x3a, 0x1e, 0x0e,
		0xa5, 0xfa, 0x88, 0x53, 0x2f, 0xb8, 0xf5, 0x41, 0x4f, 0xb5, 0x5c, 0xec, 0x8d, 0x7b, 0x8c, 0xce,
		0x2c, 0xf2, 0x5d, 0x9f, 0xf9, 0xdf, 0x3f, 0x9a, 0xbd, 0xab, 0xb0, 0xf9, 0x91, 0x98, 0x7a, 0xf0,
		0x51, 0x98, 0x52, 0x76, 0x42, 0xca, 0x97, 0x8f, 0x7f, 0xe6, 0xe8, 0x13, 0xc5, 0x3c, 0x8d, 0x6e,
		0xbb, 0x3f, 0x9a, 0xc6, 0x98, 0xda, 0x3d, 0xd3, 0x4f, 0x41, 0x86, 0x5b, 0xbb, 0x1b, 0x84, 0xb8,
		0xa2, 0x10, 0xe2, 0xc2, 0x61, 0xe3, 0x64, 0xc4, 0xad, 0xb4, 0x01, 0x25, 0x0e, 0x94, 0xb8, 0xe9,
		0x8d, 0x2e, 0x5f, 0xc0, 0xbb, 0x18, 0x1e, 0xbe, 0x9e, 0x03, 0x11, 0x0e, 0x4c, 0x1b, 0xc9, 0xb0,
		0x7b, 0xef, 0x44, 0xb8, 0xd9, 0x90, 0x81, 0x03, 0x07, 0x0e, 0x5c, 0xa9, 0x2d, 0x93, 0x9b, 0x03,
		0x67, 0x91, 0x9e, 0xe9, 0xfa, 0xe3, 0xa1, 0xc9, 0x88, 0xf1, 0x48, 0x4c, 0x8b, 0x78, 0xe2, 0xe9,
		0xa3, 0x18, 0x59, 0xc8, 0x18, 0x21, 0x63, 0x54, 0xb2, 0x8c, 0x11, 0xa1, 0x73, 0x2d, 0xb7, 0x1d,
		0x3a, 0xd3, 0x73, 0x83, 0x4d, 0xc4, 0x4a, 0x24, 0x91, 0x9a, 0x02, 0x6d, 0xaf, 0xe8, 0x78, 0x34,
		0x79, 0x95, 0x20, 0x07, 0x29, 0x69, 0x50, 0x69, 0xe1, 0x3e, 0xe0, 0x3e, 0xd2, 0x8c, 0x37, 0xa8,
		0xb4, 0xfc, 0x42, 0xb0, 0x68, 0xbc, 0x25, 0xa9, 0x0c, 0x2a, 0xad, 0x6a, 0xc7, 0x20, 0xde, 0x0a,
		0x14, 0x2e, 0xc0, 0x31, 0xe0, 0xb8, 0x28, 0x70, 0x0c, 0x0a, 0x17, 0xd0, 0x38, 0xbf, 0x68, 0x0c,
		0x0a, 0xd7, 0x41, 0x00, 0x34, 0x28, 0x5c, 0x80, 0x70, 0x40, 0xb8, 0xe8, 0x78, 0xe7, 0x98, 0xc2,
		0xc5, 0xe1, 0x11, 0x5c, 0x31, 0xcd, 0x17, 0x5b, 0xd3, 0x85, 0x7d, 0xc3, 0xbe, 0x0b, 0x63, 0xdf,
		0x21, 0xf5, 0x45, 0xb8, 0xbf, 0xf7, 0xbb, 0xe7, 0xed, 0xf8, 0xbe, 0x66, 0x5c, 0x76, 0x5f, 0xef,
		0xeb, 0xc6, 0x65, 0x77, 0xfa, 0x63, 0x3d, 0xfc, 0xef, 0xa5, 0x11, 0xbc, 0x36, 0xee, 0x6b, 0x46,
		0x73, 0x76, 0xb5, 0xd1, 0xba, 0xaf, 0x19, 0xad, 0x6e, 0xe5, 0xf8, 0xdb, 0xb7, 0x53, 0xde, 0x36,
		0x95, 0x97, 0xb3, 0xa0, 0xba, 0x68, 0xd4, 0x98, 0x7d, 0x7a, 0x76, 0x5f, 0x33, 0x1a, 0xdd, 0x4a,
		0xa1, 0xb6, 0xd4, 0x1d, 0xef, 0xbd, 0xbb, 0x2a, 0x79, 0xda, 0xb3, 0x57, 0x00, 0x02, 0xf0, 0x2a,
		0x03, 0xb1, 0xba, 0xe4, 0xa8, 0xe5, 0x90, 0x05, 0x9c, 0x8e, 0x46, 0x08, 0x02, 0x70, 0x26, 0xfa,
		0x20, 0xc8, 0x02, 0xbe, 0x76, 0x7f, 0x34, 0x0b, 0x47, 0x03, 0x5e, 0x23, 0xe5, 0xca, 0x51, 0x81,
		0xdb, 0x5c, 0x54, 0xe0, 0x36, 0xa8, 0xc0, 0x5a, 0x01, 0xa9, 0xc0, 0x6d, 0x01, 0x2a, 0x70, 0x1b,
		0x54, 0x60, 0x50, 0x81, 0x65, 0xa6, 0x8f, 0xa0, 0x02, 0x83, 0x70, 0xa8, 0x24, 0xac, 0x04, 0x15,
		0x18, 0x54, 0x60, 0x58, 0x66, 0x1e, 0x2d, 0x13, 0x54, 0x60, 0x64, 0x26, 0x91, 0x99, 0xcc, 0x34,
		0x33, 0x09, 0x2a, 0x70, 0xcc, 0xb3, 0x80, 0x0a, 0x0c, 0xf7, 0x01, 0xf7, 0x91, 0x66, 0xbc, 0x41,
		0x05, 0xe6, 0x17, 0x02, 0xf2, 0xd1, 0x96, 0xf4, 0x32, 0xa8, 0xc0, 0xaa, 0x1d, 0x83, 0x78, 0x2b,
		0x50, 0x81, 0x01, 0xc7, 0x80, 0xe3, 0xa2, 0xc0, 0x31, 0xa8, 0xc0, 0x40, 0xe3, 0xfc, 0xa2, 0x31,
		0xa8, 0xc0, 0x07, 0x01, 0xd0, 0xa0, 0x02, 0x03, 0xc2, 0x01, 0xe1, 0xa2, 0xe3, 0x0d, 0x2a, 0x30,
		0xa8, 0xc0, 0xb0, 0xef, 0x52, 0x53, 0x81, 0xdb, 0x85, 0xa5, 0x02, 0x1f, 0xaf, 0x9e, 0x10, 0x51,
		0x3f, 0x69, 0x06, 0x9d, 0xca, 0xcb, 0x79, 0xb0, 0x79, 0xf1, 0x35, 0xee, 0xb6, 0xfa, 0xc9, 0x79,
		0xd0, 0x49, 0xf8, 0xa4, 0x1d, 0x74, 0x52, 0xca, 0x68, 0x6d, 0x9c, 0x52, 0x31, 0xf9, 0x60, 0x72,
		0xbd, 0x91, 0xd4, 0xa0, 0x99, 0xd0, 0xe0, 0x2c, 0xa9, 0xc1, 0x59, 0x42, 0x83, 0xc4, 0x47, 0x6a,
		0x24, 0x34, 0x68, 0x05, 0xaf, 0x91, 0xfb, 0x8f, 0xe3, 0x6f, 0x6d, 0x07, 0x95, 0xd7, 0xa4, 0xcf,
		0xce, 0x83, 0xd7, 0x4e, 0xa5, 0x52, 0x3d, 0xae, 0x37, 0xee, 0x6b, 0xc6, 0xc5, 0x94, 0x19, 0x5c,
		0xef, 0x46, 0x08, 0xc3, 0xe1, 0xbf, 0x45, 0xa4, 0x4a, 0x43, 0x9b, 0x72, 0xab, 0x4d, 0x20, 0x92,
		0x6f, 0xb4, 0xdb, 0xca, 0x9a, 0x6d, 0xaf, 0x12, 0x87, 0xdb, 0x20, 0x92, 0x6f, 0xcb, 0x2d, 0x94,
		0x9d, 0x48, 0x1e, 0xa7, 0x0f, 0xe2, 0x44, 0xf2, 0x76, 0x11, 0x89, 0xe4, 0x6d, 0x15, 0x44, 0xf2,
		0x91, 0x3b, 0xf4, 0xb7, 0x13, 0xc8, 0xc3, 0xbb, 0x40, 0x1c, 0x2f, 0x0a, 0x71, 0x7c, 0x68, 0x3e,
		0x90, 0x21, 0x2f, 0x73, 0x7c, 0xb5, 0x11, 0xa8, 0xe3, 0xa0, 0x8e, 0xaf, 0xa8, 0x12, 0x3f, 0x3d,
		0x75, 0xda, 0x0c, 0xc4, 0xf1, 0x1d, 0x26, 0x0d, 0x40, 0x1c, 0xdf, 0x27, 0x71, 0x7c, 0xaa, 0xf0,
		0xe0, 0x8d, 0x83, 0x37, 0x5e, 0x6a, 0xc3, 0xe4, 0xe6, 0x8d, 0x83, 0xf0, 0x89, 0xf4, 0x35, 0xd2,
		0xd7, 0x69, 0xc6, 0x1b, 0x84, 0x4f, 0x7e, 0x21, 0xa0, 0x98, 0x6c, 0x49, 0x03, 0x81, 0xf0, 0xa9,
		0xda, 0x31, 0x88, 0xb7, 0xca, 0x03, 0x9f, 0x84, 0x6f, 0x3a, 0x27, 0x35, 0xad, 0x03, 0xf8, 0x02,
		0x7c, 0x0b, 0x03, 0xbe, 0x23, 0x77, 0xe8, 0x1b, 0x22, 0xda, 0xbd, 0x36, 0x4f, 0x12, 0x41, 0xe0,
		0xd9, 0xb3, 0xef, 0x1c, 0x7f, 0x57, 0x89, 0xad, 0x67, 0x0d, 0x5d, 0x02, 0x66, 0x66, 0x6f, 0x7f,
		0x2e, 0x21, 0x42, 0x8e, 0xe8, 0x2a, 0xdf, 0x1b, 0x4a, 0xa3, 0x92, 0x08, 0x74, 0xd6, 0xdb, 0x27,
		0x6a, 0x04, 0xaa, 0xc6, 0x50, 0xf5, 0x58, 0xaa, 0x20, 0x6c, 0x51, 0x1a, 0xbe, 0x44, 0xc7, 0xa2,
		0xd6, 0xbc, 0x68, 0x9d, 0xb7, 0x0e, 0x6f, 0x40, 0x8e, 0xf6, 0xd3, 0xba, 0x7b, 0xb4, 0x43, 0xf5,
		0x51, 0xe0, 0x0e, 0x09, 0x1d, 0x8f, 0x88, 0x37, 0x5d, 0x9e, 0x93, 0xf7, 0x89, 0x22, 0xfb, 0x75,
		0x17, 0x32, 0xc4, 0xf6, 0xed, 0x16, 0x3b, 0x3e, 0xc5, 0x86, 0x24, 0x44, 0xac, 0x88, 0x58, 0xd3,
		0xc6, 0x6d, 0xd8, 0x90, 0x84, 0x6c, 0x51, 0x3e, 0xb3, 0x45, 0xd8, 0x90, 0x74, 0x10, 0x00, 0x8d,
		0x0d, 0x49, 0x80, 0x70, 0x40, 0xb8, 0xe8, 0x78, 0x97, 0x64, 0x43, 0x92, 0xe3, 0xba, 0xc4, 0x32,
		0x96, 0x19, 0x34, 0xc3, 0x67, 0x66, 0xef, 0x49, 0x62, 0x87, 0x52, 0x82, 0x40, 0x78, 0x00, 0x78,
		0x80, 0x92, 0x79, 0x00, 0xa4, 0x9d, 0x91, 0x76, 0x46, 0xda, 0x19, 0x69, 0xe7, 0xf2, 0x0e, 0x08,
		0xd2, 0xce, 0xa9, 0xdc, 0x21, 0xd2, 0xce, 0x19, 0x61, 0x34, 0xd7, 0x56, 0xab, 0x38, 0xbf, 0xcc,
		0xb7, 0xf5, 0x2a, 0xce, 0x9b, 0x48, 0x6f, 0xc5, 0x8a, 0x08, 0xe5, 0xda, 0x9a, 0x25, 0x31, 0x0b,
		0x28, 0xc0, 0xd6, 0xc0, 0x49, 0x04, 0x55, 0x5d, 0xd9, 0xba, 0x92, 0xc3, 0x3d, 0x81, 0x69, 0xe2,
		0x3b, 0x6c, 0x09, 0x54, 0xac, 0x07, 0x82, 0x7b, 0x01, 0x6f, 0x26, 0x12, 0x0a, 0xb7, 0x19, 0x30,
		0xdc, 0x9e, 0x27, 0xb1, 0x09, 0x70, 0x3d, 0xf7, 0x96, 0x62, 0x3f, 0xe0, 0x66, 0x03, 0x6c, 0x0d,
		0x2c, 0xca, 0xd6, 0x40, 0xce, 0x05, 0x56, 0xb1, 0x05, 0x55, 0x6c, 0x10, 0x54, 0x9b, 0x1b, 0xc9,
		0xf3, 0x06, 0x41, 0xdb, 0xe2, 0xdf, 0x84, 0x64, 0x5b, 0xd8, 0x1a, 0xb8, 0xcb, 0xe4, 0x1c, 0xb6,
		0x06, 0xee, 0x73, 0x6b, 0xa0, 0x6d, 0xed, 0x72, 0x5f, 0xe0, 0xdc, 0x51, 0xfb, 0xfc, 0x66, 0xb9,
		0x6c, 0x9a, 0xf1, 0xfe, 0x40, 0x58, 0x67, 0x59, 0xad, 0x93, 0x7b, 0x7f, 0xe0, 0x5c, 0xe7, 0xe4,
		0x17, 0x8e, 0x05, 0xd7, 0x87, 0xea, 0x58, 0x1f, 0xda, 0x85, 0x92, 0x2b, 0x53, 0x76, 0x25, 0x4a,
		0x2f, 0x96, 0xad, 0xe2, 0xcd, 0x3d, 0xf1, 0x1a, 0xc3, 0x32, 0xa6, 0xa2, 0x16, 0x11, 0x4f, 0x42,
		0x2f, 0xc3, 0xac, 0x50, 0x8c, 0x60, 0xf7, 0x8a, 0x2d, 0x9f, 0x4a, 0x9b, 0x89, 0x0a, 0x73, 0x51,
		0x67, 0x36, 0xaa, 0xcc, 0x47, 0xb9, 0x19, 0x29, 0x37, 0x27, 0xa5, 0x66, 0x25, 0x9e, 0x0c, 0x96,
		0xc8, 0xc2, 0x8b, 0x2f, 0xc7, 0x2a, 0x88, 0x14, 0x55, 0x44, 0x8e, 0x29, 0x22, 0xc9, 0xd0, 0xa0,
		0x77, 0x94, 0x97, 0x17, 0x18, 0x06, 0xce, 0xa2, 0x14, 0x89, 0xfd, 0xcf, 0x53, 0xa4, 0x42, 0x11,
		0xae, 0x47, 0x1d, 0x57, 0x03, 0x8e, 0x0b, 0x8e, 0x6b, 0x27, 0x8e, 0x4b, 0x34, 0x4e, 0x50, 0x14,
		0x2f, 0x28, 0x8d, 0x1b, 0x14, 0xc5, 0x0f, 0xca, 0xe2, 0x08, 0x95, 0x66, 0xa9, 0xde, 0x3c, 0x55,
		0x9b, 0x69, 0x66, 0xe6, 0x9a, 0x99, 0xd9, 0x66, 0x62, 0xbe, 0x72, 0x66, 0x2c, 0x69, 0xce, 0xea,
		0xe2, 0x91, 0x0c, 0xe2, 0x12, 0x95, 0xf1, 0x49, 0x5c, 0x9c, 0xb2, 0xf1, 0x77, 0x91, 0x51, 0x5a,
		0xfc, 0x24, 0x1f, 0xc9, 0xc8, 0x0f, 0xae, 0xcc, 0x2e, 0x89, 0x9f, 0xc4, 0x1e, 0x3c, 0x32, 0x75,
		0xbe, 0x76, 0x26, 0x0f, 0xce, 0x16, 0xce, 0x16, 0xce, 0x36, 0x57, 0xce, 0x56, 0x78, 0x83, 0x5d,
		0x92, 0x75, 0x5e, 0x28, 0x10, 0xa5, 0x86, 0xb1, 0x3a, 0xff, 0xa3, 0x46, 0xff, 0x35, 0xd5, 0x0c,
		0xd6, 0x85, 0x50, 0x45, 0x1b, 0xf6, 0x22, 0x72, 0xb3, 0xe2, 0x4f, 0x2e, 0x75, 0x48, 0x35, 0x8f,
		0x52, 0x91, 0x99, 0xac, 0x0f, 0x99, 0x42, 0xa2, 0x6b, 0x64, 0xc8, 0xd4, 0x6f, 0x00, 0x2c, 0xd3,
		0x28, 0x1e, 0xe5, 0x43, 0x4a, 0x77, 0x5f, 0x01, 0xd8, 0x4e, 0xa7, 0xd7, 0x82, 0xc4, 0xc3, 0x68,
		0x72, 0xeb, 0x4d, 0x0e, 0xd6, 0x06, 0x25, 0x6a, 0xe3, 0xf7, 0xc4, 0x48, 0x78, 0x67, 0xd9, 0xbc,
		0x4c, 0x57, 0x3a, 0x66, 0x4c, 0x47, 0x91, 0xc4, 0x01, 0x18, 0xba, 0xd2, 0xbd, 0x2f, 0xa9, 0xe0,
		0xaa, 0x15, 0x5b, 0x17, 0x4a, 0x1c, 0x47, 0xa8, 0x98, 0x9f, 0xc8, 0x2f, 0xf6, 0x97, 0xe3, 0xfe,
		0x39, 0xf9, 0x96, 0xf9, 0x2f, 0xfa, 0x01, 0x33, 0x9d, 0xd3, 0x8e, 0x03, 0x8a, 0x50, 0xa3, 0x08,
		0x75, 0x06, 0x73, 0xc9, 0x22, 0x93, 0x4c, 0x1e, 0xcc, 0xde, 0x53, 0x58, 0x53, 0x40, 0x4d, 0x71,
		0xa1, 0x78, 0x71, 0xd8, 0x9e, 0x9c, 0x5d, 0xca, 0x05, 0xf4, 0x93, 0xbd, 0x6c, 0x4f, 0x16, 0xcf,
		0x37, 0xcb, 0xe4, 0x97, 0xa3, 0xf9, 0xe4, 0x0d, 0xa8, 0xe3, 0xa3, 0x55, 0x0a, 0x44, 0x03, 0x1c,
		0xfe, 0xbc, 0xe7, 0x0c, 0x1d, 0x4f, 0xdc, 0x95, 0x4c, 0x9b, 0xc3, 0x75, 0xc0, 0x75, 0x94, 0xcc,
		0x75, 0xa0, 0x3c, 0xd9, 0xbe, 0xb2, 0x9d, 0x28, 0x4f, 0xb6, 0x8f, 0xec, 0x24, 0xca, 0x93, 0xe5,
		0xa2, 0x3c, 0x19, 0xc7, 0x6e, 0xa4, 0x88, 0xcb, 0x4a, 0xbd, 0x2b, 0x09, 0x40, 0x0c, 0x20, 0x06,
		0x10, 0x03, 0x88, 0x01, 0xc4, 0x00, 0x62, 0x00, 0x71, 0x7c, 0xa7, 0xb9, 0x9e, 0x33, 0xf0, 0xcc,
		0xd1, 0x88, 0x58, 0x86, 0x0c, 0x26, 0xaf, 0x8b, 0x01, 0x3c, 0x03, 0x9e, 0x01, 0xcf, 0x80, 0x67,
		0xc0, 0x33, 0xe0, 0x19, 0xf0, 0x2c, 0x76, 0x67, 0xae, 0x17, 0xb1, 0xf3, 0x57, 0xbc, 0x6b, 0x6b,
		0xd4, 0x81, 0xca, 0x5d, 0x99, 0xaa, 0x84, 0x60, 0x1d, 0xaf, 0x55, 0xf2, 0x48, 0x91, 0x2a, 0x79,
		0x6d, 0x16, 0xd6, 0x52, 0x50, 0xd4, 0x8b, 0xa3, 0x9c, 0x17, 0x0a, 0x79, 0x15, 0xaf, 0x90, 0x17,
		0x7f, 0x09, 0x2f, 0x14, 0xef, 0x42, 0xf1, 0xae, 0xd9, 0x8d, 0x7c, 0x1b, 0x47, 0x85, 0x36, 0x88,
		0xa2, 0x84, 0x97, 0x06, 0xfe, 0x96, 0xe4, 0xac, 0x79, 0xff, 0x25, 0xbc, 0xd2, 0x6f, 0x57, 0x54,
		0x43, 0xac, 0xb4, 0x29, 0x23, 0x5e, 0xdf, 0xec, 0x11, 0x63, 0xf2, 0xba, 0x02, 0x06, 0xba, 0xda,
		0xbc, 0x1c, 0xd5, 0xbc, 0xec, 0xfe, 0x41, 0xda, 0xa9, 0xdd, 0x2f, 0x0c, 0xcd, 0x52, 0xac, 0xfa,
		0x87, 0x54, 0xd5, 0x0f, 0xe9, 0x2a, 0x5e, 0x8d, 0xfd, 0xe4, 0x78, 0xed, 0x3e, 0x52, 0xbc, 0x92,
		0xca, 0xbe, 0x9b, 0x0c, 0xaf, 0x44, 0x0d, 0xaf, 0x99, 0x0b, 0x56, 0x51, 0xc7, 0x6b, 0x2e, 0x0a,
		0xb5, 0xbc, 0x84, 0x8d, 0x47, 0x95, 0x11, 0x29, 0x37, 0x26, 0xe5, 0x46, 0xa5, 0xd2, 0xb8, 0x24,
		0x73, 0xa3, 0xa8, 0xe4, 0xb5, 0x1e, 0x50, 0x56, 0xc3, 0x61, 0xe8, 0x2c, 0x0c, 0xda, 0xdf, 0xbc,
		0x30, 0xfb, 0x3d, 0xcc, 0x65, 0xe5, 0xb9, 0xce, 0xd7, 0xf8, 0x41, 0xa1, 0x7f, 0x5b, 0x93, 0x06,
		0x17, 0x07, 0x17, 0x07, 0x17, 0x57, 0x62, 0x17, 0x77, 0xbf, 0x74, 0x71, 0xff, 0xd7, 0x1b, 0x7b,
		0x1e, 0xa1, 0xec, 0xb8, 0x52, 0x3d, 0x3d, 0xad, 0x2e, 0xee, 0xe8, 0xce, 0x9a, 0xac, 0xfa, 0x05,
		0x3f, 0xe6, 0xda, 0x42, 0xf2, 0x2e, 0xab, 0x22, 0x96, 0x60, 0x27, 0xef, 0xca, 0x1e, 0xf4, 0xb5,
		0x44, 0x81, 0xc8, 0x8e, 0xf4, 0x72, 0x2e, 0x4f, 0x26, 0xf5, 0x10, 0x4f, 0x06, 0x22, 0x79, 0x55,
		0xea, 0xfb, 0xf5, 0x5c, 0xe6, 0x1d, 0xe9, 0xef, 0x34, 0xab, 0xe4, 0x1a, 0x36, 0x35, 0x6c, 0x57,
		0x20, 0xa1, 0x34, 0x6f, 0x89, 0xca, 0xf0, 0x48, 0xfa, 0x22, 0x9b, 0x94, 0xb3, 0x6c, 0x12, 0x18,
		0x83, 0x0a, 0xd4, 0x3d, 0xe7, 0xf9, 0x24, 0xcb, 0x67, 0x3c, 0x9e, 0x3b, 0x51, 0x5d, 0x66, 0x72,
		0x30, 0xcd, 0x42, 0x71, 0xe5, 0x1d, 0x1b, 0x56, 0xd1, 0x27, 0x5a, 0xb6, 0x6b, 0x98, 0x96, 0xe5,
		0x11, 0xdf, 0x57, 0x31, 0xd7, 0xba, 0x94, 0x90, 0x21, 0x75, 0x78, 0xf7, 0xfc, 0x8f, 0xc2, 0x52,
		0x89, 0xb6, 0xfb, 0xa3, 0xa9, 0xa0, 0x6f, 0x22, 0x7d, 0x74, 0xa1, 0xa6, 0x38, 0x2d, 0x23, 0x1e,
		0x55, 0x56, 0x33, 0x51, 0x3f, 0xbe, 0xaf, 0x19, 0x97, 0xdd, 0xd7, 0xfb, 0xba, 0x71, 0xd9, 0x9d,
		0xfe, 0x58, 0x0f, 0xff, 0x7b, 0x69, 0x04, 0xaf, 0x8d, 0xfb, 0x9a, 0xd1, 0x9c, 0x5d, 0x6d, 0xb4,
		0xee, 0x6b, 0x46, 0xab, 0x5b, 0x39, 0xfe, 0xf6, 0xed, 0x94, 0xb7, 0x4d, 0xe5, 0xe5, 0x2c, 0x90,
		0xaf, 0xc8, 0xd9, 0x55, 0xd1, 0x7d, 0x9f, 0xbf, 0x5c, 0xff, 0xa3, 0xbc, 0x0f, 0xff, 0x3d, 0xde,
		0x55, 0x2f, 0x56, 0xfe, 0xa3, 0xef, 0xbb, 0x4c, 0xde, 0x49, 0x8e, 0xcc, 0xb4, 0x7d, 0x38, 0x66,
		0x1a, 0x6a, 0x8b, 0x69, 0xf4, 0xdf, 0x19, 0x1f, 0xba, 0x2f, 0xf5, 0x93, 0x66, 0xd0, 0xa9, 0xbc,
		0x9c, 0x07, 0x9b, 0x17, 0x5f, 0xe3, 0x6e, 0xab, 0x9f, 0x9c, 0x07, 0x9d, 0x84, 0x4f, 0xda, 0x41,
		0x27, 0xa5, 0x8c, 0x56, 0x70, 0x1c, 0xb9, 0x75, 0x72, 0xbd, 0x91, 0xd4, 0xa0, 0x99, 0xd0, 0xe0,
		0x2c, 0xa9, 0xc1, 0x59, 0x42, 0x83, 0xc4, 0x47, 0x6a, 0x24, 0x34, 0x68, 0x05, 0xaf, 0x91, 0xfb,
		0x8f, 0xe3, 0x6f, 0x6d, 0x07, 0x95, 0xd7, 0xa4, 0xcf, 0xce, 0x83, 0xd7, 0x4e, 0xa5, 0x72, 0x00,
		0x8e, 0x0b, 0x6a, 0xb5, 0x7b, 0xb5, 0xda, 0xbf, 0x23, 0x3f, 0xda, 0xed, 0xf7, 0xee, 0x68, 0x29,
		0xcf, 0xeb, 0x29, 0x99, 0x57, 0xce, 0xe4, 0x60, 0x5e, 0x89, 0x79, 0x25, 0xe6, 0x95, 0x98, 0x57,
		0x62, 0x5e, 0x89, 0x79, 0x25, 0xe6, 0x95, 0x98, 0x57, 0x62, 0x5e, 0x89, 0x09, 0x00, 0xe6, 0x95,
		0x98, 0x57, 0x62, 0x5e, 0x59, 0xe4, 0x79, 0x65, 0xc9, 0x48, 0x4f, 0x33, 0x32, 0x0b, 0xf8, 0x4e,
		0x6f, 0x74, 0x8e, 0x2a, 0xaa, 0x93, 0x7b, 0x4d, 0xaf, 0x5d, 0x9c, 0x49, 0x80, 0x33, 0x09, 0x32,
		0x48, 0x27, 0x14, 0x99, 0xde, 0x64, 0x91, 0x9e, 0xe9, 0xfa, 0xe3, 0xa1, 0xc9, 0x88, 0xf1, 0x48,
		0x4c, 0x8b, 0x48, 0x54, 0x11, 0x8f, 0x91, 0x85, 0x52, 0x69, 0xd9, 0xe5, 0xd7, 0x40, 0x7c, 0xda,
		0x4b, 0xa9, 0x34, 0x42, 0xe7, 0x5a, 0x6e, 0x3b, 0x74, 0xa6, 0xe7, 0x06, 0x9b, 0x88, 0x95, 0x38,
		0x9f, 0xa0, 0x29, 0xd0, 0xf6, 0x8a, 0x8e, 0x47, 0x93, 0x57, 0x09, 0x72, 0x50, 0x67, 0x71, 0xd9,
		0x29, 0xf2, 0x6e, 0x24, 0x46, 0x16, 0xdc, 0x08, 0xdc, 0x08, 0xdc, 0x48, 0xf9, 0xdd, 0x08, 0x5f,
		0x21, 0x98, 0x68, 0x06, 0x50, 0xe4, 0xe0, 0x3f, 0x38, 0x0b, 0x38, 0x0b, 0x94, 0x67, 0x8d, 0x69,
		0x8a, 0xf2, 0xac, 0x28, 0xcf, 0x9a, 0xaa, 0x8b, 0x51, 0x9e, 0x35, 0x83, 0x56, 0xb9, 0x38, 0xc6,
		0x64, 0x49, 0x09, 0x10, 0xc7, 0x64, 0x51, 0x5a, 0x01, 0x80, 0x19, 0xc0, 0x9c, 0x7b, 0x60, 0x96,
		0x22, 0xcd, 0xc8, 0x90, 0x65, 0xe4, 0x48, 0x32, 0x4a, 0xe8, 0x42, 0x4a, 0x48, 0x31, 0x2a, 0x56,
		0xd9, 0x95, 0xad, 0xae, 0x17, 0x80, 0xfc, 0xd2, 0x95, 0xe9, 0x26, 0x95, 0x6b, 0xc6, 0x05, 0x21,
		0xb9, 0x74, 0x77, 0xc9, 0xc6, 0x53, 0x63, 0x56, 0xed, 0xf2, 0x99, 0x15, 0x58, 0x05, 0x85, 0x23,
		0xab, 0xe4, 0xce, 0xd1, 0x40, 0x7d, 0x0a, 0x45, 0x4a, 0xe9, 0x1e, 0xd0, 0x3c, 0x69, 0x64, 0xf6,
		0xe4, 0x27, 0x4a, 0xab, 0x42, 0x30, 0x53, 0xc2, 0x4c, 0xa9, 0x64, 0x33, 0x25, 0x71, 0xf5, 0x96,
		0x8d, 0x67, 0xa4, 0xe3, 0x18, 0x7d, 0xd5, 0x41, 0x6e, 0xfa, 0xdd, 0x46, 0x50, 0x79, 0x69, 0x09,
		0x04, 0xf4, 0x5d, 0x91, 0x17, 0x51, 0x81, 0xab, 0xfa, 0xbf, 0xdb, 0x5f, 0x47, 0xc0, 0xef, 0xe7,
		0xc1, 0x0f, 0x53, 0xc2, 0x7e, 0x3a, 0xde, 0x93, 0x61, 0x53, 0x9f, 0x99, 0xb4, 0x27, 0x51, 0xb6,
		0x27, 0x22, 0x09, 0x1e, 0x19, 0x1e, 0xb9, 0x64, 0x1e, 0xd9, 0x67, 0x9e, 0x4d, 0x07, 0x52, 0xce,
		0x38, 0xd3, 0x37, 0xbc, 0xfa, 0x15, 0x66, 0xfe, 0xf9, 0xbd, 0x9c, 0xbc, 0x16, 0x5a, 0xc4, 0xef,
		0x79, 0xb6, 0xcb, 0x6c, 0x87, 0x76, 0x72, 0xa5, 0x8b, 0x9f, 0xa6, 0x7e, 0x49, 0x9b, 0xfb, 0x25,
		0xad, 0xef, 0x78, 0x1a, 0x7b, 0x24, 0x1a, 0x25, 0xbf, 0xd8, 0xa3, 0xe3, 0x9e, 0x6a, 0xda, 0x75,
		0x5f, 0x63, 0x8f, 0xb6, 0xaf, 0xd9, 0xbe, 0x46, 0x1d, 0xa6, 0xb9, 0x8e, 0x1b, 0x52, 0x69, 0xac,
		0x6f, 0x94, 0x3d, 0x12, 0xaa, 0x6d, 0x7a, 0x36, 0xcd, 0x7f, 0x74, 0xc6, 0x43, 0x4b, 0x7b, 0x20,
		0xa1, 0x1c, 0xdf, 0x1c, 0x91, 0xa5, 0x74, 0xf6, 0x68, 0xb2, 0xf0, 0x32, 0xa1, 0xcc, 0x7b, 0xfe,
		0x46, 0x6d, 0x7f, 0x29, 0x4f, 0xb3, 0x29, 0x73, 0x4e, 0xb3, 0x36, 0x8b, 0x6e, 0xe6, 0xc7, 0xc2,
		0xca, 0x51, 0x0e, 0x22, 0x92, 0x00, 0x14, 0x00, 0x8a, 0x92, 0x01, 0x05, 0xd8, 0x07, 0xdc, 0x42,
		0xc0, 0x3e, 0x78, 0xb3, 0x8b, 0xc1, 0x3e, 0x10, 0xed, 0xf5, 0x43, 0x3a, 0xbb, 0x7d, 0xec, 0x3f,
		0x12, 0xcb, 0x18, 0xb9, 0x43, 0xdf, 0x18, 0x9a, 0x0f, 0x64, 0x68, 0xf8, 0xcc, 0xec, 0x3d, 0x49,
		0x60, 0x75, 0x82, 0x40, 0x40, 0x36, 0x20, 0xbb, 0x6c, 0xd9, 0xb6, 0x85, 0x8e, 0x1f, 0x1a, 0x2f,
		0x61, 0x12, 0xac, 0x9c, 0x35, 0x14, 0x2c, 0x9d, 0xca, 0x9c, 0x42, 0x20, 0x17, 0xbc, 0xc8, 0xf7,
		0x86, 0xd2, 0x60, 0x26, 0x8a, 0xb8, 0xed, 0x13, 0x35, 0x02, 0x55, 0xe3, 0xac, 0x7a, 0xbc, 0x55,
		0x10, 0xed, 0x28, 0x8d, 0x7a, 0xa2, 0x63, 0x51, 0x6b, 0x5e, 0xb4, 0xce, 0x5b, 0x87, 0x37, 0x20,
		0xc5, 0xda, 0xeb, 0xbe, 0x37, 0x3e, 0x09, 0xa1, 0xe3, 0x11, 0xf1, 0xa6, 0x3b, 0xb6, 0x15, 0xd0,
		0x49, 0x9a, 0x12, 0x32, 0xc4, 0x36, 0x9a, 0xec, 0x2c, 0x86, 0xe5, 0xc4, 0x68, 0xae, 0xf3, 0xf6,
		0xe3, 0xfc, 0x32, 0xdf, 0xf9, 0xfb, 0x71, 0xde, 0x44, 0xfa, 0x3c, 0xfe, 0x88, 0xd0, 0xd5, 0xf3,
		0xf9, 0x25, 0x0b, 0xf1, 0x8d, 0x7d, 0xee, 0x7d, 0x7b, 0xaa, 0x62, 0xce, 0xcd, 0xb8, 0xd3, 0x99,
		0xbe, 0x95, 0xf1, 0xf0, 0x2c, 0x63, 0x02, 0x2a, 0x8b, 0xce, 0xad, 0xc5, 0xa0, 0x61, 0x4f, 0xe5,
		0xb3, 0x84, 0x46, 0xd9, 0xab, 0x4c, 0x70, 0x54, 0xde, 0x08, 0x32, 0x3e, 0x2c, 0xfd, 0x6f, 0xf2,
		0x9c, 0x76, 0x0b, 0x1b, 0x9f, 0xef, 0xe1, 0xf7, 0x35, 0x4a, 0x7c, 0xcb, 0x9a, 0x2f, 0xa1, 0xe3,
		0xe1, 0x50, 0xaa, 0x77, 0x38, 0x35, 0x82, 0x5b, 0x13, 0xf4, 0x54, 0x15, 0x3d, 0x92, 0xca, 0x8b,
		0xbc, 0xad, 0x41, 0xc9, 0x7a, 0x11, 0xff, 0x49, 0x42, 0x5f, 0xa4, 0xed, 0x83, 0xb4, 0xef, 0x1e,
		0xff, 0xd0, 0xd1, 0x47, 0x8a, 0x79, 0x1c, 0xdd, 0x75, 0x86, 0x76, 0xef, 0xd9, 0xe8, 0x3b, 0xde,
		0x4f, 0xd3, 0xb3, 0x6c, 0x3a, 0x48, 0x7c, 0xa2, 0x65, 0xf2, 0x25, 0xd2, 0x24, 0xe1, 0x35, 0xdf,
		0x2e, 0x6a, 0xb2, 0x35, 0x8d, 0x92, 0x26, 0x5d, 0x92, 0x3e, 0x2d, 0x92, 0x16, 0x8a, 0xb8, 0xd3,
		0x1c, 0xdc, 0x70, 0xc2, 0x95, 0xb6, 0xe0, 0x53, 0xac, 0x6d, 0x45, 0x43, 0xa2, 0x63, 0x67, 0x84,
		0xeb, 0x81, 0xdb, 0x7b, 0x25, 0x71, 0xf0, 0x67, 0x02, 0xb6, 0xf9, 0xc4, 0x54, 0xf5, 0x6d, 0x52,
		0x67, 0xd6, 0x78, 0x32, 0x69, 0xfc, 0x99, 0x33, 0xde, 0xa8, 0x45, 0x38, 0x33, 0x26, 0x1c, 0x89,
		0x08, 0x65, 0xbe, 0xe4, 0x50, 0x2d, 0x6d, 0x3d, 0x1a, 0xce, 0x9d, 0xdf, 0x42, 0x3b, 0xbe, 0x39,
		0x13, 0xb7, 0x38, 0x0d, 0x2e, 0xa3, 0x40, 0x38, 0x47, 0xe5, 0x92, 0xb8, 0x13, 0xad, 0x12, 0xc7,
		0x9d, 0x8a, 0x1c, 0x6f, 0xba, 0x38, 0xce, 0xf4, 0xf4, 0x74, 0x1a, 0xab, 0x56, 0x39, 0x4e, 0x19,
		0x45, 0x1d, 0x33, 0x18, 0xe6, 0xc1, 0xd4, 0x31, 0x0b, 0xe3, 0x09, 0x63, 0x44, 0x98, 0x69, 0x99,
		0xcc, 0x94, 0x29, 0x3e, 0xb4, 0x26, 0x07, 0x4b, 0x83, 0xd9, 0xa5, 0x69, 0xb0, 0x34, 0xb8, 0x97,
		0xa5, 0xc1, 0x07, 0x9b, 0x9a, 0xde, 0xb3, 0xc4, 0xb2, 0xa0, 0xc8, 0xaa, 0xe0, 0x0d, 0xa1, 0x83,
		0x10, 0xc9, 0x40, 0xe7, 0x01, 0x9d, 0xe7, 0xcd, 0x2e, 0xbe, 0x00, 0x77, 0x47, 0xb2, 0x55, 0x17,
		0x85, 0xbc, 0x00, 0xbe, 0x00, 0xdf, 0x5c, 0x82, 0x2f, 0xa8, 0xb4, 0xc0, 0xde, 0xfc, 0x62, 0x2f,
		0xa8, 0xb4, 0x65, 0x85, 0x63, 0xd7, 0xb0, 0xfc, 0x9e, 0x2b, 0x55, 0xc5, 0x2b, 0x14, 0x00, 0x48,
		0x06, 0x24, 0x97, 0x0c, 0x92, 0x05, 0xf4, 0x7a, 0x55, 0xb7, 0x5b, 0x00, 0x64, 0x00, 0x72, 0x56,
		0x80, 0xdc, 0x3e, 0x03, 0xfc, 0x96, 0x03, 0x7e, 0x5d, 0x31, 0x64, 0x5a, 0x05, 0x60, 0xb1, 0x45,
		0x01, 0x40, 0x30, 0x20, 0xb8, 0x00, 0x55, 0x34, 0x85, 0x7b, 0xbb, 0xf8, 0x45, 0x34, 0xa5, 0xcf,
		0x44, 0x3e, 0xcc, 0x1a, 0x9a, 0xd5, 0x45, 0xa3, 0xc6, 0xec, 0xd3, 0xb3, 0xfb, 0x9a, 0xd1, 0xe8,
		0x56, 0x50, 0x5c, 0x53, 0x49, 0x37, 0x1e, 0x5c, 0xd5, 0xcd, 0xb2, 0xd9, 0x21, 0xaa, 0x26, 0xee,
		0xa9, 0x6a, 0x62, 0xf5, 0xb8, 0x3e, 0xb1, 0xb6, 0x8b, 0xa9, 0xf9, 0xd5, 0xbb, 0x11, 0xab, 0x0c,
		0xff, 0x45, 0x6d, 0x4e, 0x68, 0xd9, 0x0e, 0xb4, 0x0c, 0x25, 0x3c, 0xd3, 0x4f, 0xd1, 0x1c, 0xe6,
		0xf4, 0x9c, 0xa1, 0xe4, 0x24, 0x6d, 0x26, 0x04, 0xd3, 0x34, 0x4c, 0xd3, 0xca, 0x38, 0x4d, 0x9b,
		0xaa, 0xb7, 0xf4, 0x49, 0x65, 0x45, 0x2d, 0x2d, 0x70, 0xa1, 0x20, 0x3e, 0x6c, 0xa1, 0xb2, 0x40,
		0x36, 0x29, 0xe5, 0xcc, 0xd2, 0x9e, 0xea, 0xd3, 0x9f, 0x0a, 0x52, 0xcd, 0x4a, 0x53, 0xce, 0x91,
		0xa1, 0x68, 0xb4, 0x9a, 0x28, 0x2a, 0xb0, 0xa3, 0xd6, 0x85, 0x9b, 0x2e, 0x5b, 0x84, 0x32, 0x9b,
		0x3d, 0xf3, 0x6d, 0x80, 0x48, 0xc4, 0x02, 0x19, 0x7f, 0x78, 0x3d, 0x7b, 0x94, 0xdf, 0x4d, 0x9f,
		0xc8, 0xaf, 0xbb, 0xcc, 0x5f, 0xf0, 0xfa, 0xf6, 0xfb, 0xed, 0xdd, 0xe7, 0xaf, 0x9f, 0xdf, 0x7f,
		0xbe, 0xd1, 0x4f, 0x14, 0x2c, 0xe5, 0xf8, 0xd2, 0x1e, 0x5b, 0x8d, 0xd7, 0xde, 0x7c, 0xc9, 0xff,
		0xfe, 0x71, 0xab, 0xe7, 0xc1, 0x85, 0xa9, 0x7f, 0xb3, 0xeb, 0x3f, 0x3f, 0x96, 0xf5, 0xd5, 0xfe,
		0xbc, 0xbb, 0x2a, 0xeb, 0xa0, 0x7d, 0xfa, 0x7e, 0x5d, 0xd6, 0x51, 0xbb, 0x69, 0x7c, 0x2d, 0xeb,
		0xab, 0xdd, 0x7d, 0xf9, 0x5f, 0x59, 0x5f, 0xed, 0xeb, 0xfb, 0xd2, 0x3a, 0xc8, 0xf7, 0xa5, 0x75,
		0x90, 0xb7, 0xd7, 0x1f, 0x4b, 0xfa, 0x66, 0xef, 0xfe, 0xfb, 0xf5, 0x2f, 0x7d, 0xcf, 0x61, 0x6e,
		0x17, 0x94, 0x8f, 0x14, 0x83, 0x36, 0x6c, 0x1a, 0x96, 0xcf, 0x0c, 0xd7, 0xf1, 0x98, 0x78, 0x3e,
		0x71, 0x55, 0x08, 0xf2, 0x89, 0x6f, 0x48, 0x40, 0x3e, 0x51, 0xde, 0x72, 0x76, 0x9f, 0x4f, 0x9c,
		0xe8, 0xb5, 0x41, 0xc7, 0xa3, 0x07, 0xa1, 0x4a, 0x61, 0x73, 0x15, 0x6f, 0x83, 0x80, 0x99, 0x93,
		0xc4, 0x4c, 0x19, 0x09, 0x98, 0xad, 0xd6, 0x19, 0xb6, 0x40, 0x94, 0x04, 0x90, 0x7d, 0xaf, 0x27,
		0x0f, 0xc8, 0x0b, 0x21, 0x00, 0x64, 0x00, 0x32, 0x00, 0x19, 0x80, 0x0c, 0x40, 0x06, 0x20, 0x03,
		0x90, 0xf9, 0x01, 0x19, 0x87, 0xe6, 0x02, 0x90, 0x01, 0xc8, 0x59, 0xa9, 0xb7, 0x86, 0x43, 0x73,
		0xe7, 0x2f, 0x82, 0x43, 0x73, 0xdf, 0xf6, 0xc3, 0xcb, 0xa3, 0x62, 0xc4, 0xdd, 0xb0, 0xe8, 0x71,
		0x33, 0xf0, 0xc2, 0xf0, 0xc2, 0x38, 0x4c, 0x69, 0xdb, 0xb3, 0xe3, 0x30, 0x25, 0x1c, 0xa6, 0xb4,
		0xf3, 0x59, 0x8d, 0xfa, 0xd9, 0x8d, 0x82, 0xc9, 0xa4, 0xd2, 0x49, 0x65, 0x74, 0x2c, 0x70, 0x98,
		0xd2, 0x4e, 0x5b, 0xe3, 0x30, 0x25, 0x61, 0x19, 0x39, 0x3f, 0x4c, 0x29, 0xbb, 0x48, 0x95, 0xf5,
		0x24, 0xc3, 0x54, 0xd6, 0x43, 0x8c, 0x8a, 0x18, 0xb5, 0x94, 0x31, 0x2a, 0xb7, 0x6a, 0x6b, 0x28,
		0x64, 0x84, 0xb4, 0x7d, 0x86, 0x11, 0xd6, 0xa2, 0x8b, 0xcf, 0x91, 0xb2, 0xdf, 0x2d, 0x00, 0x73,
		0x3a, 0x20, 0xf2, 0x8b, 0x79, 0xa6, 0x31, 0xa6, 0x3e, 0x33, 0x1f, 0x86, 0x82, 0xae, 0xc8, 0x23,
		0x7d, 0xe2, 0x11, 0xda, 0xdb, 0xeb, 0x8c, 0xf5, 0xee, 0xc3, 0xfb, 0x56, 0xb3, 0xdd, 0xe8, 0x68,
		0x1f, 0xc7, 0x43, 0x66, 0xcf, 0xb7, 0x2b, 0x6a, 0x37, 0x93, 0xd9, 0xbb, 0xf6, 0xe5, 0xa7, 0xcd,
		0x7a, 0x8f, 0x36, 0x1d, 0x68, 0xc7, 0x1f, 0x6f, 0x6f, 0xbe, 0x54, 0xe6, 0x97, 0x99, 0xd9, 0x7b,
		0xfa, 0x46, 0xaf, 0x28, 0xf3, 0x9e, 0x3b, 0xda, 0x6f, 0x57, 0xff, 0xdc, 0xfe, 0xa6, 0x7d, 0xb0,
		0xc9, 0xd0, 0xd2, 0xee, 0x08, 0x35, 0x47, 0xc4, 0xd2, 0x98, 0xa3, 0xfd, 0xf6, 0xd5, 0x33, 0xfb,
		0x7d, 0xbb, 0xa7, 0xbd, 0x1f, 0x9a, 0xbe, 0x3f, 0xbb, 0x41, 0x26, 0x0a, 0x54, 0x70, 0xc8, 0xe1,
		0x26, 0xde, 0x2e, 0x47, 0x40, 0xd2, 0x3a, 0x54, 0x9e, 0x75, 0x18, 0x81, 0xe0, 0x1d, 0x0f, 0x11,
		0x16, 0xe3, 0x52, 0x8c, 0xcf, 0xfc, 0x54, 0x38, 0x63, 0xe0, 0x39, 0x63, 0x89, 0x3a, 0xa1, 0x1b,
		0x72, 0x10, 0x68, 0x23, 0xd0, 0x2e, 0x59, 0xa0, 0x8d, 0x0a, 0xde, 0x88, 0xb3, 0xf3, 0x1b, 0x67,
		0xa3, 0x82, 0xf7, 0x41, 0x00, 0xb4, 0x41, 0x09, 0xfb, 0xe9, 0x78, 0x4f, 0x86, 0x3d, 0x89, 0xd8,
		0xa9, 0xc8, 0x69, 0x63, 0xf1, 0x88, 0x1d, 0x15, 0x0c, 0x08, 0x07, 0x84, 0x97, 0x0c, 0xc2, 0x7d,
		0xe6, 0x25, 0x9f, 0x3f, 0x9c, 0x46, 0xbb, 0xeb, 0x17, 0x07, 0x7c, 0x8c, 0x7a, 0xe4, 0x2c, 0xdf,
		0x6a, 0xc2, 0xe9, 0xbe, 0x38, 0x5d, 0x3d, 0x11, 0xf0, 0x4b, 0x7d, 0xba, 0x7a, 0x6a, 0x05, 0x11,
		0x3c, 0x74, 0xfd, 0x36, 0x94, 0xf6, 0x61, 0x21, 0x2c, 0x4c, 0x0a, 0x14, 0xe9, 0x08, 0xf6, 0xe8,
		0x51, 0xe8, 0x69, 0x8f, 0x62, 0x3f, 0x7a, 0xe3, 0x21, 0xb7, 0x3d, 0xdc, 0xdb, 0x0f, 0x15, 0x33,
		0x16, 0x31, 0x7d, 0xbf, 0xfe, 0xa0, 0xcb, 0xc7, 0x99, 0xfe, 0x34, 0x7b, 0xa0, 0xa4, 0x07, 0xd1,
		0x6d, 0xff, 0xbd, 0x33, 0x72, 0x3d, 0xe2, 0xfb, 0xc4, 0xfa, 0x12, 0x3e, 0x4c, 0x04, 0xab, 0x74,
		0xdb, 0xff, 0x60, 0x3e, 0x91, 0x3b, 0xc7, 0x89, 0xe2, 0xd8, 0xe6, 0x0b, 0xe8, 0xab, 0x1f, 0xad,
		0x3d, 0xea, 0xdd, 0xf5, 0xef, 0xd3, 0x27, 0x0d, 0x8e, 0x82, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff,
		0x01, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xc6, 0x01, 0x33, 0x6f, 0x09, 0x02, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes() {
	ΛEnumTypes = map[string][]reflect.Type{
		"/afts/ipv4-unicast/ipv4-entry/state/decapsulate-header": {
			reflect.TypeOf((E_AftTypes_EncapsulationHeaderType)(0)),
		},
		"/afts/ipv6-unicast/ipv6-entry/state/decapsulate-header": {
			reflect.TypeOf((E_AftTypes_EncapsulationHeaderType)(0)),
		},
		"/afts/mpls/label-entry/state/label": {
			reflect.TypeOf((E_MplsTypes_MplsLabel_Enum)(0)),
		},
		"/afts/mpls/label-entry/state/popped-mpls-label-stack": {
			reflect.TypeOf((E_MplsTypes_MplsLabel_Enum)(0)),
		},
		"/afts/next-hops/next-hop/state/decapsulate-header": {
			reflect.TypeOf((E_AftTypes_EncapsulationHeaderType)(0)),
		},
		"/afts/next-hops/next-hop/state/encapsulate-header": {
			reflect.TypeOf((E_AftTypes_EncapsulationHeaderType)(0)),
		},
		"/afts/next-hops/next-hop/state/pushed-mpls-label-stack": {
			reflect.TypeOf((E_MplsTypes_MplsLabel_Enum)(0)),
		},
		"/afts/policy-forwarding/policy-forwarding-entry/state/ip-protocol": {
			reflect.TypeOf((E_PacketMatchTypes_IP_PROTOCOL)(0)),
		},
		"/afts/policy-forwarding/policy-forwarding-entry/state/mpls-label": {
			reflect.TypeOf((E_MplsTypes_MplsLabel_Enum)(0)),
		},
	}
}
