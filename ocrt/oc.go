// Copyright 2021 The OpenConfig Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Package oc is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /Users/robjs/go/pkg/mod/github.com/openconfig/ygot@v0.10.13/genutil/names.go
using the following YANG input files:
	- public/release/models/interfaces/openconfig-interfaces.yang
	- public/release/models/interfaces/openconfig-if-ip.yang
	- public/release/models/network-instance/openconfig-network-instance.yang
	- yang/deviations.yang
Imported modules were sourced from:
	- public/...
*/
package oc

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Bfd represents the /openconfig-bfd/bfd YANG schema element.
type Bfd struct {
	Interface map[string]*Bfd_Interface `path:"interfaces/interface" module:"openconfig-bfd"`
}

// IsYANGGoStruct ensures that Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bfd) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Bfd struct. The keys of the list are populated from the input
// arguments.
func (t *Bfd) NewInterface(Id string) (*Bfd_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Bfd_Interface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Bfd_Interface{
		Id: &Id,
	}

	return t.Interface[key], nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Bfd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bfd) GetOrCreateInterface(Id string) *Bfd_Interface {

	key := Id

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Bfd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bfd) GetInterface(Id string) *Bfd_Interface {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Bfd. If there is no such element, the function
// is a no-op.
func (t *Bfd) DeleteInterface(Id string) {
	key := Id

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Bfd_Interface struct to the
// list Interface of Bfd. If the key value(s) specified in
// the supplied Bfd_Interface already exist in the list, an error is
// returned.
func (t *Bfd) AppendInterface(v *Bfd_Interface) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Bfd_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bfd) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bfd_Interface represents the /openconfig-bfd/bfd/interfaces/interface YANG schema element.
type Bfd_Interface struct {
	DesiredMinimumTxInterval *uint32                                   `path:"state/desired-minimum-tx-interval" module:"openconfig-bfd"`
	DetectionMultiplier      *uint8                                    `path:"state/detection-multiplier" module:"openconfig-bfd"`
	EnablePerMemberLink      *bool                                     `path:"state/enable-per-member-link" module:"openconfig-bfd"`
	Enabled                  *bool                                     `path:"state/enabled" module:"openconfig-bfd"`
	Id                       *string                                   `path:"state/id|id" module:"openconfig-bfd"`
	InterfaceRef             *Bfd_Interface_InterfaceRef               `path:"interface-ref" module:"openconfig-bfd"`
	LocalAddress             *string                                   `path:"state/local-address" module:"openconfig-bfd"`
	MicroBfdSession          map[string]*Bfd_Interface_MicroBfdSession `path:"micro-bfd-sessions/micro-bfd-session" module:"openconfig-bfd"`
	Peer                     map[string]*Bfd_Interface_Peer            `path:"peers/peer" module:"openconfig-bfd"`
	RequiredMinimumReceive   *uint32                                   `path:"state/required-minimum-receive" module:"openconfig-bfd"`
}

// IsYANGGoStruct ensures that Bfd_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bfd_Interface) IsYANGGoStruct() {}

// NewMicroBfdSession creates a new entry in the MicroBfdSession list of the
// Bfd_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Bfd_Interface) NewMicroBfdSession(MemberInterface string) (*Bfd_Interface_MicroBfdSession, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MicroBfdSession == nil {
		t.MicroBfdSession = make(map[string]*Bfd_Interface_MicroBfdSession)
	}

	key := MemberInterface

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MicroBfdSession[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MicroBfdSession", key)
	}

	t.MicroBfdSession[key] = &Bfd_Interface_MicroBfdSession{
		MemberInterface: &MemberInterface,
	}

	return t.MicroBfdSession[key], nil
}

// GetOrCreateMicroBfdSession retrieves the value with the specified keys from
// the receiver Bfd_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bfd_Interface) GetOrCreateMicroBfdSession(MemberInterface string) *Bfd_Interface_MicroBfdSession {

	key := MemberInterface

	if v, ok := t.MicroBfdSession[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMicroBfdSession(MemberInterface)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMicroBfdSession got unexpected error: %v", err))
	}
	return v
}

// GetMicroBfdSession retrieves the value with the specified key from
// the MicroBfdSession map field of Bfd_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bfd_Interface) GetMicroBfdSession(MemberInterface string) *Bfd_Interface_MicroBfdSession {

	if t == nil {
		return nil
	}

	key := MemberInterface

	if lm, ok := t.MicroBfdSession[key]; ok {
		return lm
	}
	return nil
}

// DeleteMicroBfdSession deletes the value with the specified keys from
// the receiver Bfd_Interface. If there is no such element, the function
// is a no-op.
func (t *Bfd_Interface) DeleteMicroBfdSession(MemberInterface string) {
	key := MemberInterface

	delete(t.MicroBfdSession, key)
}

// AppendMicroBfdSession appends the supplied Bfd_Interface_MicroBfdSession struct to the
// list MicroBfdSession of Bfd_Interface. If the key value(s) specified in
// the supplied Bfd_Interface_MicroBfdSession already exist in the list, an error is
// returned.
func (t *Bfd_Interface) AppendMicroBfdSession(v *Bfd_Interface_MicroBfdSession) error {
	if v.MemberInterface == nil {
		return fmt.Errorf("invalid nil key received for MemberInterface")
	}

	key := *v.MemberInterface

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MicroBfdSession == nil {
		t.MicroBfdSession = make(map[string]*Bfd_Interface_MicroBfdSession)
	}

	if _, ok := t.MicroBfdSession[key]; ok {
		return fmt.Errorf("duplicate key for list MicroBfdSession %v", key)
	}

	t.MicroBfdSession[key] = v
	return nil
}

// NewPeer creates a new entry in the Peer list of the
// Bfd_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Bfd_Interface) NewPeer(LocalDiscriminator string) (*Bfd_Interface_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*Bfd_Interface_Peer)
	}

	key := LocalDiscriminator

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &Bfd_Interface_Peer{
		LocalDiscriminator: &LocalDiscriminator,
	}

	return t.Peer[key], nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver Bfd_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bfd_Interface) GetOrCreatePeer(LocalDiscriminator string) *Bfd_Interface_Peer {

	key := LocalDiscriminator

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(LocalDiscriminator)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of Bfd_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bfd_Interface) GetPeer(LocalDiscriminator string) *Bfd_Interface_Peer {

	if t == nil {
		return nil
	}

	key := LocalDiscriminator

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver Bfd_Interface. If there is no such element, the function
// is a no-op.
func (t *Bfd_Interface) DeletePeer(LocalDiscriminator string) {
	key := LocalDiscriminator

	delete(t.Peer, key)
}

// AppendPeer appends the supplied Bfd_Interface_Peer struct to the
// list Peer of Bfd_Interface. If the key value(s) specified in
// the supplied Bfd_Interface_Peer already exist in the list, an error is
// returned.
func (t *Bfd_Interface) AppendPeer(v *Bfd_Interface_Peer) error {
	if v.LocalDiscriminator == nil {
		return fmt.Errorf("invalid nil key received for LocalDiscriminator")
	}

	key := *v.LocalDiscriminator

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*Bfd_Interface_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Bfd_Interface) GetOrCreateInterfaceRef() *Bfd_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Bfd_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Bfd_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bfd_Interface) GetInterfaceRef() *Bfd_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetDesiredMinimumTxInterval retrieves the value of the leaf DesiredMinimumTxInterval from the Bfd_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DesiredMinimumTxInterval is set, it can safely use t.GetDesiredMinimumTxInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DesiredMinimumTxInterval == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface) GetDesiredMinimumTxInterval() uint32 {
	if t == nil || t.DesiredMinimumTxInterval == nil {
		return 0
	}
	return *t.DesiredMinimumTxInterval
}

// GetDetectionMultiplier retrieves the value of the leaf DetectionMultiplier from the Bfd_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DetectionMultiplier is set, it can safely use t.GetDetectionMultiplier()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DetectionMultiplier == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface) GetDetectionMultiplier() uint8 {
	if t == nil || t.DetectionMultiplier == nil {
		return 0
	}
	return *t.DetectionMultiplier
}

// GetEnablePerMemberLink retrieves the value of the leaf EnablePerMemberLink from the Bfd_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EnablePerMemberLink is set, it can safely use t.GetEnablePerMemberLink()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EnablePerMemberLink == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface) GetEnablePerMemberLink() bool {
	if t == nil || t.EnablePerMemberLink == nil {
		return false
	}
	return *t.EnablePerMemberLink
}

// GetEnabled retrieves the value of the leaf Enabled from the Bfd_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetId retrieves the value of the leaf Id from the Bfd_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Id is set, it can safely use t.GetId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Id == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the Bfd_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LocalAddress is set, it can safely use t.GetLocalAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LocalAddress == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetRequiredMinimumReceive retrieves the value of the leaf RequiredMinimumReceive from the Bfd_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RequiredMinimumReceive is set, it can safely use t.GetRequiredMinimumReceive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RequiredMinimumReceive == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface) GetRequiredMinimumReceive() uint32 {
	if t == nil || t.RequiredMinimumReceive == nil {
		return 0
	}
	return *t.RequiredMinimumReceive
}

// ΛListKeyMap returns the keys of the Bfd_Interface struct, which is a YANG list entry.
func (t *Bfd_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bfd_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bfd_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bfd_Interface_InterfaceRef represents the /openconfig-bfd/bfd/interfaces/interface/interface-ref YANG schema element.
type Bfd_Interface_InterfaceRef struct {
	Interface    *string `path:"state/interface" module:"openconfig-bfd"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-bfd"`
}

// IsYANGGoStruct ensures that Bfd_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bfd_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Bfd_Interface_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interface is set, it can safely use t.GetInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interface == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Bfd_Interface_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Subinterface is set, it can safely use t.GetSubinterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Subinterface == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bfd_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bfd_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bfd_Interface_MicroBfdSession represents the /openconfig-bfd/bfd/interfaces/interface/micro-bfd-sessions/micro-bfd-session YANG schema element.
type Bfd_Interface_MicroBfdSession struct {
	Async                         *Bfd_Interface_MicroBfdSession_Async `path:"state/async" module:"openconfig-bfd"`
	DemandModeRequested           *bool                                `path:"state/demand-mode-requested" module:"openconfig-bfd"`
	FailureTransitions            *uint64                              `path:"state/failure-transitions" module:"openconfig-bfd"`
	LastFailureTime               *uint64                              `path:"state/last-failure-time" module:"openconfig-bfd"`
	LocalAddress                  *string                              `path:"state/local-address" module:"openconfig-bfd"`
	LocalDiagnosticCode           E_Bfd_BfdDiagnosticCode              `path:"state/local-diagnostic-code" module:"openconfig-bfd"`
	LocalDiscriminator            *string                              `path:"state/local-discriminator" module:"openconfig-bfd"`
	MemberInterface               *string                              `path:"state/member-interface|member-interface" module:"openconfig-bfd"`
	RemoteAddress                 *string                              `path:"state/remote-address" module:"openconfig-bfd"`
	RemoteAuthenticationEnabled   *bool                                `path:"state/remote-authentication-enabled" module:"openconfig-bfd"`
	RemoteControlPlaneIndependent *bool                                `path:"state/remote-control-plane-independent" module:"openconfig-bfd"`
	RemoteDiagnosticCode          E_Bfd_BfdDiagnosticCode              `path:"state/remote-diagnostic-code" module:"openconfig-bfd"`
	RemoteDiscriminator           *string                              `path:"state/remote-discriminator" module:"openconfig-bfd"`
	RemoteMinimumReceiveInterval  *uint32                              `path:"state/remote-minimum-receive-interval" module:"openconfig-bfd"`
	RemoteSessionState            E_Bfd_BfdSessionState                `path:"state/remote-session-state" module:"openconfig-bfd"`
	SessionState                  E_Bfd_BfdSessionState                `path:"state/session-state" module:"openconfig-bfd"`
}

// IsYANGGoStruct ensures that Bfd_Interface_MicroBfdSession implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bfd_Interface_MicroBfdSession) IsYANGGoStruct() {}

// GetOrCreateAsync retrieves the value of the Async field
// or returns the existing field if it already exists.
func (t *Bfd_Interface_MicroBfdSession) GetOrCreateAsync() *Bfd_Interface_MicroBfdSession_Async {
	if t.Async != nil {
		return t.Async
	}
	t.Async = &Bfd_Interface_MicroBfdSession_Async{}
	return t.Async
}

// GetAsync returns the value of the Async struct pointer
// from Bfd_Interface_MicroBfdSession. If the receiver or the field Async is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bfd_Interface_MicroBfdSession) GetAsync() *Bfd_Interface_MicroBfdSession_Async {
	if t != nil && t.Async != nil {
		return t.Async
	}
	return nil
}

// GetDemandModeRequested retrieves the value of the leaf DemandModeRequested from the Bfd_Interface_MicroBfdSession
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DemandModeRequested is set, it can safely use t.GetDemandModeRequested()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DemandModeRequested == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetDemandModeRequested() bool {
	if t == nil || t.DemandModeRequested == nil {
		return false
	}
	return *t.DemandModeRequested
}

// GetFailureTransitions retrieves the value of the leaf FailureTransitions from the Bfd_Interface_MicroBfdSession
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FailureTransitions is set, it can safely use t.GetFailureTransitions()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FailureTransitions == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetFailureTransitions() uint64 {
	if t == nil || t.FailureTransitions == nil {
		return 0
	}
	return *t.FailureTransitions
}

// GetLastFailureTime retrieves the value of the leaf LastFailureTime from the Bfd_Interface_MicroBfdSession
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastFailureTime is set, it can safely use t.GetLastFailureTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastFailureTime == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetLastFailureTime() uint64 {
	if t == nil || t.LastFailureTime == nil {
		return 0
	}
	return *t.LastFailureTime
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the Bfd_Interface_MicroBfdSession
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LocalAddress is set, it can safely use t.GetLocalAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LocalAddress == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalDiagnosticCode retrieves the value of the leaf LocalDiagnosticCode from the Bfd_Interface_MicroBfdSession
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LocalDiagnosticCode is set, it can safely use t.GetLocalDiagnosticCode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LocalDiagnosticCode == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetLocalDiagnosticCode() E_Bfd_BfdDiagnosticCode {
	if t == nil || t.LocalDiagnosticCode == 0 {
		return 0
	}
	return t.LocalDiagnosticCode
}

// GetLocalDiscriminator retrieves the value of the leaf LocalDiscriminator from the Bfd_Interface_MicroBfdSession
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LocalDiscriminator is set, it can safely use t.GetLocalDiscriminator()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LocalDiscriminator == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetLocalDiscriminator() string {
	if t == nil || t.LocalDiscriminator == nil {
		return ""
	}
	return *t.LocalDiscriminator
}

// GetMemberInterface retrieves the value of the leaf MemberInterface from the Bfd_Interface_MicroBfdSession
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MemberInterface is set, it can safely use t.GetMemberInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MemberInterface == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetMemberInterface() string {
	if t == nil || t.MemberInterface == nil {
		return ""
	}
	return *t.MemberInterface
}

// GetRemoteAddress retrieves the value of the leaf RemoteAddress from the Bfd_Interface_MicroBfdSession
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemoteAddress is set, it can safely use t.GetRemoteAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemoteAddress == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetRemoteAddress() string {
	if t == nil || t.RemoteAddress == nil {
		return ""
	}
	return *t.RemoteAddress
}

// GetRemoteAuthenticationEnabled retrieves the value of the leaf RemoteAuthenticationEnabled from the Bfd_Interface_MicroBfdSession
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemoteAuthenticationEnabled is set, it can safely use t.GetRemoteAuthenticationEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemoteAuthenticationEnabled == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetRemoteAuthenticationEnabled() bool {
	if t == nil || t.RemoteAuthenticationEnabled == nil {
		return false
	}
	return *t.RemoteAuthenticationEnabled
}

// GetRemoteControlPlaneIndependent retrieves the value of the leaf RemoteControlPlaneIndependent from the Bfd_Interface_MicroBfdSession
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemoteControlPlaneIndependent is set, it can safely use t.GetRemoteControlPlaneIndependent()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemoteControlPlaneIndependent == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetRemoteControlPlaneIndependent() bool {
	if t == nil || t.RemoteControlPlaneIndependent == nil {
		return false
	}
	return *t.RemoteControlPlaneIndependent
}

// GetRemoteDiagnosticCode retrieves the value of the leaf RemoteDiagnosticCode from the Bfd_Interface_MicroBfdSession
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemoteDiagnosticCode is set, it can safely use t.GetRemoteDiagnosticCode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemoteDiagnosticCode == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetRemoteDiagnosticCode() E_Bfd_BfdDiagnosticCode {
	if t == nil || t.RemoteDiagnosticCode == 0 {
		return 0
	}
	return t.RemoteDiagnosticCode
}

// GetRemoteDiscriminator retrieves the value of the leaf RemoteDiscriminator from the Bfd_Interface_MicroBfdSession
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemoteDiscriminator is set, it can safely use t.GetRemoteDiscriminator()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemoteDiscriminator == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetRemoteDiscriminator() string {
	if t == nil || t.RemoteDiscriminator == nil {
		return ""
	}
	return *t.RemoteDiscriminator
}

// GetRemoteMinimumReceiveInterval retrieves the value of the leaf RemoteMinimumReceiveInterval from the Bfd_Interface_MicroBfdSession
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemoteMinimumReceiveInterval is set, it can safely use t.GetRemoteMinimumReceiveInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemoteMinimumReceiveInterval == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetRemoteMinimumReceiveInterval() uint32 {
	if t == nil || t.RemoteMinimumReceiveInterval == nil {
		return 0
	}
	return *t.RemoteMinimumReceiveInterval
}

// GetRemoteSessionState retrieves the value of the leaf RemoteSessionState from the Bfd_Interface_MicroBfdSession
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemoteSessionState is set, it can safely use t.GetRemoteSessionState()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemoteSessionState == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetRemoteSessionState() E_Bfd_BfdSessionState {
	if t == nil || t.RemoteSessionState == 0 {
		return 0
	}
	return t.RemoteSessionState
}

// GetSessionState retrieves the value of the leaf SessionState from the Bfd_Interface_MicroBfdSession
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SessionState is set, it can safely use t.GetSessionState()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SessionState == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession) GetSessionState() E_Bfd_BfdSessionState {
	if t == nil || t.SessionState == 0 {
		return 0
	}
	return t.SessionState
}

// ΛListKeyMap returns the keys of the Bfd_Interface_MicroBfdSession struct, which is a YANG list entry.
func (t *Bfd_Interface_MicroBfdSession) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MemberInterface == nil {
		return nil, fmt.Errorf("nil value for key MemberInterface")
	}

	return map[string]interface{}{
		"member-interface": *t.MemberInterface,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_MicroBfdSession) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bfd_Interface_MicroBfdSession"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bfd_Interface_MicroBfdSession) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bfd_Interface_MicroBfdSession_Async represents the /openconfig-bfd/bfd/interfaces/interface/micro-bfd-sessions/micro-bfd-session/state/async YANG schema element.
type Bfd_Interface_MicroBfdSession_Async struct {
	LastPacketReceived    *uint64 `path:"last-packet-received" module:"openconfig-bfd"`
	LastPacketTransmitted *uint64 `path:"last-packet-transmitted" module:"openconfig-bfd"`
	ReceivedPackets       *uint64 `path:"received-packets" module:"openconfig-bfd"`
	TransmittedPackets    *uint64 `path:"transmitted-packets" module:"openconfig-bfd"`
	UpTransitions         *uint64 `path:"up-transitions" module:"openconfig-bfd"`
}

// IsYANGGoStruct ensures that Bfd_Interface_MicroBfdSession_Async implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bfd_Interface_MicroBfdSession_Async) IsYANGGoStruct() {}

// GetLastPacketReceived retrieves the value of the leaf LastPacketReceived from the Bfd_Interface_MicroBfdSession_Async
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastPacketReceived is set, it can safely use t.GetLastPacketReceived()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastPacketReceived == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession_Async) GetLastPacketReceived() uint64 {
	if t == nil || t.LastPacketReceived == nil {
		return 0
	}
	return *t.LastPacketReceived
}

// GetLastPacketTransmitted retrieves the value of the leaf LastPacketTransmitted from the Bfd_Interface_MicroBfdSession_Async
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastPacketTransmitted is set, it can safely use t.GetLastPacketTransmitted()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastPacketTransmitted == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession_Async) GetLastPacketTransmitted() uint64 {
	if t == nil || t.LastPacketTransmitted == nil {
		return 0
	}
	return *t.LastPacketTransmitted
}

// GetReceivedPackets retrieves the value of the leaf ReceivedPackets from the Bfd_Interface_MicroBfdSession_Async
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ReceivedPackets is set, it can safely use t.GetReceivedPackets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ReceivedPackets == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession_Async) GetReceivedPackets() uint64 {
	if t == nil || t.ReceivedPackets == nil {
		return 0
	}
	return *t.ReceivedPackets
}

// GetTransmittedPackets retrieves the value of the leaf TransmittedPackets from the Bfd_Interface_MicroBfdSession_Async
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TransmittedPackets is set, it can safely use t.GetTransmittedPackets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TransmittedPackets == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession_Async) GetTransmittedPackets() uint64 {
	if t == nil || t.TransmittedPackets == nil {
		return 0
	}
	return *t.TransmittedPackets
}

// GetUpTransitions retrieves the value of the leaf UpTransitions from the Bfd_Interface_MicroBfdSession_Async
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if UpTransitions is set, it can safely use t.GetUpTransitions()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.UpTransitions == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_MicroBfdSession_Async) GetUpTransitions() uint64 {
	if t == nil || t.UpTransitions == nil {
		return 0
	}
	return *t.UpTransitions
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_MicroBfdSession_Async) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bfd_Interface_MicroBfdSession_Async"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bfd_Interface_MicroBfdSession_Async) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bfd_Interface_Peer represents the /openconfig-bfd/bfd/interfaces/interface/peers/peer YANG schema element.
type Bfd_Interface_Peer struct {
	Async                         *Bfd_Interface_Peer_Async             `path:"state/async" module:"openconfig-bfd"`
	DemandModeRequested           *bool                                 `path:"state/demand-mode-requested" module:"openconfig-bfd"`
	Echo                          *Bfd_Interface_Peer_Echo              `path:"state/echo" module:"openconfig-bfd"`
	FailureTransitions            *uint64                               `path:"state/failure-transitions" module:"openconfig-bfd"`
	LastFailureTime               *uint64                               `path:"state/last-failure-time" module:"openconfig-bfd"`
	LocalAddress                  *string                               `path:"state/local-address" module:"openconfig-bfd"`
	LocalDiagnosticCode           E_Bfd_BfdDiagnosticCode               `path:"state/local-diagnostic-code" module:"openconfig-bfd"`
	LocalDiscriminator            *string                               `path:"state/local-discriminator|local-discriminator" module:"openconfig-bfd"`
	RemoteAddress                 *string                               `path:"state/remote-address" module:"openconfig-bfd"`
	RemoteAuthenticationEnabled   *bool                                 `path:"state/remote-authentication-enabled" module:"openconfig-bfd"`
	RemoteControlPlaneIndependent *bool                                 `path:"state/remote-control-plane-independent" module:"openconfig-bfd"`
	RemoteDiagnosticCode          E_Bfd_BfdDiagnosticCode               `path:"state/remote-diagnostic-code" module:"openconfig-bfd"`
	RemoteDiscriminator           *string                               `path:"state/remote-discriminator" module:"openconfig-bfd"`
	RemoteMinimumReceiveInterval  *uint32                               `path:"state/remote-minimum-receive-interval" module:"openconfig-bfd"`
	RemoteSessionState            E_Bfd_BfdSessionState                 `path:"state/remote-session-state" module:"openconfig-bfd"`
	SessionState                  E_Bfd_BfdSessionState                 `path:"state/session-state" module:"openconfig-bfd"`
	SubscribedProtocols           []E_PolicyTypes_INSTALL_PROTOCOL_TYPE `path:"state/subscribed-protocols" module:"openconfig-bfd"`
}

// IsYANGGoStruct ensures that Bfd_Interface_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bfd_Interface_Peer) IsYANGGoStruct() {}

// GetOrCreateAsync retrieves the value of the Async field
// or returns the existing field if it already exists.
func (t *Bfd_Interface_Peer) GetOrCreateAsync() *Bfd_Interface_Peer_Async {
	if t.Async != nil {
		return t.Async
	}
	t.Async = &Bfd_Interface_Peer_Async{}
	return t.Async
}

// GetOrCreateEcho retrieves the value of the Echo field
// or returns the existing field if it already exists.
func (t *Bfd_Interface_Peer) GetOrCreateEcho() *Bfd_Interface_Peer_Echo {
	if t.Echo != nil {
		return t.Echo
	}
	t.Echo = &Bfd_Interface_Peer_Echo{}
	return t.Echo
}

// GetAsync returns the value of the Async struct pointer
// from Bfd_Interface_Peer. If the receiver or the field Async is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bfd_Interface_Peer) GetAsync() *Bfd_Interface_Peer_Async {
	if t != nil && t.Async != nil {
		return t.Async
	}
	return nil
}

// GetEcho returns the value of the Echo struct pointer
// from Bfd_Interface_Peer. If the receiver or the field Echo is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bfd_Interface_Peer) GetEcho() *Bfd_Interface_Peer_Echo {
	if t != nil && t.Echo != nil {
		return t.Echo
	}
	return nil
}

// GetDemandModeRequested retrieves the value of the leaf DemandModeRequested from the Bfd_Interface_Peer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DemandModeRequested is set, it can safely use t.GetDemandModeRequested()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DemandModeRequested == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetDemandModeRequested() bool {
	if t == nil || t.DemandModeRequested == nil {
		return false
	}
	return *t.DemandModeRequested
}

// GetFailureTransitions retrieves the value of the leaf FailureTransitions from the Bfd_Interface_Peer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FailureTransitions is set, it can safely use t.GetFailureTransitions()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FailureTransitions == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetFailureTransitions() uint64 {
	if t == nil || t.FailureTransitions == nil {
		return 0
	}
	return *t.FailureTransitions
}

// GetLastFailureTime retrieves the value of the leaf LastFailureTime from the Bfd_Interface_Peer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastFailureTime is set, it can safely use t.GetLastFailureTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastFailureTime == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetLastFailureTime() uint64 {
	if t == nil || t.LastFailureTime == nil {
		return 0
	}
	return *t.LastFailureTime
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the Bfd_Interface_Peer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LocalAddress is set, it can safely use t.GetLocalAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LocalAddress == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalDiagnosticCode retrieves the value of the leaf LocalDiagnosticCode from the Bfd_Interface_Peer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LocalDiagnosticCode is set, it can safely use t.GetLocalDiagnosticCode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LocalDiagnosticCode == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetLocalDiagnosticCode() E_Bfd_BfdDiagnosticCode {
	if t == nil || t.LocalDiagnosticCode == 0 {
		return 0
	}
	return t.LocalDiagnosticCode
}

// GetLocalDiscriminator retrieves the value of the leaf LocalDiscriminator from the Bfd_Interface_Peer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LocalDiscriminator is set, it can safely use t.GetLocalDiscriminator()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LocalDiscriminator == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetLocalDiscriminator() string {
	if t == nil || t.LocalDiscriminator == nil {
		return ""
	}
	return *t.LocalDiscriminator
}

// GetRemoteAddress retrieves the value of the leaf RemoteAddress from the Bfd_Interface_Peer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemoteAddress is set, it can safely use t.GetRemoteAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemoteAddress == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetRemoteAddress() string {
	if t == nil || t.RemoteAddress == nil {
		return ""
	}
	return *t.RemoteAddress
}

// GetRemoteAuthenticationEnabled retrieves the value of the leaf RemoteAuthenticationEnabled from the Bfd_Interface_Peer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemoteAuthenticationEnabled is set, it can safely use t.GetRemoteAuthenticationEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemoteAuthenticationEnabled == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetRemoteAuthenticationEnabled() bool {
	if t == nil || t.RemoteAuthenticationEnabled == nil {
		return false
	}
	return *t.RemoteAuthenticationEnabled
}

// GetRemoteControlPlaneIndependent retrieves the value of the leaf RemoteControlPlaneIndependent from the Bfd_Interface_Peer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemoteControlPlaneIndependent is set, it can safely use t.GetRemoteControlPlaneIndependent()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemoteControlPlaneIndependent == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetRemoteControlPlaneIndependent() bool {
	if t == nil || t.RemoteControlPlaneIndependent == nil {
		return false
	}
	return *t.RemoteControlPlaneIndependent
}

// GetRemoteDiagnosticCode retrieves the value of the leaf RemoteDiagnosticCode from the Bfd_Interface_Peer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemoteDiagnosticCode is set, it can safely use t.GetRemoteDiagnosticCode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemoteDiagnosticCode == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetRemoteDiagnosticCode() E_Bfd_BfdDiagnosticCode {
	if t == nil || t.RemoteDiagnosticCode == 0 {
		return 0
	}
	return t.RemoteDiagnosticCode
}

// GetRemoteDiscriminator retrieves the value of the leaf RemoteDiscriminator from the Bfd_Interface_Peer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemoteDiscriminator is set, it can safely use t.GetRemoteDiscriminator()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemoteDiscriminator == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetRemoteDiscriminator() string {
	if t == nil || t.RemoteDiscriminator == nil {
		return ""
	}
	return *t.RemoteDiscriminator
}

// GetRemoteMinimumReceiveInterval retrieves the value of the leaf RemoteMinimumReceiveInterval from the Bfd_Interface_Peer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemoteMinimumReceiveInterval is set, it can safely use t.GetRemoteMinimumReceiveInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemoteMinimumReceiveInterval == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetRemoteMinimumReceiveInterval() uint32 {
	if t == nil || t.RemoteMinimumReceiveInterval == nil {
		return 0
	}
	return *t.RemoteMinimumReceiveInterval
}

// GetRemoteSessionState retrieves the value of the leaf RemoteSessionState from the Bfd_Interface_Peer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemoteSessionState is set, it can safely use t.GetRemoteSessionState()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemoteSessionState == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetRemoteSessionState() E_Bfd_BfdSessionState {
	if t == nil || t.RemoteSessionState == 0 {
		return 0
	}
	return t.RemoteSessionState
}

// GetSessionState retrieves the value of the leaf SessionState from the Bfd_Interface_Peer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SessionState is set, it can safely use t.GetSessionState()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SessionState == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetSessionState() E_Bfd_BfdSessionState {
	if t == nil || t.SessionState == 0 {
		return 0
	}
	return t.SessionState
}

// GetSubscribedProtocols retrieves the value of the leaf SubscribedProtocols from the Bfd_Interface_Peer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SubscribedProtocols is set, it can safely use t.GetSubscribedProtocols()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SubscribedProtocols == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer) GetSubscribedProtocols() []E_PolicyTypes_INSTALL_PROTOCOL_TYPE {
	if t == nil || t.SubscribedProtocols == nil {
		return nil
	}
	return t.SubscribedProtocols
}

// ΛListKeyMap returns the keys of the Bfd_Interface_Peer struct, which is a YANG list entry.
func (t *Bfd_Interface_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocalDiscriminator == nil {
		return nil, fmt.Errorf("nil value for key LocalDiscriminator")
	}

	return map[string]interface{}{
		"local-discriminator": *t.LocalDiscriminator,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_Peer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bfd_Interface_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bfd_Interface_Peer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bfd_Interface_Peer_Async represents the /openconfig-bfd/bfd/interfaces/interface/peers/peer/state/async YANG schema element.
type Bfd_Interface_Peer_Async struct {
	LastPacketReceived    *uint64 `path:"last-packet-received" module:"openconfig-bfd"`
	LastPacketTransmitted *uint64 `path:"last-packet-transmitted" module:"openconfig-bfd"`
	ReceivedPackets       *uint64 `path:"received-packets" module:"openconfig-bfd"`
	TransmittedPackets    *uint64 `path:"transmitted-packets" module:"openconfig-bfd"`
	UpTransitions         *uint64 `path:"up-transitions" module:"openconfig-bfd"`
}

// IsYANGGoStruct ensures that Bfd_Interface_Peer_Async implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bfd_Interface_Peer_Async) IsYANGGoStruct() {}

// GetLastPacketReceived retrieves the value of the leaf LastPacketReceived from the Bfd_Interface_Peer_Async
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastPacketReceived is set, it can safely use t.GetLastPacketReceived()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastPacketReceived == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Async) GetLastPacketReceived() uint64 {
	if t == nil || t.LastPacketReceived == nil {
		return 0
	}
	return *t.LastPacketReceived
}

// GetLastPacketTransmitted retrieves the value of the leaf LastPacketTransmitted from the Bfd_Interface_Peer_Async
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastPacketTransmitted is set, it can safely use t.GetLastPacketTransmitted()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastPacketTransmitted == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Async) GetLastPacketTransmitted() uint64 {
	if t == nil || t.LastPacketTransmitted == nil {
		return 0
	}
	return *t.LastPacketTransmitted
}

// GetReceivedPackets retrieves the value of the leaf ReceivedPackets from the Bfd_Interface_Peer_Async
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ReceivedPackets is set, it can safely use t.GetReceivedPackets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ReceivedPackets == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Async) GetReceivedPackets() uint64 {
	if t == nil || t.ReceivedPackets == nil {
		return 0
	}
	return *t.ReceivedPackets
}

// GetTransmittedPackets retrieves the value of the leaf TransmittedPackets from the Bfd_Interface_Peer_Async
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TransmittedPackets is set, it can safely use t.GetTransmittedPackets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TransmittedPackets == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Async) GetTransmittedPackets() uint64 {
	if t == nil || t.TransmittedPackets == nil {
		return 0
	}
	return *t.TransmittedPackets
}

// GetUpTransitions retrieves the value of the leaf UpTransitions from the Bfd_Interface_Peer_Async
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if UpTransitions is set, it can safely use t.GetUpTransitions()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.UpTransitions == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Async) GetUpTransitions() uint64 {
	if t == nil || t.UpTransitions == nil {
		return 0
	}
	return *t.UpTransitions
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_Peer_Async) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bfd_Interface_Peer_Async"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bfd_Interface_Peer_Async) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bfd_Interface_Peer_Echo represents the /openconfig-bfd/bfd/interfaces/interface/peers/peer/state/echo YANG schema element.
type Bfd_Interface_Peer_Echo struct {
	Active                *bool   `path:"active" module:"openconfig-bfd"`
	LastPacketReceived    *uint64 `path:"last-packet-received" module:"openconfig-bfd"`
	LastPacketTransmitted *uint64 `path:"last-packet-transmitted" module:"openconfig-bfd"`
	ReceivedPackets       *uint64 `path:"received-packets" module:"openconfig-bfd"`
	TransmittedPackets    *uint64 `path:"transmitted-packets" module:"openconfig-bfd"`
	UpTransitions         *uint64 `path:"up-transitions" module:"openconfig-bfd"`
}

// IsYANGGoStruct ensures that Bfd_Interface_Peer_Echo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bfd_Interface_Peer_Echo) IsYANGGoStruct() {}

// GetActive retrieves the value of the leaf Active from the Bfd_Interface_Peer_Echo
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Active is set, it can safely use t.GetActive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Active == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Echo) GetActive() bool {
	if t == nil || t.Active == nil {
		return false
	}
	return *t.Active
}

// GetLastPacketReceived retrieves the value of the leaf LastPacketReceived from the Bfd_Interface_Peer_Echo
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastPacketReceived is set, it can safely use t.GetLastPacketReceived()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastPacketReceived == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Echo) GetLastPacketReceived() uint64 {
	if t == nil || t.LastPacketReceived == nil {
		return 0
	}
	return *t.LastPacketReceived
}

// GetLastPacketTransmitted retrieves the value of the leaf LastPacketTransmitted from the Bfd_Interface_Peer_Echo
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastPacketTransmitted is set, it can safely use t.GetLastPacketTransmitted()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastPacketTransmitted == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Echo) GetLastPacketTransmitted() uint64 {
	if t == nil || t.LastPacketTransmitted == nil {
		return 0
	}
	return *t.LastPacketTransmitted
}

// GetReceivedPackets retrieves the value of the leaf ReceivedPackets from the Bfd_Interface_Peer_Echo
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ReceivedPackets is set, it can safely use t.GetReceivedPackets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ReceivedPackets == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Echo) GetReceivedPackets() uint64 {
	if t == nil || t.ReceivedPackets == nil {
		return 0
	}
	return *t.ReceivedPackets
}

// GetTransmittedPackets retrieves the value of the leaf TransmittedPackets from the Bfd_Interface_Peer_Echo
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TransmittedPackets is set, it can safely use t.GetTransmittedPackets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TransmittedPackets == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Echo) GetTransmittedPackets() uint64 {
	if t == nil || t.TransmittedPackets == nil {
		return 0
	}
	return *t.TransmittedPackets
}

// GetUpTransitions retrieves the value of the leaf UpTransitions from the Bfd_Interface_Peer_Echo
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if UpTransitions is set, it can safely use t.GetUpTransitions()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.UpTransitions == nil'
// before retrieving the leaf's value.
func (t *Bfd_Interface_Peer_Echo) GetUpTransitions() uint64 {
	if t == nil || t.UpTransitions == nil {
		return 0
	}
	return *t.UpTransitions
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bfd_Interface_Peer_Echo) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bfd_Interface_Peer_Echo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bfd_Interface_Peer_Echo) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp represents the /openconfig-bgp/bgp YANG schema element.
type Bgp struct {
	Global    *Bgp_Global               `path:"global" module:"openconfig-bgp"`
	Neighbor  map[string]*Bgp_Neighbor  `path:"neighbors/neighbor" module:"openconfig-bgp"`
	PeerGroup map[string]*Bgp_PeerGroup `path:"peer-groups/peer-group" module:"openconfig-bgp"`
	Rib       *Bgp_Rib                  `path:"rib" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp) NewNeighbor(NeighborAddress string) (*Bgp_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Bgp_Neighbor)
	}

	key := NeighborAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Bgp_Neighbor{
		NeighborAddress: &NeighborAddress,
	}

	return t.Neighbor[key], nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp) GetOrCreateNeighbor(NeighborAddress string) *Bgp_Neighbor {

	key := NeighborAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(NeighborAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp) GetNeighbor(NeighborAddress string) *Bgp_Neighbor {

	if t == nil {
		return nil
	}

	key := NeighborAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver Bgp. If there is no such element, the function
// is a no-op.
func (t *Bgp) DeleteNeighbor(NeighborAddress string) {
	key := NeighborAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied Bgp_Neighbor struct to the
// list Neighbor of Bgp. If the key value(s) specified in
// the supplied Bgp_Neighbor already exist in the list, an error is
// returned.
func (t *Bgp) AppendNeighbor(v *Bgp_Neighbor) error {
	if v.NeighborAddress == nil {
		return fmt.Errorf("invalid nil key received for NeighborAddress")
	}

	key := *v.NeighborAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Bgp_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// NewPeerGroup creates a new entry in the PeerGroup list of the
// Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp) NewPeerGroup(PeerGroupName string) (*Bgp_PeerGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PeerGroup == nil {
		t.PeerGroup = make(map[string]*Bgp_PeerGroup)
	}

	key := PeerGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PeerGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PeerGroup", key)
	}

	t.PeerGroup[key] = &Bgp_PeerGroup{
		PeerGroupName: &PeerGroupName,
	}

	return t.PeerGroup[key], nil
}

// GetOrCreatePeerGroup retrieves the value with the specified keys from
// the receiver Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp) GetOrCreatePeerGroup(PeerGroupName string) *Bgp_PeerGroup {

	key := PeerGroupName

	if v, ok := t.PeerGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeerGroup(PeerGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeerGroup got unexpected error: %v", err))
	}
	return v
}

// GetPeerGroup retrieves the value with the specified key from
// the PeerGroup map field of Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp) GetPeerGroup(PeerGroupName string) *Bgp_PeerGroup {

	if t == nil {
		return nil
	}

	key := PeerGroupName

	if lm, ok := t.PeerGroup[key]; ok {
		return lm
	}
	return nil
}

// DeletePeerGroup deletes the value with the specified keys from
// the receiver Bgp. If there is no such element, the function
// is a no-op.
func (t *Bgp) DeletePeerGroup(PeerGroupName string) {
	key := PeerGroupName

	delete(t.PeerGroup, key)
}

// AppendPeerGroup appends the supplied Bgp_PeerGroup struct to the
// list PeerGroup of Bgp. If the key value(s) specified in
// the supplied Bgp_PeerGroup already exist in the list, an error is
// returned.
func (t *Bgp) AppendPeerGroup(v *Bgp_PeerGroup) error {
	if v.PeerGroupName == nil {
		return fmt.Errorf("invalid nil key received for PeerGroupName")
	}

	key := *v.PeerGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PeerGroup == nil {
		t.PeerGroup = make(map[string]*Bgp_PeerGroup)
	}

	if _, ok := t.PeerGroup[key]; ok {
		return fmt.Errorf("duplicate key for list PeerGroup %v", key)
	}

	t.PeerGroup[key] = v
	return nil
}

// GetOrCreateGlobal retrieves the value of the Global field
// or returns the existing field if it already exists.
func (t *Bgp) GetOrCreateGlobal() *Bgp_Global {
	if t.Global != nil {
		return t.Global
	}
	t.Global = &Bgp_Global{}
	return t.Global
}

// GetOrCreateRib retrieves the value of the Rib field
// or returns the existing field if it already exists.
func (t *Bgp) GetOrCreateRib() *Bgp_Rib {
	if t.Rib != nil {
		return t.Rib
	}
	t.Rib = &Bgp_Rib{}
	return t.Rib
}

// GetGlobal returns the value of the Global struct pointer
// from Bgp. If the receiver or the field Global is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp) GetGlobal() *Bgp_Global {
	if t != nil && t.Global != nil {
		return t.Global
	}
	return nil
}

// GetRib returns the value of the Rib struct pointer
// from Bgp. If the receiver or the field Rib is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp) GetRib() *Bgp_Rib {
	if t != nil && t.Rib != nil {
		return t.Rib
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Global represents the /openconfig-bgp/bgp/global YANG schema element.
type Bgp_Global struct {
	AfiSafi               map[E_BgpTypes_AFI_SAFI_TYPE]*Bgp_Global_AfiSafi `path:"afi-safis/afi-safi" module:"openconfig-bgp"`
	As                    *uint32                                          `path:"state/as" module:"openconfig-bgp"`
	Confederation         *Bgp_Global_Confederation                        `path:"confederation" module:"openconfig-bgp"`
	DefaultRouteDistance  *Bgp_Global_DefaultRouteDistance                 `path:"default-route-distance" module:"openconfig-bgp"`
	DynamicNeighborPrefix map[string]*Bgp_Global_DynamicNeighborPrefix     `path:"dynamic-neighbor-prefixes/dynamic-neighbor-prefix" module:"openconfig-bgp"`
	GracefulRestart       *Bgp_Global_GracefulRestart                      `path:"graceful-restart" module:"openconfig-bgp"`
	RouteSelectionOptions *Bgp_Global_RouteSelectionOptions                `path:"route-selection-options" module:"openconfig-bgp"`
	RouterId              *string                                          `path:"state/router-id" module:"openconfig-bgp"`
	TotalPaths            *uint32                                          `path:"state/total-paths" module:"openconfig-bgp"`
	TotalPrefixes         *uint32                                          `path:"state/total-prefixes" module:"openconfig-bgp"`
	UseMultiplePaths      *Bgp_Global_UseMultiplePaths                     `path:"use-multiple-paths" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global) IsYANGGoStruct() {}

// NewAfiSafi creates a new entry in the AfiSafi list of the
// Bgp_Global struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Global) NewAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) (*Bgp_Global_AfiSafi, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_BgpTypes_AFI_SAFI_TYPE]*Bgp_Global_AfiSafi)
	}

	key := AfiSafiName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AfiSafi[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AfiSafi", key)
	}

	t.AfiSafi[key] = &Bgp_Global_AfiSafi{
		AfiSafiName: AfiSafiName,
	}

	return t.AfiSafi[key], nil
}

// GetOrCreateAfiSafi retrieves the value with the specified keys from
// the receiver Bgp_Global. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Global) GetOrCreateAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) *Bgp_Global_AfiSafi {

	key := AfiSafiName

	if v, ok := t.AfiSafi[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAfiSafi(AfiSafiName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAfiSafi got unexpected error: %v", err))
	}
	return v
}

// GetAfiSafi retrieves the value with the specified key from
// the AfiSafi map field of Bgp_Global. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Global) GetAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) *Bgp_Global_AfiSafi {

	if t == nil {
		return nil
	}

	key := AfiSafiName

	if lm, ok := t.AfiSafi[key]; ok {
		return lm
	}
	return nil
}

// DeleteAfiSafi deletes the value with the specified keys from
// the receiver Bgp_Global. If there is no such element, the function
// is a no-op.
func (t *Bgp_Global) DeleteAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) {
	key := AfiSafiName

	delete(t.AfiSafi, key)
}

// AppendAfiSafi appends the supplied Bgp_Global_AfiSafi struct to the
// list AfiSafi of Bgp_Global. If the key value(s) specified in
// the supplied Bgp_Global_AfiSafi already exist in the list, an error is
// returned.
func (t *Bgp_Global) AppendAfiSafi(v *Bgp_Global_AfiSafi) error {
	key := v.AfiSafiName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_BgpTypes_AFI_SAFI_TYPE]*Bgp_Global_AfiSafi)
	}

	if _, ok := t.AfiSafi[key]; ok {
		return fmt.Errorf("duplicate key for list AfiSafi %v", key)
	}

	t.AfiSafi[key] = v
	return nil
}

// NewDynamicNeighborPrefix creates a new entry in the DynamicNeighborPrefix list of the
// Bgp_Global struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Global) NewDynamicNeighborPrefix(Prefix string) (*Bgp_Global_DynamicNeighborPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DynamicNeighborPrefix == nil {
		t.DynamicNeighborPrefix = make(map[string]*Bgp_Global_DynamicNeighborPrefix)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DynamicNeighborPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DynamicNeighborPrefix", key)
	}

	t.DynamicNeighborPrefix[key] = &Bgp_Global_DynamicNeighborPrefix{
		Prefix: &Prefix,
	}

	return t.DynamicNeighborPrefix[key], nil
}

// GetOrCreateDynamicNeighborPrefix retrieves the value with the specified keys from
// the receiver Bgp_Global. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Global) GetOrCreateDynamicNeighborPrefix(Prefix string) *Bgp_Global_DynamicNeighborPrefix {

	key := Prefix

	if v, ok := t.DynamicNeighborPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDynamicNeighborPrefix(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDynamicNeighborPrefix got unexpected error: %v", err))
	}
	return v
}

// GetDynamicNeighborPrefix retrieves the value with the specified key from
// the DynamicNeighborPrefix map field of Bgp_Global. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Global) GetDynamicNeighborPrefix(Prefix string) *Bgp_Global_DynamicNeighborPrefix {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.DynamicNeighborPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteDynamicNeighborPrefix deletes the value with the specified keys from
// the receiver Bgp_Global. If there is no such element, the function
// is a no-op.
func (t *Bgp_Global) DeleteDynamicNeighborPrefix(Prefix string) {
	key := Prefix

	delete(t.DynamicNeighborPrefix, key)
}

// AppendDynamicNeighborPrefix appends the supplied Bgp_Global_DynamicNeighborPrefix struct to the
// list DynamicNeighborPrefix of Bgp_Global. If the key value(s) specified in
// the supplied Bgp_Global_DynamicNeighborPrefix already exist in the list, an error is
// returned.
func (t *Bgp_Global) AppendDynamicNeighborPrefix(v *Bgp_Global_DynamicNeighborPrefix) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DynamicNeighborPrefix == nil {
		t.DynamicNeighborPrefix = make(map[string]*Bgp_Global_DynamicNeighborPrefix)
	}

	if _, ok := t.DynamicNeighborPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list DynamicNeighborPrefix %v", key)
	}

	t.DynamicNeighborPrefix[key] = v
	return nil
}

// GetOrCreateConfederation retrieves the value of the Confederation field
// or returns the existing field if it already exists.
func (t *Bgp_Global) GetOrCreateConfederation() *Bgp_Global_Confederation {
	if t.Confederation != nil {
		return t.Confederation
	}
	t.Confederation = &Bgp_Global_Confederation{}
	return t.Confederation
}

// GetOrCreateDefaultRouteDistance retrieves the value of the DefaultRouteDistance field
// or returns the existing field if it already exists.
func (t *Bgp_Global) GetOrCreateDefaultRouteDistance() *Bgp_Global_DefaultRouteDistance {
	if t.DefaultRouteDistance != nil {
		return t.DefaultRouteDistance
	}
	t.DefaultRouteDistance = &Bgp_Global_DefaultRouteDistance{}
	return t.DefaultRouteDistance
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *Bgp_Global) GetOrCreateGracefulRestart() *Bgp_Global_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &Bgp_Global_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateRouteSelectionOptions retrieves the value of the RouteSelectionOptions field
// or returns the existing field if it already exists.
func (t *Bgp_Global) GetOrCreateRouteSelectionOptions() *Bgp_Global_RouteSelectionOptions {
	if t.RouteSelectionOptions != nil {
		return t.RouteSelectionOptions
	}
	t.RouteSelectionOptions = &Bgp_Global_RouteSelectionOptions{}
	return t.RouteSelectionOptions
}

// GetOrCreateUseMultiplePaths retrieves the value of the UseMultiplePaths field
// or returns the existing field if it already exists.
func (t *Bgp_Global) GetOrCreateUseMultiplePaths() *Bgp_Global_UseMultiplePaths {
	if t.UseMultiplePaths != nil {
		return t.UseMultiplePaths
	}
	t.UseMultiplePaths = &Bgp_Global_UseMultiplePaths{}
	return t.UseMultiplePaths
}

// GetConfederation returns the value of the Confederation struct pointer
// from Bgp_Global. If the receiver or the field Confederation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global) GetConfederation() *Bgp_Global_Confederation {
	if t != nil && t.Confederation != nil {
		return t.Confederation
	}
	return nil
}

// GetDefaultRouteDistance returns the value of the DefaultRouteDistance struct pointer
// from Bgp_Global. If the receiver or the field DefaultRouteDistance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global) GetDefaultRouteDistance() *Bgp_Global_DefaultRouteDistance {
	if t != nil && t.DefaultRouteDistance != nil {
		return t.DefaultRouteDistance
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from Bgp_Global. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global) GetGracefulRestart() *Bgp_Global_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetRouteSelectionOptions returns the value of the RouteSelectionOptions struct pointer
// from Bgp_Global. If the receiver or the field RouteSelectionOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global) GetRouteSelectionOptions() *Bgp_Global_RouteSelectionOptions {
	if t != nil && t.RouteSelectionOptions != nil {
		return t.RouteSelectionOptions
	}
	return nil
}

// GetUseMultiplePaths returns the value of the UseMultiplePaths struct pointer
// from Bgp_Global. If the receiver or the field UseMultiplePaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global) GetUseMultiplePaths() *Bgp_Global_UseMultiplePaths {
	if t != nil && t.UseMultiplePaths != nil {
		return t.UseMultiplePaths
	}
	return nil
}

// GetAs retrieves the value of the leaf As from the Bgp_Global
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if As is set, it can safely use t.GetAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.As == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global) GetAs() uint32 {
	if t == nil || t.As == nil {
		return 0
	}
	return *t.As
}

// GetRouterId retrieves the value of the leaf RouterId from the Bgp_Global
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RouterId is set, it can safely use t.GetRouterId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RouterId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetTotalPaths retrieves the value of the leaf TotalPaths from the Bgp_Global
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TotalPaths is set, it can safely use t.GetTotalPaths()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TotalPaths == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global) GetTotalPaths() uint32 {
	if t == nil || t.TotalPaths == nil {
		return 0
	}
	return *t.TotalPaths
}

// GetTotalPrefixes retrieves the value of the leaf TotalPrefixes from the Bgp_Global
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TotalPrefixes is set, it can safely use t.GetTotalPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TotalPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global) GetTotalPrefixes() uint32 {
	if t == nil || t.TotalPrefixes == nil {
		return 0
	}
	return *t.TotalPrefixes
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Global_AfiSafi represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi YANG schema element.
type Bgp_Global_AfiSafi struct {
	AddPaths              *Bgp_Global_AfiSafi_AddPaths              `path:"add-paths" module:"openconfig-bgp"`
	AfiSafiName           E_BgpTypes_AFI_SAFI_TYPE                  `path:"state/afi-safi-name|afi-safi-name" module:"openconfig-bgp"`
	Enabled               *bool                                     `path:"state/enabled" module:"openconfig-bgp"`
	GracefulRestart       *Bgp_Global_AfiSafi_GracefulRestart       `path:"graceful-restart" module:"openconfig-bgp"`
	Ipv4LabeledUnicast    *Bgp_Global_AfiSafi_Ipv4LabeledUnicast    `path:"ipv4-labeled-unicast" module:"openconfig-bgp"`
	Ipv4Unicast           *Bgp_Global_AfiSafi_Ipv4Unicast           `path:"ipv4-unicast" module:"openconfig-bgp"`
	Ipv6LabeledUnicast    *Bgp_Global_AfiSafi_Ipv6LabeledUnicast    `path:"ipv6-labeled-unicast" module:"openconfig-bgp"`
	Ipv6Unicast           *Bgp_Global_AfiSafi_Ipv6Unicast           `path:"ipv6-unicast" module:"openconfig-bgp"`
	L2VpnEvpn             *Bgp_Global_AfiSafi_L2VpnEvpn             `path:"l2vpn-evpn" module:"openconfig-bgp"`
	L2VpnVpls             *Bgp_Global_AfiSafi_L2VpnVpls             `path:"l2vpn-vpls" module:"openconfig-bgp"`
	L3VpnIpv4Multicast    *Bgp_Global_AfiSafi_L3VpnIpv4Multicast    `path:"l3vpn-ipv4-multicast" module:"openconfig-bgp"`
	L3VpnIpv4Unicast      *Bgp_Global_AfiSafi_L3VpnIpv4Unicast      `path:"l3vpn-ipv4-unicast" module:"openconfig-bgp"`
	L3VpnIpv6Multicast    *Bgp_Global_AfiSafi_L3VpnIpv6Multicast    `path:"l3vpn-ipv6-multicast" module:"openconfig-bgp"`
	L3VpnIpv6Unicast      *Bgp_Global_AfiSafi_L3VpnIpv6Unicast      `path:"l3vpn-ipv6-unicast" module:"openconfig-bgp"`
	RouteSelectionOptions *Bgp_Global_AfiSafi_RouteSelectionOptions `path:"route-selection-options" module:"openconfig-bgp"`
	SrtePolicyIpv4        *Bgp_Global_AfiSafi_SrtePolicyIpv4        `path:"srte-policy-ipv4" module:"openconfig-bgp"`
	SrtePolicyIpv6        *Bgp_Global_AfiSafi_SrtePolicyIpv6        `path:"srte-policy-ipv6" module:"openconfig-bgp"`
	TotalPaths            *uint32                                   `path:"state/total-paths" module:"openconfig-bgp"`
	TotalPrefixes         *uint32                                   `path:"state/total-prefixes" module:"openconfig-bgp"`
	UseMultiplePaths      *Bgp_Global_AfiSafi_UseMultiplePaths      `path:"use-multiple-paths" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi) IsYANGGoStruct() {}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi) GetOrCreateAddPaths() *Bgp_Global_AfiSafi_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &Bgp_Global_AfiSafi_AddPaths{}
	return t.AddPaths
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi) GetOrCreateGracefulRestart() *Bgp_Global_AfiSafi_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &Bgp_Global_AfiSafi_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateIpv4LabeledUnicast retrieves the value of the Ipv4LabeledUnicast field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi) GetOrCreateIpv4LabeledUnicast() *Bgp_Global_AfiSafi_Ipv4LabeledUnicast {
	if t.Ipv4LabeledUnicast != nil {
		return t.Ipv4LabeledUnicast
	}
	t.Ipv4LabeledUnicast = &Bgp_Global_AfiSafi_Ipv4LabeledUnicast{}
	return t.Ipv4LabeledUnicast
}

// GetOrCreateIpv4Unicast retrieves the value of the Ipv4Unicast field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi) GetOrCreateIpv4Unicast() *Bgp_Global_AfiSafi_Ipv4Unicast {
	if t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	t.Ipv4Unicast = &Bgp_Global_AfiSafi_Ipv4Unicast{}
	return t.Ipv4Unicast
}

// GetOrCreateIpv6LabeledUnicast retrieves the value of the Ipv6LabeledUnicast field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi) GetOrCreateIpv6LabeledUnicast() *Bgp_Global_AfiSafi_Ipv6LabeledUnicast {
	if t.Ipv6LabeledUnicast != nil {
		return t.Ipv6LabeledUnicast
	}
	t.Ipv6LabeledUnicast = &Bgp_Global_AfiSafi_Ipv6LabeledUnicast{}
	return t.Ipv6LabeledUnicast
}

// GetOrCreateIpv6Unicast retrieves the value of the Ipv6Unicast field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi) GetOrCreateIpv6Unicast() *Bgp_Global_AfiSafi_Ipv6Unicast {
	if t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	t.Ipv6Unicast = &Bgp_Global_AfiSafi_Ipv6Unicast{}
	return t.Ipv6Unicast
}

// GetOrCreateL2VpnEvpn retrieves the value of the L2VpnEvpn field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi) GetOrCreateL2VpnEvpn() *Bgp_Global_AfiSafi_L2VpnEvpn {
	if t.L2VpnEvpn != nil {
		return t.L2VpnEvpn
	}
	t.L2VpnEvpn = &Bgp_Global_AfiSafi_L2VpnEvpn{}
	return t.L2VpnEvpn
}

// GetOrCreateL2VpnVpls retrieves the value of the L2VpnVpls field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi) GetOrCreateL2VpnVpls() *Bgp_Global_AfiSafi_L2VpnVpls {
	if t.L2VpnVpls != nil {
		return t.L2VpnVpls
	}
	t.L2VpnVpls = &Bgp_Global_AfiSafi_L2VpnVpls{}
	return t.L2VpnVpls
}

// GetOrCreateL3VpnIpv4Multicast retrieves the value of the L3VpnIpv4Multicast field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi) GetOrCreateL3VpnIpv4Multicast() *Bgp_Global_AfiSafi_L3VpnIpv4Multicast {
	if t.L3VpnIpv4Multicast != nil {
		return t.L3VpnIpv4Multicast
	}
	t.L3VpnIpv4Multicast = &Bgp_Global_AfiSafi_L3VpnIpv4Multicast{}
	return t.L3VpnIpv4Multicast
}

// GetOrCreateL3VpnIpv4Unicast retrieves the value of the L3VpnIpv4Unicast field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi) GetOrCreateL3VpnIpv4Unicast() *Bgp_Global_AfiSafi_L3VpnIpv4Unicast {
	if t.L3VpnIpv4Unicast != nil {
		return t.L3VpnIpv4Unicast
	}
	t.L3VpnIpv4Unicast = &Bgp_Global_AfiSafi_L3VpnIpv4Unicast{}
	return t.L3VpnIpv4Unicast
}

// GetOrCreateL3VpnIpv6Multicast retrieves the value of the L3VpnIpv6Multicast field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi) GetOrCreateL3VpnIpv6Multicast() *Bgp_Global_AfiSafi_L3VpnIpv6Multicast {
	if t.L3VpnIpv6Multicast != nil {
		return t.L3VpnIpv6Multicast
	}
	t.L3VpnIpv6Multicast = &Bgp_Global_AfiSafi_L3VpnIpv6Multicast{}
	return t.L3VpnIpv6Multicast
}

// GetOrCreateL3VpnIpv6Unicast retrieves the value of the L3VpnIpv6Unicast field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi) GetOrCreateL3VpnIpv6Unicast() *Bgp_Global_AfiSafi_L3VpnIpv6Unicast {
	if t.L3VpnIpv6Unicast != nil {
		return t.L3VpnIpv6Unicast
	}
	t.L3VpnIpv6Unicast = &Bgp_Global_AfiSafi_L3VpnIpv6Unicast{}
	return t.L3VpnIpv6Unicast
}

// GetOrCreateRouteSelectionOptions retrieves the value of the RouteSelectionOptions field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi) GetOrCreateRouteSelectionOptions() *Bgp_Global_AfiSafi_RouteSelectionOptions {
	if t.RouteSelectionOptions != nil {
		return t.RouteSelectionOptions
	}
	t.RouteSelectionOptions = &Bgp_Global_AfiSafi_RouteSelectionOptions{}
	return t.RouteSelectionOptions
}

// GetOrCreateSrtePolicyIpv4 retrieves the value of the SrtePolicyIpv4 field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi) GetOrCreateSrtePolicyIpv4() *Bgp_Global_AfiSafi_SrtePolicyIpv4 {
	if t.SrtePolicyIpv4 != nil {
		return t.SrtePolicyIpv4
	}
	t.SrtePolicyIpv4 = &Bgp_Global_AfiSafi_SrtePolicyIpv4{}
	return t.SrtePolicyIpv4
}

// GetOrCreateSrtePolicyIpv6 retrieves the value of the SrtePolicyIpv6 field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi) GetOrCreateSrtePolicyIpv6() *Bgp_Global_AfiSafi_SrtePolicyIpv6 {
	if t.SrtePolicyIpv6 != nil {
		return t.SrtePolicyIpv6
	}
	t.SrtePolicyIpv6 = &Bgp_Global_AfiSafi_SrtePolicyIpv6{}
	return t.SrtePolicyIpv6
}

// GetOrCreateUseMultiplePaths retrieves the value of the UseMultiplePaths field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi) GetOrCreateUseMultiplePaths() *Bgp_Global_AfiSafi_UseMultiplePaths {
	if t.UseMultiplePaths != nil {
		return t.UseMultiplePaths
	}
	t.UseMultiplePaths = &Bgp_Global_AfiSafi_UseMultiplePaths{}
	return t.UseMultiplePaths
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from Bgp_Global_AfiSafi. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi) GetAddPaths() *Bgp_Global_AfiSafi_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from Bgp_Global_AfiSafi. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi) GetGracefulRestart() *Bgp_Global_AfiSafi_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetIpv4LabeledUnicast returns the value of the Ipv4LabeledUnicast struct pointer
// from Bgp_Global_AfiSafi. If the receiver or the field Ipv4LabeledUnicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi) GetIpv4LabeledUnicast() *Bgp_Global_AfiSafi_Ipv4LabeledUnicast {
	if t != nil && t.Ipv4LabeledUnicast != nil {
		return t.Ipv4LabeledUnicast
	}
	return nil
}

// GetIpv4Unicast returns the value of the Ipv4Unicast struct pointer
// from Bgp_Global_AfiSafi. If the receiver or the field Ipv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi) GetIpv4Unicast() *Bgp_Global_AfiSafi_Ipv4Unicast {
	if t != nil && t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	return nil
}

// GetIpv6LabeledUnicast returns the value of the Ipv6LabeledUnicast struct pointer
// from Bgp_Global_AfiSafi. If the receiver or the field Ipv6LabeledUnicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi) GetIpv6LabeledUnicast() *Bgp_Global_AfiSafi_Ipv6LabeledUnicast {
	if t != nil && t.Ipv6LabeledUnicast != nil {
		return t.Ipv6LabeledUnicast
	}
	return nil
}

// GetIpv6Unicast returns the value of the Ipv6Unicast struct pointer
// from Bgp_Global_AfiSafi. If the receiver or the field Ipv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi) GetIpv6Unicast() *Bgp_Global_AfiSafi_Ipv6Unicast {
	if t != nil && t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	return nil
}

// GetL2VpnEvpn returns the value of the L2VpnEvpn struct pointer
// from Bgp_Global_AfiSafi. If the receiver or the field L2VpnEvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi) GetL2VpnEvpn() *Bgp_Global_AfiSafi_L2VpnEvpn {
	if t != nil && t.L2VpnEvpn != nil {
		return t.L2VpnEvpn
	}
	return nil
}

// GetL2VpnVpls returns the value of the L2VpnVpls struct pointer
// from Bgp_Global_AfiSafi. If the receiver or the field L2VpnVpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi) GetL2VpnVpls() *Bgp_Global_AfiSafi_L2VpnVpls {
	if t != nil && t.L2VpnVpls != nil {
		return t.L2VpnVpls
	}
	return nil
}

// GetL3VpnIpv4Multicast returns the value of the L3VpnIpv4Multicast struct pointer
// from Bgp_Global_AfiSafi. If the receiver or the field L3VpnIpv4Multicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi) GetL3VpnIpv4Multicast() *Bgp_Global_AfiSafi_L3VpnIpv4Multicast {
	if t != nil && t.L3VpnIpv4Multicast != nil {
		return t.L3VpnIpv4Multicast
	}
	return nil
}

// GetL3VpnIpv4Unicast returns the value of the L3VpnIpv4Unicast struct pointer
// from Bgp_Global_AfiSafi. If the receiver or the field L3VpnIpv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi) GetL3VpnIpv4Unicast() *Bgp_Global_AfiSafi_L3VpnIpv4Unicast {
	if t != nil && t.L3VpnIpv4Unicast != nil {
		return t.L3VpnIpv4Unicast
	}
	return nil
}

// GetL3VpnIpv6Multicast returns the value of the L3VpnIpv6Multicast struct pointer
// from Bgp_Global_AfiSafi. If the receiver or the field L3VpnIpv6Multicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi) GetL3VpnIpv6Multicast() *Bgp_Global_AfiSafi_L3VpnIpv6Multicast {
	if t != nil && t.L3VpnIpv6Multicast != nil {
		return t.L3VpnIpv6Multicast
	}
	return nil
}

// GetL3VpnIpv6Unicast returns the value of the L3VpnIpv6Unicast struct pointer
// from Bgp_Global_AfiSafi. If the receiver or the field L3VpnIpv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi) GetL3VpnIpv6Unicast() *Bgp_Global_AfiSafi_L3VpnIpv6Unicast {
	if t != nil && t.L3VpnIpv6Unicast != nil {
		return t.L3VpnIpv6Unicast
	}
	return nil
}

// GetRouteSelectionOptions returns the value of the RouteSelectionOptions struct pointer
// from Bgp_Global_AfiSafi. If the receiver or the field RouteSelectionOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi) GetRouteSelectionOptions() *Bgp_Global_AfiSafi_RouteSelectionOptions {
	if t != nil && t.RouteSelectionOptions != nil {
		return t.RouteSelectionOptions
	}
	return nil
}

// GetSrtePolicyIpv4 returns the value of the SrtePolicyIpv4 struct pointer
// from Bgp_Global_AfiSafi. If the receiver or the field SrtePolicyIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi) GetSrtePolicyIpv4() *Bgp_Global_AfiSafi_SrtePolicyIpv4 {
	if t != nil && t.SrtePolicyIpv4 != nil {
		return t.SrtePolicyIpv4
	}
	return nil
}

// GetSrtePolicyIpv6 returns the value of the SrtePolicyIpv6 struct pointer
// from Bgp_Global_AfiSafi. If the receiver or the field SrtePolicyIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi) GetSrtePolicyIpv6() *Bgp_Global_AfiSafi_SrtePolicyIpv6 {
	if t != nil && t.SrtePolicyIpv6 != nil {
		return t.SrtePolicyIpv6
	}
	return nil
}

// GetUseMultiplePaths returns the value of the UseMultiplePaths struct pointer
// from Bgp_Global_AfiSafi. If the receiver or the field UseMultiplePaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi) GetUseMultiplePaths() *Bgp_Global_AfiSafi_UseMultiplePaths {
	if t != nil && t.UseMultiplePaths != nil {
		return t.UseMultiplePaths
	}
	return nil
}

// GetAfiSafiName retrieves the value of the leaf AfiSafiName from the Bgp_Global_AfiSafi
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AfiSafiName is set, it can safely use t.GetAfiSafiName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AfiSafiName == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi) GetAfiSafiName() E_BgpTypes_AFI_SAFI_TYPE {
	if t == nil || t.AfiSafiName == 0 {
		return 0
	}
	return t.AfiSafiName
}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_Global_AfiSafi
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetTotalPaths retrieves the value of the leaf TotalPaths from the Bgp_Global_AfiSafi
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TotalPaths is set, it can safely use t.GetTotalPaths()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TotalPaths == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi) GetTotalPaths() uint32 {
	if t == nil || t.TotalPaths == nil {
		return 0
	}
	return *t.TotalPaths
}

// GetTotalPrefixes retrieves the value of the leaf TotalPrefixes from the Bgp_Global_AfiSafi
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TotalPrefixes is set, it can safely use t.GetTotalPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TotalPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi) GetTotalPrefixes() uint32 {
	if t == nil || t.TotalPrefixes == nil {
		return 0
	}
	return *t.TotalPrefixes
}

// ΛListKeyMap returns the keys of the Bgp_Global_AfiSafi struct, which is a YANG list entry.
func (t *Bgp_Global_AfiSafi) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"afi-safi-name": t.AfiSafiName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Global_AfiSafi_AddPaths represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/add-paths YANG schema element.
type Bgp_Global_AfiSafi_AddPaths struct {
	EligiblePrefixPolicy *string `path:"state/eligible-prefix-policy" module:"openconfig-bgp"`
	Receive              *bool   `path:"state/receive" module:"openconfig-bgp"`
	Send                 *bool   `path:"state/send" module:"openconfig-bgp"`
	SendMax              *uint8  `path:"state/send-max" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_AddPaths) IsYANGGoStruct() {}

// GetEligiblePrefixPolicy retrieves the value of the leaf EligiblePrefixPolicy from the Bgp_Global_AfiSafi_AddPaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EligiblePrefixPolicy is set, it can safely use t.GetEligiblePrefixPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EligiblePrefixPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_AddPaths) GetEligiblePrefixPolicy() string {
	if t == nil || t.EligiblePrefixPolicy == nil {
		return ""
	}
	return *t.EligiblePrefixPolicy
}

// GetReceive retrieves the value of the leaf Receive from the Bgp_Global_AfiSafi_AddPaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Receive is set, it can safely use t.GetReceive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Receive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_AddPaths) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the Bgp_Global_AfiSafi_AddPaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Send is set, it can safely use t.GetSend()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Send == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_AddPaths) GetSend() bool {
	if t == nil || t.Send == nil {
		return false
	}
	return *t.Send
}

// GetSendMax retrieves the value of the leaf SendMax from the Bgp_Global_AfiSafi_AddPaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SendMax is set, it can safely use t.GetSendMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SendMax == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_AddPaths) GetSendMax() uint8 {
	if t == nil || t.SendMax == nil {
		return 0
	}
	return *t.SendMax
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_AddPaths) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Global_AfiSafi_GracefulRestart represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/graceful-restart YANG schema element.
type Bgp_Global_AfiSafi_GracefulRestart struct {
	Enabled *bool `path:"state/enabled" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_GracefulRestart) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_Global_AfiSafi_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_GracefulRestart) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_Ipv4LabeledUnicast represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast YANG schema element.
type Bgp_Global_AfiSafi_Ipv4LabeledUnicast struct {
	PrefixLimit *Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_Ipv4LabeledUnicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_Ipv4LabeledUnicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi_Ipv4LabeledUnicast) GetOrCreatePrefixLimit() *Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Global_AfiSafi_Ipv4LabeledUnicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi_Ipv4LabeledUnicast) GetPrefixLimit() *Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_Ipv4LabeledUnicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_Ipv4LabeledUnicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_Ipv4LabeledUnicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit YANG schema element.
type Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_Ipv4Unicast represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/ipv4-unicast YANG schema element.
type Bgp_Global_AfiSafi_Ipv4Unicast struct {
	PrefixLimit      *Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
	SendDefaultRoute *bool                                       `path:"state/send-default-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_Ipv4Unicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi_Ipv4Unicast) GetOrCreatePrefixLimit() *Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Global_AfiSafi_Ipv4Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi_Ipv4Unicast) GetPrefixLimit() *Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetSendDefaultRoute retrieves the value of the leaf SendDefaultRoute from the Bgp_Global_AfiSafi_Ipv4Unicast
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SendDefaultRoute is set, it can safely use t.GetSendDefaultRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SendDefaultRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv4Unicast) GetSendDefaultRoute() bool {
	if t == nil || t.SendDefaultRoute == nil {
		return false
	}
	return *t.SendDefaultRoute
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/ipv4-unicast/prefix-limit YANG schema element.
type Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_Ipv4Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_Ipv6LabeledUnicast represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast YANG schema element.
type Bgp_Global_AfiSafi_Ipv6LabeledUnicast struct {
	PrefixLimit *Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_Ipv6LabeledUnicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_Ipv6LabeledUnicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi_Ipv6LabeledUnicast) GetOrCreatePrefixLimit() *Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Global_AfiSafi_Ipv6LabeledUnicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi_Ipv6LabeledUnicast) GetPrefixLimit() *Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_Ipv6LabeledUnicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_Ipv6LabeledUnicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_Ipv6LabeledUnicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit YANG schema element.
type Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_Ipv6Unicast represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/ipv6-unicast YANG schema element.
type Bgp_Global_AfiSafi_Ipv6Unicast struct {
	PrefixLimit      *Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
	SendDefaultRoute *bool                                       `path:"state/send-default-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_Ipv6Unicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi_Ipv6Unicast) GetOrCreatePrefixLimit() *Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Global_AfiSafi_Ipv6Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi_Ipv6Unicast) GetPrefixLimit() *Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetSendDefaultRoute retrieves the value of the leaf SendDefaultRoute from the Bgp_Global_AfiSafi_Ipv6Unicast
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SendDefaultRoute is set, it can safely use t.GetSendDefaultRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SendDefaultRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv6Unicast) GetSendDefaultRoute() bool {
	if t == nil || t.SendDefaultRoute == nil {
		return false
	}
	return *t.SendDefaultRoute
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/ipv6-unicast/prefix-limit YANG schema element.
type Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_Ipv6Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_L2VpnEvpn represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/l2vpn-evpn YANG schema element.
type Bgp_Global_AfiSafi_L2VpnEvpn struct {
	PrefixLimit *Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_L2VpnEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_L2VpnEvpn) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi_L2VpnEvpn) GetOrCreatePrefixLimit() *Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Global_AfiSafi_L2VpnEvpn. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi_L2VpnEvpn) GetPrefixLimit() *Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_L2VpnEvpn) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_L2VpnEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_L2VpnEvpn) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/l2vpn-evpn/prefix-limit YANG schema element.
type Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_L2VpnEvpn_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_L2VpnVpls represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/l2vpn-vpls YANG schema element.
type Bgp_Global_AfiSafi_L2VpnVpls struct {
	PrefixLimit *Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_L2VpnVpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_L2VpnVpls) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi_L2VpnVpls) GetOrCreatePrefixLimit() *Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Global_AfiSafi_L2VpnVpls. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi_L2VpnVpls) GetPrefixLimit() *Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_L2VpnVpls) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_L2VpnVpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_L2VpnVpls) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/l2vpn-vpls/prefix-limit YANG schema element.
type Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_L2VpnVpls_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_L3VpnIpv4Multicast represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast YANG schema element.
type Bgp_Global_AfiSafi_L3VpnIpv4Multicast struct {
	PrefixLimit *Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_L3VpnIpv4Multicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_L3VpnIpv4Multicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Multicast) GetOrCreatePrefixLimit() *Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Global_AfiSafi_L3VpnIpv4Multicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Multicast) GetPrefixLimit() *Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Multicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_L3VpnIpv4Multicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Multicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit YANG schema element.
type Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_L3VpnIpv4Unicast represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast YANG schema element.
type Bgp_Global_AfiSafi_L3VpnIpv4Unicast struct {
	PrefixLimit *Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_L3VpnIpv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_L3VpnIpv4Unicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Unicast) GetOrCreatePrefixLimit() *Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Global_AfiSafi_L3VpnIpv4Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Unicast) GetPrefixLimit() *Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_L3VpnIpv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit YANG schema element.
type Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_L3VpnIpv6Multicast represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast YANG schema element.
type Bgp_Global_AfiSafi_L3VpnIpv6Multicast struct {
	PrefixLimit *Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_L3VpnIpv6Multicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_L3VpnIpv6Multicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Multicast) GetOrCreatePrefixLimit() *Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Global_AfiSafi_L3VpnIpv6Multicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Multicast) GetPrefixLimit() *Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Multicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_L3VpnIpv6Multicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Multicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit YANG schema element.
type Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_L3VpnIpv6Unicast represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast YANG schema element.
type Bgp_Global_AfiSafi_L3VpnIpv6Unicast struct {
	PrefixLimit *Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_L3VpnIpv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_L3VpnIpv6Unicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Unicast) GetOrCreatePrefixLimit() *Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Global_AfiSafi_L3VpnIpv6Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Unicast) GetPrefixLimit() *Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_L3VpnIpv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit YANG schema element.
type Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_RouteSelectionOptions represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/route-selection-options YANG schema element.
type Bgp_Global_AfiSafi_RouteSelectionOptions struct {
	AdvertiseInactiveRoutes *bool `path:"state/advertise-inactive-routes" module:"openconfig-bgp"`
	AlwaysCompareMed        *bool `path:"state/always-compare-med" module:"openconfig-bgp"`
	EnableAigp              *bool `path:"state/enable-aigp" module:"openconfig-bgp"`
	ExternalCompareRouterId *bool `path:"state/external-compare-router-id" module:"openconfig-bgp"`
	IgnoreAsPathLength      *bool `path:"state/ignore-as-path-length" module:"openconfig-bgp"`
	IgnoreNextHopIgpMetric  *bool `path:"state/ignore-next-hop-igp-metric" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_RouteSelectionOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_RouteSelectionOptions) IsYANGGoStruct() {}

// GetAdvertiseInactiveRoutes retrieves the value of the leaf AdvertiseInactiveRoutes from the Bgp_Global_AfiSafi_RouteSelectionOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdvertiseInactiveRoutes is set, it can safely use t.GetAdvertiseInactiveRoutes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdvertiseInactiveRoutes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_RouteSelectionOptions) GetAdvertiseInactiveRoutes() bool {
	if t == nil || t.AdvertiseInactiveRoutes == nil {
		return false
	}
	return *t.AdvertiseInactiveRoutes
}

// GetAlwaysCompareMed retrieves the value of the leaf AlwaysCompareMed from the Bgp_Global_AfiSafi_RouteSelectionOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AlwaysCompareMed is set, it can safely use t.GetAlwaysCompareMed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AlwaysCompareMed == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_RouteSelectionOptions) GetAlwaysCompareMed() bool {
	if t == nil || t.AlwaysCompareMed == nil {
		return false
	}
	return *t.AlwaysCompareMed
}

// GetEnableAigp retrieves the value of the leaf EnableAigp from the Bgp_Global_AfiSafi_RouteSelectionOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EnableAigp is set, it can safely use t.GetEnableAigp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EnableAigp == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_RouteSelectionOptions) GetEnableAigp() bool {
	if t == nil || t.EnableAigp == nil {
		return false
	}
	return *t.EnableAigp
}

// GetExternalCompareRouterId retrieves the value of the leaf ExternalCompareRouterId from the Bgp_Global_AfiSafi_RouteSelectionOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExternalCompareRouterId is set, it can safely use t.GetExternalCompareRouterId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExternalCompareRouterId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_RouteSelectionOptions) GetExternalCompareRouterId() bool {
	if t == nil || t.ExternalCompareRouterId == nil {
		return true
	}
	return *t.ExternalCompareRouterId
}

// GetIgnoreAsPathLength retrieves the value of the leaf IgnoreAsPathLength from the Bgp_Global_AfiSafi_RouteSelectionOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if IgnoreAsPathLength is set, it can safely use t.GetIgnoreAsPathLength()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.IgnoreAsPathLength == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_RouteSelectionOptions) GetIgnoreAsPathLength() bool {
	if t == nil || t.IgnoreAsPathLength == nil {
		return false
	}
	return *t.IgnoreAsPathLength
}

// GetIgnoreNextHopIgpMetric retrieves the value of the leaf IgnoreNextHopIgpMetric from the Bgp_Global_AfiSafi_RouteSelectionOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if IgnoreNextHopIgpMetric is set, it can safely use t.GetIgnoreNextHopIgpMetric()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.IgnoreNextHopIgpMetric == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_RouteSelectionOptions) GetIgnoreNextHopIgpMetric() bool {
	if t == nil || t.IgnoreNextHopIgpMetric == nil {
		return false
	}
	return *t.IgnoreNextHopIgpMetric
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_RouteSelectionOptions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_RouteSelectionOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_RouteSelectionOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_SrtePolicyIpv4 represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/srte-policy-ipv4 YANG schema element.
type Bgp_Global_AfiSafi_SrtePolicyIpv4 struct {
	PrefixLimit *Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_SrtePolicyIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_SrtePolicyIpv4) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv4) GetOrCreatePrefixLimit() *Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Global_AfiSafi_SrtePolicyIpv4. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv4) GetPrefixLimit() *Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv4) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_SrtePolicyIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit YANG schema element.
type Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv4_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_SrtePolicyIpv6 represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/srte-policy-ipv6 YANG schema element.
type Bgp_Global_AfiSafi_SrtePolicyIpv6 struct {
	PrefixLimit *Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_SrtePolicyIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_SrtePolicyIpv6) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv6) GetOrCreatePrefixLimit() *Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Global_AfiSafi_SrtePolicyIpv6. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv6) GetPrefixLimit() *Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv6) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_SrtePolicyIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit YANG schema element.
type Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_SrtePolicyIpv6_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_UseMultiplePaths represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/use-multiple-paths YANG schema element.
type Bgp_Global_AfiSafi_UseMultiplePaths struct {
	Ebgp    *Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp `path:"ebgp" module:"openconfig-bgp"`
	Enabled *bool                                     `path:"state/enabled" module:"openconfig-bgp"`
	Ibgp    *Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp `path:"ibgp" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_UseMultiplePaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_UseMultiplePaths) IsYANGGoStruct() {}

// GetOrCreateEbgp retrieves the value of the Ebgp field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi_UseMultiplePaths) GetOrCreateEbgp() *Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp {
	if t.Ebgp != nil {
		return t.Ebgp
	}
	t.Ebgp = &Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp{}
	return t.Ebgp
}

// GetOrCreateIbgp retrieves the value of the Ibgp field
// or returns the existing field if it already exists.
func (t *Bgp_Global_AfiSafi_UseMultiplePaths) GetOrCreateIbgp() *Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp {
	if t.Ibgp != nil {
		return t.Ibgp
	}
	t.Ibgp = &Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp{}
	return t.Ibgp
}

// GetEbgp returns the value of the Ebgp struct pointer
// from Bgp_Global_AfiSafi_UseMultiplePaths. If the receiver or the field Ebgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi_UseMultiplePaths) GetEbgp() *Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp {
	if t != nil && t.Ebgp != nil {
		return t.Ebgp
	}
	return nil
}

// GetIbgp returns the value of the Ibgp struct pointer
// from Bgp_Global_AfiSafi_UseMultiplePaths. If the receiver or the field Ibgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_AfiSafi_UseMultiplePaths) GetIbgp() *Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp {
	if t != nil && t.Ibgp != nil {
		return t.Ibgp
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_Global_AfiSafi_UseMultiplePaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_UseMultiplePaths) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_UseMultiplePaths) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_UseMultiplePaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_UseMultiplePaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/use-multiple-paths/ebgp YANG schema element.
type Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp struct {
	AllowMultipleAs *bool   `path:"state/allow-multiple-as" module:"openconfig-bgp"`
	MaximumPaths    *uint32 `path:"state/maximum-paths" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp) IsYANGGoStruct() {}

// GetAllowMultipleAs retrieves the value of the leaf AllowMultipleAs from the Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AllowMultipleAs is set, it can safely use t.GetAllowMultipleAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AllowMultipleAs == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp) GetAllowMultipleAs() bool {
	if t == nil || t.AllowMultipleAs == nil {
		return false
	}
	return *t.AllowMultipleAs
}

// GetMaximumPaths retrieves the value of the leaf MaximumPaths from the Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaximumPaths is set, it can safely use t.GetMaximumPaths()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaximumPaths == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp) GetMaximumPaths() uint32 {
	if t == nil || t.MaximumPaths == nil {
		return 1
	}
	return *t.MaximumPaths
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_UseMultiplePaths_Ebgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp represents the /openconfig-bgp/bgp/global/afi-safis/afi-safi/use-multiple-paths/ibgp YANG schema element.
type Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp struct {
	MaximumPaths *uint32 `path:"state/maximum-paths" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp) IsYANGGoStruct() {}

// GetMaximumPaths retrieves the value of the leaf MaximumPaths from the Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaximumPaths is set, it can safely use t.GetMaximumPaths()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaximumPaths == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp) GetMaximumPaths() uint32 {
	if t == nil || t.MaximumPaths == nil {
		return 1
	}
	return *t.MaximumPaths
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_AfiSafi_UseMultiplePaths_Ibgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_Confederation represents the /openconfig-bgp/bgp/global/confederation YANG schema element.
type Bgp_Global_Confederation struct {
	Identifier *uint32  `path:"state/identifier" module:"openconfig-bgp"`
	MemberAs   []uint32 `path:"state/member-as" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_Confederation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_Confederation) IsYANGGoStruct() {}

// GetIdentifier retrieves the value of the leaf Identifier from the Bgp_Global_Confederation
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Identifier is set, it can safely use t.GetIdentifier()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Identifier == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_Confederation) GetIdentifier() uint32 {
	if t == nil || t.Identifier == nil {
		return 0
	}
	return *t.Identifier
}

// GetMemberAs retrieves the value of the leaf MemberAs from the Bgp_Global_Confederation
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MemberAs is set, it can safely use t.GetMemberAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MemberAs == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_Confederation) GetMemberAs() []uint32 {
	if t == nil || t.MemberAs == nil {
		return nil
	}
	return t.MemberAs
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_Confederation) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_Confederation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_Confederation) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Global_DefaultRouteDistance represents the /openconfig-bgp/bgp/global/default-route-distance YANG schema element.
type Bgp_Global_DefaultRouteDistance struct {
	ExternalRouteDistance *uint8 `path:"state/external-route-distance" module:"openconfig-bgp"`
	InternalRouteDistance *uint8 `path:"state/internal-route-distance" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_DefaultRouteDistance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_DefaultRouteDistance) IsYANGGoStruct() {}

// GetExternalRouteDistance retrieves the value of the leaf ExternalRouteDistance from the Bgp_Global_DefaultRouteDistance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExternalRouteDistance is set, it can safely use t.GetExternalRouteDistance()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExternalRouteDistance == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_DefaultRouteDistance) GetExternalRouteDistance() uint8 {
	if t == nil || t.ExternalRouteDistance == nil {
		return 0
	}
	return *t.ExternalRouteDistance
}

// GetInternalRouteDistance retrieves the value of the leaf InternalRouteDistance from the Bgp_Global_DefaultRouteDistance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InternalRouteDistance is set, it can safely use t.GetInternalRouteDistance()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InternalRouteDistance == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_DefaultRouteDistance) GetInternalRouteDistance() uint8 {
	if t == nil || t.InternalRouteDistance == nil {
		return 0
	}
	return *t.InternalRouteDistance
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_DefaultRouteDistance) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_DefaultRouteDistance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_DefaultRouteDistance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_DynamicNeighborPrefix represents the /openconfig-bgp/bgp/global/dynamic-neighbor-prefixes/dynamic-neighbor-prefix YANG schema element.
type Bgp_Global_DynamicNeighborPrefix struct {
	PeerGroup *string `path:"state/peer-group" module:"openconfig-bgp"`
	Prefix    *string `path:"state/prefix|prefix" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_DynamicNeighborPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_DynamicNeighborPrefix) IsYANGGoStruct() {}

// GetPeerGroup retrieves the value of the leaf PeerGroup from the Bgp_Global_DynamicNeighborPrefix
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PeerGroup is set, it can safely use t.GetPeerGroup()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PeerGroup == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_DynamicNeighborPrefix) GetPeerGroup() string {
	if t == nil || t.PeerGroup == nil {
		return ""
	}
	return *t.PeerGroup
}

// GetPrefix retrieves the value of the leaf Prefix from the Bgp_Global_DynamicNeighborPrefix
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefix is set, it can safely use t.GetPrefix()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefix == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_DynamicNeighborPrefix) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// ΛListKeyMap returns the keys of the Bgp_Global_DynamicNeighborPrefix struct, which is a YANG list entry.
func (t *Bgp_Global_DynamicNeighborPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_DynamicNeighborPrefix) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_DynamicNeighborPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_DynamicNeighborPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_GracefulRestart represents the /openconfig-bgp/bgp/global/graceful-restart YANG schema element.
type Bgp_Global_GracefulRestart struct {
	Enabled         *bool    `path:"state/enabled" module:"openconfig-bgp"`
	HelperOnly      *bool    `path:"state/helper-only" module:"openconfig-bgp"`
	RestartTime     *uint16  `path:"state/restart-time" module:"openconfig-bgp"`
	StaleRoutesTime *float64 `path:"state/stale-routes-time" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_GracefulRestart) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_Global_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_GracefulRestart) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetHelperOnly retrieves the value of the leaf HelperOnly from the Bgp_Global_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HelperOnly is set, it can safely use t.GetHelperOnly()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HelperOnly == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_GracefulRestart) GetHelperOnly() bool {
	if t == nil || t.HelperOnly == nil {
		return false
	}
	return *t.HelperOnly
}

// GetRestartTime retrieves the value of the leaf RestartTime from the Bgp_Global_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTime is set, it can safely use t.GetRestartTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTime == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_GracefulRestart) GetRestartTime() uint16 {
	if t == nil || t.RestartTime == nil {
		return 0
	}
	return *t.RestartTime
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the Bgp_Global_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if StaleRoutesTime is set, it can safely use t.GetStaleRoutesTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.StaleRoutesTime == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_GracefulRestart) GetStaleRoutesTime() float64 {
	if t == nil || t.StaleRoutesTime == nil {
		return 0.0
	}
	return *t.StaleRoutesTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Global_RouteSelectionOptions represents the /openconfig-bgp/bgp/global/route-selection-options YANG schema element.
type Bgp_Global_RouteSelectionOptions struct {
	AdvertiseInactiveRoutes *bool `path:"state/advertise-inactive-routes" module:"openconfig-bgp"`
	AlwaysCompareMed        *bool `path:"state/always-compare-med" module:"openconfig-bgp"`
	EnableAigp              *bool `path:"state/enable-aigp" module:"openconfig-bgp"`
	ExternalCompareRouterId *bool `path:"state/external-compare-router-id" module:"openconfig-bgp"`
	IgnoreAsPathLength      *bool `path:"state/ignore-as-path-length" module:"openconfig-bgp"`
	IgnoreNextHopIgpMetric  *bool `path:"state/ignore-next-hop-igp-metric" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_RouteSelectionOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_RouteSelectionOptions) IsYANGGoStruct() {}

// GetAdvertiseInactiveRoutes retrieves the value of the leaf AdvertiseInactiveRoutes from the Bgp_Global_RouteSelectionOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdvertiseInactiveRoutes is set, it can safely use t.GetAdvertiseInactiveRoutes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdvertiseInactiveRoutes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_RouteSelectionOptions) GetAdvertiseInactiveRoutes() bool {
	if t == nil || t.AdvertiseInactiveRoutes == nil {
		return false
	}
	return *t.AdvertiseInactiveRoutes
}

// GetAlwaysCompareMed retrieves the value of the leaf AlwaysCompareMed from the Bgp_Global_RouteSelectionOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AlwaysCompareMed is set, it can safely use t.GetAlwaysCompareMed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AlwaysCompareMed == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_RouteSelectionOptions) GetAlwaysCompareMed() bool {
	if t == nil || t.AlwaysCompareMed == nil {
		return false
	}
	return *t.AlwaysCompareMed
}

// GetEnableAigp retrieves the value of the leaf EnableAigp from the Bgp_Global_RouteSelectionOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EnableAigp is set, it can safely use t.GetEnableAigp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EnableAigp == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_RouteSelectionOptions) GetEnableAigp() bool {
	if t == nil || t.EnableAigp == nil {
		return false
	}
	return *t.EnableAigp
}

// GetExternalCompareRouterId retrieves the value of the leaf ExternalCompareRouterId from the Bgp_Global_RouteSelectionOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExternalCompareRouterId is set, it can safely use t.GetExternalCompareRouterId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExternalCompareRouterId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_RouteSelectionOptions) GetExternalCompareRouterId() bool {
	if t == nil || t.ExternalCompareRouterId == nil {
		return true
	}
	return *t.ExternalCompareRouterId
}

// GetIgnoreAsPathLength retrieves the value of the leaf IgnoreAsPathLength from the Bgp_Global_RouteSelectionOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if IgnoreAsPathLength is set, it can safely use t.GetIgnoreAsPathLength()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.IgnoreAsPathLength == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_RouteSelectionOptions) GetIgnoreAsPathLength() bool {
	if t == nil || t.IgnoreAsPathLength == nil {
		return false
	}
	return *t.IgnoreAsPathLength
}

// GetIgnoreNextHopIgpMetric retrieves the value of the leaf IgnoreNextHopIgpMetric from the Bgp_Global_RouteSelectionOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if IgnoreNextHopIgpMetric is set, it can safely use t.GetIgnoreNextHopIgpMetric()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.IgnoreNextHopIgpMetric == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_RouteSelectionOptions) GetIgnoreNextHopIgpMetric() bool {
	if t == nil || t.IgnoreNextHopIgpMetric == nil {
		return false
	}
	return *t.IgnoreNextHopIgpMetric
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_RouteSelectionOptions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_RouteSelectionOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_RouteSelectionOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_UseMultiplePaths represents the /openconfig-bgp/bgp/global/use-multiple-paths YANG schema element.
type Bgp_Global_UseMultiplePaths struct {
	Ebgp    *Bgp_Global_UseMultiplePaths_Ebgp `path:"ebgp" module:"openconfig-bgp"`
	Enabled *bool                             `path:"state/enabled" module:"openconfig-bgp"`
	Ibgp    *Bgp_Global_UseMultiplePaths_Ibgp `path:"ibgp" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_UseMultiplePaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_UseMultiplePaths) IsYANGGoStruct() {}

// GetOrCreateEbgp retrieves the value of the Ebgp field
// or returns the existing field if it already exists.
func (t *Bgp_Global_UseMultiplePaths) GetOrCreateEbgp() *Bgp_Global_UseMultiplePaths_Ebgp {
	if t.Ebgp != nil {
		return t.Ebgp
	}
	t.Ebgp = &Bgp_Global_UseMultiplePaths_Ebgp{}
	return t.Ebgp
}

// GetOrCreateIbgp retrieves the value of the Ibgp field
// or returns the existing field if it already exists.
func (t *Bgp_Global_UseMultiplePaths) GetOrCreateIbgp() *Bgp_Global_UseMultiplePaths_Ibgp {
	if t.Ibgp != nil {
		return t.Ibgp
	}
	t.Ibgp = &Bgp_Global_UseMultiplePaths_Ibgp{}
	return t.Ibgp
}

// GetEbgp returns the value of the Ebgp struct pointer
// from Bgp_Global_UseMultiplePaths. If the receiver or the field Ebgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_UseMultiplePaths) GetEbgp() *Bgp_Global_UseMultiplePaths_Ebgp {
	if t != nil && t.Ebgp != nil {
		return t.Ebgp
	}
	return nil
}

// GetIbgp returns the value of the Ibgp struct pointer
// from Bgp_Global_UseMultiplePaths. If the receiver or the field Ibgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Global_UseMultiplePaths) GetIbgp() *Bgp_Global_UseMultiplePaths_Ibgp {
	if t != nil && t.Ibgp != nil {
		return t.Ibgp
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_Global_UseMultiplePaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_UseMultiplePaths) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_UseMultiplePaths) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_UseMultiplePaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_UseMultiplePaths) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Global_UseMultiplePaths_Ebgp represents the /openconfig-bgp/bgp/global/use-multiple-paths/ebgp YANG schema element.
type Bgp_Global_UseMultiplePaths_Ebgp struct {
	AllowMultipleAs *bool   `path:"state/allow-multiple-as" module:"openconfig-bgp"`
	MaximumPaths    *uint32 `path:"state/maximum-paths" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_UseMultiplePaths_Ebgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_UseMultiplePaths_Ebgp) IsYANGGoStruct() {}

// GetAllowMultipleAs retrieves the value of the leaf AllowMultipleAs from the Bgp_Global_UseMultiplePaths_Ebgp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AllowMultipleAs is set, it can safely use t.GetAllowMultipleAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AllowMultipleAs == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_UseMultiplePaths_Ebgp) GetAllowMultipleAs() bool {
	if t == nil || t.AllowMultipleAs == nil {
		return false
	}
	return *t.AllowMultipleAs
}

// GetMaximumPaths retrieves the value of the leaf MaximumPaths from the Bgp_Global_UseMultiplePaths_Ebgp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaximumPaths is set, it can safely use t.GetMaximumPaths()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaximumPaths == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_UseMultiplePaths_Ebgp) GetMaximumPaths() uint32 {
	if t == nil || t.MaximumPaths == nil {
		return 1
	}
	return *t.MaximumPaths
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_UseMultiplePaths_Ebgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_UseMultiplePaths_Ebgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_UseMultiplePaths_Ebgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Global_UseMultiplePaths_Ibgp represents the /openconfig-bgp/bgp/global/use-multiple-paths/ibgp YANG schema element.
type Bgp_Global_UseMultiplePaths_Ibgp struct {
	MaximumPaths *uint32 `path:"state/maximum-paths" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Global_UseMultiplePaths_Ibgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Global_UseMultiplePaths_Ibgp) IsYANGGoStruct() {}

// GetMaximumPaths retrieves the value of the leaf MaximumPaths from the Bgp_Global_UseMultiplePaths_Ibgp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaximumPaths is set, it can safely use t.GetMaximumPaths()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaximumPaths == nil'
// before retrieving the leaf's value.
func (t *Bgp_Global_UseMultiplePaths_Ibgp) GetMaximumPaths() uint32 {
	if t == nil || t.MaximumPaths == nil {
		return 1
	}
	return *t.MaximumPaths
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Global_UseMultiplePaths_Ibgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Global_UseMultiplePaths_Ibgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Global_UseMultiplePaths_Ibgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor represents the /openconfig-bgp/bgp/neighbors/neighbor YANG schema element.
type Bgp_Neighbor struct {
	AfiSafi                map[E_BgpTypes_AFI_SAFI_TYPE]*Bgp_Neighbor_AfiSafi `path:"afi-safis/afi-safi" module:"openconfig-bgp"`
	ApplyPolicy            *Bgp_Neighbor_ApplyPolicy                          `path:"apply-policy" module:"openconfig-bgp"`
	AsPathOptions          *Bgp_Neighbor_AsPathOptions                        `path:"as-path-options" module:"openconfig-bgp"`
	AuthPassword           *string                                            `path:"state/auth-password" module:"openconfig-bgp"`
	Description            *string                                            `path:"state/description" module:"openconfig-bgp"`
	DynamicallyConfigured  *bool                                              `path:"state/dynamically-configured" module:"openconfig-bgp"`
	EbgpMultihop           *Bgp_Neighbor_EbgpMultihop                         `path:"ebgp-multihop" module:"openconfig-bgp"`
	EnableBfd              *Bgp_Neighbor_EnableBfd                            `path:"enable-bfd" module:"openconfig-bgp"`
	Enabled                *bool                                              `path:"state/enabled" module:"openconfig-bgp"`
	ErrorHandling          *Bgp_Neighbor_ErrorHandling                        `path:"error-handling" module:"openconfig-bgp"`
	EstablishedTransitions *uint64                                            `path:"state/established-transitions" module:"openconfig-bgp"`
	GracefulRestart        *Bgp_Neighbor_GracefulRestart                      `path:"graceful-restart" module:"openconfig-bgp"`
	LastEstablished        *uint64                                            `path:"state/last-established" module:"openconfig-bgp"`
	LocalAs                *uint32                                            `path:"state/local-as" module:"openconfig-bgp"`
	LoggingOptions         *Bgp_Neighbor_LoggingOptions                       `path:"logging-options" module:"openconfig-bgp"`
	Messages               *Bgp_Neighbor_Messages                             `path:"state/messages" module:"openconfig-bgp"`
	NeighborAddress        *string                                            `path:"state/neighbor-address|neighbor-address" module:"openconfig-bgp"`
	PeerAs                 *uint32                                            `path:"state/peer-as" module:"openconfig-bgp"`
	PeerGroup              *string                                            `path:"state/peer-group" module:"openconfig-bgp"`
	PeerType               E_BgpTypes_PeerType                                `path:"state/peer-type" module:"openconfig-bgp"`
	Queues                 *Bgp_Neighbor_Queues                               `path:"state/queues" module:"openconfig-bgp"`
	RemovePrivateAs        E_BgpTypes_RemovePrivateAsOption                   `path:"state/remove-private-as" module:"openconfig-bgp"`
	RouteFlapDamping       *bool                                              `path:"state/route-flap-damping" module:"openconfig-bgp"`
	RouteReflector         *Bgp_Neighbor_RouteReflector                       `path:"route-reflector" module:"openconfig-bgp"`
	SendCommunity          E_BgpTypes_CommunityType                           `path:"state/send-community" module:"openconfig-bgp"`
	SessionState           E_Neighbor_SessionState                            `path:"state/session-state" module:"openconfig-bgp"`
	SupportedCapabilities  []E_BgpTypes_BGP_CAPABILITY                        `path:"state/supported-capabilities" module:"openconfig-bgp"`
	Timers                 *Bgp_Neighbor_Timers                               `path:"timers" module:"openconfig-bgp"`
	Transport              *Bgp_Neighbor_Transport                            `path:"transport" module:"openconfig-bgp"`
	UseMultiplePaths       *Bgp_Neighbor_UseMultiplePaths                     `path:"use-multiple-paths" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor) IsYANGGoStruct() {}

// NewAfiSafi creates a new entry in the AfiSafi list of the
// Bgp_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Neighbor) NewAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) (*Bgp_Neighbor_AfiSafi, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_BgpTypes_AFI_SAFI_TYPE]*Bgp_Neighbor_AfiSafi)
	}

	key := AfiSafiName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AfiSafi[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AfiSafi", key)
	}

	t.AfiSafi[key] = &Bgp_Neighbor_AfiSafi{
		AfiSafiName: AfiSafiName,
	}

	return t.AfiSafi[key], nil
}

// GetOrCreateAfiSafi retrieves the value with the specified keys from
// the receiver Bgp_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Neighbor) GetOrCreateAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) *Bgp_Neighbor_AfiSafi {

	key := AfiSafiName

	if v, ok := t.AfiSafi[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAfiSafi(AfiSafiName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAfiSafi got unexpected error: %v", err))
	}
	return v
}

// GetAfiSafi retrieves the value with the specified key from
// the AfiSafi map field of Bgp_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Neighbor) GetAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) *Bgp_Neighbor_AfiSafi {

	if t == nil {
		return nil
	}

	key := AfiSafiName

	if lm, ok := t.AfiSafi[key]; ok {
		return lm
	}
	return nil
}

// DeleteAfiSafi deletes the value with the specified keys from
// the receiver Bgp_Neighbor. If there is no such element, the function
// is a no-op.
func (t *Bgp_Neighbor) DeleteAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) {
	key := AfiSafiName

	delete(t.AfiSafi, key)
}

// AppendAfiSafi appends the supplied Bgp_Neighbor_AfiSafi struct to the
// list AfiSafi of Bgp_Neighbor. If the key value(s) specified in
// the supplied Bgp_Neighbor_AfiSafi already exist in the list, an error is
// returned.
func (t *Bgp_Neighbor) AppendAfiSafi(v *Bgp_Neighbor_AfiSafi) error {
	key := v.AfiSafiName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_BgpTypes_AFI_SAFI_TYPE]*Bgp_Neighbor_AfiSafi)
	}

	if _, ok := t.AfiSafi[key]; ok {
		return fmt.Errorf("duplicate key for list AfiSafi %v", key)
	}

	t.AfiSafi[key] = v
	return nil
}

// GetOrCreateApplyPolicy retrieves the value of the ApplyPolicy field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor) GetOrCreateApplyPolicy() *Bgp_Neighbor_ApplyPolicy {
	if t.ApplyPolicy != nil {
		return t.ApplyPolicy
	}
	t.ApplyPolicy = &Bgp_Neighbor_ApplyPolicy{}
	return t.ApplyPolicy
}

// GetOrCreateAsPathOptions retrieves the value of the AsPathOptions field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor) GetOrCreateAsPathOptions() *Bgp_Neighbor_AsPathOptions {
	if t.AsPathOptions != nil {
		return t.AsPathOptions
	}
	t.AsPathOptions = &Bgp_Neighbor_AsPathOptions{}
	return t.AsPathOptions
}

// GetOrCreateEbgpMultihop retrieves the value of the EbgpMultihop field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor) GetOrCreateEbgpMultihop() *Bgp_Neighbor_EbgpMultihop {
	if t.EbgpMultihop != nil {
		return t.EbgpMultihop
	}
	t.EbgpMultihop = &Bgp_Neighbor_EbgpMultihop{}
	return t.EbgpMultihop
}

// GetOrCreateEnableBfd retrieves the value of the EnableBfd field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor) GetOrCreateEnableBfd() *Bgp_Neighbor_EnableBfd {
	if t.EnableBfd != nil {
		return t.EnableBfd
	}
	t.EnableBfd = &Bgp_Neighbor_EnableBfd{}
	return t.EnableBfd
}

// GetOrCreateErrorHandling retrieves the value of the ErrorHandling field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor) GetOrCreateErrorHandling() *Bgp_Neighbor_ErrorHandling {
	if t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	t.ErrorHandling = &Bgp_Neighbor_ErrorHandling{}
	return t.ErrorHandling
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor) GetOrCreateGracefulRestart() *Bgp_Neighbor_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &Bgp_Neighbor_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateLoggingOptions retrieves the value of the LoggingOptions field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor) GetOrCreateLoggingOptions() *Bgp_Neighbor_LoggingOptions {
	if t.LoggingOptions != nil {
		return t.LoggingOptions
	}
	t.LoggingOptions = &Bgp_Neighbor_LoggingOptions{}
	return t.LoggingOptions
}

// GetOrCreateMessages retrieves the value of the Messages field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor) GetOrCreateMessages() *Bgp_Neighbor_Messages {
	if t.Messages != nil {
		return t.Messages
	}
	t.Messages = &Bgp_Neighbor_Messages{}
	return t.Messages
}

// GetOrCreateQueues retrieves the value of the Queues field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor) GetOrCreateQueues() *Bgp_Neighbor_Queues {
	if t.Queues != nil {
		return t.Queues
	}
	t.Queues = &Bgp_Neighbor_Queues{}
	return t.Queues
}

// GetOrCreateRouteReflector retrieves the value of the RouteReflector field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor) GetOrCreateRouteReflector() *Bgp_Neighbor_RouteReflector {
	if t.RouteReflector != nil {
		return t.RouteReflector
	}
	t.RouteReflector = &Bgp_Neighbor_RouteReflector{}
	return t.RouteReflector
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor) GetOrCreateTimers() *Bgp_Neighbor_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &Bgp_Neighbor_Timers{}
	return t.Timers
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor) GetOrCreateTransport() *Bgp_Neighbor_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &Bgp_Neighbor_Transport{}
	return t.Transport
}

// GetOrCreateUseMultiplePaths retrieves the value of the UseMultiplePaths field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor) GetOrCreateUseMultiplePaths() *Bgp_Neighbor_UseMultiplePaths {
	if t.UseMultiplePaths != nil {
		return t.UseMultiplePaths
	}
	t.UseMultiplePaths = &Bgp_Neighbor_UseMultiplePaths{}
	return t.UseMultiplePaths
}

// GetApplyPolicy returns the value of the ApplyPolicy struct pointer
// from Bgp_Neighbor. If the receiver or the field ApplyPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor) GetApplyPolicy() *Bgp_Neighbor_ApplyPolicy {
	if t != nil && t.ApplyPolicy != nil {
		return t.ApplyPolicy
	}
	return nil
}

// GetAsPathOptions returns the value of the AsPathOptions struct pointer
// from Bgp_Neighbor. If the receiver or the field AsPathOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor) GetAsPathOptions() *Bgp_Neighbor_AsPathOptions {
	if t != nil && t.AsPathOptions != nil {
		return t.AsPathOptions
	}
	return nil
}

// GetEbgpMultihop returns the value of the EbgpMultihop struct pointer
// from Bgp_Neighbor. If the receiver or the field EbgpMultihop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor) GetEbgpMultihop() *Bgp_Neighbor_EbgpMultihop {
	if t != nil && t.EbgpMultihop != nil {
		return t.EbgpMultihop
	}
	return nil
}

// GetEnableBfd returns the value of the EnableBfd struct pointer
// from Bgp_Neighbor. If the receiver or the field EnableBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor) GetEnableBfd() *Bgp_Neighbor_EnableBfd {
	if t != nil && t.EnableBfd != nil {
		return t.EnableBfd
	}
	return nil
}

// GetErrorHandling returns the value of the ErrorHandling struct pointer
// from Bgp_Neighbor. If the receiver or the field ErrorHandling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor) GetErrorHandling() *Bgp_Neighbor_ErrorHandling {
	if t != nil && t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from Bgp_Neighbor. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor) GetGracefulRestart() *Bgp_Neighbor_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetLoggingOptions returns the value of the LoggingOptions struct pointer
// from Bgp_Neighbor. If the receiver or the field LoggingOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor) GetLoggingOptions() *Bgp_Neighbor_LoggingOptions {
	if t != nil && t.LoggingOptions != nil {
		return t.LoggingOptions
	}
	return nil
}

// GetMessages returns the value of the Messages struct pointer
// from Bgp_Neighbor. If the receiver or the field Messages is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor) GetMessages() *Bgp_Neighbor_Messages {
	if t != nil && t.Messages != nil {
		return t.Messages
	}
	return nil
}

// GetQueues returns the value of the Queues struct pointer
// from Bgp_Neighbor. If the receiver or the field Queues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor) GetQueues() *Bgp_Neighbor_Queues {
	if t != nil && t.Queues != nil {
		return t.Queues
	}
	return nil
}

// GetRouteReflector returns the value of the RouteReflector struct pointer
// from Bgp_Neighbor. If the receiver or the field RouteReflector is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor) GetRouteReflector() *Bgp_Neighbor_RouteReflector {
	if t != nil && t.RouteReflector != nil {
		return t.RouteReflector
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from Bgp_Neighbor. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor) GetTimers() *Bgp_Neighbor_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from Bgp_Neighbor. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor) GetTransport() *Bgp_Neighbor_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// GetUseMultiplePaths returns the value of the UseMultiplePaths struct pointer
// from Bgp_Neighbor. If the receiver or the field UseMultiplePaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor) GetUseMultiplePaths() *Bgp_Neighbor_UseMultiplePaths {
	if t != nil && t.UseMultiplePaths != nil {
		return t.UseMultiplePaths
	}
	return nil
}

// GetAuthPassword retrieves the value of the leaf AuthPassword from the Bgp_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AuthPassword is set, it can safely use t.GetAuthPassword()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AuthPassword == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor) GetAuthPassword() string {
	if t == nil || t.AuthPassword == nil {
		return ""
	}
	return *t.AuthPassword
}

// GetDescription retrieves the value of the leaf Description from the Bgp_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDynamicallyConfigured retrieves the value of the leaf DynamicallyConfigured from the Bgp_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DynamicallyConfigured is set, it can safely use t.GetDynamicallyConfigured()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DynamicallyConfigured == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor) GetDynamicallyConfigured() bool {
	if t == nil || t.DynamicallyConfigured == nil {
		return false
	}
	return *t.DynamicallyConfigured
}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetEstablishedTransitions retrieves the value of the leaf EstablishedTransitions from the Bgp_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EstablishedTransitions is set, it can safely use t.GetEstablishedTransitions()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EstablishedTransitions == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor) GetEstablishedTransitions() uint64 {
	if t == nil || t.EstablishedTransitions == nil {
		return 0
	}
	return *t.EstablishedTransitions
}

// GetLastEstablished retrieves the value of the leaf LastEstablished from the Bgp_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastEstablished is set, it can safely use t.GetLastEstablished()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastEstablished == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor) GetLastEstablished() uint64 {
	if t == nil || t.LastEstablished == nil {
		return 0
	}
	return *t.LastEstablished
}

// GetLocalAs retrieves the value of the leaf LocalAs from the Bgp_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LocalAs is set, it can safely use t.GetLocalAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LocalAs == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor) GetLocalAs() uint32 {
	if t == nil || t.LocalAs == nil {
		return 0
	}
	return *t.LocalAs
}

// GetNeighborAddress retrieves the value of the leaf NeighborAddress from the Bgp_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NeighborAddress is set, it can safely use t.GetNeighborAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NeighborAddress == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor) GetNeighborAddress() string {
	if t == nil || t.NeighborAddress == nil {
		return ""
	}
	return *t.NeighborAddress
}

// GetPeerAs retrieves the value of the leaf PeerAs from the Bgp_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PeerAs is set, it can safely use t.GetPeerAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PeerAs == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor) GetPeerAs() uint32 {
	if t == nil || t.PeerAs == nil {
		return 0
	}
	return *t.PeerAs
}

// GetPeerGroup retrieves the value of the leaf PeerGroup from the Bgp_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PeerGroup is set, it can safely use t.GetPeerGroup()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PeerGroup == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor) GetPeerGroup() string {
	if t == nil || t.PeerGroup == nil {
		return ""
	}
	return *t.PeerGroup
}

// GetPeerType retrieves the value of the leaf PeerType from the Bgp_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PeerType is set, it can safely use t.GetPeerType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PeerType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor) GetPeerType() E_BgpTypes_PeerType {
	if t == nil || t.PeerType == 0 {
		return 0
	}
	return t.PeerType
}

// GetRemovePrivateAs retrieves the value of the leaf RemovePrivateAs from the Bgp_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemovePrivateAs is set, it can safely use t.GetRemovePrivateAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemovePrivateAs == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor) GetRemovePrivateAs() E_BgpTypes_RemovePrivateAsOption {
	if t == nil || t.RemovePrivateAs == 0 {
		return 0
	}
	return t.RemovePrivateAs
}

// GetRouteFlapDamping retrieves the value of the leaf RouteFlapDamping from the Bgp_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RouteFlapDamping is set, it can safely use t.GetRouteFlapDamping()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RouteFlapDamping == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor) GetRouteFlapDamping() bool {
	if t == nil || t.RouteFlapDamping == nil {
		return false
	}
	return *t.RouteFlapDamping
}

// GetSendCommunity retrieves the value of the leaf SendCommunity from the Bgp_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SendCommunity is set, it can safely use t.GetSendCommunity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SendCommunity == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor) GetSendCommunity() E_BgpTypes_CommunityType {
	if t == nil || t.SendCommunity == 0 {
		return BgpTypes_CommunityType_NONE
	}
	return t.SendCommunity
}

// GetSessionState retrieves the value of the leaf SessionState from the Bgp_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SessionState is set, it can safely use t.GetSessionState()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SessionState == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor) GetSessionState() E_Neighbor_SessionState {
	if t == nil || t.SessionState == 0 {
		return 0
	}
	return t.SessionState
}

// GetSupportedCapabilities retrieves the value of the leaf SupportedCapabilities from the Bgp_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SupportedCapabilities is set, it can safely use t.GetSupportedCapabilities()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SupportedCapabilities == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor) GetSupportedCapabilities() []E_BgpTypes_BGP_CAPABILITY {
	if t == nil || t.SupportedCapabilities == nil {
		return nil
	}
	return t.SupportedCapabilities
}

// ΛListKeyMap returns the keys of the Bgp_Neighbor struct, which is a YANG list entry.
func (t *Bgp_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborAddress == nil {
		return nil, fmt.Errorf("nil value for key NeighborAddress")
	}

	return map[string]interface{}{
		"neighbor-address": *t.NeighborAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_AfiSafi represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi YANG schema element.
type Bgp_Neighbor_AfiSafi struct {
	Active             *bool                                    `path:"state/active" module:"openconfig-bgp"`
	AddPaths           *Bgp_Neighbor_AfiSafi_AddPaths           `path:"add-paths" module:"openconfig-bgp"`
	AfiSafiName        E_BgpTypes_AFI_SAFI_TYPE                 `path:"state/afi-safi-name|afi-safi-name" module:"openconfig-bgp"`
	ApplyPolicy        *Bgp_Neighbor_AfiSafi_ApplyPolicy        `path:"apply-policy" module:"openconfig-bgp"`
	Enabled            *bool                                    `path:"state/enabled" module:"openconfig-bgp"`
	GracefulRestart    *Bgp_Neighbor_AfiSafi_GracefulRestart    `path:"graceful-restart" module:"openconfig-bgp"`
	Ipv4LabeledUnicast *Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast `path:"ipv4-labeled-unicast" module:"openconfig-bgp"`
	Ipv4Unicast        *Bgp_Neighbor_AfiSafi_Ipv4Unicast        `path:"ipv4-unicast" module:"openconfig-bgp"`
	Ipv6LabeledUnicast *Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast `path:"ipv6-labeled-unicast" module:"openconfig-bgp"`
	Ipv6Unicast        *Bgp_Neighbor_AfiSafi_Ipv6Unicast        `path:"ipv6-unicast" module:"openconfig-bgp"`
	L2VpnEvpn          *Bgp_Neighbor_AfiSafi_L2VpnEvpn          `path:"l2vpn-evpn" module:"openconfig-bgp"`
	L2VpnVpls          *Bgp_Neighbor_AfiSafi_L2VpnVpls          `path:"l2vpn-vpls" module:"openconfig-bgp"`
	L3VpnIpv4Multicast *Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast `path:"l3vpn-ipv4-multicast" module:"openconfig-bgp"`
	L3VpnIpv4Unicast   *Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast   `path:"l3vpn-ipv4-unicast" module:"openconfig-bgp"`
	L3VpnIpv6Multicast *Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast `path:"l3vpn-ipv6-multicast" module:"openconfig-bgp"`
	L3VpnIpv6Unicast   *Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast   `path:"l3vpn-ipv6-unicast" module:"openconfig-bgp"`
	Prefixes           *Bgp_Neighbor_AfiSafi_Prefixes           `path:"state/prefixes" module:"openconfig-bgp"`
	SrtePolicyIpv4     *Bgp_Neighbor_AfiSafi_SrtePolicyIpv4     `path:"srte-policy-ipv4" module:"openconfig-bgp"`
	SrtePolicyIpv6     *Bgp_Neighbor_AfiSafi_SrtePolicyIpv6     `path:"srte-policy-ipv6" module:"openconfig-bgp"`
	UseMultiplePaths   *Bgp_Neighbor_AfiSafi_UseMultiplePaths   `path:"use-multiple-paths" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi) IsYANGGoStruct() {}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi) GetOrCreateAddPaths() *Bgp_Neighbor_AfiSafi_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &Bgp_Neighbor_AfiSafi_AddPaths{}
	return t.AddPaths
}

// GetOrCreateApplyPolicy retrieves the value of the ApplyPolicy field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi) GetOrCreateApplyPolicy() *Bgp_Neighbor_AfiSafi_ApplyPolicy {
	if t.ApplyPolicy != nil {
		return t.ApplyPolicy
	}
	t.ApplyPolicy = &Bgp_Neighbor_AfiSafi_ApplyPolicy{}
	return t.ApplyPolicy
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi) GetOrCreateGracefulRestart() *Bgp_Neighbor_AfiSafi_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &Bgp_Neighbor_AfiSafi_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateIpv4LabeledUnicast retrieves the value of the Ipv4LabeledUnicast field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi) GetOrCreateIpv4LabeledUnicast() *Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast {
	if t.Ipv4LabeledUnicast != nil {
		return t.Ipv4LabeledUnicast
	}
	t.Ipv4LabeledUnicast = &Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast{}
	return t.Ipv4LabeledUnicast
}

// GetOrCreateIpv4Unicast retrieves the value of the Ipv4Unicast field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi) GetOrCreateIpv4Unicast() *Bgp_Neighbor_AfiSafi_Ipv4Unicast {
	if t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	t.Ipv4Unicast = &Bgp_Neighbor_AfiSafi_Ipv4Unicast{}
	return t.Ipv4Unicast
}

// GetOrCreateIpv6LabeledUnicast retrieves the value of the Ipv6LabeledUnicast field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi) GetOrCreateIpv6LabeledUnicast() *Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast {
	if t.Ipv6LabeledUnicast != nil {
		return t.Ipv6LabeledUnicast
	}
	t.Ipv6LabeledUnicast = &Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast{}
	return t.Ipv6LabeledUnicast
}

// GetOrCreateIpv6Unicast retrieves the value of the Ipv6Unicast field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi) GetOrCreateIpv6Unicast() *Bgp_Neighbor_AfiSafi_Ipv6Unicast {
	if t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	t.Ipv6Unicast = &Bgp_Neighbor_AfiSafi_Ipv6Unicast{}
	return t.Ipv6Unicast
}

// GetOrCreateL2VpnEvpn retrieves the value of the L2VpnEvpn field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi) GetOrCreateL2VpnEvpn() *Bgp_Neighbor_AfiSafi_L2VpnEvpn {
	if t.L2VpnEvpn != nil {
		return t.L2VpnEvpn
	}
	t.L2VpnEvpn = &Bgp_Neighbor_AfiSafi_L2VpnEvpn{}
	return t.L2VpnEvpn
}

// GetOrCreateL2VpnVpls retrieves the value of the L2VpnVpls field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi) GetOrCreateL2VpnVpls() *Bgp_Neighbor_AfiSafi_L2VpnVpls {
	if t.L2VpnVpls != nil {
		return t.L2VpnVpls
	}
	t.L2VpnVpls = &Bgp_Neighbor_AfiSafi_L2VpnVpls{}
	return t.L2VpnVpls
}

// GetOrCreateL3VpnIpv4Multicast retrieves the value of the L3VpnIpv4Multicast field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi) GetOrCreateL3VpnIpv4Multicast() *Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast {
	if t.L3VpnIpv4Multicast != nil {
		return t.L3VpnIpv4Multicast
	}
	t.L3VpnIpv4Multicast = &Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast{}
	return t.L3VpnIpv4Multicast
}

// GetOrCreateL3VpnIpv4Unicast retrieves the value of the L3VpnIpv4Unicast field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi) GetOrCreateL3VpnIpv4Unicast() *Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast {
	if t.L3VpnIpv4Unicast != nil {
		return t.L3VpnIpv4Unicast
	}
	t.L3VpnIpv4Unicast = &Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast{}
	return t.L3VpnIpv4Unicast
}

// GetOrCreateL3VpnIpv6Multicast retrieves the value of the L3VpnIpv6Multicast field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi) GetOrCreateL3VpnIpv6Multicast() *Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast {
	if t.L3VpnIpv6Multicast != nil {
		return t.L3VpnIpv6Multicast
	}
	t.L3VpnIpv6Multicast = &Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast{}
	return t.L3VpnIpv6Multicast
}

// GetOrCreateL3VpnIpv6Unicast retrieves the value of the L3VpnIpv6Unicast field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi) GetOrCreateL3VpnIpv6Unicast() *Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast {
	if t.L3VpnIpv6Unicast != nil {
		return t.L3VpnIpv6Unicast
	}
	t.L3VpnIpv6Unicast = &Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast{}
	return t.L3VpnIpv6Unicast
}

// GetOrCreatePrefixes retrieves the value of the Prefixes field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi) GetOrCreatePrefixes() *Bgp_Neighbor_AfiSafi_Prefixes {
	if t.Prefixes != nil {
		return t.Prefixes
	}
	t.Prefixes = &Bgp_Neighbor_AfiSafi_Prefixes{}
	return t.Prefixes
}

// GetOrCreateSrtePolicyIpv4 retrieves the value of the SrtePolicyIpv4 field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi) GetOrCreateSrtePolicyIpv4() *Bgp_Neighbor_AfiSafi_SrtePolicyIpv4 {
	if t.SrtePolicyIpv4 != nil {
		return t.SrtePolicyIpv4
	}
	t.SrtePolicyIpv4 = &Bgp_Neighbor_AfiSafi_SrtePolicyIpv4{}
	return t.SrtePolicyIpv4
}

// GetOrCreateSrtePolicyIpv6 retrieves the value of the SrtePolicyIpv6 field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi) GetOrCreateSrtePolicyIpv6() *Bgp_Neighbor_AfiSafi_SrtePolicyIpv6 {
	if t.SrtePolicyIpv6 != nil {
		return t.SrtePolicyIpv6
	}
	t.SrtePolicyIpv6 = &Bgp_Neighbor_AfiSafi_SrtePolicyIpv6{}
	return t.SrtePolicyIpv6
}

// GetOrCreateUseMultiplePaths retrieves the value of the UseMultiplePaths field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi) GetOrCreateUseMultiplePaths() *Bgp_Neighbor_AfiSafi_UseMultiplePaths {
	if t.UseMultiplePaths != nil {
		return t.UseMultiplePaths
	}
	t.UseMultiplePaths = &Bgp_Neighbor_AfiSafi_UseMultiplePaths{}
	return t.UseMultiplePaths
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from Bgp_Neighbor_AfiSafi. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi) GetAddPaths() *Bgp_Neighbor_AfiSafi_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetApplyPolicy returns the value of the ApplyPolicy struct pointer
// from Bgp_Neighbor_AfiSafi. If the receiver or the field ApplyPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi) GetApplyPolicy() *Bgp_Neighbor_AfiSafi_ApplyPolicy {
	if t != nil && t.ApplyPolicy != nil {
		return t.ApplyPolicy
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from Bgp_Neighbor_AfiSafi. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi) GetGracefulRestart() *Bgp_Neighbor_AfiSafi_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetIpv4LabeledUnicast returns the value of the Ipv4LabeledUnicast struct pointer
// from Bgp_Neighbor_AfiSafi. If the receiver or the field Ipv4LabeledUnicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi) GetIpv4LabeledUnicast() *Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast {
	if t != nil && t.Ipv4LabeledUnicast != nil {
		return t.Ipv4LabeledUnicast
	}
	return nil
}

// GetIpv4Unicast returns the value of the Ipv4Unicast struct pointer
// from Bgp_Neighbor_AfiSafi. If the receiver or the field Ipv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi) GetIpv4Unicast() *Bgp_Neighbor_AfiSafi_Ipv4Unicast {
	if t != nil && t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	return nil
}

// GetIpv6LabeledUnicast returns the value of the Ipv6LabeledUnicast struct pointer
// from Bgp_Neighbor_AfiSafi. If the receiver or the field Ipv6LabeledUnicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi) GetIpv6LabeledUnicast() *Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast {
	if t != nil && t.Ipv6LabeledUnicast != nil {
		return t.Ipv6LabeledUnicast
	}
	return nil
}

// GetIpv6Unicast returns the value of the Ipv6Unicast struct pointer
// from Bgp_Neighbor_AfiSafi. If the receiver or the field Ipv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi) GetIpv6Unicast() *Bgp_Neighbor_AfiSafi_Ipv6Unicast {
	if t != nil && t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	return nil
}

// GetL2VpnEvpn returns the value of the L2VpnEvpn struct pointer
// from Bgp_Neighbor_AfiSafi. If the receiver or the field L2VpnEvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi) GetL2VpnEvpn() *Bgp_Neighbor_AfiSafi_L2VpnEvpn {
	if t != nil && t.L2VpnEvpn != nil {
		return t.L2VpnEvpn
	}
	return nil
}

// GetL2VpnVpls returns the value of the L2VpnVpls struct pointer
// from Bgp_Neighbor_AfiSafi. If the receiver or the field L2VpnVpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi) GetL2VpnVpls() *Bgp_Neighbor_AfiSafi_L2VpnVpls {
	if t != nil && t.L2VpnVpls != nil {
		return t.L2VpnVpls
	}
	return nil
}

// GetL3VpnIpv4Multicast returns the value of the L3VpnIpv4Multicast struct pointer
// from Bgp_Neighbor_AfiSafi. If the receiver or the field L3VpnIpv4Multicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi) GetL3VpnIpv4Multicast() *Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast {
	if t != nil && t.L3VpnIpv4Multicast != nil {
		return t.L3VpnIpv4Multicast
	}
	return nil
}

// GetL3VpnIpv4Unicast returns the value of the L3VpnIpv4Unicast struct pointer
// from Bgp_Neighbor_AfiSafi. If the receiver or the field L3VpnIpv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi) GetL3VpnIpv4Unicast() *Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast {
	if t != nil && t.L3VpnIpv4Unicast != nil {
		return t.L3VpnIpv4Unicast
	}
	return nil
}

// GetL3VpnIpv6Multicast returns the value of the L3VpnIpv6Multicast struct pointer
// from Bgp_Neighbor_AfiSafi. If the receiver or the field L3VpnIpv6Multicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi) GetL3VpnIpv6Multicast() *Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast {
	if t != nil && t.L3VpnIpv6Multicast != nil {
		return t.L3VpnIpv6Multicast
	}
	return nil
}

// GetL3VpnIpv6Unicast returns the value of the L3VpnIpv6Unicast struct pointer
// from Bgp_Neighbor_AfiSafi. If the receiver or the field L3VpnIpv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi) GetL3VpnIpv6Unicast() *Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast {
	if t != nil && t.L3VpnIpv6Unicast != nil {
		return t.L3VpnIpv6Unicast
	}
	return nil
}

// GetPrefixes returns the value of the Prefixes struct pointer
// from Bgp_Neighbor_AfiSafi. If the receiver or the field Prefixes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi) GetPrefixes() *Bgp_Neighbor_AfiSafi_Prefixes {
	if t != nil && t.Prefixes != nil {
		return t.Prefixes
	}
	return nil
}

// GetSrtePolicyIpv4 returns the value of the SrtePolicyIpv4 struct pointer
// from Bgp_Neighbor_AfiSafi. If the receiver or the field SrtePolicyIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi) GetSrtePolicyIpv4() *Bgp_Neighbor_AfiSafi_SrtePolicyIpv4 {
	if t != nil && t.SrtePolicyIpv4 != nil {
		return t.SrtePolicyIpv4
	}
	return nil
}

// GetSrtePolicyIpv6 returns the value of the SrtePolicyIpv6 struct pointer
// from Bgp_Neighbor_AfiSafi. If the receiver or the field SrtePolicyIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi) GetSrtePolicyIpv6() *Bgp_Neighbor_AfiSafi_SrtePolicyIpv6 {
	if t != nil && t.SrtePolicyIpv6 != nil {
		return t.SrtePolicyIpv6
	}
	return nil
}

// GetUseMultiplePaths returns the value of the UseMultiplePaths struct pointer
// from Bgp_Neighbor_AfiSafi. If the receiver or the field UseMultiplePaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi) GetUseMultiplePaths() *Bgp_Neighbor_AfiSafi_UseMultiplePaths {
	if t != nil && t.UseMultiplePaths != nil {
		return t.UseMultiplePaths
	}
	return nil
}

// GetActive retrieves the value of the leaf Active from the Bgp_Neighbor_AfiSafi
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Active is set, it can safely use t.GetActive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Active == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi) GetActive() bool {
	if t == nil || t.Active == nil {
		return false
	}
	return *t.Active
}

// GetAfiSafiName retrieves the value of the leaf AfiSafiName from the Bgp_Neighbor_AfiSafi
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AfiSafiName is set, it can safely use t.GetAfiSafiName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AfiSafiName == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi) GetAfiSafiName() E_BgpTypes_AFI_SAFI_TYPE {
	if t == nil || t.AfiSafiName == 0 {
		return 0
	}
	return t.AfiSafiName
}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_Neighbor_AfiSafi
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// ΛListKeyMap returns the keys of the Bgp_Neighbor_AfiSafi struct, which is a YANG list entry.
func (t *Bgp_Neighbor_AfiSafi) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"afi-safi-name": t.AfiSafiName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_AfiSafi_AddPaths represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/add-paths YANG schema element.
type Bgp_Neighbor_AfiSafi_AddPaths struct {
	EligiblePrefixPolicy *string `path:"state/eligible-prefix-policy" module:"openconfig-bgp"`
	Receive              *bool   `path:"state/receive" module:"openconfig-bgp"`
	Send                 *bool   `path:"state/send" module:"openconfig-bgp"`
	SendMax              *uint8  `path:"state/send-max" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_AddPaths) IsYANGGoStruct() {}

// GetEligiblePrefixPolicy retrieves the value of the leaf EligiblePrefixPolicy from the Bgp_Neighbor_AfiSafi_AddPaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EligiblePrefixPolicy is set, it can safely use t.GetEligiblePrefixPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EligiblePrefixPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_AddPaths) GetEligiblePrefixPolicy() string {
	if t == nil || t.EligiblePrefixPolicy == nil {
		return ""
	}
	return *t.EligiblePrefixPolicy
}

// GetReceive retrieves the value of the leaf Receive from the Bgp_Neighbor_AfiSafi_AddPaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Receive is set, it can safely use t.GetReceive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Receive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_AddPaths) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the Bgp_Neighbor_AfiSafi_AddPaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Send is set, it can safely use t.GetSend()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Send == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_AddPaths) GetSend() bool {
	if t == nil || t.Send == nil {
		return false
	}
	return *t.Send
}

// GetSendMax retrieves the value of the leaf SendMax from the Bgp_Neighbor_AfiSafi_AddPaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SendMax is set, it can safely use t.GetSendMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SendMax == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_AddPaths) GetSendMax() uint8 {
	if t == nil || t.SendMax == nil {
		return 0
	}
	return *t.SendMax
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_AddPaths) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_AfiSafi_ApplyPolicy represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/apply-policy YANG schema element.
type Bgp_Neighbor_AfiSafi_ApplyPolicy struct {
	DefaultExportPolicy E_RoutingPolicy_DefaultPolicyType `path:"state/default-export-policy" module:"openconfig-bgp"`
	DefaultImportPolicy E_RoutingPolicy_DefaultPolicyType `path:"state/default-import-policy" module:"openconfig-bgp"`
	ExportPolicy        []string                          `path:"state/export-policy" module:"openconfig-bgp"`
	ImportPolicy        []string                          `path:"state/import-policy" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_ApplyPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_ApplyPolicy) IsYANGGoStruct() {}

// GetDefaultExportPolicy retrieves the value of the leaf DefaultExportPolicy from the Bgp_Neighbor_AfiSafi_ApplyPolicy
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DefaultExportPolicy is set, it can safely use t.GetDefaultExportPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DefaultExportPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_ApplyPolicy) GetDefaultExportPolicy() E_RoutingPolicy_DefaultPolicyType {
	if t == nil || t.DefaultExportPolicy == 0 {
		return RoutingPolicy_DefaultPolicyType_REJECT_ROUTE
	}
	return t.DefaultExportPolicy
}

// GetDefaultImportPolicy retrieves the value of the leaf DefaultImportPolicy from the Bgp_Neighbor_AfiSafi_ApplyPolicy
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DefaultImportPolicy is set, it can safely use t.GetDefaultImportPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DefaultImportPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_ApplyPolicy) GetDefaultImportPolicy() E_RoutingPolicy_DefaultPolicyType {
	if t == nil || t.DefaultImportPolicy == 0 {
		return RoutingPolicy_DefaultPolicyType_REJECT_ROUTE
	}
	return t.DefaultImportPolicy
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the Bgp_Neighbor_AfiSafi_ApplyPolicy
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExportPolicy is set, it can safely use t.GetExportPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExportPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_ApplyPolicy) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the Bgp_Neighbor_AfiSafi_ApplyPolicy
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ImportPolicy is set, it can safely use t.GetImportPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ImportPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_ApplyPolicy) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_ApplyPolicy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_ApplyPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_ApplyPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_GracefulRestart represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/graceful-restart YANG schema element.
type Bgp_Neighbor_AfiSafi_GracefulRestart struct {
	Advertised *bool `path:"state/advertised" module:"openconfig-bgp"`
	Enabled    *bool `path:"state/enabled" module:"openconfig-bgp"`
	Received   *bool `path:"state/received" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_GracefulRestart) IsYANGGoStruct() {}

// GetAdvertised retrieves the value of the leaf Advertised from the Bgp_Neighbor_AfiSafi_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Advertised is set, it can safely use t.GetAdvertised()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Advertised == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_GracefulRestart) GetAdvertised() bool {
	if t == nil || t.Advertised == nil {
		return false
	}
	return *t.Advertised
}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_Neighbor_AfiSafi_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_GracefulRestart) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetReceived retrieves the value of the leaf Received from the Bgp_Neighbor_AfiSafi_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Received is set, it can safely use t.GetReceived()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Received == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_GracefulRestart) GetReceived() bool {
	if t == nil || t.Received == nil {
		return false
	}
	return *t.Received
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv4-labeled-unicast YANG schema element.
type Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast struct {
	PrefixLimit *Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast) GetOrCreatePrefixLimit() *Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast) GetPrefixLimit() *Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit YANG schema element.
type Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_Ipv4Unicast represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv4-unicast YANG schema element.
type Bgp_Neighbor_AfiSafi_Ipv4Unicast struct {
	PrefixLimit      *Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
	SendDefaultRoute *bool                                         `path:"state/send-default-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_Ipv4Unicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi_Ipv4Unicast) GetOrCreatePrefixLimit() *Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Neighbor_AfiSafi_Ipv4Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi_Ipv4Unicast) GetPrefixLimit() *Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetSendDefaultRoute retrieves the value of the leaf SendDefaultRoute from the Bgp_Neighbor_AfiSafi_Ipv4Unicast
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SendDefaultRoute is set, it can safely use t.GetSendDefaultRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SendDefaultRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv4Unicast) GetSendDefaultRoute() bool {
	if t == nil || t.SendDefaultRoute == nil {
		return false
	}
	return *t.SendDefaultRoute
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv4-unicast/prefix-limit YANG schema element.
type Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_Ipv4Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv6-labeled-unicast YANG schema element.
type Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast struct {
	PrefixLimit *Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast) GetOrCreatePrefixLimit() *Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast) GetPrefixLimit() *Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit YANG schema element.
type Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_Ipv6Unicast represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv6-unicast YANG schema element.
type Bgp_Neighbor_AfiSafi_Ipv6Unicast struct {
	PrefixLimit      *Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
	SendDefaultRoute *bool                                         `path:"state/send-default-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_Ipv6Unicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi_Ipv6Unicast) GetOrCreatePrefixLimit() *Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Neighbor_AfiSafi_Ipv6Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi_Ipv6Unicast) GetPrefixLimit() *Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetSendDefaultRoute retrieves the value of the leaf SendDefaultRoute from the Bgp_Neighbor_AfiSafi_Ipv6Unicast
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SendDefaultRoute is set, it can safely use t.GetSendDefaultRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SendDefaultRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv6Unicast) GetSendDefaultRoute() bool {
	if t == nil || t.SendDefaultRoute == nil {
		return false
	}
	return *t.SendDefaultRoute
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/ipv6-unicast/prefix-limit YANG schema element.
type Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_Ipv6Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_L2VpnEvpn represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/l2vpn-evpn YANG schema element.
type Bgp_Neighbor_AfiSafi_L2VpnEvpn struct {
	PrefixLimit *Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_L2VpnEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_L2VpnEvpn) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi_L2VpnEvpn) GetOrCreatePrefixLimit() *Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Neighbor_AfiSafi_L2VpnEvpn. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi_L2VpnEvpn) GetPrefixLimit() *Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_L2VpnEvpn) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_L2VpnEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_L2VpnEvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/l2vpn-evpn/prefix-limit YANG schema element.
type Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_L2VpnEvpn_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_L2VpnVpls represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/l2vpn-vpls YANG schema element.
type Bgp_Neighbor_AfiSafi_L2VpnVpls struct {
	PrefixLimit *Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_L2VpnVpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_L2VpnVpls) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi_L2VpnVpls) GetOrCreatePrefixLimit() *Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Neighbor_AfiSafi_L2VpnVpls. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi_L2VpnVpls) GetPrefixLimit() *Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_L2VpnVpls) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_L2VpnVpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_L2VpnVpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/l2vpn-vpls/prefix-limit YANG schema element.
type Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_L2VpnVpls_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast YANG schema element.
type Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast struct {
	PrefixLimit *Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast) GetOrCreatePrefixLimit() *Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast) GetPrefixLimit() *Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit YANG schema element.
type Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast YANG schema element.
type Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast struct {
	PrefixLimit *Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast) GetOrCreatePrefixLimit() *Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast) GetPrefixLimit() *Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit YANG schema element.
type Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast YANG schema element.
type Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast struct {
	PrefixLimit *Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast) GetOrCreatePrefixLimit() *Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast) GetPrefixLimit() *Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit YANG schema element.
type Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast YANG schema element.
type Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast struct {
	PrefixLimit *Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast) GetOrCreatePrefixLimit() *Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast) GetPrefixLimit() *Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit YANG schema element.
type Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_Prefixes represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes YANG schema element.
type Bgp_Neighbor_AfiSafi_Prefixes struct {
	Installed         *uint32 `path:"installed" module:"openconfig-bgp"`
	Received          *uint32 `path:"received" module:"openconfig-bgp"`
	ReceivedPrePolicy *uint32 `path:"received-pre-policy" module:"openconfig-bgp"`
	Sent              *uint32 `path:"sent" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_Prefixes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_Prefixes) IsYANGGoStruct() {}

// GetInstalled retrieves the value of the leaf Installed from the Bgp_Neighbor_AfiSafi_Prefixes
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Installed is set, it can safely use t.GetInstalled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Installed == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Prefixes) GetInstalled() uint32 {
	if t == nil || t.Installed == nil {
		return 0
	}
	return *t.Installed
}

// GetReceived retrieves the value of the leaf Received from the Bgp_Neighbor_AfiSafi_Prefixes
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Received is set, it can safely use t.GetReceived()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Received == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Prefixes) GetReceived() uint32 {
	if t == nil || t.Received == nil {
		return 0
	}
	return *t.Received
}

// GetReceivedPrePolicy retrieves the value of the leaf ReceivedPrePolicy from the Bgp_Neighbor_AfiSafi_Prefixes
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ReceivedPrePolicy is set, it can safely use t.GetReceivedPrePolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ReceivedPrePolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Prefixes) GetReceivedPrePolicy() uint32 {
	if t == nil || t.ReceivedPrePolicy == nil {
		return 0
	}
	return *t.ReceivedPrePolicy
}

// GetSent retrieves the value of the leaf Sent from the Bgp_Neighbor_AfiSafi_Prefixes
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Sent is set, it can safely use t.GetSent()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Sent == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_Prefixes) GetSent() uint32 {
	if t == nil || t.Sent == nil {
		return 0
	}
	return *t.Sent
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_Prefixes) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_Prefixes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_Prefixes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_AfiSafi_SrtePolicyIpv4 represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4 YANG schema element.
type Bgp_Neighbor_AfiSafi_SrtePolicyIpv4 struct {
	PrefixLimit *Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_SrtePolicyIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_SrtePolicyIpv4) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv4) GetOrCreatePrefixLimit() *Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Neighbor_AfiSafi_SrtePolicyIpv4. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv4) GetPrefixLimit() *Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv4) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_SrtePolicyIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit YANG schema element.
type Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv4_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_SrtePolicyIpv6 represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6 YANG schema element.
type Bgp_Neighbor_AfiSafi_SrtePolicyIpv6 struct {
	PrefixLimit *Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_SrtePolicyIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_SrtePolicyIpv6) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv6) GetOrCreatePrefixLimit() *Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_Neighbor_AfiSafi_SrtePolicyIpv6. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv6) GetPrefixLimit() *Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv6) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_SrtePolicyIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit YANG schema element.
type Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_SrtePolicyIpv6_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_UseMultiplePaths represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths YANG schema element.
type Bgp_Neighbor_AfiSafi_UseMultiplePaths struct {
	Ebgp    *Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp `path:"ebgp" module:"openconfig-bgp"`
	Enabled *bool                                       `path:"state/enabled" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_UseMultiplePaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_UseMultiplePaths) IsYANGGoStruct() {}

// GetOrCreateEbgp retrieves the value of the Ebgp field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_AfiSafi_UseMultiplePaths) GetOrCreateEbgp() *Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp {
	if t.Ebgp != nil {
		return t.Ebgp
	}
	t.Ebgp = &Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp{}
	return t.Ebgp
}

// GetEbgp returns the value of the Ebgp struct pointer
// from Bgp_Neighbor_AfiSafi_UseMultiplePaths. If the receiver or the field Ebgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_AfiSafi_UseMultiplePaths) GetEbgp() *Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp {
	if t != nil && t.Ebgp != nil {
		return t.Ebgp
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_Neighbor_AfiSafi_UseMultiplePaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_UseMultiplePaths) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_UseMultiplePaths) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_UseMultiplePaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_UseMultiplePaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp represents the /openconfig-bgp/bgp/neighbors/neighbor/afi-safis/afi-safi/use-multiple-paths/ebgp YANG schema element.
type Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp struct {
	AllowMultipleAs *bool `path:"state/allow-multiple-as" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp) IsYANGGoStruct() {}

// GetAllowMultipleAs retrieves the value of the leaf AllowMultipleAs from the Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AllowMultipleAs is set, it can safely use t.GetAllowMultipleAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AllowMultipleAs == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp) GetAllowMultipleAs() bool {
	if t == nil || t.AllowMultipleAs == nil {
		return false
	}
	return *t.AllowMultipleAs
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AfiSafi_UseMultiplePaths_Ebgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_ApplyPolicy represents the /openconfig-bgp/bgp/neighbors/neighbor/apply-policy YANG schema element.
type Bgp_Neighbor_ApplyPolicy struct {
	DefaultExportPolicy E_RoutingPolicy_DefaultPolicyType `path:"state/default-export-policy" module:"openconfig-bgp"`
	DefaultImportPolicy E_RoutingPolicy_DefaultPolicyType `path:"state/default-import-policy" module:"openconfig-bgp"`
	ExportPolicy        []string                          `path:"state/export-policy" module:"openconfig-bgp"`
	ImportPolicy        []string                          `path:"state/import-policy" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_ApplyPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_ApplyPolicy) IsYANGGoStruct() {}

// GetDefaultExportPolicy retrieves the value of the leaf DefaultExportPolicy from the Bgp_Neighbor_ApplyPolicy
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DefaultExportPolicy is set, it can safely use t.GetDefaultExportPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DefaultExportPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_ApplyPolicy) GetDefaultExportPolicy() E_RoutingPolicy_DefaultPolicyType {
	if t == nil || t.DefaultExportPolicy == 0 {
		return RoutingPolicy_DefaultPolicyType_REJECT_ROUTE
	}
	return t.DefaultExportPolicy
}

// GetDefaultImportPolicy retrieves the value of the leaf DefaultImportPolicy from the Bgp_Neighbor_ApplyPolicy
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DefaultImportPolicy is set, it can safely use t.GetDefaultImportPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DefaultImportPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_ApplyPolicy) GetDefaultImportPolicy() E_RoutingPolicy_DefaultPolicyType {
	if t == nil || t.DefaultImportPolicy == 0 {
		return RoutingPolicy_DefaultPolicyType_REJECT_ROUTE
	}
	return t.DefaultImportPolicy
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the Bgp_Neighbor_ApplyPolicy
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExportPolicy is set, it can safely use t.GetExportPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExportPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_ApplyPolicy) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the Bgp_Neighbor_ApplyPolicy
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ImportPolicy is set, it can safely use t.GetImportPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ImportPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_ApplyPolicy) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_ApplyPolicy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_ApplyPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_ApplyPolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_AsPathOptions represents the /openconfig-bgp/bgp/neighbors/neighbor/as-path-options YANG schema element.
type Bgp_Neighbor_AsPathOptions struct {
	AllowOwnAs          *uint8 `path:"state/allow-own-as" module:"openconfig-bgp"`
	DisablePeerAsFilter *bool  `path:"state/disable-peer-as-filter" module:"openconfig-bgp"`
	ReplacePeerAs       *bool  `path:"state/replace-peer-as" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_AsPathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_AsPathOptions) IsYANGGoStruct() {}

// GetAllowOwnAs retrieves the value of the leaf AllowOwnAs from the Bgp_Neighbor_AsPathOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AllowOwnAs is set, it can safely use t.GetAllowOwnAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AllowOwnAs == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AsPathOptions) GetAllowOwnAs() uint8 {
	if t == nil || t.AllowOwnAs == nil {
		return 0
	}
	return *t.AllowOwnAs
}

// GetDisablePeerAsFilter retrieves the value of the leaf DisablePeerAsFilter from the Bgp_Neighbor_AsPathOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DisablePeerAsFilter is set, it can safely use t.GetDisablePeerAsFilter()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DisablePeerAsFilter == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AsPathOptions) GetDisablePeerAsFilter() bool {
	if t == nil || t.DisablePeerAsFilter == nil {
		return false
	}
	return *t.DisablePeerAsFilter
}

// GetReplacePeerAs retrieves the value of the leaf ReplacePeerAs from the Bgp_Neighbor_AsPathOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ReplacePeerAs is set, it can safely use t.GetReplacePeerAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ReplacePeerAs == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_AsPathOptions) GetReplacePeerAs() bool {
	if t == nil || t.ReplacePeerAs == nil {
		return false
	}
	return *t.ReplacePeerAs
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_AsPathOptions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_AsPathOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_AsPathOptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_EbgpMultihop represents the /openconfig-bgp/bgp/neighbors/neighbor/ebgp-multihop YANG schema element.
type Bgp_Neighbor_EbgpMultihop struct {
	Enabled     *bool  `path:"state/enabled" module:"openconfig-bgp"`
	MultihopTtl *uint8 `path:"state/multihop-ttl" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_EbgpMultihop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_EbgpMultihop) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_Neighbor_EbgpMultihop
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_EbgpMultihop) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetMultihopTtl retrieves the value of the leaf MultihopTtl from the Bgp_Neighbor_EbgpMultihop
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MultihopTtl is set, it can safely use t.GetMultihopTtl()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MultihopTtl == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_EbgpMultihop) GetMultihopTtl() uint8 {
	if t == nil || t.MultihopTtl == nil {
		return 0
	}
	return *t.MultihopTtl
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_EbgpMultihop) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_EbgpMultihop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_EbgpMultihop) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_EnableBfd represents the /openconfig-bgp/bgp/neighbors/neighbor/enable-bfd YANG schema element.
type Bgp_Neighbor_EnableBfd struct {
	Enabled *bool `path:"state/enabled" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_EnableBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_EnableBfd) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_Neighbor_EnableBfd
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_EnableBfd) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_EnableBfd) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_EnableBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_EnableBfd) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_ErrorHandling represents the /openconfig-bgp/bgp/neighbors/neighbor/error-handling YANG schema element.
type Bgp_Neighbor_ErrorHandling struct {
	ErroneousUpdateMessages *uint32 `path:"state/erroneous-update-messages" module:"openconfig-bgp"`
	TreatAsWithdraw         *bool   `path:"state/treat-as-withdraw" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_ErrorHandling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_ErrorHandling) IsYANGGoStruct() {}

// GetErroneousUpdateMessages retrieves the value of the leaf ErroneousUpdateMessages from the Bgp_Neighbor_ErrorHandling
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ErroneousUpdateMessages is set, it can safely use t.GetErroneousUpdateMessages()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ErroneousUpdateMessages == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_ErrorHandling) GetErroneousUpdateMessages() uint32 {
	if t == nil || t.ErroneousUpdateMessages == nil {
		return 0
	}
	return *t.ErroneousUpdateMessages
}

// GetTreatAsWithdraw retrieves the value of the leaf TreatAsWithdraw from the Bgp_Neighbor_ErrorHandling
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TreatAsWithdraw is set, it can safely use t.GetTreatAsWithdraw()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TreatAsWithdraw == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_ErrorHandling) GetTreatAsWithdraw() bool {
	if t == nil || t.TreatAsWithdraw == nil {
		return false
	}
	return *t.TreatAsWithdraw
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_ErrorHandling) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_ErrorHandling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_ErrorHandling) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_GracefulRestart represents the /openconfig-bgp/bgp/neighbors/neighbor/graceful-restart YANG schema element.
type Bgp_Neighbor_GracefulRestart struct {
	Enabled         *bool                  `path:"state/enabled" module:"openconfig-bgp"`
	HelperOnly      *bool                  `path:"state/helper-only" module:"openconfig-bgp"`
	LocalRestarting *bool                  `path:"state/local-restarting" module:"openconfig-bgp"`
	Mode            E_GracefulRestart_Mode `path:"state/mode" module:"openconfig-bgp"`
	PeerRestartTime *uint16                `path:"state/peer-restart-time" module:"openconfig-bgp"`
	PeerRestarting  *bool                  `path:"state/peer-restarting" module:"openconfig-bgp"`
	RestartTime     *uint16                `path:"state/restart-time" module:"openconfig-bgp"`
	StaleRoutesTime *float64               `path:"state/stale-routes-time" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_GracefulRestart) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_Neighbor_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_GracefulRestart) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetHelperOnly retrieves the value of the leaf HelperOnly from the Bgp_Neighbor_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HelperOnly is set, it can safely use t.GetHelperOnly()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HelperOnly == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_GracefulRestart) GetHelperOnly() bool {
	if t == nil || t.HelperOnly == nil {
		return false
	}
	return *t.HelperOnly
}

// GetLocalRestarting retrieves the value of the leaf LocalRestarting from the Bgp_Neighbor_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LocalRestarting is set, it can safely use t.GetLocalRestarting()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LocalRestarting == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_GracefulRestart) GetLocalRestarting() bool {
	if t == nil || t.LocalRestarting == nil {
		return false
	}
	return *t.LocalRestarting
}

// GetMode retrieves the value of the leaf Mode from the Bgp_Neighbor_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mode is set, it can safely use t.GetMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mode == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_GracefulRestart) GetMode() E_GracefulRestart_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetPeerRestartTime retrieves the value of the leaf PeerRestartTime from the Bgp_Neighbor_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PeerRestartTime is set, it can safely use t.GetPeerRestartTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PeerRestartTime == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_GracefulRestart) GetPeerRestartTime() uint16 {
	if t == nil || t.PeerRestartTime == nil {
		return 0
	}
	return *t.PeerRestartTime
}

// GetPeerRestarting retrieves the value of the leaf PeerRestarting from the Bgp_Neighbor_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PeerRestarting is set, it can safely use t.GetPeerRestarting()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PeerRestarting == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_GracefulRestart) GetPeerRestarting() bool {
	if t == nil || t.PeerRestarting == nil {
		return false
	}
	return *t.PeerRestarting
}

// GetRestartTime retrieves the value of the leaf RestartTime from the Bgp_Neighbor_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTime is set, it can safely use t.GetRestartTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTime == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_GracefulRestart) GetRestartTime() uint16 {
	if t == nil || t.RestartTime == nil {
		return 0
	}
	return *t.RestartTime
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the Bgp_Neighbor_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if StaleRoutesTime is set, it can safely use t.GetStaleRoutesTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.StaleRoutesTime == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_GracefulRestart) GetStaleRoutesTime() float64 {
	if t == nil || t.StaleRoutesTime == nil {
		return 0.0
	}
	return *t.StaleRoutesTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_LoggingOptions represents the /openconfig-bgp/bgp/neighbors/neighbor/logging-options YANG schema element.
type Bgp_Neighbor_LoggingOptions struct {
	LogNeighborStateChanges *bool `path:"state/log-neighbor-state-changes" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_LoggingOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_LoggingOptions) IsYANGGoStruct() {}

// GetLogNeighborStateChanges retrieves the value of the leaf LogNeighborStateChanges from the Bgp_Neighbor_LoggingOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LogNeighborStateChanges is set, it can safely use t.GetLogNeighborStateChanges()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LogNeighborStateChanges == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_LoggingOptions) GetLogNeighborStateChanges() bool {
	if t == nil || t.LogNeighborStateChanges == nil {
		return true
	}
	return *t.LogNeighborStateChanges
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_LoggingOptions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_LoggingOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_LoggingOptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_Messages represents the /openconfig-bgp/bgp/neighbors/neighbor/state/messages YANG schema element.
type Bgp_Neighbor_Messages struct {
	Received *Bgp_Neighbor_Messages_Received `path:"received" module:"openconfig-bgp"`
	Sent     *Bgp_Neighbor_Messages_Sent     `path:"sent" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_Messages implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_Messages) IsYANGGoStruct() {}

// GetOrCreateReceived retrieves the value of the Received field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_Messages) GetOrCreateReceived() *Bgp_Neighbor_Messages_Received {
	if t.Received != nil {
		return t.Received
	}
	t.Received = &Bgp_Neighbor_Messages_Received{}
	return t.Received
}

// GetOrCreateSent retrieves the value of the Sent field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_Messages) GetOrCreateSent() *Bgp_Neighbor_Messages_Sent {
	if t.Sent != nil {
		return t.Sent
	}
	t.Sent = &Bgp_Neighbor_Messages_Sent{}
	return t.Sent
}

// GetReceived returns the value of the Received struct pointer
// from Bgp_Neighbor_Messages. If the receiver or the field Received is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_Messages) GetReceived() *Bgp_Neighbor_Messages_Received {
	if t != nil && t.Received != nil {
		return t.Received
	}
	return nil
}

// GetSent returns the value of the Sent struct pointer
// from Bgp_Neighbor_Messages. If the receiver or the field Sent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_Messages) GetSent() *Bgp_Neighbor_Messages_Sent {
	if t != nil && t.Sent != nil {
		return t.Sent
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_Messages) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_Messages"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_Messages) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_Messages_Received represents the /openconfig-bgp/bgp/neighbors/neighbor/state/messages/received YANG schema element.
type Bgp_Neighbor_Messages_Received struct {
	NOTIFICATION                 *uint64                      `path:"NOTIFICATION" module:"openconfig-bgp"`
	UPDATE                       *uint64                      `path:"UPDATE" module:"openconfig-bgp"`
	LastNotificationErrorCode    E_BgpTypes_BGP_ERROR_CODE    `path:"last-notification-error-code" module:"openconfig-bgp"`
	LastNotificationErrorSubcode E_BgpTypes_BGP_ERROR_SUBCODE `path:"last-notification-error-subcode" module:"openconfig-bgp"`
	LastNotificationTime         *uint64                      `path:"last-notification-time" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_Messages_Received implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_Messages_Received) IsYANGGoStruct() {}

// GetNOTIFICATION retrieves the value of the leaf NOTIFICATION from the Bgp_Neighbor_Messages_Received
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NOTIFICATION is set, it can safely use t.GetNOTIFICATION()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NOTIFICATION == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Messages_Received) GetNOTIFICATION() uint64 {
	if t == nil || t.NOTIFICATION == nil {
		return 0
	}
	return *t.NOTIFICATION
}

// GetUPDATE retrieves the value of the leaf UPDATE from the Bgp_Neighbor_Messages_Received
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if UPDATE is set, it can safely use t.GetUPDATE()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.UPDATE == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Messages_Received) GetUPDATE() uint64 {
	if t == nil || t.UPDATE == nil {
		return 0
	}
	return *t.UPDATE
}

// GetLastNotificationErrorCode retrieves the value of the leaf LastNotificationErrorCode from the Bgp_Neighbor_Messages_Received
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastNotificationErrorCode is set, it can safely use t.GetLastNotificationErrorCode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastNotificationErrorCode == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Messages_Received) GetLastNotificationErrorCode() E_BgpTypes_BGP_ERROR_CODE {
	if t == nil || t.LastNotificationErrorCode == 0 {
		return 0
	}
	return t.LastNotificationErrorCode
}

// GetLastNotificationErrorSubcode retrieves the value of the leaf LastNotificationErrorSubcode from the Bgp_Neighbor_Messages_Received
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastNotificationErrorSubcode is set, it can safely use t.GetLastNotificationErrorSubcode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastNotificationErrorSubcode == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Messages_Received) GetLastNotificationErrorSubcode() E_BgpTypes_BGP_ERROR_SUBCODE {
	if t == nil || t.LastNotificationErrorSubcode == 0 {
		return 0
	}
	return t.LastNotificationErrorSubcode
}

// GetLastNotificationTime retrieves the value of the leaf LastNotificationTime from the Bgp_Neighbor_Messages_Received
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastNotificationTime is set, it can safely use t.GetLastNotificationTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastNotificationTime == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Messages_Received) GetLastNotificationTime() uint64 {
	if t == nil || t.LastNotificationTime == nil {
		return 0
	}
	return *t.LastNotificationTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_Messages_Received) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_Messages_Received"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_Messages_Received) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Neighbor_Messages_Sent represents the /openconfig-bgp/bgp/neighbors/neighbor/state/messages/sent YANG schema element.
type Bgp_Neighbor_Messages_Sent struct {
	NOTIFICATION                 *uint64                      `path:"NOTIFICATION" module:"openconfig-bgp"`
	UPDATE                       *uint64                      `path:"UPDATE" module:"openconfig-bgp"`
	LastNotificationErrorCode    E_BgpTypes_BGP_ERROR_CODE    `path:"last-notification-error-code" module:"openconfig-bgp"`
	LastNotificationErrorSubcode E_BgpTypes_BGP_ERROR_SUBCODE `path:"last-notification-error-subcode" module:"openconfig-bgp"`
	LastNotificationTime         *uint64                      `path:"last-notification-time" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_Messages_Sent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_Messages_Sent) IsYANGGoStruct() {}

// GetNOTIFICATION retrieves the value of the leaf NOTIFICATION from the Bgp_Neighbor_Messages_Sent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NOTIFICATION is set, it can safely use t.GetNOTIFICATION()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NOTIFICATION == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Messages_Sent) GetNOTIFICATION() uint64 {
	if t == nil || t.NOTIFICATION == nil {
		return 0
	}
	return *t.NOTIFICATION
}

// GetUPDATE retrieves the value of the leaf UPDATE from the Bgp_Neighbor_Messages_Sent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if UPDATE is set, it can safely use t.GetUPDATE()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.UPDATE == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Messages_Sent) GetUPDATE() uint64 {
	if t == nil || t.UPDATE == nil {
		return 0
	}
	return *t.UPDATE
}

// GetLastNotificationErrorCode retrieves the value of the leaf LastNotificationErrorCode from the Bgp_Neighbor_Messages_Sent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastNotificationErrorCode is set, it can safely use t.GetLastNotificationErrorCode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastNotificationErrorCode == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Messages_Sent) GetLastNotificationErrorCode() E_BgpTypes_BGP_ERROR_CODE {
	if t == nil || t.LastNotificationErrorCode == 0 {
		return 0
	}
	return t.LastNotificationErrorCode
}

// GetLastNotificationErrorSubcode retrieves the value of the leaf LastNotificationErrorSubcode from the Bgp_Neighbor_Messages_Sent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastNotificationErrorSubcode is set, it can safely use t.GetLastNotificationErrorSubcode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastNotificationErrorSubcode == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Messages_Sent) GetLastNotificationErrorSubcode() E_BgpTypes_BGP_ERROR_SUBCODE {
	if t == nil || t.LastNotificationErrorSubcode == 0 {
		return 0
	}
	return t.LastNotificationErrorSubcode
}

// GetLastNotificationTime retrieves the value of the leaf LastNotificationTime from the Bgp_Neighbor_Messages_Sent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastNotificationTime is set, it can safely use t.GetLastNotificationTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastNotificationTime == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Messages_Sent) GetLastNotificationTime() uint64 {
	if t == nil || t.LastNotificationTime == nil {
		return 0
	}
	return *t.LastNotificationTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_Messages_Sent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_Messages_Sent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_Messages_Sent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_Queues represents the /openconfig-bgp/bgp/neighbors/neighbor/state/queues YANG schema element.
type Bgp_Neighbor_Queues struct {
	Input  *uint32 `path:"input" module:"openconfig-bgp"`
	Output *uint32 `path:"output" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_Queues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_Queues) IsYANGGoStruct() {}

// GetInput retrieves the value of the leaf Input from the Bgp_Neighbor_Queues
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Input is set, it can safely use t.GetInput()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Input == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Queues) GetInput() uint32 {
	if t == nil || t.Input == nil {
		return 0
	}
	return *t.Input
}

// GetOutput retrieves the value of the leaf Output from the Bgp_Neighbor_Queues
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Output is set, it can safely use t.GetOutput()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Output == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Queues) GetOutput() uint32 {
	if t == nil || t.Output == nil {
		return 0
	}
	return *t.Output
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_Queues) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_Queues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_Queues) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_RouteReflector represents the /openconfig-bgp/bgp/neighbors/neighbor/route-reflector YANG schema element.
type Bgp_Neighbor_RouteReflector struct {
	RouteReflectorClient    *bool                                                     `path:"state/route-reflector-client" module:"openconfig-bgp"`
	RouteReflectorClusterId Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union `path:"state/route-reflector-cluster-id" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_RouteReflector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_RouteReflector) IsYANGGoStruct() {}

// GetRouteReflectorClient retrieves the value of the leaf RouteReflectorClient from the Bgp_Neighbor_RouteReflector
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RouteReflectorClient is set, it can safely use t.GetRouteReflectorClient()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RouteReflectorClient == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_RouteReflector) GetRouteReflectorClient() bool {
	if t == nil || t.RouteReflectorClient == nil {
		return false
	}
	return *t.RouteReflectorClient
}

// GetRouteReflectorClusterId retrieves the value of the leaf RouteReflectorClusterId from the Bgp_Neighbor_RouteReflector
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RouteReflectorClusterId is set, it can safely use t.GetRouteReflectorClusterId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RouteReflectorClusterId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_RouteReflector) GetRouteReflectorClusterId() Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union {
	if t == nil || t.RouteReflectorClusterId == nil {
		return nil
	}
	return t.RouteReflectorClusterId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_RouteReflector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_RouteReflector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_RouteReflector) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-bgp/bgp/neighbors/neighbor/route-reflector/state/route-reflector-cluster-id within the YANG schema.
type Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union interface {
	Is_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union()
}

// Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_String is used when /openconfig-bgp/bgp/neighbors/neighbor/route-reflector/state/route-reflector-cluster-id
// is to be set to a string value.
type Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_String struct {
	String string
}

// Is_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union ensures that Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_String
// implements the Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union interface.
func (*Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_String) Is_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union() {
}

// Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_Uint32 is used when /openconfig-bgp/bgp/neighbors/neighbor/route-reflector/state/route-reflector-cluster-id
// is to be set to a uint32 value.
type Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union ensures that Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_Uint32
// implements the Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union interface.
func (*Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_Uint32) Is_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union() {
}

// To_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Bgp_Neighbor_RouteReflector) To_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union(i interface{}) (Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union, error) {
	switch v := i.(type) {
	case string:
		return &Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_String{v}, nil
	case uint32:
		return &Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}

// Bgp_Neighbor_Timers represents the /openconfig-bgp/bgp/neighbors/neighbor/timers YANG schema element.
type Bgp_Neighbor_Timers struct {
	ConnectRetry                 *float64 `path:"state/connect-retry" module:"openconfig-bgp"`
	HoldTime                     *float64 `path:"state/hold-time" module:"openconfig-bgp"`
	KeepaliveInterval            *float64 `path:"state/keepalive-interval" module:"openconfig-bgp"`
	MinimumAdvertisementInterval *float64 `path:"state/minimum-advertisement-interval" module:"openconfig-bgp"`
	NegotiatedHoldTime           *float64 `path:"state/negotiated-hold-time" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_Timers) IsYANGGoStruct() {}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the Bgp_Neighbor_Timers
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ConnectRetry is set, it can safely use t.GetConnectRetry()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ConnectRetry == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Timers) GetConnectRetry() float64 {
	if t == nil || t.ConnectRetry == nil {
		return 30
	}
	return *t.ConnectRetry
}

// GetHoldTime retrieves the value of the leaf HoldTime from the Bgp_Neighbor_Timers
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HoldTime is set, it can safely use t.GetHoldTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HoldTime == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Timers) GetHoldTime() float64 {
	if t == nil || t.HoldTime == nil {
		return 90
	}
	return *t.HoldTime
}

// GetKeepaliveInterval retrieves the value of the leaf KeepaliveInterval from the Bgp_Neighbor_Timers
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if KeepaliveInterval is set, it can safely use t.GetKeepaliveInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.KeepaliveInterval == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Timers) GetKeepaliveInterval() float64 {
	if t == nil || t.KeepaliveInterval == nil {
		return 30
	}
	return *t.KeepaliveInterval
}

// GetMinimumAdvertisementInterval retrieves the value of the leaf MinimumAdvertisementInterval from the Bgp_Neighbor_Timers
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinimumAdvertisementInterval is set, it can safely use t.GetMinimumAdvertisementInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinimumAdvertisementInterval == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Timers) GetMinimumAdvertisementInterval() float64 {
	if t == nil || t.MinimumAdvertisementInterval == nil {
		return 30
	}
	return *t.MinimumAdvertisementInterval
}

// GetNegotiatedHoldTime retrieves the value of the leaf NegotiatedHoldTime from the Bgp_Neighbor_Timers
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NegotiatedHoldTime is set, it can safely use t.GetNegotiatedHoldTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NegotiatedHoldTime == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Timers) GetNegotiatedHoldTime() float64 {
	if t == nil || t.NegotiatedHoldTime == nil {
		return 0.0
	}
	return *t.NegotiatedHoldTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_Timers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_Timers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_Transport represents the /openconfig-bgp/bgp/neighbors/neighbor/transport YANG schema element.
type Bgp_Neighbor_Transport struct {
	LocalAddress  *string `path:"state/local-address" module:"openconfig-bgp"`
	LocalPort     *uint16 `path:"state/local-port" module:"openconfig-bgp"`
	MtuDiscovery  *bool   `path:"state/mtu-discovery" module:"openconfig-bgp"`
	PassiveMode   *bool   `path:"state/passive-mode" module:"openconfig-bgp"`
	RemoteAddress *string `path:"state/remote-address" module:"openconfig-bgp"`
	RemotePort    *uint16 `path:"state/remote-port" module:"openconfig-bgp"`
	TcpMss        *uint16 `path:"state/tcp-mss" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_Transport) IsYANGGoStruct() {}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the Bgp_Neighbor_Transport
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LocalAddress is set, it can safely use t.GetLocalAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LocalAddress == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Transport) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalPort retrieves the value of the leaf LocalPort from the Bgp_Neighbor_Transport
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LocalPort is set, it can safely use t.GetLocalPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LocalPort == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Transport) GetLocalPort() uint16 {
	if t == nil || t.LocalPort == nil {
		return 0
	}
	return *t.LocalPort
}

// GetMtuDiscovery retrieves the value of the leaf MtuDiscovery from the Bgp_Neighbor_Transport
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MtuDiscovery is set, it can safely use t.GetMtuDiscovery()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MtuDiscovery == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Transport) GetMtuDiscovery() bool {
	if t == nil || t.MtuDiscovery == nil {
		return false
	}
	return *t.MtuDiscovery
}

// GetPassiveMode retrieves the value of the leaf PassiveMode from the Bgp_Neighbor_Transport
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PassiveMode is set, it can safely use t.GetPassiveMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PassiveMode == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Transport) GetPassiveMode() bool {
	if t == nil || t.PassiveMode == nil {
		return false
	}
	return *t.PassiveMode
}

// GetRemoteAddress retrieves the value of the leaf RemoteAddress from the Bgp_Neighbor_Transport
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemoteAddress is set, it can safely use t.GetRemoteAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemoteAddress == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Transport) GetRemoteAddress() string {
	if t == nil || t.RemoteAddress == nil {
		return ""
	}
	return *t.RemoteAddress
}

// GetRemotePort retrieves the value of the leaf RemotePort from the Bgp_Neighbor_Transport
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemotePort is set, it can safely use t.GetRemotePort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemotePort == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Transport) GetRemotePort() uint16 {
	if t == nil || t.RemotePort == nil {
		return 0
	}
	return *t.RemotePort
}

// GetTcpMss retrieves the value of the leaf TcpMss from the Bgp_Neighbor_Transport
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TcpMss is set, it can safely use t.GetTcpMss()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TcpMss == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_Transport) GetTcpMss() uint16 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_Transport) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_Transport) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_UseMultiplePaths represents the /openconfig-bgp/bgp/neighbors/neighbor/use-multiple-paths YANG schema element.
type Bgp_Neighbor_UseMultiplePaths struct {
	Ebgp    *Bgp_Neighbor_UseMultiplePaths_Ebgp `path:"ebgp" module:"openconfig-bgp"`
	Enabled *bool                               `path:"state/enabled" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_UseMultiplePaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_UseMultiplePaths) IsYANGGoStruct() {}

// GetOrCreateEbgp retrieves the value of the Ebgp field
// or returns the existing field if it already exists.
func (t *Bgp_Neighbor_UseMultiplePaths) GetOrCreateEbgp() *Bgp_Neighbor_UseMultiplePaths_Ebgp {
	if t.Ebgp != nil {
		return t.Ebgp
	}
	t.Ebgp = &Bgp_Neighbor_UseMultiplePaths_Ebgp{}
	return t.Ebgp
}

// GetEbgp returns the value of the Ebgp struct pointer
// from Bgp_Neighbor_UseMultiplePaths. If the receiver or the field Ebgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Neighbor_UseMultiplePaths) GetEbgp() *Bgp_Neighbor_UseMultiplePaths_Ebgp {
	if t != nil && t.Ebgp != nil {
		return t.Ebgp
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_Neighbor_UseMultiplePaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_UseMultiplePaths) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_UseMultiplePaths) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_UseMultiplePaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_UseMultiplePaths) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_UseMultiplePaths_Ebgp represents the /openconfig-bgp/bgp/neighbors/neighbor/use-multiple-paths/ebgp YANG schema element.
type Bgp_Neighbor_UseMultiplePaths_Ebgp struct {
	AllowMultipleAs *bool `path:"state/allow-multiple-as" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor_UseMultiplePaths_Ebgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor_UseMultiplePaths_Ebgp) IsYANGGoStruct() {}

// GetAllowMultipleAs retrieves the value of the leaf AllowMultipleAs from the Bgp_Neighbor_UseMultiplePaths_Ebgp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AllowMultipleAs is set, it can safely use t.GetAllowMultipleAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AllowMultipleAs == nil'
// before retrieving the leaf's value.
func (t *Bgp_Neighbor_UseMultiplePaths_Ebgp) GetAllowMultipleAs() bool {
	if t == nil || t.AllowMultipleAs == nil {
		return false
	}
	return *t.AllowMultipleAs
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor_UseMultiplePaths_Ebgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor_UseMultiplePaths_Ebgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor_UseMultiplePaths_Ebgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup represents the /openconfig-bgp/bgp/peer-groups/peer-group YANG schema element.
type Bgp_PeerGroup struct {
	AfiSafi          map[E_BgpTypes_AFI_SAFI_TYPE]*Bgp_PeerGroup_AfiSafi `path:"afi-safis/afi-safi" module:"openconfig-bgp"`
	ApplyPolicy      *Bgp_PeerGroup_ApplyPolicy                          `path:"apply-policy" module:"openconfig-bgp"`
	AsPathOptions    *Bgp_PeerGroup_AsPathOptions                        `path:"as-path-options" module:"openconfig-bgp"`
	AuthPassword     *string                                             `path:"state/auth-password" module:"openconfig-bgp"`
	Description      *string                                             `path:"state/description" module:"openconfig-bgp"`
	EbgpMultihop     *Bgp_PeerGroup_EbgpMultihop                         `path:"ebgp-multihop" module:"openconfig-bgp"`
	EnableBfd        *Bgp_PeerGroup_EnableBfd                            `path:"enable-bfd" module:"openconfig-bgp"`
	ErrorHandling    *Bgp_PeerGroup_ErrorHandling                        `path:"error-handling" module:"openconfig-bgp"`
	GracefulRestart  *Bgp_PeerGroup_GracefulRestart                      `path:"graceful-restart" module:"openconfig-bgp"`
	LocalAs          *uint32                                             `path:"state/local-as" module:"openconfig-bgp"`
	LoggingOptions   *Bgp_PeerGroup_LoggingOptions                       `path:"logging-options" module:"openconfig-bgp"`
	PeerAs           *uint32                                             `path:"state/peer-as" module:"openconfig-bgp"`
	PeerGroupName    *string                                             `path:"state/peer-group-name|peer-group-name" module:"openconfig-bgp"`
	PeerType         E_BgpTypes_PeerType                                 `path:"state/peer-type" module:"openconfig-bgp"`
	RemovePrivateAs  E_BgpTypes_RemovePrivateAsOption                    `path:"state/remove-private-as" module:"openconfig-bgp"`
	RouteFlapDamping *bool                                               `path:"state/route-flap-damping" module:"openconfig-bgp"`
	RouteReflector   *Bgp_PeerGroup_RouteReflector                       `path:"route-reflector" module:"openconfig-bgp"`
	SendCommunity    E_BgpTypes_CommunityType                            `path:"state/send-community" module:"openconfig-bgp"`
	Timers           *Bgp_PeerGroup_Timers                               `path:"timers" module:"openconfig-bgp"`
	TotalPaths       *uint32                                             `path:"state/total-paths" module:"openconfig-bgp"`
	TotalPrefixes    *uint32                                             `path:"state/total-prefixes" module:"openconfig-bgp"`
	Transport        *Bgp_PeerGroup_Transport                            `path:"transport" module:"openconfig-bgp"`
	UseMultiplePaths *Bgp_PeerGroup_UseMultiplePaths                     `path:"use-multiple-paths" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup) IsYANGGoStruct() {}

// NewAfiSafi creates a new entry in the AfiSafi list of the
// Bgp_PeerGroup struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_PeerGroup) NewAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) (*Bgp_PeerGroup_AfiSafi, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_BgpTypes_AFI_SAFI_TYPE]*Bgp_PeerGroup_AfiSafi)
	}

	key := AfiSafiName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AfiSafi[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AfiSafi", key)
	}

	t.AfiSafi[key] = &Bgp_PeerGroup_AfiSafi{
		AfiSafiName: AfiSafiName,
	}

	return t.AfiSafi[key], nil
}

// GetOrCreateAfiSafi retrieves the value with the specified keys from
// the receiver Bgp_PeerGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_PeerGroup) GetOrCreateAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) *Bgp_PeerGroup_AfiSafi {

	key := AfiSafiName

	if v, ok := t.AfiSafi[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAfiSafi(AfiSafiName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAfiSafi got unexpected error: %v", err))
	}
	return v
}

// GetAfiSafi retrieves the value with the specified key from
// the AfiSafi map field of Bgp_PeerGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_PeerGroup) GetAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) *Bgp_PeerGroup_AfiSafi {

	if t == nil {
		return nil
	}

	key := AfiSafiName

	if lm, ok := t.AfiSafi[key]; ok {
		return lm
	}
	return nil
}

// DeleteAfiSafi deletes the value with the specified keys from
// the receiver Bgp_PeerGroup. If there is no such element, the function
// is a no-op.
func (t *Bgp_PeerGroup) DeleteAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) {
	key := AfiSafiName

	delete(t.AfiSafi, key)
}

// AppendAfiSafi appends the supplied Bgp_PeerGroup_AfiSafi struct to the
// list AfiSafi of Bgp_PeerGroup. If the key value(s) specified in
// the supplied Bgp_PeerGroup_AfiSafi already exist in the list, an error is
// returned.
func (t *Bgp_PeerGroup) AppendAfiSafi(v *Bgp_PeerGroup_AfiSafi) error {
	key := v.AfiSafiName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_BgpTypes_AFI_SAFI_TYPE]*Bgp_PeerGroup_AfiSafi)
	}

	if _, ok := t.AfiSafi[key]; ok {
		return fmt.Errorf("duplicate key for list AfiSafi %v", key)
	}

	t.AfiSafi[key] = v
	return nil
}

// GetOrCreateApplyPolicy retrieves the value of the ApplyPolicy field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup) GetOrCreateApplyPolicy() *Bgp_PeerGroup_ApplyPolicy {
	if t.ApplyPolicy != nil {
		return t.ApplyPolicy
	}
	t.ApplyPolicy = &Bgp_PeerGroup_ApplyPolicy{}
	return t.ApplyPolicy
}

// GetOrCreateAsPathOptions retrieves the value of the AsPathOptions field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup) GetOrCreateAsPathOptions() *Bgp_PeerGroup_AsPathOptions {
	if t.AsPathOptions != nil {
		return t.AsPathOptions
	}
	t.AsPathOptions = &Bgp_PeerGroup_AsPathOptions{}
	return t.AsPathOptions
}

// GetOrCreateEbgpMultihop retrieves the value of the EbgpMultihop field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup) GetOrCreateEbgpMultihop() *Bgp_PeerGroup_EbgpMultihop {
	if t.EbgpMultihop != nil {
		return t.EbgpMultihop
	}
	t.EbgpMultihop = &Bgp_PeerGroup_EbgpMultihop{}
	return t.EbgpMultihop
}

// GetOrCreateEnableBfd retrieves the value of the EnableBfd field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup) GetOrCreateEnableBfd() *Bgp_PeerGroup_EnableBfd {
	if t.EnableBfd != nil {
		return t.EnableBfd
	}
	t.EnableBfd = &Bgp_PeerGroup_EnableBfd{}
	return t.EnableBfd
}

// GetOrCreateErrorHandling retrieves the value of the ErrorHandling field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup) GetOrCreateErrorHandling() *Bgp_PeerGroup_ErrorHandling {
	if t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	t.ErrorHandling = &Bgp_PeerGroup_ErrorHandling{}
	return t.ErrorHandling
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup) GetOrCreateGracefulRestart() *Bgp_PeerGroup_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &Bgp_PeerGroup_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateLoggingOptions retrieves the value of the LoggingOptions field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup) GetOrCreateLoggingOptions() *Bgp_PeerGroup_LoggingOptions {
	if t.LoggingOptions != nil {
		return t.LoggingOptions
	}
	t.LoggingOptions = &Bgp_PeerGroup_LoggingOptions{}
	return t.LoggingOptions
}

// GetOrCreateRouteReflector retrieves the value of the RouteReflector field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup) GetOrCreateRouteReflector() *Bgp_PeerGroup_RouteReflector {
	if t.RouteReflector != nil {
		return t.RouteReflector
	}
	t.RouteReflector = &Bgp_PeerGroup_RouteReflector{}
	return t.RouteReflector
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup) GetOrCreateTimers() *Bgp_PeerGroup_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &Bgp_PeerGroup_Timers{}
	return t.Timers
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup) GetOrCreateTransport() *Bgp_PeerGroup_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &Bgp_PeerGroup_Transport{}
	return t.Transport
}

// GetOrCreateUseMultiplePaths retrieves the value of the UseMultiplePaths field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup) GetOrCreateUseMultiplePaths() *Bgp_PeerGroup_UseMultiplePaths {
	if t.UseMultiplePaths != nil {
		return t.UseMultiplePaths
	}
	t.UseMultiplePaths = &Bgp_PeerGroup_UseMultiplePaths{}
	return t.UseMultiplePaths
}

// GetApplyPolicy returns the value of the ApplyPolicy struct pointer
// from Bgp_PeerGroup. If the receiver or the field ApplyPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup) GetApplyPolicy() *Bgp_PeerGroup_ApplyPolicy {
	if t != nil && t.ApplyPolicy != nil {
		return t.ApplyPolicy
	}
	return nil
}

// GetAsPathOptions returns the value of the AsPathOptions struct pointer
// from Bgp_PeerGroup. If the receiver or the field AsPathOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup) GetAsPathOptions() *Bgp_PeerGroup_AsPathOptions {
	if t != nil && t.AsPathOptions != nil {
		return t.AsPathOptions
	}
	return nil
}

// GetEbgpMultihop returns the value of the EbgpMultihop struct pointer
// from Bgp_PeerGroup. If the receiver or the field EbgpMultihop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup) GetEbgpMultihop() *Bgp_PeerGroup_EbgpMultihop {
	if t != nil && t.EbgpMultihop != nil {
		return t.EbgpMultihop
	}
	return nil
}

// GetEnableBfd returns the value of the EnableBfd struct pointer
// from Bgp_PeerGroup. If the receiver or the field EnableBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup) GetEnableBfd() *Bgp_PeerGroup_EnableBfd {
	if t != nil && t.EnableBfd != nil {
		return t.EnableBfd
	}
	return nil
}

// GetErrorHandling returns the value of the ErrorHandling struct pointer
// from Bgp_PeerGroup. If the receiver or the field ErrorHandling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup) GetErrorHandling() *Bgp_PeerGroup_ErrorHandling {
	if t != nil && t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from Bgp_PeerGroup. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup) GetGracefulRestart() *Bgp_PeerGroup_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetLoggingOptions returns the value of the LoggingOptions struct pointer
// from Bgp_PeerGroup. If the receiver or the field LoggingOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup) GetLoggingOptions() *Bgp_PeerGroup_LoggingOptions {
	if t != nil && t.LoggingOptions != nil {
		return t.LoggingOptions
	}
	return nil
}

// GetRouteReflector returns the value of the RouteReflector struct pointer
// from Bgp_PeerGroup. If the receiver or the field RouteReflector is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup) GetRouteReflector() *Bgp_PeerGroup_RouteReflector {
	if t != nil && t.RouteReflector != nil {
		return t.RouteReflector
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from Bgp_PeerGroup. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup) GetTimers() *Bgp_PeerGroup_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from Bgp_PeerGroup. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup) GetTransport() *Bgp_PeerGroup_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// GetUseMultiplePaths returns the value of the UseMultiplePaths struct pointer
// from Bgp_PeerGroup. If the receiver or the field UseMultiplePaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup) GetUseMultiplePaths() *Bgp_PeerGroup_UseMultiplePaths {
	if t != nil && t.UseMultiplePaths != nil {
		return t.UseMultiplePaths
	}
	return nil
}

// GetAuthPassword retrieves the value of the leaf AuthPassword from the Bgp_PeerGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AuthPassword is set, it can safely use t.GetAuthPassword()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AuthPassword == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup) GetAuthPassword() string {
	if t == nil || t.AuthPassword == nil {
		return ""
	}
	return *t.AuthPassword
}

// GetDescription retrieves the value of the leaf Description from the Bgp_PeerGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocalAs retrieves the value of the leaf LocalAs from the Bgp_PeerGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LocalAs is set, it can safely use t.GetLocalAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LocalAs == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup) GetLocalAs() uint32 {
	if t == nil || t.LocalAs == nil {
		return 0
	}
	return *t.LocalAs
}

// GetPeerAs retrieves the value of the leaf PeerAs from the Bgp_PeerGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PeerAs is set, it can safely use t.GetPeerAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PeerAs == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup) GetPeerAs() uint32 {
	if t == nil || t.PeerAs == nil {
		return 0
	}
	return *t.PeerAs
}

// GetPeerGroupName retrieves the value of the leaf PeerGroupName from the Bgp_PeerGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PeerGroupName is set, it can safely use t.GetPeerGroupName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PeerGroupName == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup) GetPeerGroupName() string {
	if t == nil || t.PeerGroupName == nil {
		return ""
	}
	return *t.PeerGroupName
}

// GetPeerType retrieves the value of the leaf PeerType from the Bgp_PeerGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PeerType is set, it can safely use t.GetPeerType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PeerType == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup) GetPeerType() E_BgpTypes_PeerType {
	if t == nil || t.PeerType == 0 {
		return 0
	}
	return t.PeerType
}

// GetRemovePrivateAs retrieves the value of the leaf RemovePrivateAs from the Bgp_PeerGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemovePrivateAs is set, it can safely use t.GetRemovePrivateAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemovePrivateAs == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup) GetRemovePrivateAs() E_BgpTypes_RemovePrivateAsOption {
	if t == nil || t.RemovePrivateAs == 0 {
		return 0
	}
	return t.RemovePrivateAs
}

// GetRouteFlapDamping retrieves the value of the leaf RouteFlapDamping from the Bgp_PeerGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RouteFlapDamping is set, it can safely use t.GetRouteFlapDamping()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RouteFlapDamping == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup) GetRouteFlapDamping() bool {
	if t == nil || t.RouteFlapDamping == nil {
		return false
	}
	return *t.RouteFlapDamping
}

// GetSendCommunity retrieves the value of the leaf SendCommunity from the Bgp_PeerGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SendCommunity is set, it can safely use t.GetSendCommunity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SendCommunity == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup) GetSendCommunity() E_BgpTypes_CommunityType {
	if t == nil || t.SendCommunity == 0 {
		return BgpTypes_CommunityType_NONE
	}
	return t.SendCommunity
}

// GetTotalPaths retrieves the value of the leaf TotalPaths from the Bgp_PeerGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TotalPaths is set, it can safely use t.GetTotalPaths()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TotalPaths == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup) GetTotalPaths() uint32 {
	if t == nil || t.TotalPaths == nil {
		return 0
	}
	return *t.TotalPaths
}

// GetTotalPrefixes retrieves the value of the leaf TotalPrefixes from the Bgp_PeerGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TotalPrefixes is set, it can safely use t.GetTotalPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TotalPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup) GetTotalPrefixes() uint32 {
	if t == nil || t.TotalPrefixes == nil {
		return 0
	}
	return *t.TotalPrefixes
}

// ΛListKeyMap returns the keys of the Bgp_PeerGroup struct, which is a YANG list entry.
func (t *Bgp_PeerGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerGroupName == nil {
		return nil, fmt.Errorf("nil value for key PeerGroupName")
	}

	return map[string]interface{}{
		"peer-group-name": *t.PeerGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_PeerGroup_AfiSafi represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi YANG schema element.
type Bgp_PeerGroup_AfiSafi struct {
	AddPaths           *Bgp_PeerGroup_AfiSafi_AddPaths           `path:"add-paths" module:"openconfig-bgp"`
	AfiSafiName        E_BgpTypes_AFI_SAFI_TYPE                  `path:"state/afi-safi-name|afi-safi-name" module:"openconfig-bgp"`
	ApplyPolicy        *Bgp_PeerGroup_AfiSafi_ApplyPolicy        `path:"apply-policy" module:"openconfig-bgp"`
	Enabled            *bool                                     `path:"state/enabled" module:"openconfig-bgp"`
	GracefulRestart    *Bgp_PeerGroup_AfiSafi_GracefulRestart    `path:"graceful-restart" module:"openconfig-bgp"`
	Ipv4LabeledUnicast *Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast `path:"ipv4-labeled-unicast" module:"openconfig-bgp"`
	Ipv4Unicast        *Bgp_PeerGroup_AfiSafi_Ipv4Unicast        `path:"ipv4-unicast" module:"openconfig-bgp"`
	Ipv6LabeledUnicast *Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast `path:"ipv6-labeled-unicast" module:"openconfig-bgp"`
	Ipv6Unicast        *Bgp_PeerGroup_AfiSafi_Ipv6Unicast        `path:"ipv6-unicast" module:"openconfig-bgp"`
	L2VpnEvpn          *Bgp_PeerGroup_AfiSafi_L2VpnEvpn          `path:"l2vpn-evpn" module:"openconfig-bgp"`
	L2VpnVpls          *Bgp_PeerGroup_AfiSafi_L2VpnVpls          `path:"l2vpn-vpls" module:"openconfig-bgp"`
	L3VpnIpv4Multicast *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast `path:"l3vpn-ipv4-multicast" module:"openconfig-bgp"`
	L3VpnIpv4Unicast   *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast   `path:"l3vpn-ipv4-unicast" module:"openconfig-bgp"`
	L3VpnIpv6Multicast *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast `path:"l3vpn-ipv6-multicast" module:"openconfig-bgp"`
	L3VpnIpv6Unicast   *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast   `path:"l3vpn-ipv6-unicast" module:"openconfig-bgp"`
	SrtePolicyIpv4     *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4     `path:"srte-policy-ipv4" module:"openconfig-bgp"`
	SrtePolicyIpv6     *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6     `path:"srte-policy-ipv6" module:"openconfig-bgp"`
	UseMultiplePaths   *Bgp_PeerGroup_AfiSafi_UseMultiplePaths   `path:"use-multiple-paths" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi) IsYANGGoStruct() {}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi) GetOrCreateAddPaths() *Bgp_PeerGroup_AfiSafi_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &Bgp_PeerGroup_AfiSafi_AddPaths{}
	return t.AddPaths
}

// GetOrCreateApplyPolicy retrieves the value of the ApplyPolicy field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi) GetOrCreateApplyPolicy() *Bgp_PeerGroup_AfiSafi_ApplyPolicy {
	if t.ApplyPolicy != nil {
		return t.ApplyPolicy
	}
	t.ApplyPolicy = &Bgp_PeerGroup_AfiSafi_ApplyPolicy{}
	return t.ApplyPolicy
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi) GetOrCreateGracefulRestart() *Bgp_PeerGroup_AfiSafi_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &Bgp_PeerGroup_AfiSafi_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateIpv4LabeledUnicast retrieves the value of the Ipv4LabeledUnicast field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi) GetOrCreateIpv4LabeledUnicast() *Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast {
	if t.Ipv4LabeledUnicast != nil {
		return t.Ipv4LabeledUnicast
	}
	t.Ipv4LabeledUnicast = &Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast{}
	return t.Ipv4LabeledUnicast
}

// GetOrCreateIpv4Unicast retrieves the value of the Ipv4Unicast field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi) GetOrCreateIpv4Unicast() *Bgp_PeerGroup_AfiSafi_Ipv4Unicast {
	if t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	t.Ipv4Unicast = &Bgp_PeerGroup_AfiSafi_Ipv4Unicast{}
	return t.Ipv4Unicast
}

// GetOrCreateIpv6LabeledUnicast retrieves the value of the Ipv6LabeledUnicast field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi) GetOrCreateIpv6LabeledUnicast() *Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast {
	if t.Ipv6LabeledUnicast != nil {
		return t.Ipv6LabeledUnicast
	}
	t.Ipv6LabeledUnicast = &Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast{}
	return t.Ipv6LabeledUnicast
}

// GetOrCreateIpv6Unicast retrieves the value of the Ipv6Unicast field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi) GetOrCreateIpv6Unicast() *Bgp_PeerGroup_AfiSafi_Ipv6Unicast {
	if t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	t.Ipv6Unicast = &Bgp_PeerGroup_AfiSafi_Ipv6Unicast{}
	return t.Ipv6Unicast
}

// GetOrCreateL2VpnEvpn retrieves the value of the L2VpnEvpn field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi) GetOrCreateL2VpnEvpn() *Bgp_PeerGroup_AfiSafi_L2VpnEvpn {
	if t.L2VpnEvpn != nil {
		return t.L2VpnEvpn
	}
	t.L2VpnEvpn = &Bgp_PeerGroup_AfiSafi_L2VpnEvpn{}
	return t.L2VpnEvpn
}

// GetOrCreateL2VpnVpls retrieves the value of the L2VpnVpls field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi) GetOrCreateL2VpnVpls() *Bgp_PeerGroup_AfiSafi_L2VpnVpls {
	if t.L2VpnVpls != nil {
		return t.L2VpnVpls
	}
	t.L2VpnVpls = &Bgp_PeerGroup_AfiSafi_L2VpnVpls{}
	return t.L2VpnVpls
}

// GetOrCreateL3VpnIpv4Multicast retrieves the value of the L3VpnIpv4Multicast field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi) GetOrCreateL3VpnIpv4Multicast() *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast {
	if t.L3VpnIpv4Multicast != nil {
		return t.L3VpnIpv4Multicast
	}
	t.L3VpnIpv4Multicast = &Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast{}
	return t.L3VpnIpv4Multicast
}

// GetOrCreateL3VpnIpv4Unicast retrieves the value of the L3VpnIpv4Unicast field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi) GetOrCreateL3VpnIpv4Unicast() *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast {
	if t.L3VpnIpv4Unicast != nil {
		return t.L3VpnIpv4Unicast
	}
	t.L3VpnIpv4Unicast = &Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast{}
	return t.L3VpnIpv4Unicast
}

// GetOrCreateL3VpnIpv6Multicast retrieves the value of the L3VpnIpv6Multicast field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi) GetOrCreateL3VpnIpv6Multicast() *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast {
	if t.L3VpnIpv6Multicast != nil {
		return t.L3VpnIpv6Multicast
	}
	t.L3VpnIpv6Multicast = &Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast{}
	return t.L3VpnIpv6Multicast
}

// GetOrCreateL3VpnIpv6Unicast retrieves the value of the L3VpnIpv6Unicast field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi) GetOrCreateL3VpnIpv6Unicast() *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast {
	if t.L3VpnIpv6Unicast != nil {
		return t.L3VpnIpv6Unicast
	}
	t.L3VpnIpv6Unicast = &Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast{}
	return t.L3VpnIpv6Unicast
}

// GetOrCreateSrtePolicyIpv4 retrieves the value of the SrtePolicyIpv4 field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi) GetOrCreateSrtePolicyIpv4() *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4 {
	if t.SrtePolicyIpv4 != nil {
		return t.SrtePolicyIpv4
	}
	t.SrtePolicyIpv4 = &Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4{}
	return t.SrtePolicyIpv4
}

// GetOrCreateSrtePolicyIpv6 retrieves the value of the SrtePolicyIpv6 field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi) GetOrCreateSrtePolicyIpv6() *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6 {
	if t.SrtePolicyIpv6 != nil {
		return t.SrtePolicyIpv6
	}
	t.SrtePolicyIpv6 = &Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6{}
	return t.SrtePolicyIpv6
}

// GetOrCreateUseMultiplePaths retrieves the value of the UseMultiplePaths field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi) GetOrCreateUseMultiplePaths() *Bgp_PeerGroup_AfiSafi_UseMultiplePaths {
	if t.UseMultiplePaths != nil {
		return t.UseMultiplePaths
	}
	t.UseMultiplePaths = &Bgp_PeerGroup_AfiSafi_UseMultiplePaths{}
	return t.UseMultiplePaths
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from Bgp_PeerGroup_AfiSafi. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi) GetAddPaths() *Bgp_PeerGroup_AfiSafi_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetApplyPolicy returns the value of the ApplyPolicy struct pointer
// from Bgp_PeerGroup_AfiSafi. If the receiver or the field ApplyPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi) GetApplyPolicy() *Bgp_PeerGroup_AfiSafi_ApplyPolicy {
	if t != nil && t.ApplyPolicy != nil {
		return t.ApplyPolicy
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from Bgp_PeerGroup_AfiSafi. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi) GetGracefulRestart() *Bgp_PeerGroup_AfiSafi_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetIpv4LabeledUnicast returns the value of the Ipv4LabeledUnicast struct pointer
// from Bgp_PeerGroup_AfiSafi. If the receiver or the field Ipv4LabeledUnicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi) GetIpv4LabeledUnicast() *Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast {
	if t != nil && t.Ipv4LabeledUnicast != nil {
		return t.Ipv4LabeledUnicast
	}
	return nil
}

// GetIpv4Unicast returns the value of the Ipv4Unicast struct pointer
// from Bgp_PeerGroup_AfiSafi. If the receiver or the field Ipv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi) GetIpv4Unicast() *Bgp_PeerGroup_AfiSafi_Ipv4Unicast {
	if t != nil && t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	return nil
}

// GetIpv6LabeledUnicast returns the value of the Ipv6LabeledUnicast struct pointer
// from Bgp_PeerGroup_AfiSafi. If the receiver or the field Ipv6LabeledUnicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi) GetIpv6LabeledUnicast() *Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast {
	if t != nil && t.Ipv6LabeledUnicast != nil {
		return t.Ipv6LabeledUnicast
	}
	return nil
}

// GetIpv6Unicast returns the value of the Ipv6Unicast struct pointer
// from Bgp_PeerGroup_AfiSafi. If the receiver or the field Ipv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi) GetIpv6Unicast() *Bgp_PeerGroup_AfiSafi_Ipv6Unicast {
	if t != nil && t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	return nil
}

// GetL2VpnEvpn returns the value of the L2VpnEvpn struct pointer
// from Bgp_PeerGroup_AfiSafi. If the receiver or the field L2VpnEvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi) GetL2VpnEvpn() *Bgp_PeerGroup_AfiSafi_L2VpnEvpn {
	if t != nil && t.L2VpnEvpn != nil {
		return t.L2VpnEvpn
	}
	return nil
}

// GetL2VpnVpls returns the value of the L2VpnVpls struct pointer
// from Bgp_PeerGroup_AfiSafi. If the receiver or the field L2VpnVpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi) GetL2VpnVpls() *Bgp_PeerGroup_AfiSafi_L2VpnVpls {
	if t != nil && t.L2VpnVpls != nil {
		return t.L2VpnVpls
	}
	return nil
}

// GetL3VpnIpv4Multicast returns the value of the L3VpnIpv4Multicast struct pointer
// from Bgp_PeerGroup_AfiSafi. If the receiver or the field L3VpnIpv4Multicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi) GetL3VpnIpv4Multicast() *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast {
	if t != nil && t.L3VpnIpv4Multicast != nil {
		return t.L3VpnIpv4Multicast
	}
	return nil
}

// GetL3VpnIpv4Unicast returns the value of the L3VpnIpv4Unicast struct pointer
// from Bgp_PeerGroup_AfiSafi. If the receiver or the field L3VpnIpv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi) GetL3VpnIpv4Unicast() *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast {
	if t != nil && t.L3VpnIpv4Unicast != nil {
		return t.L3VpnIpv4Unicast
	}
	return nil
}

// GetL3VpnIpv6Multicast returns the value of the L3VpnIpv6Multicast struct pointer
// from Bgp_PeerGroup_AfiSafi. If the receiver or the field L3VpnIpv6Multicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi) GetL3VpnIpv6Multicast() *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast {
	if t != nil && t.L3VpnIpv6Multicast != nil {
		return t.L3VpnIpv6Multicast
	}
	return nil
}

// GetL3VpnIpv6Unicast returns the value of the L3VpnIpv6Unicast struct pointer
// from Bgp_PeerGroup_AfiSafi. If the receiver or the field L3VpnIpv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi) GetL3VpnIpv6Unicast() *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast {
	if t != nil && t.L3VpnIpv6Unicast != nil {
		return t.L3VpnIpv6Unicast
	}
	return nil
}

// GetSrtePolicyIpv4 returns the value of the SrtePolicyIpv4 struct pointer
// from Bgp_PeerGroup_AfiSafi. If the receiver or the field SrtePolicyIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi) GetSrtePolicyIpv4() *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4 {
	if t != nil && t.SrtePolicyIpv4 != nil {
		return t.SrtePolicyIpv4
	}
	return nil
}

// GetSrtePolicyIpv6 returns the value of the SrtePolicyIpv6 struct pointer
// from Bgp_PeerGroup_AfiSafi. If the receiver or the field SrtePolicyIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi) GetSrtePolicyIpv6() *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6 {
	if t != nil && t.SrtePolicyIpv6 != nil {
		return t.SrtePolicyIpv6
	}
	return nil
}

// GetUseMultiplePaths returns the value of the UseMultiplePaths struct pointer
// from Bgp_PeerGroup_AfiSafi. If the receiver or the field UseMultiplePaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi) GetUseMultiplePaths() *Bgp_PeerGroup_AfiSafi_UseMultiplePaths {
	if t != nil && t.UseMultiplePaths != nil {
		return t.UseMultiplePaths
	}
	return nil
}

// GetAfiSafiName retrieves the value of the leaf AfiSafiName from the Bgp_PeerGroup_AfiSafi
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AfiSafiName is set, it can safely use t.GetAfiSafiName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AfiSafiName == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi) GetAfiSafiName() E_BgpTypes_AFI_SAFI_TYPE {
	if t == nil || t.AfiSafiName == 0 {
		return 0
	}
	return t.AfiSafiName
}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_PeerGroup_AfiSafi
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// ΛListKeyMap returns the keys of the Bgp_PeerGroup_AfiSafi struct, which is a YANG list entry.
func (t *Bgp_PeerGroup_AfiSafi) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"afi-safi-name": t.AfiSafiName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_PeerGroup_AfiSafi_AddPaths represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/add-paths YANG schema element.
type Bgp_PeerGroup_AfiSafi_AddPaths struct {
	EligiblePrefixPolicy *string `path:"state/eligible-prefix-policy" module:"openconfig-bgp"`
	Receive              *bool   `path:"state/receive" module:"openconfig-bgp"`
	Send                 *bool   `path:"state/send" module:"openconfig-bgp"`
	SendMax              *uint8  `path:"state/send-max" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_AddPaths) IsYANGGoStruct() {}

// GetEligiblePrefixPolicy retrieves the value of the leaf EligiblePrefixPolicy from the Bgp_PeerGroup_AfiSafi_AddPaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EligiblePrefixPolicy is set, it can safely use t.GetEligiblePrefixPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EligiblePrefixPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_AddPaths) GetEligiblePrefixPolicy() string {
	if t == nil || t.EligiblePrefixPolicy == nil {
		return ""
	}
	return *t.EligiblePrefixPolicy
}

// GetReceive retrieves the value of the leaf Receive from the Bgp_PeerGroup_AfiSafi_AddPaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Receive is set, it can safely use t.GetReceive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Receive == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_AddPaths) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the Bgp_PeerGroup_AfiSafi_AddPaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Send is set, it can safely use t.GetSend()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Send == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_AddPaths) GetSend() bool {
	if t == nil || t.Send == nil {
		return false
	}
	return *t.Send
}

// GetSendMax retrieves the value of the leaf SendMax from the Bgp_PeerGroup_AfiSafi_AddPaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SendMax is set, it can safely use t.GetSendMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SendMax == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_AddPaths) GetSendMax() uint8 {
	if t == nil || t.SendMax == nil {
		return 0
	}
	return *t.SendMax
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_AddPaths) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_ApplyPolicy represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/apply-policy YANG schema element.
type Bgp_PeerGroup_AfiSafi_ApplyPolicy struct {
	DefaultExportPolicy E_RoutingPolicy_DefaultPolicyType `path:"state/default-export-policy" module:"openconfig-bgp"`
	DefaultImportPolicy E_RoutingPolicy_DefaultPolicyType `path:"state/default-import-policy" module:"openconfig-bgp"`
	ExportPolicy        []string                          `path:"state/export-policy" module:"openconfig-bgp"`
	ImportPolicy        []string                          `path:"state/import-policy" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_ApplyPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_ApplyPolicy) IsYANGGoStruct() {}

// GetDefaultExportPolicy retrieves the value of the leaf DefaultExportPolicy from the Bgp_PeerGroup_AfiSafi_ApplyPolicy
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DefaultExportPolicy is set, it can safely use t.GetDefaultExportPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DefaultExportPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_ApplyPolicy) GetDefaultExportPolicy() E_RoutingPolicy_DefaultPolicyType {
	if t == nil || t.DefaultExportPolicy == 0 {
		return RoutingPolicy_DefaultPolicyType_REJECT_ROUTE
	}
	return t.DefaultExportPolicy
}

// GetDefaultImportPolicy retrieves the value of the leaf DefaultImportPolicy from the Bgp_PeerGroup_AfiSafi_ApplyPolicy
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DefaultImportPolicy is set, it can safely use t.GetDefaultImportPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DefaultImportPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_ApplyPolicy) GetDefaultImportPolicy() E_RoutingPolicy_DefaultPolicyType {
	if t == nil || t.DefaultImportPolicy == 0 {
		return RoutingPolicy_DefaultPolicyType_REJECT_ROUTE
	}
	return t.DefaultImportPolicy
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the Bgp_PeerGroup_AfiSafi_ApplyPolicy
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExportPolicy is set, it can safely use t.GetExportPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExportPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_ApplyPolicy) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the Bgp_PeerGroup_AfiSafi_ApplyPolicy
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ImportPolicy is set, it can safely use t.GetImportPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ImportPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_ApplyPolicy) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_ApplyPolicy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_ApplyPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_ApplyPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_GracefulRestart represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/graceful-restart YANG schema element.
type Bgp_PeerGroup_AfiSafi_GracefulRestart struct {
	Enabled *bool `path:"state/enabled" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_GracefulRestart) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_PeerGroup_AfiSafi_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_GracefulRestart) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv4-labeled-unicast YANG schema element.
type Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast struct {
	PrefixLimit *Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast) GetOrCreatePrefixLimit() *Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast) GetPrefixLimit() *Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv4-labeled-unicast/prefix-limit YANG schema element.
type Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4LabeledUnicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_Ipv4Unicast represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv4-unicast YANG schema element.
type Bgp_PeerGroup_AfiSafi_Ipv4Unicast struct {
	PrefixLimit      *Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
	SendDefaultRoute *bool                                          `path:"state/send-default-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_Ipv4Unicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4Unicast) GetOrCreatePrefixLimit() *Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_PeerGroup_AfiSafi_Ipv4Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4Unicast) GetPrefixLimit() *Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetSendDefaultRoute retrieves the value of the leaf SendDefaultRoute from the Bgp_PeerGroup_AfiSafi_Ipv4Unicast
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SendDefaultRoute is set, it can safely use t.GetSendDefaultRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SendDefaultRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4Unicast) GetSendDefaultRoute() bool {
	if t == nil || t.SendDefaultRoute == nil {
		return false
	}
	return *t.SendDefaultRoute
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv4-unicast/prefix-limit YANG schema element.
type Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_Ipv4Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv6-labeled-unicast YANG schema element.
type Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast struct {
	PrefixLimit *Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast) GetOrCreatePrefixLimit() *Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast) GetPrefixLimit() *Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv6-labeled-unicast/prefix-limit YANG schema element.
type Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6LabeledUnicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_Ipv6Unicast represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv6-unicast YANG schema element.
type Bgp_PeerGroup_AfiSafi_Ipv6Unicast struct {
	PrefixLimit      *Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
	SendDefaultRoute *bool                                          `path:"state/send-default-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_Ipv6Unicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6Unicast) GetOrCreatePrefixLimit() *Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_PeerGroup_AfiSafi_Ipv6Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6Unicast) GetPrefixLimit() *Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetSendDefaultRoute retrieves the value of the leaf SendDefaultRoute from the Bgp_PeerGroup_AfiSafi_Ipv6Unicast
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SendDefaultRoute is set, it can safely use t.GetSendDefaultRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SendDefaultRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6Unicast) GetSendDefaultRoute() bool {
	if t == nil || t.SendDefaultRoute == nil {
		return false
	}
	return *t.SendDefaultRoute
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/ipv6-unicast/prefix-limit YANG schema element.
type Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_Ipv6Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_L2VpnEvpn represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/l2vpn-evpn YANG schema element.
type Bgp_PeerGroup_AfiSafi_L2VpnEvpn struct {
	PrefixLimit *Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_L2VpnEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_L2VpnEvpn) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnEvpn) GetOrCreatePrefixLimit() *Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_PeerGroup_AfiSafi_L2VpnEvpn. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnEvpn) GetPrefixLimit() *Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnEvpn) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_L2VpnEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnEvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/l2vpn-evpn/prefix-limit YANG schema element.
type Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnEvpn_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_L2VpnVpls represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/l2vpn-vpls YANG schema element.
type Bgp_PeerGroup_AfiSafi_L2VpnVpls struct {
	PrefixLimit *Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_L2VpnVpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_L2VpnVpls) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnVpls) GetOrCreatePrefixLimit() *Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_PeerGroup_AfiSafi_L2VpnVpls. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnVpls) GetPrefixLimit() *Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnVpls) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_L2VpnVpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnVpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/l2vpn-vpls/prefix-limit YANG schema element.
type Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_L2VpnVpls_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv4-multicast YANG schema element.
type Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast struct {
	PrefixLimit *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast) GetOrCreatePrefixLimit() *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast) GetPrefixLimit() *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv4-multicast/prefix-limit YANG schema element.
type Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Multicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv4-unicast YANG schema element.
type Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast struct {
	PrefixLimit *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast) GetOrCreatePrefixLimit() *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast) GetPrefixLimit() *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv4-unicast/prefix-limit YANG schema element.
type Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv4Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv6-multicast YANG schema element.
type Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast struct {
	PrefixLimit *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast) GetOrCreatePrefixLimit() *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast) GetPrefixLimit() *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv6-multicast/prefix-limit YANG schema element.
type Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Multicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv6-unicast YANG schema element.
type Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast struct {
	PrefixLimit *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast) GetOrCreatePrefixLimit() *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast) GetPrefixLimit() *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/l3vpn-ipv6-unicast/prefix-limit YANG schema element.
type Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_L3VpnIpv6Unicast_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4 represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/srte-policy-ipv4 YANG schema element.
type Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4 struct {
	PrefixLimit *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4) GetOrCreatePrefixLimit() *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4) GetPrefixLimit() *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/srte-policy-ipv4/prefix-limit YANG schema element.
type Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv4_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6 represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/srte-policy-ipv6 YANG schema element.
type Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6 struct {
	PrefixLimit *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit `path:"prefix-limit" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6) IsYANGGoStruct() {}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6) GetOrCreatePrefixLimit() *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit{}
	return t.PrefixLimit
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6) GetPrefixLimit() *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/srte-policy-ipv6/prefix-limit YANG schema element.
type Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit struct {
	MaxPrefixes         *uint32  `path:"state/max-prefixes" module:"openconfig-bgp"`
	PreventTeardown     *bool    `path:"state/prevent-teardown" module:"openconfig-bgp"`
	RestartTimer        *float64 `path:"state/restart-timer" module:"openconfig-bgp"`
	WarningThresholdPct *uint8   `path:"state/warning-threshold-pct" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit) IsYANGGoStruct() {}

// GetMaxPrefixes retrieves the value of the leaf MaxPrefixes from the Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxPrefixes is set, it can safely use t.GetMaxPrefixes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxPrefixes == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetMaxPrefixes() uint32 {
	if t == nil || t.MaxPrefixes == nil {
		return 0
	}
	return *t.MaxPrefixes
}

// GetPreventTeardown retrieves the value of the leaf PreventTeardown from the Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreventTeardown is set, it can safely use t.GetPreventTeardown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreventTeardown == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetPreventTeardown() bool {
	if t == nil || t.PreventTeardown == nil {
		return false
	}
	return *t.PreventTeardown
}

// GetRestartTimer retrieves the value of the leaf RestartTimer from the Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTimer is set, it can safely use t.GetRestartTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTimer == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetRestartTimer() float64 {
	if t == nil || t.RestartTimer == nil {
		return 0.0
	}
	return *t.RestartTimer
}

// GetWarningThresholdPct retrieves the value of the leaf WarningThresholdPct from the Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if WarningThresholdPct is set, it can safely use t.GetWarningThresholdPct()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.WarningThresholdPct == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit) GetWarningThresholdPct() uint8 {
	if t == nil || t.WarningThresholdPct == nil {
		return 0
	}
	return *t.WarningThresholdPct
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_SrtePolicyIpv6_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_UseMultiplePaths represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/use-multiple-paths YANG schema element.
type Bgp_PeerGroup_AfiSafi_UseMultiplePaths struct {
	Ebgp    *Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ebgp `path:"ebgp" module:"openconfig-bgp"`
	Enabled *bool                                        `path:"state/enabled" module:"openconfig-bgp"`
	Ibgp    *Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ibgp `path:"ibgp" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_UseMultiplePaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_UseMultiplePaths) IsYANGGoStruct() {}

// GetOrCreateEbgp retrieves the value of the Ebgp field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi_UseMultiplePaths) GetOrCreateEbgp() *Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ebgp {
	if t.Ebgp != nil {
		return t.Ebgp
	}
	t.Ebgp = &Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ebgp{}
	return t.Ebgp
}

// GetOrCreateIbgp retrieves the value of the Ibgp field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_AfiSafi_UseMultiplePaths) GetOrCreateIbgp() *Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ibgp {
	if t.Ibgp != nil {
		return t.Ibgp
	}
	t.Ibgp = &Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ibgp{}
	return t.Ibgp
}

// GetEbgp returns the value of the Ebgp struct pointer
// from Bgp_PeerGroup_AfiSafi_UseMultiplePaths. If the receiver or the field Ebgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi_UseMultiplePaths) GetEbgp() *Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ebgp {
	if t != nil && t.Ebgp != nil {
		return t.Ebgp
	}
	return nil
}

// GetIbgp returns the value of the Ibgp struct pointer
// from Bgp_PeerGroup_AfiSafi_UseMultiplePaths. If the receiver or the field Ibgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_AfiSafi_UseMultiplePaths) GetIbgp() *Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ibgp {
	if t != nil && t.Ibgp != nil {
		return t.Ibgp
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_PeerGroup_AfiSafi_UseMultiplePaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_UseMultiplePaths) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_UseMultiplePaths) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_UseMultiplePaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_UseMultiplePaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ebgp represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/use-multiple-paths/ebgp YANG schema element.
type Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ebgp struct {
	AllowMultipleAs *bool   `path:"state/allow-multiple-as" module:"openconfig-bgp"`
	MaximumPaths    *uint32 `path:"state/maximum-paths" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ebgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ebgp) IsYANGGoStruct() {}

// GetAllowMultipleAs retrieves the value of the leaf AllowMultipleAs from the Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ebgp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AllowMultipleAs is set, it can safely use t.GetAllowMultipleAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AllowMultipleAs == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ebgp) GetAllowMultipleAs() bool {
	if t == nil || t.AllowMultipleAs == nil {
		return false
	}
	return *t.AllowMultipleAs
}

// GetMaximumPaths retrieves the value of the leaf MaximumPaths from the Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ebgp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaximumPaths is set, it can safely use t.GetMaximumPaths()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaximumPaths == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ebgp) GetMaximumPaths() uint32 {
	if t == nil || t.MaximumPaths == nil {
		return 1
	}
	return *t.MaximumPaths
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ebgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ebgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ebgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ibgp represents the /openconfig-bgp/bgp/peer-groups/peer-group/afi-safis/afi-safi/use-multiple-paths/ibgp YANG schema element.
type Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ibgp struct {
	MaximumPaths *uint32 `path:"state/maximum-paths" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ibgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ibgp) IsYANGGoStruct() {}

// GetMaximumPaths retrieves the value of the leaf MaximumPaths from the Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ibgp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaximumPaths is set, it can safely use t.GetMaximumPaths()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaximumPaths == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ibgp) GetMaximumPaths() uint32 {
	if t == nil || t.MaximumPaths == nil {
		return 1
	}
	return *t.MaximumPaths
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ibgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ibgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AfiSafi_UseMultiplePaths_Ibgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_ApplyPolicy represents the /openconfig-bgp/bgp/peer-groups/peer-group/apply-policy YANG schema element.
type Bgp_PeerGroup_ApplyPolicy struct {
	DefaultExportPolicy E_RoutingPolicy_DefaultPolicyType `path:"state/default-export-policy" module:"openconfig-bgp"`
	DefaultImportPolicy E_RoutingPolicy_DefaultPolicyType `path:"state/default-import-policy" module:"openconfig-bgp"`
	ExportPolicy        []string                          `path:"state/export-policy" module:"openconfig-bgp"`
	ImportPolicy        []string                          `path:"state/import-policy" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_ApplyPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_ApplyPolicy) IsYANGGoStruct() {}

// GetDefaultExportPolicy retrieves the value of the leaf DefaultExportPolicy from the Bgp_PeerGroup_ApplyPolicy
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DefaultExportPolicy is set, it can safely use t.GetDefaultExportPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DefaultExportPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_ApplyPolicy) GetDefaultExportPolicy() E_RoutingPolicy_DefaultPolicyType {
	if t == nil || t.DefaultExportPolicy == 0 {
		return RoutingPolicy_DefaultPolicyType_REJECT_ROUTE
	}
	return t.DefaultExportPolicy
}

// GetDefaultImportPolicy retrieves the value of the leaf DefaultImportPolicy from the Bgp_PeerGroup_ApplyPolicy
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DefaultImportPolicy is set, it can safely use t.GetDefaultImportPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DefaultImportPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_ApplyPolicy) GetDefaultImportPolicy() E_RoutingPolicy_DefaultPolicyType {
	if t == nil || t.DefaultImportPolicy == 0 {
		return RoutingPolicy_DefaultPolicyType_REJECT_ROUTE
	}
	return t.DefaultImportPolicy
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the Bgp_PeerGroup_ApplyPolicy
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExportPolicy is set, it can safely use t.GetExportPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExportPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_ApplyPolicy) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the Bgp_PeerGroup_ApplyPolicy
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ImportPolicy is set, it can safely use t.GetImportPolicy()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ImportPolicy == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_ApplyPolicy) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_ApplyPolicy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_ApplyPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_ApplyPolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_PeerGroup_AsPathOptions represents the /openconfig-bgp/bgp/peer-groups/peer-group/as-path-options YANG schema element.
type Bgp_PeerGroup_AsPathOptions struct {
	AllowOwnAs          *uint8 `path:"state/allow-own-as" module:"openconfig-bgp"`
	DisablePeerAsFilter *bool  `path:"state/disable-peer-as-filter" module:"openconfig-bgp"`
	ReplacePeerAs       *bool  `path:"state/replace-peer-as" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_AsPathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_AsPathOptions) IsYANGGoStruct() {}

// GetAllowOwnAs retrieves the value of the leaf AllowOwnAs from the Bgp_PeerGroup_AsPathOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AllowOwnAs is set, it can safely use t.GetAllowOwnAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AllowOwnAs == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AsPathOptions) GetAllowOwnAs() uint8 {
	if t == nil || t.AllowOwnAs == nil {
		return 0
	}
	return *t.AllowOwnAs
}

// GetDisablePeerAsFilter retrieves the value of the leaf DisablePeerAsFilter from the Bgp_PeerGroup_AsPathOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DisablePeerAsFilter is set, it can safely use t.GetDisablePeerAsFilter()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DisablePeerAsFilter == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AsPathOptions) GetDisablePeerAsFilter() bool {
	if t == nil || t.DisablePeerAsFilter == nil {
		return false
	}
	return *t.DisablePeerAsFilter
}

// GetReplacePeerAs retrieves the value of the leaf ReplacePeerAs from the Bgp_PeerGroup_AsPathOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ReplacePeerAs is set, it can safely use t.GetReplacePeerAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ReplacePeerAs == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_AsPathOptions) GetReplacePeerAs() bool {
	if t == nil || t.ReplacePeerAs == nil {
		return false
	}
	return *t.ReplacePeerAs
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_AsPathOptions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_AsPathOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_AsPathOptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_PeerGroup_EbgpMultihop represents the /openconfig-bgp/bgp/peer-groups/peer-group/ebgp-multihop YANG schema element.
type Bgp_PeerGroup_EbgpMultihop struct {
	Enabled     *bool  `path:"state/enabled" module:"openconfig-bgp"`
	MultihopTtl *uint8 `path:"state/multihop-ttl" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_EbgpMultihop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_EbgpMultihop) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_PeerGroup_EbgpMultihop
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_EbgpMultihop) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetMultihopTtl retrieves the value of the leaf MultihopTtl from the Bgp_PeerGroup_EbgpMultihop
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MultihopTtl is set, it can safely use t.GetMultihopTtl()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MultihopTtl == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_EbgpMultihop) GetMultihopTtl() uint8 {
	if t == nil || t.MultihopTtl == nil {
		return 0
	}
	return *t.MultihopTtl
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_EbgpMultihop) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_EbgpMultihop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_EbgpMultihop) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_PeerGroup_EnableBfd represents the /openconfig-bgp/bgp/peer-groups/peer-group/enable-bfd YANG schema element.
type Bgp_PeerGroup_EnableBfd struct {
	Enabled *bool `path:"state/enabled" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_EnableBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_EnableBfd) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_PeerGroup_EnableBfd
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_EnableBfd) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_EnableBfd) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_EnableBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_EnableBfd) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_PeerGroup_ErrorHandling represents the /openconfig-bgp/bgp/peer-groups/peer-group/error-handling YANG schema element.
type Bgp_PeerGroup_ErrorHandling struct {
	TreatAsWithdraw *bool `path:"state/treat-as-withdraw" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_ErrorHandling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_ErrorHandling) IsYANGGoStruct() {}

// GetTreatAsWithdraw retrieves the value of the leaf TreatAsWithdraw from the Bgp_PeerGroup_ErrorHandling
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TreatAsWithdraw is set, it can safely use t.GetTreatAsWithdraw()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TreatAsWithdraw == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_ErrorHandling) GetTreatAsWithdraw() bool {
	if t == nil || t.TreatAsWithdraw == nil {
		return false
	}
	return *t.TreatAsWithdraw
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_ErrorHandling) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_ErrorHandling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_ErrorHandling) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_PeerGroup_GracefulRestart represents the /openconfig-bgp/bgp/peer-groups/peer-group/graceful-restart YANG schema element.
type Bgp_PeerGroup_GracefulRestart struct {
	Enabled         *bool    `path:"state/enabled" module:"openconfig-bgp"`
	HelperOnly      *bool    `path:"state/helper-only" module:"openconfig-bgp"`
	RestartTime     *uint16  `path:"state/restart-time" module:"openconfig-bgp"`
	StaleRoutesTime *float64 `path:"state/stale-routes-time" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_GracefulRestart) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_PeerGroup_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_GracefulRestart) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetHelperOnly retrieves the value of the leaf HelperOnly from the Bgp_PeerGroup_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HelperOnly is set, it can safely use t.GetHelperOnly()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HelperOnly == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_GracefulRestart) GetHelperOnly() bool {
	if t == nil || t.HelperOnly == nil {
		return false
	}
	return *t.HelperOnly
}

// GetRestartTime retrieves the value of the leaf RestartTime from the Bgp_PeerGroup_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RestartTime is set, it can safely use t.GetRestartTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RestartTime == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_GracefulRestart) GetRestartTime() uint16 {
	if t == nil || t.RestartTime == nil {
		return 0
	}
	return *t.RestartTime
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the Bgp_PeerGroup_GracefulRestart
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if StaleRoutesTime is set, it can safely use t.GetStaleRoutesTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.StaleRoutesTime == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_GracefulRestart) GetStaleRoutesTime() float64 {
	if t == nil || t.StaleRoutesTime == nil {
		return 0.0
	}
	return *t.StaleRoutesTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_PeerGroup_LoggingOptions represents the /openconfig-bgp/bgp/peer-groups/peer-group/logging-options YANG schema element.
type Bgp_PeerGroup_LoggingOptions struct {
	LogNeighborStateChanges *bool `path:"state/log-neighbor-state-changes" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_LoggingOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_LoggingOptions) IsYANGGoStruct() {}

// GetLogNeighborStateChanges retrieves the value of the leaf LogNeighborStateChanges from the Bgp_PeerGroup_LoggingOptions
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LogNeighborStateChanges is set, it can safely use t.GetLogNeighborStateChanges()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LogNeighborStateChanges == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_LoggingOptions) GetLogNeighborStateChanges() bool {
	if t == nil || t.LogNeighborStateChanges == nil {
		return true
	}
	return *t.LogNeighborStateChanges
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_LoggingOptions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_LoggingOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_LoggingOptions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_PeerGroup_RouteReflector represents the /openconfig-bgp/bgp/peer-groups/peer-group/route-reflector YANG schema element.
type Bgp_PeerGroup_RouteReflector struct {
	RouteReflectorClient    *bool                                                      `path:"state/route-reflector-client" module:"openconfig-bgp"`
	RouteReflectorClusterId Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union `path:"state/route-reflector-cluster-id" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_RouteReflector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_RouteReflector) IsYANGGoStruct() {}

// GetRouteReflectorClient retrieves the value of the leaf RouteReflectorClient from the Bgp_PeerGroup_RouteReflector
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RouteReflectorClient is set, it can safely use t.GetRouteReflectorClient()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RouteReflectorClient == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_RouteReflector) GetRouteReflectorClient() bool {
	if t == nil || t.RouteReflectorClient == nil {
		return false
	}
	return *t.RouteReflectorClient
}

// GetRouteReflectorClusterId retrieves the value of the leaf RouteReflectorClusterId from the Bgp_PeerGroup_RouteReflector
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RouteReflectorClusterId is set, it can safely use t.GetRouteReflectorClusterId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RouteReflectorClusterId == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_RouteReflector) GetRouteReflectorClusterId() Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union {
	if t == nil || t.RouteReflectorClusterId == nil {
		return nil
	}
	return t.RouteReflectorClusterId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_RouteReflector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_RouteReflector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_RouteReflector) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-bgp/bgp/peer-groups/peer-group/route-reflector/state/route-reflector-cluster-id within the YANG schema.
type Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union interface {
	Is_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union()
}

// Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_String is used when /openconfig-bgp/bgp/peer-groups/peer-group/route-reflector/state/route-reflector-cluster-id
// is to be set to a string value.
type Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_String struct {
	String string
}

// Is_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union ensures that Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_String
// implements the Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union interface.
func (*Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_String) Is_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union() {
}

// Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_Uint32 is used when /openconfig-bgp/bgp/peer-groups/peer-group/route-reflector/state/route-reflector-cluster-id
// is to be set to a uint32 value.
type Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union ensures that Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_Uint32
// implements the Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union interface.
func (*Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_Uint32) Is_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union() {
}

// To_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Bgp_PeerGroup_RouteReflector) To_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union(i interface{}) (Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union, error) {
	switch v := i.(type) {
	case string:
		return &Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_String{v}, nil
	case uint32:
		return &Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}

// Bgp_PeerGroup_Timers represents the /openconfig-bgp/bgp/peer-groups/peer-group/timers YANG schema element.
type Bgp_PeerGroup_Timers struct {
	ConnectRetry                 *float64 `path:"state/connect-retry" module:"openconfig-bgp"`
	HoldTime                     *float64 `path:"state/hold-time" module:"openconfig-bgp"`
	KeepaliveInterval            *float64 `path:"state/keepalive-interval" module:"openconfig-bgp"`
	MinimumAdvertisementInterval *float64 `path:"state/minimum-advertisement-interval" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_Timers) IsYANGGoStruct() {}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the Bgp_PeerGroup_Timers
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ConnectRetry is set, it can safely use t.GetConnectRetry()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ConnectRetry == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_Timers) GetConnectRetry() float64 {
	if t == nil || t.ConnectRetry == nil {
		return 30
	}
	return *t.ConnectRetry
}

// GetHoldTime retrieves the value of the leaf HoldTime from the Bgp_PeerGroup_Timers
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HoldTime is set, it can safely use t.GetHoldTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HoldTime == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_Timers) GetHoldTime() float64 {
	if t == nil || t.HoldTime == nil {
		return 90
	}
	return *t.HoldTime
}

// GetKeepaliveInterval retrieves the value of the leaf KeepaliveInterval from the Bgp_PeerGroup_Timers
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if KeepaliveInterval is set, it can safely use t.GetKeepaliveInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.KeepaliveInterval == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_Timers) GetKeepaliveInterval() float64 {
	if t == nil || t.KeepaliveInterval == nil {
		return 30
	}
	return *t.KeepaliveInterval
}

// GetMinimumAdvertisementInterval retrieves the value of the leaf MinimumAdvertisementInterval from the Bgp_PeerGroup_Timers
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinimumAdvertisementInterval is set, it can safely use t.GetMinimumAdvertisementInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinimumAdvertisementInterval == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_Timers) GetMinimumAdvertisementInterval() float64 {
	if t == nil || t.MinimumAdvertisementInterval == nil {
		return 30
	}
	return *t.MinimumAdvertisementInterval
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_Timers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_Timers) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_PeerGroup_Transport represents the /openconfig-bgp/bgp/peer-groups/peer-group/transport YANG schema element.
type Bgp_PeerGroup_Transport struct {
	LocalAddress *string `path:"state/local-address" module:"openconfig-bgp"`
	MtuDiscovery *bool   `path:"state/mtu-discovery" module:"openconfig-bgp"`
	PassiveMode  *bool   `path:"state/passive-mode" module:"openconfig-bgp"`
	TcpMss       *uint16 `path:"state/tcp-mss" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_Transport) IsYANGGoStruct() {}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the Bgp_PeerGroup_Transport
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LocalAddress is set, it can safely use t.GetLocalAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LocalAddress == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_Transport) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetMtuDiscovery retrieves the value of the leaf MtuDiscovery from the Bgp_PeerGroup_Transport
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MtuDiscovery is set, it can safely use t.GetMtuDiscovery()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MtuDiscovery == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_Transport) GetMtuDiscovery() bool {
	if t == nil || t.MtuDiscovery == nil {
		return false
	}
	return *t.MtuDiscovery
}

// GetPassiveMode retrieves the value of the leaf PassiveMode from the Bgp_PeerGroup_Transport
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PassiveMode is set, it can safely use t.GetPassiveMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PassiveMode == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_Transport) GetPassiveMode() bool {
	if t == nil || t.PassiveMode == nil {
		return false
	}
	return *t.PassiveMode
}

// GetTcpMss retrieves the value of the leaf TcpMss from the Bgp_PeerGroup_Transport
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TcpMss is set, it can safely use t.GetTcpMss()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TcpMss == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_Transport) GetTcpMss() uint16 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_Transport) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_Transport) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_PeerGroup_UseMultiplePaths represents the /openconfig-bgp/bgp/peer-groups/peer-group/use-multiple-paths YANG schema element.
type Bgp_PeerGroup_UseMultiplePaths struct {
	Ebgp    *Bgp_PeerGroup_UseMultiplePaths_Ebgp `path:"ebgp" module:"openconfig-bgp"`
	Enabled *bool                                `path:"state/enabled" module:"openconfig-bgp"`
	Ibgp    *Bgp_PeerGroup_UseMultiplePaths_Ibgp `path:"ibgp" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_UseMultiplePaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_UseMultiplePaths) IsYANGGoStruct() {}

// GetOrCreateEbgp retrieves the value of the Ebgp field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_UseMultiplePaths) GetOrCreateEbgp() *Bgp_PeerGroup_UseMultiplePaths_Ebgp {
	if t.Ebgp != nil {
		return t.Ebgp
	}
	t.Ebgp = &Bgp_PeerGroup_UseMultiplePaths_Ebgp{}
	return t.Ebgp
}

// GetOrCreateIbgp retrieves the value of the Ibgp field
// or returns the existing field if it already exists.
func (t *Bgp_PeerGroup_UseMultiplePaths) GetOrCreateIbgp() *Bgp_PeerGroup_UseMultiplePaths_Ibgp {
	if t.Ibgp != nil {
		return t.Ibgp
	}
	t.Ibgp = &Bgp_PeerGroup_UseMultiplePaths_Ibgp{}
	return t.Ibgp
}

// GetEbgp returns the value of the Ebgp struct pointer
// from Bgp_PeerGroup_UseMultiplePaths. If the receiver or the field Ebgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_UseMultiplePaths) GetEbgp() *Bgp_PeerGroup_UseMultiplePaths_Ebgp {
	if t != nil && t.Ebgp != nil {
		return t.Ebgp
	}
	return nil
}

// GetIbgp returns the value of the Ibgp struct pointer
// from Bgp_PeerGroup_UseMultiplePaths. If the receiver or the field Ibgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_PeerGroup_UseMultiplePaths) GetIbgp() *Bgp_PeerGroup_UseMultiplePaths_Ibgp {
	if t != nil && t.Ibgp != nil {
		return t.Ibgp
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Bgp_PeerGroup_UseMultiplePaths
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_UseMultiplePaths) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_UseMultiplePaths) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_UseMultiplePaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_UseMultiplePaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_UseMultiplePaths_Ebgp represents the /openconfig-bgp/bgp/peer-groups/peer-group/use-multiple-paths/ebgp YANG schema element.
type Bgp_PeerGroup_UseMultiplePaths_Ebgp struct {
	AllowMultipleAs *bool   `path:"state/allow-multiple-as" module:"openconfig-bgp"`
	MaximumPaths    *uint32 `path:"state/maximum-paths" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_UseMultiplePaths_Ebgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_UseMultiplePaths_Ebgp) IsYANGGoStruct() {}

// GetAllowMultipleAs retrieves the value of the leaf AllowMultipleAs from the Bgp_PeerGroup_UseMultiplePaths_Ebgp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AllowMultipleAs is set, it can safely use t.GetAllowMultipleAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AllowMultipleAs == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_UseMultiplePaths_Ebgp) GetAllowMultipleAs() bool {
	if t == nil || t.AllowMultipleAs == nil {
		return false
	}
	return *t.AllowMultipleAs
}

// GetMaximumPaths retrieves the value of the leaf MaximumPaths from the Bgp_PeerGroup_UseMultiplePaths_Ebgp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaximumPaths is set, it can safely use t.GetMaximumPaths()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaximumPaths == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_UseMultiplePaths_Ebgp) GetMaximumPaths() uint32 {
	if t == nil || t.MaximumPaths == nil {
		return 1
	}
	return *t.MaximumPaths
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_UseMultiplePaths_Ebgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_UseMultiplePaths_Ebgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_UseMultiplePaths_Ebgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_PeerGroup_UseMultiplePaths_Ibgp represents the /openconfig-bgp/bgp/peer-groups/peer-group/use-multiple-paths/ibgp YANG schema element.
type Bgp_PeerGroup_UseMultiplePaths_Ibgp struct {
	MaximumPaths *uint32 `path:"state/maximum-paths" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_PeerGroup_UseMultiplePaths_Ibgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_PeerGroup_UseMultiplePaths_Ibgp) IsYANGGoStruct() {}

// GetMaximumPaths retrieves the value of the leaf MaximumPaths from the Bgp_PeerGroup_UseMultiplePaths_Ibgp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaximumPaths is set, it can safely use t.GetMaximumPaths()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaximumPaths == nil'
// before retrieving the leaf's value.
func (t *Bgp_PeerGroup_UseMultiplePaths_Ibgp) GetMaximumPaths() uint32 {
	if t == nil || t.MaximumPaths == nil {
		return 1
	}
	return *t.MaximumPaths
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_PeerGroup_UseMultiplePaths_Ibgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_PeerGroup_UseMultiplePaths_Ibgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_PeerGroup_UseMultiplePaths_Ibgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib represents the /openconfig-bgp/bgp/rib YANG schema element.
type Bgp_Rib struct {
	AfiSafi      map[E_BgpTypes_AFI_SAFI_TYPE]*Bgp_Rib_AfiSafi `path:"afi-safis/afi-safi" module:"openconfig-bgp"`
	AttrSet      map[uint64]*Bgp_Rib_AttrSet                   `path:"attr-sets/attr-set" module:"openconfig-bgp"`
	Community    map[uint64]*Bgp_Rib_Community                 `path:"communities/community" module:"openconfig-bgp"`
	ExtCommunity map[uint64]*Bgp_Rib_ExtCommunity              `path:"ext-communities/ext-community" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib) IsYANGGoStruct() {}

// NewAfiSafi creates a new entry in the AfiSafi list of the
// Bgp_Rib struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib) NewAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) (*Bgp_Rib_AfiSafi, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_BgpTypes_AFI_SAFI_TYPE]*Bgp_Rib_AfiSafi)
	}

	key := AfiSafiName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AfiSafi[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AfiSafi", key)
	}

	t.AfiSafi[key] = &Bgp_Rib_AfiSafi{
		AfiSafiName: AfiSafiName,
	}

	return t.AfiSafi[key], nil
}

// GetOrCreateAfiSafi retrieves the value with the specified keys from
// the receiver Bgp_Rib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib) GetOrCreateAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) *Bgp_Rib_AfiSafi {

	key := AfiSafiName

	if v, ok := t.AfiSafi[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAfiSafi(AfiSafiName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAfiSafi got unexpected error: %v", err))
	}
	return v
}

// GetAfiSafi retrieves the value with the specified key from
// the AfiSafi map field of Bgp_Rib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib) GetAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) *Bgp_Rib_AfiSafi {

	if t == nil {
		return nil
	}

	key := AfiSafiName

	if lm, ok := t.AfiSafi[key]; ok {
		return lm
	}
	return nil
}

// DeleteAfiSafi deletes the value with the specified keys from
// the receiver Bgp_Rib. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib) DeleteAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) {
	key := AfiSafiName

	delete(t.AfiSafi, key)
}

// AppendAfiSafi appends the supplied Bgp_Rib_AfiSafi struct to the
// list AfiSafi of Bgp_Rib. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi already exist in the list, an error is
// returned.
func (t *Bgp_Rib) AppendAfiSafi(v *Bgp_Rib_AfiSafi) error {
	key := v.AfiSafiName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_BgpTypes_AFI_SAFI_TYPE]*Bgp_Rib_AfiSafi)
	}

	if _, ok := t.AfiSafi[key]; ok {
		return fmt.Errorf("duplicate key for list AfiSafi %v", key)
	}

	t.AfiSafi[key] = v
	return nil
}

// NewAttrSet creates a new entry in the AttrSet list of the
// Bgp_Rib struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib) NewAttrSet(Index uint64) (*Bgp_Rib_AttrSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AttrSet == nil {
		t.AttrSet = make(map[uint64]*Bgp_Rib_AttrSet)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AttrSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AttrSet", key)
	}

	t.AttrSet[key] = &Bgp_Rib_AttrSet{
		Index: &Index,
	}

	return t.AttrSet[key], nil
}

// GetOrCreateAttrSet retrieves the value with the specified keys from
// the receiver Bgp_Rib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib) GetOrCreateAttrSet(Index uint64) *Bgp_Rib_AttrSet {

	key := Index

	if v, ok := t.AttrSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAttrSet(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAttrSet got unexpected error: %v", err))
	}
	return v
}

// GetAttrSet retrieves the value with the specified key from
// the AttrSet map field of Bgp_Rib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib) GetAttrSet(Index uint64) *Bgp_Rib_AttrSet {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.AttrSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAttrSet deletes the value with the specified keys from
// the receiver Bgp_Rib. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib) DeleteAttrSet(Index uint64) {
	key := Index

	delete(t.AttrSet, key)
}

// AppendAttrSet appends the supplied Bgp_Rib_AttrSet struct to the
// list AttrSet of Bgp_Rib. If the key value(s) specified in
// the supplied Bgp_Rib_AttrSet already exist in the list, an error is
// returned.
func (t *Bgp_Rib) AppendAttrSet(v *Bgp_Rib_AttrSet) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AttrSet == nil {
		t.AttrSet = make(map[uint64]*Bgp_Rib_AttrSet)
	}

	if _, ok := t.AttrSet[key]; ok {
		return fmt.Errorf("duplicate key for list AttrSet %v", key)
	}

	t.AttrSet[key] = v
	return nil
}

// NewCommunity creates a new entry in the Community list of the
// Bgp_Rib struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib) NewCommunity(Index uint64) (*Bgp_Rib_Community, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Community == nil {
		t.Community = make(map[uint64]*Bgp_Rib_Community)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Community[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Community", key)
	}

	t.Community[key] = &Bgp_Rib_Community{
		Index: &Index,
	}

	return t.Community[key], nil
}

// GetOrCreateCommunity retrieves the value with the specified keys from
// the receiver Bgp_Rib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib) GetOrCreateCommunity(Index uint64) *Bgp_Rib_Community {

	key := Index

	if v, ok := t.Community[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCommunity(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCommunity got unexpected error: %v", err))
	}
	return v
}

// GetCommunity retrieves the value with the specified key from
// the Community map field of Bgp_Rib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib) GetCommunity(Index uint64) *Bgp_Rib_Community {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Community[key]; ok {
		return lm
	}
	return nil
}

// DeleteCommunity deletes the value with the specified keys from
// the receiver Bgp_Rib. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib) DeleteCommunity(Index uint64) {
	key := Index

	delete(t.Community, key)
}

// AppendCommunity appends the supplied Bgp_Rib_Community struct to the
// list Community of Bgp_Rib. If the key value(s) specified in
// the supplied Bgp_Rib_Community already exist in the list, an error is
// returned.
func (t *Bgp_Rib) AppendCommunity(v *Bgp_Rib_Community) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Community == nil {
		t.Community = make(map[uint64]*Bgp_Rib_Community)
	}

	if _, ok := t.Community[key]; ok {
		return fmt.Errorf("duplicate key for list Community %v", key)
	}

	t.Community[key] = v
	return nil
}

// NewExtCommunity creates a new entry in the ExtCommunity list of the
// Bgp_Rib struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib) NewExtCommunity(Index uint64) (*Bgp_Rib_ExtCommunity, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExtCommunity == nil {
		t.ExtCommunity = make(map[uint64]*Bgp_Rib_ExtCommunity)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExtCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExtCommunity", key)
	}

	t.ExtCommunity[key] = &Bgp_Rib_ExtCommunity{
		Index: &Index,
	}

	return t.ExtCommunity[key], nil
}

// GetOrCreateExtCommunity retrieves the value with the specified keys from
// the receiver Bgp_Rib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib) GetOrCreateExtCommunity(Index uint64) *Bgp_Rib_ExtCommunity {

	key := Index

	if v, ok := t.ExtCommunity[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExtCommunity(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExtCommunity got unexpected error: %v", err))
	}
	return v
}

// GetExtCommunity retrieves the value with the specified key from
// the ExtCommunity map field of Bgp_Rib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib) GetExtCommunity(Index uint64) *Bgp_Rib_ExtCommunity {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.ExtCommunity[key]; ok {
		return lm
	}
	return nil
}

// DeleteExtCommunity deletes the value with the specified keys from
// the receiver Bgp_Rib. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib) DeleteExtCommunity(Index uint64) {
	key := Index

	delete(t.ExtCommunity, key)
}

// AppendExtCommunity appends the supplied Bgp_Rib_ExtCommunity struct to the
// list ExtCommunity of Bgp_Rib. If the key value(s) specified in
// the supplied Bgp_Rib_ExtCommunity already exist in the list, an error is
// returned.
func (t *Bgp_Rib) AppendExtCommunity(v *Bgp_Rib_ExtCommunity) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExtCommunity == nil {
		t.ExtCommunity = make(map[uint64]*Bgp_Rib_ExtCommunity)
	}

	if _, ok := t.ExtCommunity[key]; ok {
		return fmt.Errorf("duplicate key for list ExtCommunity %v", key)
	}

	t.ExtCommunity[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Rib_AfiSafi represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi YANG schema element.
type Bgp_Rib_AfiSafi struct {
	AfiSafiName    E_BgpTypes_AFI_SAFI_TYPE        `path:"state/afi-safi-name|afi-safi-name" module:"openconfig-bgp"`
	Ipv4SrtePolicy *Bgp_Rib_AfiSafi_Ipv4SrtePolicy `path:"ipv4-srte-policy" module:"openconfig-bgp"`
	Ipv4Unicast    *Bgp_Rib_AfiSafi_Ipv4Unicast    `path:"ipv4-unicast" module:"openconfig-bgp"`
	Ipv6SrtePolicy *Bgp_Rib_AfiSafi_Ipv6SrtePolicy `path:"ipv6-srte-policy" module:"openconfig-bgp"`
	Ipv6Unicast    *Bgp_Rib_AfiSafi_Ipv6Unicast    `path:"ipv6-unicast" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi) IsYANGGoStruct() {}

// GetOrCreateIpv4SrtePolicy retrieves the value of the Ipv4SrtePolicy field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi) GetOrCreateIpv4SrtePolicy() *Bgp_Rib_AfiSafi_Ipv4SrtePolicy {
	if t.Ipv4SrtePolicy != nil {
		return t.Ipv4SrtePolicy
	}
	t.Ipv4SrtePolicy = &Bgp_Rib_AfiSafi_Ipv4SrtePolicy{}
	return t.Ipv4SrtePolicy
}

// GetOrCreateIpv4Unicast retrieves the value of the Ipv4Unicast field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi) GetOrCreateIpv4Unicast() *Bgp_Rib_AfiSafi_Ipv4Unicast {
	if t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	t.Ipv4Unicast = &Bgp_Rib_AfiSafi_Ipv4Unicast{}
	return t.Ipv4Unicast
}

// GetOrCreateIpv6SrtePolicy retrieves the value of the Ipv6SrtePolicy field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi) GetOrCreateIpv6SrtePolicy() *Bgp_Rib_AfiSafi_Ipv6SrtePolicy {
	if t.Ipv6SrtePolicy != nil {
		return t.Ipv6SrtePolicy
	}
	t.Ipv6SrtePolicy = &Bgp_Rib_AfiSafi_Ipv6SrtePolicy{}
	return t.Ipv6SrtePolicy
}

// GetOrCreateIpv6Unicast retrieves the value of the Ipv6Unicast field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi) GetOrCreateIpv6Unicast() *Bgp_Rib_AfiSafi_Ipv6Unicast {
	if t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	t.Ipv6Unicast = &Bgp_Rib_AfiSafi_Ipv6Unicast{}
	return t.Ipv6Unicast
}

// GetIpv4SrtePolicy returns the value of the Ipv4SrtePolicy struct pointer
// from Bgp_Rib_AfiSafi. If the receiver or the field Ipv4SrtePolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi) GetIpv4SrtePolicy() *Bgp_Rib_AfiSafi_Ipv4SrtePolicy {
	if t != nil && t.Ipv4SrtePolicy != nil {
		return t.Ipv4SrtePolicy
	}
	return nil
}

// GetIpv4Unicast returns the value of the Ipv4Unicast struct pointer
// from Bgp_Rib_AfiSafi. If the receiver or the field Ipv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi) GetIpv4Unicast() *Bgp_Rib_AfiSafi_Ipv4Unicast {
	if t != nil && t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	return nil
}

// GetIpv6SrtePolicy returns the value of the Ipv6SrtePolicy struct pointer
// from Bgp_Rib_AfiSafi. If the receiver or the field Ipv6SrtePolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi) GetIpv6SrtePolicy() *Bgp_Rib_AfiSafi_Ipv6SrtePolicy {
	if t != nil && t.Ipv6SrtePolicy != nil {
		return t.Ipv6SrtePolicy
	}
	return nil
}

// GetIpv6Unicast returns the value of the Ipv6Unicast struct pointer
// from Bgp_Rib_AfiSafi. If the receiver or the field Ipv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi) GetIpv6Unicast() *Bgp_Rib_AfiSafi_Ipv6Unicast {
	if t != nil && t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	return nil
}

// GetAfiSafiName retrieves the value of the leaf AfiSafiName from the Bgp_Rib_AfiSafi
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AfiSafiName is set, it can safely use t.GetAfiSafiName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AfiSafiName == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi) GetAfiSafiName() E_BgpTypes_AFI_SAFI_TYPE {
	if t == nil || t.AfiSafiName == 0 {
		return 0
	}
	return t.AfiSafiName
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"afi-safi-name": t.AfiSafiName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy struct {
	LocRib   *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib              `path:"loc-rib" module:"openconfig-bgp"`
	Neighbor map[string]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor `path:"neighbors/neighbor" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4SrtePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// Bgp_Rib_AfiSafi_Ipv4SrtePolicy struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy) NewNeighbor(NeighborAddress string) (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor)
	}

	key := NeighborAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor{
		NeighborAddress: &NeighborAddress,
	}

	return t.Neighbor[key], nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy) GetOrCreateNeighbor(NeighborAddress string) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor {

	key := NeighborAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(NeighborAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Bgp_Rib_AfiSafi_Ipv4SrtePolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy) GetNeighbor(NeighborAddress string) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor {

	if t == nil {
		return nil
	}

	key := NeighborAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy) DeleteNeighbor(NeighborAddress string) {
	key := NeighborAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor struct to the
// list Neighbor of Bgp_Rib_AfiSafi_Ipv4SrtePolicy. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy) AppendNeighbor(v *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) error {
	if v.NeighborAddress == nil {
		return fmt.Errorf("invalid nil key received for NeighborAddress")
	}

	key := *v.NeighborAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateLocRib retrieves the value of the LocRib field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy) GetOrCreateLocRib() *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib {
	if t.LocRib != nil {
		return t.LocRib
	}
	t.LocRib = &Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib{}
	return t.LocRib
}

// GetLocRib returns the value of the LocRib struct pointer
// from Bgp_Rib_AfiSafi_Ipv4SrtePolicy. If the receiver or the field LocRib is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy) GetLocRib() *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib {
	if t != nil && t.LocRib != nil {
		return t.LocRib
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4SrtePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/loc-rib YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib struct {
	Route map[Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/loc-rib.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib) NewRoute(PathId uint32, Endpoint string, Color uint32) (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route {

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib) GetRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/loc-rib/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route struct {
	AttrIndex         *uint64                                                                 `path:"state/attr-index" module:"openconfig-bgp"`
	Color             *uint32                                                                 `path:"state/color|color" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                 `path:"state/community-index" module:"openconfig-bgp"`
	Endpoint          *string                                                                 `path:"state/endpoint|endpoint" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                 `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                      `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                 `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                 `path:"state/path-id|path-id" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                   `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Color is set, it can safely use t.GetColor()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Color == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Endpoint is set, it can safely use t.GetEndpoint()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Endpoint == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/loc-rib/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) IsYANGGoStruct() {}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor struct {
	AdjRibInPost    *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost  `path:"adj-rib-in-post" module:"openconfig-bgp"`
	AdjRibInPre     *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre   `path:"adj-rib-in-pre" module:"openconfig-bgp"`
	AdjRibOutPost   *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost `path:"adj-rib-out-post" module:"openconfig-bgp"`
	AdjRibOutPre    *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre  `path:"adj-rib-out-pre" module:"openconfig-bgp"`
	NeighborAddress *string                                                `path:"state/neighbor-address|neighbor-address" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) IsYANGGoStruct() {}

// GetOrCreateAdjRibInPost retrieves the value of the AdjRibInPost field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetOrCreateAdjRibInPost() *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost {
	if t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	t.AdjRibInPost = &Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost{}
	return t.AdjRibInPost
}

// GetOrCreateAdjRibInPre retrieves the value of the AdjRibInPre field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetOrCreateAdjRibInPre() *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre {
	if t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	t.AdjRibInPre = &Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre{}
	return t.AdjRibInPre
}

// GetOrCreateAdjRibOutPost retrieves the value of the AdjRibOutPost field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetOrCreateAdjRibOutPost() *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost {
	if t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	t.AdjRibOutPost = &Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost{}
	return t.AdjRibOutPost
}

// GetOrCreateAdjRibOutPre retrieves the value of the AdjRibOutPre field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetOrCreateAdjRibOutPre() *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre {
	if t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	t.AdjRibOutPre = &Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre{}
	return t.AdjRibOutPre
}

// GetAdjRibInPost returns the value of the AdjRibInPost struct pointer
// from Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor. If the receiver or the field AdjRibInPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetAdjRibInPost() *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost {
	if t != nil && t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	return nil
}

// GetAdjRibInPre returns the value of the AdjRibInPre struct pointer
// from Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor. If the receiver or the field AdjRibInPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetAdjRibInPre() *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre {
	if t != nil && t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	return nil
}

// GetAdjRibOutPost returns the value of the AdjRibOutPost struct pointer
// from Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor. If the receiver or the field AdjRibOutPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetAdjRibOutPost() *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost {
	if t != nil && t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	return nil
}

// GetAdjRibOutPre returns the value of the AdjRibOutPre struct pointer
// from Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor. If the receiver or the field AdjRibOutPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetAdjRibOutPre() *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre {
	if t != nil && t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	return nil
}

// GetNeighborAddress retrieves the value of the leaf NeighborAddress from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NeighborAddress is set, it can safely use t.GetNeighborAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NeighborAddress == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetNeighborAddress() string {
	if t == nil || t.NeighborAddress == nil {
		return ""
	}
	return *t.NeighborAddress
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborAddress == nil {
		return nil, fmt.Errorf("nil value for key NeighborAddress")
	}

	return map[string]interface{}{
		"neighbor-address": *t.NeighborAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-post YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost struct {
	Route map[Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-post.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost) NewRoute(PathId uint32, Endpoint string, Color uint32) (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route {

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost) GetRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-post/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route struct {
	AttrIndex         *uint64                                                                                `path:"state/attr-index" module:"openconfig-bgp"`
	BestPath          *bool                                                                                  `path:"state/best-path" module:"openconfig-bgp"`
	Color             *uint32                                                                                `path:"state/color|color" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                                `path:"state/community-index" module:"openconfig-bgp"`
	Endpoint          *string                                                                                `path:"state/endpoint|endpoint" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                                `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                     `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                                `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                                `path:"state/path-id|path-id" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                                  `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetBestPath retrieves the value of the leaf BestPath from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BestPath is set, it can safely use t.GetBestPath()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BestPath == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetBestPath() bool {
	if t == nil || t.BestPath == nil {
		return false
	}
	return *t.BestPath
}

// GetColor retrieves the value of the leaf Color from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Color is set, it can safely use t.GetColor()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Color == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Endpoint is set, it can safely use t.GetEndpoint()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Endpoint == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-pre YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre struct {
	Route map[Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-pre.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre) NewRoute(PathId uint32, Endpoint string, Color uint32) (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route {

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre) GetRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-pre/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route struct {
	AttrIndex         *uint64                                                                               `path:"state/attr-index" module:"openconfig-bgp"`
	Color             *uint32                                                                               `path:"state/color|color" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                               `path:"state/community-index" module:"openconfig-bgp"`
	Endpoint          *string                                                                               `path:"state/endpoint|endpoint" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                               `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                    `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                               `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                               `path:"state/path-id|path-id" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                                 `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Color is set, it can safely use t.GetColor()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Color == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Endpoint is set, it can safely use t.GetEndpoint()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Endpoint == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) IsYANGGoStruct() {}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-post YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost struct {
	Route map[Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-post.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost) NewRoute(PathId uint32, Endpoint string, Color uint32) (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route {

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost) GetRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-post/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route struct {
	AttrIndex         *uint64                                                                                 `path:"state/attr-index" module:"openconfig-bgp"`
	Color             *uint32                                                                                 `path:"state/color|color" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                                 `path:"state/community-index" module:"openconfig-bgp"`
	Endpoint          *string                                                                                 `path:"state/endpoint|endpoint" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                                 `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                      `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                                 `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                                 `path:"state/path-id|path-id" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                                   `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Color is set, it can safely use t.GetColor()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Color == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Endpoint is set, it can safely use t.GetEndpoint()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Endpoint == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-pre YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre struct {
	Route map[Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-pre.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) NewRoute(PathId uint32, Endpoint string, Color uint32) (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route {

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) GetRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-pre/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route struct {
	AttrIndex         *uint64                                                                                `path:"state/attr-index" module:"openconfig-bgp"`
	Color             *uint32                                                                                `path:"state/color|color" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                                `path:"state/community-index" module:"openconfig-bgp"`
	Endpoint          *string                                                                                `path:"state/endpoint|endpoint" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                                `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                     `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                                `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                                `path:"state/path-id|path-id" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                                  `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Color is set, it can safely use t.GetColor()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Color == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Endpoint is set, it can safely use t.GetEndpoint()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Endpoint == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4Unicast represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4Unicast struct {
	LocRib   *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib              `path:"loc-rib" module:"openconfig-bgp"`
	Neighbor map[string]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor `path:"neighbors/neighbor" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// Bgp_Rib_AfiSafi_Ipv4Unicast struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast) NewNeighbor(NeighborAddress string) (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor)
	}

	key := NeighborAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor{
		NeighborAddress: &NeighborAddress,
	}

	return t.Neighbor[key], nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast) GetOrCreateNeighbor(NeighborAddress string) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor {

	key := NeighborAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(NeighborAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Bgp_Rib_AfiSafi_Ipv4Unicast. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast) GetNeighbor(NeighborAddress string) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor {

	if t == nil {
		return nil
	}

	key := NeighborAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast) DeleteNeighbor(NeighborAddress string) {
	key := NeighborAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor struct to the
// list Neighbor of Bgp_Rib_AfiSafi_Ipv4Unicast. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast) AppendNeighbor(v *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) error {
	if v.NeighborAddress == nil {
		return fmt.Errorf("invalid nil key received for NeighborAddress")
	}

	key := *v.NeighborAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateLocRib retrieves the value of the LocRib field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast) GetOrCreateLocRib() *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib {
	if t.LocRib != nil {
		return t.LocRib
	}
	t.LocRib = &Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib{}
	return t.LocRib
}

// GetLocRib returns the value of the LocRib struct pointer
// from Bgp_Rib_AfiSafi_Ipv4Unicast. If the receiver or the field LocRib is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast) GetLocRib() *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib {
	if t != nil && t.LocRib != nil {
		return t.LocRib
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib struct {
	Route map[Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key]*Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib.
type Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key struct {
	Prefix string                                                `path:"prefix"`
	Origin Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union `path:"origin"`
	PathId uint32                                                `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) NewRoute(Prefix string, Origin Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union, PathId uint32) (*Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key]*Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route{
		Prefix: &Prefix,
		Origin: Origin,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) GetOrCreateRoute(Prefix string, Origin Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union, PathId uint32) *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route {

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, Origin, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) GetRoute(Prefix string, Origin Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union, PathId uint32) *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) DeleteRoute(Prefix string, Origin Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union, PathId uint32) {
	key := Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key{
		Prefix: *v.Prefix,
		Origin: v.Origin,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key]*Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route struct {
	AttrIndex         *uint64                                                              `path:"state/attr-index" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                              `path:"state/community-index" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                              `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                   `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                              `path:"state/last-modified" module:"openconfig-bgp"`
	Origin            Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union                `path:"state/origin|origin" module:"openconfig-bgp"`
	PathId            *uint32                                                              `path:"state/path-id|path-id" module:"openconfig-bgp"`
	Prefix            *string                                                              `path:"state/prefix|prefix" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetOrigin retrieves the value of the leaf Origin from the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetOrigin() Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union {
	if t == nil || t.Origin == nil {
		return nil
	}
	return t.Origin
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefix is set, it can safely use t.GetPrefix()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefix == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) ΛListKeyMap() (map[string]interface{}, error) {

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"origin":  t.Origin,
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib/routes/route/state/origin within the YANG schema.
type Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union interface {
	Is_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union()
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union_E_PolicyTypes_INSTALL_PROTOCOL_TYPE is used when /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib/routes/route/state/origin
// is to be set to a E_PolicyTypes_INSTALL_PROTOCOL_TYPE value.
type Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union_E_PolicyTypes_INSTALL_PROTOCOL_TYPE struct {
	E_PolicyTypes_INSTALL_PROTOCOL_TYPE E_PolicyTypes_INSTALL_PROTOCOL_TYPE
}

// Is_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union_E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// implements the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union interface.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union_E_PolicyTypes_INSTALL_PROTOCOL_TYPE) Is_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union() {
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union_String is used when /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib/routes/route/state/origin
// is to be set to a string value.
type Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union_String struct {
	String string
}

// Is_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union_String
// implements the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union interface.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union_String) Is_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union() {
}

// To_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) To_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union(i interface{}) (Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union, error) {
	switch v := i.(type) {
	case E_PolicyTypes_INSTALL_PROTOCOL_TYPE:
		return &Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union_E_PolicyTypes_INSTALL_PROTOCOL_TYPE{v}, nil
	case string:
		return &Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union, unknown union type, got: %T, want any of [E_PolicyTypes_INSTALL_PROTOCOL_TYPE, string]", i, i)
	}
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) IsYANGGoStruct() {}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor struct {
	AdjRibInPost    *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost  `path:"adj-rib-in-post" module:"openconfig-bgp"`
	AdjRibInPre     *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre   `path:"adj-rib-in-pre" module:"openconfig-bgp"`
	AdjRibOutPost   *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost `path:"adj-rib-out-post" module:"openconfig-bgp"`
	AdjRibOutPre    *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre  `path:"adj-rib-out-pre" module:"openconfig-bgp"`
	NeighborAddress *string                                             `path:"state/neighbor-address|neighbor-address" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) IsYANGGoStruct() {}

// GetOrCreateAdjRibInPost retrieves the value of the AdjRibInPost field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetOrCreateAdjRibInPost() *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost {
	if t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	t.AdjRibInPost = &Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost{}
	return t.AdjRibInPost
}

// GetOrCreateAdjRibInPre retrieves the value of the AdjRibInPre field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetOrCreateAdjRibInPre() *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre {
	if t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	t.AdjRibInPre = &Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre{}
	return t.AdjRibInPre
}

// GetOrCreateAdjRibOutPost retrieves the value of the AdjRibOutPost field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetOrCreateAdjRibOutPost() *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost {
	if t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	t.AdjRibOutPost = &Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost{}
	return t.AdjRibOutPost
}

// GetOrCreateAdjRibOutPre retrieves the value of the AdjRibOutPre field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetOrCreateAdjRibOutPre() *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre {
	if t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	t.AdjRibOutPre = &Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre{}
	return t.AdjRibOutPre
}

// GetAdjRibInPost returns the value of the AdjRibInPost struct pointer
// from Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor. If the receiver or the field AdjRibInPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetAdjRibInPost() *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost {
	if t != nil && t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	return nil
}

// GetAdjRibInPre returns the value of the AdjRibInPre struct pointer
// from Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor. If the receiver or the field AdjRibInPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetAdjRibInPre() *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre {
	if t != nil && t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	return nil
}

// GetAdjRibOutPost returns the value of the AdjRibOutPost struct pointer
// from Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor. If the receiver or the field AdjRibOutPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetAdjRibOutPost() *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost {
	if t != nil && t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	return nil
}

// GetAdjRibOutPre returns the value of the AdjRibOutPre struct pointer
// from Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor. If the receiver or the field AdjRibOutPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetAdjRibOutPre() *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre {
	if t != nil && t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	return nil
}

// GetNeighborAddress retrieves the value of the leaf NeighborAddress from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NeighborAddress is set, it can safely use t.GetNeighborAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NeighborAddress == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetNeighborAddress() string {
	if t == nil || t.NeighborAddress == nil {
		return ""
	}
	return *t.NeighborAddress
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborAddress == nil {
		return nil, fmt.Errorf("nil value for key NeighborAddress")
	}

	return map[string]interface{}{
		"neighbor-address": *t.NeighborAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-post YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost struct {
	Route map[Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-post.
type Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) NewRoute(Prefix string, PathId uint32) (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) GetOrCreateRoute(Prefix string, PathId uint32) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route {

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) GetRoute(Prefix string, PathId uint32) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) DeleteRoute(Prefix string, PathId uint32) {
	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-post/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route struct {
	AttrIndex         *uint64                                                                             `path:"state/attr-index" module:"openconfig-bgp"`
	BestPath          *bool                                                                               `path:"state/best-path" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                             `path:"state/community-index" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                             `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                  `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                             `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                             `path:"state/path-id|path-id" module:"openconfig-bgp"`
	Prefix            *string                                                                             `path:"state/prefix|prefix" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                               `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetBestPath retrieves the value of the leaf BestPath from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BestPath is set, it can safely use t.GetBestPath()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BestPath == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetBestPath() bool {
	if t == nil || t.BestPath == nil {
		return false
	}
	return *t.BestPath
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefix is set, it can safely use t.GetPrefix()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefix == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) IsYANGGoStruct() {}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-pre YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre struct {
	Route map[Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-pre.
type Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) NewRoute(Prefix string, PathId uint32) (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) GetOrCreateRoute(Prefix string, PathId uint32) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route {

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) GetRoute(Prefix string, PathId uint32) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) DeleteRoute(Prefix string, PathId uint32) {
	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-pre/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route struct {
	AttrIndex         *uint64                                                                            `path:"state/attr-index" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                            `path:"state/community-index" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                            `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                 `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                            `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                            `path:"state/path-id|path-id" module:"openconfig-bgp"`
	Prefix            *string                                                                            `path:"state/prefix|prefix" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                              `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefix is set, it can safely use t.GetPrefix()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefix == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) IsYANGGoStruct() {}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost struct {
	Route map[Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post.
type Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) NewRoute(Prefix string, PathId uint32) (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) GetOrCreateRoute(Prefix string, PathId uint32) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route {

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) GetRoute(Prefix string, PathId uint32) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) DeleteRoute(Prefix string, PathId uint32) {
	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route struct {
	AttrIndex         *uint64                                                                              `path:"state/attr-index" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                              `path:"state/community-index" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                              `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                   `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                              `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                              `path:"state/path-id|path-id" module:"openconfig-bgp"`
	Prefix            *string                                                                              `path:"state/prefix|prefix" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                                `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefix is set, it can safely use t.GetPrefix()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefix == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) IsYANGGoStruct() {}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-pre YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre struct {
	Route map[Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-pre.
type Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) NewRoute(Prefix string, PathId uint32) (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) GetOrCreateRoute(Prefix string, PathId uint32) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route {

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) GetRoute(Prefix string, PathId uint32) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) DeleteRoute(Prefix string, PathId uint32) {
	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-pre/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route struct {
	AttrIndex         *uint64                                                                             `path:"state/attr-index" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                             `path:"state/community-index" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                             `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                  `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                             `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                             `path:"state/path-id|path-id" module:"openconfig-bgp"`
	Prefix            *string                                                                             `path:"state/prefix|prefix" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                               `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefix is set, it can safely use t.GetPrefix()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefix == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) IsYANGGoStruct() {}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy struct {
	LocRib   *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib              `path:"loc-rib" module:"openconfig-bgp"`
	Neighbor map[string]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor `path:"neighbors/neighbor" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6SrtePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// Bgp_Rib_AfiSafi_Ipv6SrtePolicy struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy) NewNeighbor(NeighborAddress string) (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor)
	}

	key := NeighborAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor{
		NeighborAddress: &NeighborAddress,
	}

	return t.Neighbor[key], nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy) GetOrCreateNeighbor(NeighborAddress string) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor {

	key := NeighborAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(NeighborAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Bgp_Rib_AfiSafi_Ipv6SrtePolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy) GetNeighbor(NeighborAddress string) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor {

	if t == nil {
		return nil
	}

	key := NeighborAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy) DeleteNeighbor(NeighborAddress string) {
	key := NeighborAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor struct to the
// list Neighbor of Bgp_Rib_AfiSafi_Ipv6SrtePolicy. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy) AppendNeighbor(v *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) error {
	if v.NeighborAddress == nil {
		return fmt.Errorf("invalid nil key received for NeighborAddress")
	}

	key := *v.NeighborAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateLocRib retrieves the value of the LocRib field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy) GetOrCreateLocRib() *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib {
	if t.LocRib != nil {
		return t.LocRib
	}
	t.LocRib = &Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib{}
	return t.LocRib
}

// GetLocRib returns the value of the LocRib struct pointer
// from Bgp_Rib_AfiSafi_Ipv6SrtePolicy. If the receiver or the field LocRib is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy) GetLocRib() *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib {
	if t != nil && t.LocRib != nil {
		return t.LocRib
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6SrtePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/loc-rib YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib struct {
	Route map[Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/loc-rib.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) NewRoute(PathId uint32, Endpoint string, Color uint32) (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route {

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) GetRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/loc-rib/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route struct {
	AttrIndex         *uint64                                                                 `path:"state/attr-index" module:"openconfig-bgp"`
	Color             *uint32                                                                 `path:"state/color|color" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                 `path:"state/community-index" module:"openconfig-bgp"`
	Endpoint          *string                                                                 `path:"state/endpoint|endpoint" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                 `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                      `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                 `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                 `path:"state/path-id|path-id" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                   `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Color is set, it can safely use t.GetColor()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Color == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Endpoint is set, it can safely use t.GetEndpoint()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Endpoint == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/loc-rib/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) IsYANGGoStruct() {}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor struct {
	AdjRibInPost    *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost  `path:"adj-rib-in-post" module:"openconfig-bgp"`
	AdjRibInPre     *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre   `path:"adj-rib-in-pre" module:"openconfig-bgp"`
	AdjRibOutPost   *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost `path:"adj-rib-out-post" module:"openconfig-bgp"`
	AdjRibOutPre    *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre  `path:"adj-rib-out-pre" module:"openconfig-bgp"`
	NeighborAddress *string                                                `path:"state/neighbor-address|neighbor-address" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) IsYANGGoStruct() {}

// GetOrCreateAdjRibInPost retrieves the value of the AdjRibInPost field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetOrCreateAdjRibInPost() *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost {
	if t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	t.AdjRibInPost = &Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost{}
	return t.AdjRibInPost
}

// GetOrCreateAdjRibInPre retrieves the value of the AdjRibInPre field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetOrCreateAdjRibInPre() *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre {
	if t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	t.AdjRibInPre = &Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre{}
	return t.AdjRibInPre
}

// GetOrCreateAdjRibOutPost retrieves the value of the AdjRibOutPost field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetOrCreateAdjRibOutPost() *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost {
	if t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	t.AdjRibOutPost = &Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost{}
	return t.AdjRibOutPost
}

// GetOrCreateAdjRibOutPre retrieves the value of the AdjRibOutPre field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetOrCreateAdjRibOutPre() *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre {
	if t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	t.AdjRibOutPre = &Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre{}
	return t.AdjRibOutPre
}

// GetAdjRibInPost returns the value of the AdjRibInPost struct pointer
// from Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor. If the receiver or the field AdjRibInPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetAdjRibInPost() *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost {
	if t != nil && t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	return nil
}

// GetAdjRibInPre returns the value of the AdjRibInPre struct pointer
// from Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor. If the receiver or the field AdjRibInPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetAdjRibInPre() *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre {
	if t != nil && t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	return nil
}

// GetAdjRibOutPost returns the value of the AdjRibOutPost struct pointer
// from Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor. If the receiver or the field AdjRibOutPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetAdjRibOutPost() *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost {
	if t != nil && t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	return nil
}

// GetAdjRibOutPre returns the value of the AdjRibOutPre struct pointer
// from Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor. If the receiver or the field AdjRibOutPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetAdjRibOutPre() *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre {
	if t != nil && t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	return nil
}

// GetNeighborAddress retrieves the value of the leaf NeighborAddress from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NeighborAddress is set, it can safely use t.GetNeighborAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NeighborAddress == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetNeighborAddress() string {
	if t == nil || t.NeighborAddress == nil {
		return ""
	}
	return *t.NeighborAddress
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborAddress == nil {
		return nil, fmt.Errorf("nil value for key NeighborAddress")
	}

	return map[string]interface{}{
		"neighbor-address": *t.NeighborAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-post YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost struct {
	Route map[Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-post.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) NewRoute(PathId uint32, Endpoint string, Color uint32) (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route {

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) GetRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-post/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route struct {
	AttrIndex         *uint64                                                                                `path:"state/attr-index" module:"openconfig-bgp"`
	BestPath          *bool                                                                                  `path:"state/best-path" module:"openconfig-bgp"`
	Color             *uint32                                                                                `path:"state/color|color" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                                `path:"state/community-index" module:"openconfig-bgp"`
	Endpoint          *string                                                                                `path:"state/endpoint|endpoint" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                                `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                     `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                                `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                                `path:"state/path-id|path-id" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                                  `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetBestPath retrieves the value of the leaf BestPath from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BestPath is set, it can safely use t.GetBestPath()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BestPath == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetBestPath() bool {
	if t == nil || t.BestPath == nil {
		return false
	}
	return *t.BestPath
}

// GetColor retrieves the value of the leaf Color from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Color is set, it can safely use t.GetColor()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Color == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Endpoint is set, it can safely use t.GetEndpoint()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Endpoint == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-pre YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre struct {
	Route map[Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-pre.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) NewRoute(PathId uint32, Endpoint string, Color uint32) (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route {

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) GetRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-pre/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route struct {
	AttrIndex         *uint64                                                                               `path:"state/attr-index" module:"openconfig-bgp"`
	Color             *uint32                                                                               `path:"state/color|color" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                               `path:"state/community-index" module:"openconfig-bgp"`
	Endpoint          *string                                                                               `path:"state/endpoint|endpoint" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                               `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                    `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                               `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                               `path:"state/path-id|path-id" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                                 `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Color is set, it can safely use t.GetColor()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Color == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Endpoint is set, it can safely use t.GetEndpoint()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Endpoint == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) IsYANGGoStruct() {}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-post YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost struct {
	Route map[Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-post.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) NewRoute(PathId uint32, Endpoint string, Color uint32) (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route {

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) GetRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-post/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route struct {
	AttrIndex         *uint64                                                                                 `path:"state/attr-index" module:"openconfig-bgp"`
	Color             *uint32                                                                                 `path:"state/color|color" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                                 `path:"state/community-index" module:"openconfig-bgp"`
	Endpoint          *string                                                                                 `path:"state/endpoint|endpoint" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                                 `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                      `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                                 `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                                 `path:"state/path-id|path-id" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                                   `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Color is set, it can safely use t.GetColor()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Color == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Endpoint is set, it can safely use t.GetEndpoint()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Endpoint == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-pre YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre struct {
	Route map[Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-pre.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) NewRoute(PathId uint32, Endpoint string, Color uint32) (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route {

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) GetRoute(PathId uint32, Endpoint string, Color uint32) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-pre/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route struct {
	AttrIndex         *uint64                                                                                `path:"state/attr-index" module:"openconfig-bgp"`
	Color             *uint32                                                                                `path:"state/color|color" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                                `path:"state/community-index" module:"openconfig-bgp"`
	Endpoint          *string                                                                                `path:"state/endpoint|endpoint" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                                `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                     `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                                `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                                `path:"state/path-id|path-id" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                                  `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Color is set, it can safely use t.GetColor()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Color == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Endpoint is set, it can safely use t.GetEndpoint()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Endpoint == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6Unicast represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6Unicast struct {
	LocRib   *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib              `path:"loc-rib" module:"openconfig-bgp"`
	Neighbor map[string]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor `path:"neighbors/neighbor" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// Bgp_Rib_AfiSafi_Ipv6Unicast struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast) NewNeighbor(NeighborAddress string) (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor)
	}

	key := NeighborAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor{
		NeighborAddress: &NeighborAddress,
	}

	return t.Neighbor[key], nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast) GetOrCreateNeighbor(NeighborAddress string) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor {

	key := NeighborAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(NeighborAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Bgp_Rib_AfiSafi_Ipv6Unicast. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast) GetNeighbor(NeighborAddress string) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor {

	if t == nil {
		return nil
	}

	key := NeighborAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast) DeleteNeighbor(NeighborAddress string) {
	key := NeighborAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor struct to the
// list Neighbor of Bgp_Rib_AfiSafi_Ipv6Unicast. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast) AppendNeighbor(v *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) error {
	if v.NeighborAddress == nil {
		return fmt.Errorf("invalid nil key received for NeighborAddress")
	}

	key := *v.NeighborAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateLocRib retrieves the value of the LocRib field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast) GetOrCreateLocRib() *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib {
	if t.LocRib != nil {
		return t.LocRib
	}
	t.LocRib = &Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib{}
	return t.LocRib
}

// GetLocRib returns the value of the LocRib struct pointer
// from Bgp_Rib_AfiSafi_Ipv6Unicast. If the receiver or the field LocRib is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast) GetLocRib() *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib {
	if t != nil && t.LocRib != nil {
		return t.LocRib
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib struct {
	Route map[Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key]*Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib.
type Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key struct {
	Prefix string                                                `path:"prefix"`
	Origin Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union `path:"origin"`
	PathId uint32                                                `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) NewRoute(Prefix string, Origin Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union, PathId uint32) (*Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key]*Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route{
		Prefix: &Prefix,
		Origin: Origin,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) GetOrCreateRoute(Prefix string, Origin Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union, PathId uint32) *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route {

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, Origin, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) GetRoute(Prefix string, Origin Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union, PathId uint32) *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) DeleteRoute(Prefix string, Origin Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union, PathId uint32) {
	key := Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key{
		Prefix: *v.Prefix,
		Origin: v.Origin,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key]*Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route struct {
	AttrIndex         *uint64                                                              `path:"state/attr-index" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                              `path:"state/community-index" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                              `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                   `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                              `path:"state/last-modified" module:"openconfig-bgp"`
	Origin            Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union                `path:"state/origin|origin" module:"openconfig-bgp"`
	PathId            *uint32                                                              `path:"state/path-id|path-id" module:"openconfig-bgp"`
	Prefix            *string                                                              `path:"state/prefix|prefix" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetOrigin retrieves the value of the leaf Origin from the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetOrigin() Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union {
	if t == nil || t.Origin == nil {
		return nil
	}
	return t.Origin
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefix is set, it can safely use t.GetPrefix()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefix == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) ΛListKeyMap() (map[string]interface{}, error) {

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"origin":  t.Origin,
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib/routes/route/state/origin within the YANG schema.
type Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union interface {
	Is_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union()
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union_E_PolicyTypes_INSTALL_PROTOCOL_TYPE is used when /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib/routes/route/state/origin
// is to be set to a E_PolicyTypes_INSTALL_PROTOCOL_TYPE value.
type Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union_E_PolicyTypes_INSTALL_PROTOCOL_TYPE struct {
	E_PolicyTypes_INSTALL_PROTOCOL_TYPE E_PolicyTypes_INSTALL_PROTOCOL_TYPE
}

// Is_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union_E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// implements the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union interface.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union_E_PolicyTypes_INSTALL_PROTOCOL_TYPE) Is_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union() {
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union_String is used when /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib/routes/route/state/origin
// is to be set to a string value.
type Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union_String struct {
	String string
}

// Is_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union_String
// implements the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union interface.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union_String) Is_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union() {
}

// To_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) To_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union(i interface{}) (Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union, error) {
	switch v := i.(type) {
	case E_PolicyTypes_INSTALL_PROTOCOL_TYPE:
		return &Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union_E_PolicyTypes_INSTALL_PROTOCOL_TYPE{v}, nil
	case string:
		return &Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union, unknown union type, got: %T, want any of [E_PolicyTypes_INSTALL_PROTOCOL_TYPE, string]", i, i)
	}
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) IsYANGGoStruct() {}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor struct {
	AdjRibInPost    *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost  `path:"adj-rib-in-post" module:"openconfig-bgp"`
	AdjRibInPre     *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre   `path:"adj-rib-in-pre" module:"openconfig-bgp"`
	AdjRibOutPost   *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost `path:"adj-rib-out-post" module:"openconfig-bgp"`
	AdjRibOutPre    *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre  `path:"adj-rib-out-pre" module:"openconfig-bgp"`
	NeighborAddress *string                                             `path:"state/neighbor-address|neighbor-address" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) IsYANGGoStruct() {}

// GetOrCreateAdjRibInPost retrieves the value of the AdjRibInPost field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetOrCreateAdjRibInPost() *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost {
	if t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	t.AdjRibInPost = &Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost{}
	return t.AdjRibInPost
}

// GetOrCreateAdjRibInPre retrieves the value of the AdjRibInPre field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetOrCreateAdjRibInPre() *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre {
	if t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	t.AdjRibInPre = &Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre{}
	return t.AdjRibInPre
}

// GetOrCreateAdjRibOutPost retrieves the value of the AdjRibOutPost field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetOrCreateAdjRibOutPost() *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost {
	if t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	t.AdjRibOutPost = &Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost{}
	return t.AdjRibOutPost
}

// GetOrCreateAdjRibOutPre retrieves the value of the AdjRibOutPre field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetOrCreateAdjRibOutPre() *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre {
	if t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	t.AdjRibOutPre = &Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre{}
	return t.AdjRibOutPre
}

// GetAdjRibInPost returns the value of the AdjRibInPost struct pointer
// from Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor. If the receiver or the field AdjRibInPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetAdjRibInPost() *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost {
	if t != nil && t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	return nil
}

// GetAdjRibInPre returns the value of the AdjRibInPre struct pointer
// from Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor. If the receiver or the field AdjRibInPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetAdjRibInPre() *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre {
	if t != nil && t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	return nil
}

// GetAdjRibOutPost returns the value of the AdjRibOutPost struct pointer
// from Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor. If the receiver or the field AdjRibOutPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetAdjRibOutPost() *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost {
	if t != nil && t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	return nil
}

// GetAdjRibOutPre returns the value of the AdjRibOutPre struct pointer
// from Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor. If the receiver or the field AdjRibOutPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetAdjRibOutPre() *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre {
	if t != nil && t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	return nil
}

// GetNeighborAddress retrieves the value of the leaf NeighborAddress from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NeighborAddress is set, it can safely use t.GetNeighborAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NeighborAddress == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetNeighborAddress() string {
	if t == nil || t.NeighborAddress == nil {
		return ""
	}
	return *t.NeighborAddress
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborAddress == nil {
		return nil, fmt.Errorf("nil value for key NeighborAddress")
	}

	return map[string]interface{}{
		"neighbor-address": *t.NeighborAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-post YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost struct {
	Route map[Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-post.
type Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) NewRoute(Prefix string, PathId uint32) (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) GetOrCreateRoute(Prefix string, PathId uint32) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route {

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) GetRoute(Prefix string, PathId uint32) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) DeleteRoute(Prefix string, PathId uint32) {
	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-post/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route struct {
	AttrIndex         *uint64                                                                             `path:"state/attr-index" module:"openconfig-bgp"`
	BestPath          *bool                                                                               `path:"state/best-path" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                             `path:"state/community-index" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                             `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                  `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                             `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                             `path:"state/path-id|path-id" module:"openconfig-bgp"`
	Prefix            *string                                                                             `path:"state/prefix|prefix" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                               `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetBestPath retrieves the value of the leaf BestPath from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BestPath is set, it can safely use t.GetBestPath()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BestPath == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetBestPath() bool {
	if t == nil || t.BestPath == nil {
		return false
	}
	return *t.BestPath
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefix is set, it can safely use t.GetPrefix()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefix == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) IsYANGGoStruct() {}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-pre YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre struct {
	Route map[Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-pre.
type Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) NewRoute(Prefix string, PathId uint32) (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) GetOrCreateRoute(Prefix string, PathId uint32) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route {

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) GetRoute(Prefix string, PathId uint32) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) DeleteRoute(Prefix string, PathId uint32) {
	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-pre/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route struct {
	AttrIndex         *uint64                                                                            `path:"state/attr-index" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                            `path:"state/community-index" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                            `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                 `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                            `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                            `path:"state/path-id|path-id" module:"openconfig-bgp"`
	Prefix            *string                                                                            `path:"state/prefix|prefix" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                              `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefix is set, it can safely use t.GetPrefix()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefix == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) IsYANGGoStruct() {}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost struct {
	Route map[Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post.
type Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) NewRoute(Prefix string, PathId uint32) (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) GetOrCreateRoute(Prefix string, PathId uint32) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route {

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) GetRoute(Prefix string, PathId uint32) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) DeleteRoute(Prefix string, PathId uint32) {
	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route struct {
	AttrIndex         *uint64                                                                              `path:"state/attr-index" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                              `path:"state/community-index" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                              `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                   `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                              `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                              `path:"state/path-id|path-id" module:"openconfig-bgp"`
	Prefix            *string                                                                              `path:"state/prefix|prefix" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                                `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefix is set, it can safely use t.GetPrefix()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefix == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) IsYANGGoStruct() {}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-pre YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre struct {
	Route map[Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route `path:"routes/route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) IsYANGGoStruct() {}

// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key represents the key for list Route of element /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-pre.
type Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) NewRoute(Prefix string, PathId uint32) (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route)
	}

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) GetOrCreateRoute(Prefix string, PathId uint32) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route {

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) GetRoute(Prefix string, PathId uint32) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route {

	if t == nil {
		return nil
	}

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) DeleteRoute(Prefix string, PathId uint32) {
	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route struct to the
// list Route of Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) AppendRoute(v *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-pre/routes/route YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route struct {
	AttrIndex         *uint64                                                                             `path:"state/attr-index" module:"openconfig-bgp"`
	CommunityIndex    *uint64                                                                             `path:"state/community-index" module:"openconfig-bgp"`
	ExtCommunityIndex *uint64                                                                             `path:"state/ext-community-index" module:"openconfig-bgp"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                  `path:"state/invalid-reason" module:"openconfig-bgp"`
	LastModified      *uint64                                                                             `path:"state/last-modified" module:"openconfig-bgp"`
	PathId            *uint32                                                                             `path:"state/path-id|path-id" module:"openconfig-bgp"`
	Prefix            *string                                                                             `path:"state/prefix|prefix" module:"openconfig-bgp"`
	UnknownAttribute  map[uint8]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-bgp"`
	ValidRoute        *bool                                                                               `path:"state/valid-route" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) NewUnknownAttribute(AttrType uint8) (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetUnknownAttribute(AttrType uint8) *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route. If the key value(s) specified in
// the supplied Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) AppendUnknownAttribute(v *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrIndex is set, it can safely use t.GetAttrIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CommunityIndex is set, it can safely use t.GetCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunityIndex is set, it can safely use t.GetExtCommunityIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunityIndex == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InvalidReason is set, it can safely use t.GetInvalidReason()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InvalidReason == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastModified is set, it can safely use t.GetLastModified()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastModified == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PathId is set, it can safely use t.GetPathId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PathId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefix is set, it can safely use t.GetPrefix()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefix == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ValidRoute is set, it can safely use t.GetValidRoute()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ValidRoute == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute represents the /openconfig-bgp/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-bgp"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-bgp"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-bgp"`
	Extended   *bool   `path:"state/extended" module:"openconfig-bgp"`
	Optional   *bool   `path:"state/optional" module:"openconfig-bgp"`
	Partial    *bool   `path:"state/partial" module:"openconfig-bgp"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) IsYANGGoStruct() {}

// GetAttrLen retrieves the value of the leaf AttrLen from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrLen is set, it can safely use t.GetAttrLen()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrLen == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrType is set, it can safely use t.GetAttrType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrType == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AttrValue is set, it can safely use t.GetAttrValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AttrValue == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Extended is set, it can safely use t.GetExtended()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Extended == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Optional is set, it can safely use t.GetOptional()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Optional == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Partial is set, it can safely use t.GetPartial()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Partial == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transitive is set, it can safely use t.GetTransitive()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transitive == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AttrSet represents the /openconfig-bgp/bgp/rib/attr-sets/attr-set YANG schema element.
type Bgp_Rib_AttrSet struct {
	Aggregator          *Bgp_Rib_AttrSet_Aggregator          `path:"aggregator" module:"openconfig-bgp"`
	Aigp                *uint64                              `path:"state/aigp" module:"openconfig-bgp"`
	AsSegment           []*Bgp_Rib_AttrSet_AsSegment         `path:"as-path/as-segment" module:"openconfig-bgp"`
	As4Segment          []*Bgp_Rib_AttrSet_As4Segment        `path:"as4-path/as4-segment" module:"openconfig-bgp"`
	AtomicAggregate     *bool                                `path:"state/atomic-aggregate" module:"openconfig-bgp"`
	ClusterList         []string                             `path:"state/cluster-list" module:"openconfig-bgp"`
	Index               *uint64                              `path:"state/index|index" module:"openconfig-bgp"`
	LocalPref           *uint32                              `path:"state/local-pref" module:"openconfig-bgp"`
	Med                 *uint32                              `path:"state/med" module:"openconfig-bgp"`
	NextHop             *string                              `path:"state/next-hop" module:"openconfig-bgp"`
	Origin              E_BgpTypes_BgpOriginAttrType         `path:"state/origin" module:"openconfig-bgp"`
	OriginatorId        *string                              `path:"state/originator-id" module:"openconfig-bgp"`
	TunnelEncapsulation *Bgp_Rib_AttrSet_TunnelEncapsulation `path:"tunnel-encapsulation" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AttrSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AttrSet) IsYANGGoStruct() {}

// GetOrCreateAggregator retrieves the value of the Aggregator field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AttrSet) GetOrCreateAggregator() *Bgp_Rib_AttrSet_Aggregator {
	if t.Aggregator != nil {
		return t.Aggregator
	}
	t.Aggregator = &Bgp_Rib_AttrSet_Aggregator{}
	return t.Aggregator
}

// GetOrCreateTunnelEncapsulation retrieves the value of the TunnelEncapsulation field
// or returns the existing field if it already exists.
func (t *Bgp_Rib_AttrSet) GetOrCreateTunnelEncapsulation() *Bgp_Rib_AttrSet_TunnelEncapsulation {
	if t.TunnelEncapsulation != nil {
		return t.TunnelEncapsulation
	}
	t.TunnelEncapsulation = &Bgp_Rib_AttrSet_TunnelEncapsulation{}
	return t.TunnelEncapsulation
}

// GetAggregator returns the value of the Aggregator struct pointer
// from Bgp_Rib_AttrSet. If the receiver or the field Aggregator is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AttrSet) GetAggregator() *Bgp_Rib_AttrSet_Aggregator {
	if t != nil && t.Aggregator != nil {
		return t.Aggregator
	}
	return nil
}

// GetTunnelEncapsulation returns the value of the TunnelEncapsulation struct pointer
// from Bgp_Rib_AttrSet. If the receiver or the field TunnelEncapsulation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Bgp_Rib_AttrSet) GetTunnelEncapsulation() *Bgp_Rib_AttrSet_TunnelEncapsulation {
	if t != nil && t.TunnelEncapsulation != nil {
		return t.TunnelEncapsulation
	}
	return nil
}

// GetAigp retrieves the value of the leaf Aigp from the Bgp_Rib_AttrSet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Aigp is set, it can safely use t.GetAigp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Aigp == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet) GetAigp() uint64 {
	if t == nil || t.Aigp == nil {
		return 0
	}
	return *t.Aigp
}

// GetAtomicAggregate retrieves the value of the leaf AtomicAggregate from the Bgp_Rib_AttrSet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AtomicAggregate is set, it can safely use t.GetAtomicAggregate()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AtomicAggregate == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet) GetAtomicAggregate() bool {
	if t == nil || t.AtomicAggregate == nil {
		return false
	}
	return *t.AtomicAggregate
}

// GetClusterList retrieves the value of the leaf ClusterList from the Bgp_Rib_AttrSet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ClusterList is set, it can safely use t.GetClusterList()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ClusterList == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet) GetClusterList() []string {
	if t == nil || t.ClusterList == nil {
		return nil
	}
	return t.ClusterList
}

// GetIndex retrieves the value of the leaf Index from the Bgp_Rib_AttrSet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLocalPref retrieves the value of the leaf LocalPref from the Bgp_Rib_AttrSet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LocalPref is set, it can safely use t.GetLocalPref()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LocalPref == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet) GetLocalPref() uint32 {
	if t == nil || t.LocalPref == nil {
		return 0
	}
	return *t.LocalPref
}

// GetMed retrieves the value of the leaf Med from the Bgp_Rib_AttrSet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Med is set, it can safely use t.GetMed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Med == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet) GetMed() uint32 {
	if t == nil || t.Med == nil {
		return 0
	}
	return *t.Med
}

// GetNextHop retrieves the value of the leaf NextHop from the Bgp_Rib_AttrSet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NextHop is set, it can safely use t.GetNextHop()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NextHop == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet) GetNextHop() string {
	if t == nil || t.NextHop == nil {
		return ""
	}
	return *t.NextHop
}

// GetOrigin retrieves the value of the leaf Origin from the Bgp_Rib_AttrSet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet) GetOrigin() E_BgpTypes_BgpOriginAttrType {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetOriginatorId retrieves the value of the leaf OriginatorId from the Bgp_Rib_AttrSet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OriginatorId is set, it can safely use t.GetOriginatorId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OriginatorId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet) GetOriginatorId() string {
	if t == nil || t.OriginatorId == nil {
		return ""
	}
	return *t.OriginatorId
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AttrSet struct, which is a YANG list entry.
func (t *Bgp_Rib_AttrSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AttrSet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AttrSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AttrSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Rib_AttrSet_Aggregator represents the /openconfig-bgp/bgp/rib/attr-sets/attr-set/aggregator YANG schema element.
type Bgp_Rib_AttrSet_Aggregator struct {
	Address *string `path:"state/address" module:"openconfig-bgp"`
	As      *uint32 `path:"state/as" module:"openconfig-bgp"`
	As4     *uint32 `path:"state/as4" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AttrSet_Aggregator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AttrSet_Aggregator) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the Bgp_Rib_AttrSet_Aggregator
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_Aggregator) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAs retrieves the value of the leaf As from the Bgp_Rib_AttrSet_Aggregator
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if As is set, it can safely use t.GetAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.As == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_Aggregator) GetAs() uint32 {
	if t == nil || t.As == nil {
		return 0
	}
	return *t.As
}

// GetAs4 retrieves the value of the leaf As4 from the Bgp_Rib_AttrSet_Aggregator
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if As4 is set, it can safely use t.GetAs4()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.As4 == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_Aggregator) GetAs4() uint32 {
	if t == nil || t.As4 == nil {
		return 0
	}
	return *t.As4
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AttrSet_Aggregator) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AttrSet_Aggregator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AttrSet_Aggregator) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Rib_AttrSet_As4Segment represents the /openconfig-bgp/bgp/rib/attr-sets/attr-set/as4-path/as4-segment YANG schema element.
type Bgp_Rib_AttrSet_As4Segment struct {
	Member []uint32                     `path:"state/member" module:"openconfig-bgp"`
	Type   E_BgpTypes_AsPathSegmentType `path:"state/type" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AttrSet_As4Segment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AttrSet_As4Segment) IsYANGGoStruct() {}

// GetMember retrieves the value of the leaf Member from the Bgp_Rib_AttrSet_As4Segment
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Member is set, it can safely use t.GetMember()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Member == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_As4Segment) GetMember() []uint32 {
	if t == nil || t.Member == nil {
		return nil
	}
	return t.Member
}

// GetType retrieves the value of the leaf Type from the Bgp_Rib_AttrSet_As4Segment
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_As4Segment) GetType() E_BgpTypes_AsPathSegmentType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AttrSet_As4Segment) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AttrSet_As4Segment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AttrSet_As4Segment) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Rib_AttrSet_AsSegment represents the /openconfig-bgp/bgp/rib/attr-sets/attr-set/as-path/as-segment YANG schema element.
type Bgp_Rib_AttrSet_AsSegment struct {
	Member []uint32                     `path:"state/member" module:"openconfig-bgp"`
	Type   E_BgpTypes_AsPathSegmentType `path:"state/type" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AttrSet_AsSegment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AttrSet_AsSegment) IsYANGGoStruct() {}

// GetMember retrieves the value of the leaf Member from the Bgp_Rib_AttrSet_AsSegment
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Member is set, it can safely use t.GetMember()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Member == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_AsSegment) GetMember() []uint32 {
	if t == nil || t.Member == nil {
		return nil
	}
	return t.Member
}

// GetType retrieves the value of the leaf Type from the Bgp_Rib_AttrSet_AsSegment
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_AsSegment) GetType() E_BgpTypes_AsPathSegmentType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AttrSet_AsSegment) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AttrSet_AsSegment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AttrSet_AsSegment) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Rib_AttrSet_TunnelEncapsulation represents the /openconfig-bgp/bgp/rib/attr-sets/attr-set/tunnel-encapsulation YANG schema element.
type Bgp_Rib_AttrSet_TunnelEncapsulation struct {
	Tunnel map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE]*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel `path:"tunnels/tunnel" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AttrSet_TunnelEncapsulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AttrSet_TunnelEncapsulation) IsYANGGoStruct() {}

// NewTunnel creates a new entry in the Tunnel list of the
// Bgp_Rib_AttrSet_TunnelEncapsulation struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation) NewTunnel(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE) (*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE]*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tunnel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tunnel", key)
	}

	t.Tunnel[key] = &Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel{
		Type: Type,
	}

	return t.Tunnel[key], nil
}

// GetOrCreateTunnel retrieves the value with the specified keys from
// the receiver Bgp_Rib_AttrSet_TunnelEncapsulation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation) GetOrCreateTunnel(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE) *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel {

	key := Type

	if v, ok := t.Tunnel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnel(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnel got unexpected error: %v", err))
	}
	return v
}

// GetTunnel retrieves the value with the specified key from
// the Tunnel map field of Bgp_Rib_AttrSet_TunnelEncapsulation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation) GetTunnel(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE) *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Tunnel[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnel deletes the value with the specified keys from
// the receiver Bgp_Rib_AttrSet_TunnelEncapsulation. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation) DeleteTunnel(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE) {
	key := Type

	delete(t.Tunnel, key)
}

// AppendTunnel appends the supplied Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel struct to the
// list Tunnel of Bgp_Rib_AttrSet_TunnelEncapsulation. If the key value(s) specified in
// the supplied Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation) AppendTunnel(v *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE]*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel)
	}

	if _, ok := t.Tunnel[key]; ok {
		return fmt.Errorf("duplicate key for list Tunnel %v", key)
	}

	t.Tunnel[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AttrSet_TunnelEncapsulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel represents the /openconfig-bgp/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel YANG schema element.
type Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel struct {
	Subtlv map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE]*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv `path:"subtlvs/subtlv" module:"openconfig-bgp"`
	Type   E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE                                                               `path:"state/type|type" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) IsYANGGoStruct() {}

// NewSubtlv creates a new entry in the Subtlv list of the
// Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) NewSubtlv(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE) (*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subtlv == nil {
		t.Subtlv = make(map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE]*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subtlv[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subtlv", key)
	}

	t.Subtlv[key] = &Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv{
		Type: Type,
	}

	return t.Subtlv[key], nil
}

// GetOrCreateSubtlv retrieves the value with the specified keys from
// the receiver Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) GetOrCreateSubtlv(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE) *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv {

	key := Type

	if v, ok := t.Subtlv[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubtlv(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubtlv got unexpected error: %v", err))
	}
	return v
}

// GetSubtlv retrieves the value with the specified key from
// the Subtlv map field of Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) GetSubtlv(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE) *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Subtlv[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubtlv deletes the value with the specified keys from
// the receiver Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) DeleteSubtlv(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE) {
	key := Type

	delete(t.Subtlv, key)
}

// AppendSubtlv appends the supplied Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct to the
// list Subtlv of Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel. If the key value(s) specified in
// the supplied Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) AppendSubtlv(v *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subtlv == nil {
		t.Subtlv = make(map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE]*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv)
	}

	if _, ok := t.Subtlv[key]; ok {
		return fmt.Errorf("duplicate key for list Subtlv %v", key)
	}

	t.Subtlv[key] = v
	return nil
}

// GetType retrieves the value of the leaf Type from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) GetType() E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel struct, which is a YANG list entry.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv represents the /openconfig-bgp/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv YANG schema element.
type Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct {
	BindingSid     Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union           `path:"state/binding-sid" module:"openconfig-bgp"`
	Colors         []uint32                                                                     `path:"state/colors" module:"openconfig-bgp"`
	Preference     *uint32                                                                      `path:"state/preference" module:"openconfig-bgp"`
	RemoteEndpoint map[string]*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint `path:"remote-endpoints/remote-endpoint" module:"openconfig-bgp"`
	SegmentList    map[uint64]*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList    `path:"segment-lists/segment-list" module:"openconfig-bgp"`
	Type           E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE                               `path:"state/type|type" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) IsYANGGoStruct() {}

// NewRemoteEndpoint creates a new entry in the RemoteEndpoint list of the
// Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) NewRemoteEndpoint(Endpoint string) (*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteEndpoint == nil {
		t.RemoteEndpoint = make(map[string]*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint)
	}

	key := Endpoint

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteEndpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteEndpoint", key)
	}

	t.RemoteEndpoint[key] = &Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint{
		Endpoint: &Endpoint,
	}

	return t.RemoteEndpoint[key], nil
}

// GetOrCreateRemoteEndpoint retrieves the value with the specified keys from
// the receiver Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetOrCreateRemoteEndpoint(Endpoint string) *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint {

	key := Endpoint

	if v, ok := t.RemoteEndpoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteEndpoint(Endpoint)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteEndpoint got unexpected error: %v", err))
	}
	return v
}

// GetRemoteEndpoint retrieves the value with the specified key from
// the RemoteEndpoint map field of Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetRemoteEndpoint(Endpoint string) *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint {

	if t == nil {
		return nil
	}

	key := Endpoint

	if lm, ok := t.RemoteEndpoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteRemoteEndpoint deletes the value with the specified keys from
// the receiver Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) DeleteRemoteEndpoint(Endpoint string) {
	key := Endpoint

	delete(t.RemoteEndpoint, key)
}

// AppendRemoteEndpoint appends the supplied Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint struct to the
// list RemoteEndpoint of Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the key value(s) specified in
// the supplied Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) AppendRemoteEndpoint(v *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) error {
	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key received for Endpoint")
	}

	key := *v.Endpoint

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteEndpoint == nil {
		t.RemoteEndpoint = make(map[string]*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint)
	}

	if _, ok := t.RemoteEndpoint[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteEndpoint %v", key)
	}

	t.RemoteEndpoint[key] = v
	return nil
}

// NewSegmentList creates a new entry in the SegmentList list of the
// Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) NewSegmentList(InstanceId uint64) (*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[uint64]*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList)
	}

	key := InstanceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SegmentList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SegmentList", key)
	}

	t.SegmentList[key] = &Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList{
		InstanceId: &InstanceId,
	}

	return t.SegmentList[key], nil
}

// GetOrCreateSegmentList retrieves the value with the specified keys from
// the receiver Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetOrCreateSegmentList(InstanceId uint64) *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList {

	key := InstanceId

	if v, ok := t.SegmentList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegmentList(InstanceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegmentList got unexpected error: %v", err))
	}
	return v
}

// GetSegmentList retrieves the value with the specified key from
// the SegmentList map field of Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetSegmentList(InstanceId uint64) *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList {

	if t == nil {
		return nil
	}

	key := InstanceId

	if lm, ok := t.SegmentList[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegmentList deletes the value with the specified keys from
// the receiver Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) DeleteSegmentList(InstanceId uint64) {
	key := InstanceId

	delete(t.SegmentList, key)
}

// AppendSegmentList appends the supplied Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList struct to the
// list SegmentList of Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the key value(s) specified in
// the supplied Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) AppendSegmentList(v *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) error {
	if v.InstanceId == nil {
		return fmt.Errorf("invalid nil key received for InstanceId")
	}

	key := *v.InstanceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[uint64]*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList)
	}

	if _, ok := t.SegmentList[key]; ok {
		return fmt.Errorf("duplicate key for list SegmentList %v", key)
	}

	t.SegmentList[key] = v
	return nil
}

// GetBindingSid retrieves the value of the leaf BindingSid from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BindingSid is set, it can safely use t.GetBindingSid()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BindingSid == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetBindingSid() Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union {
	if t == nil || t.BindingSid == nil {
		return nil
	}
	return t.BindingSid
}

// GetColors retrieves the value of the leaf Colors from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Colors is set, it can safely use t.GetColors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Colors == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetColors() []uint32 {
	if t == nil || t.Colors == nil {
		return nil
	}
	return t.Colors
}

// GetPreference retrieves the value of the leaf Preference from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Preference is set, it can safely use t.GetPreference()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Preference == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 100
	}
	return *t.Preference
}

// GetType retrieves the value of the leaf Type from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetType() E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct, which is a YANG list entry.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-bgp/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding-sid within the YANG schema.
type Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union interface {
	Is_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union()
}

// Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union_E_MplsTypes_MplsLabel_Enum is used when /openconfig-bgp/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding-sid
// is to be set to a E_MplsTypes_MplsLabel_Enum value.
type Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union_E_MplsTypes_MplsLabel_Enum struct {
	E_MplsTypes_MplsLabel_Enum E_MplsTypes_MplsLabel_Enum
}

// Is_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union ensures that Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union_E_MplsTypes_MplsLabel_Enum
// implements the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union interface.
func (*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union_E_MplsTypes_MplsLabel_Enum) Is_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union() {
}

// Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union_String is used when /openconfig-bgp/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding-sid
// is to be set to a string value.
type Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union_String struct {
	String string
}

// Is_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union ensures that Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union_String
// implements the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union interface.
func (*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union_String) Is_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union() {
}

// Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union_Uint32 is used when /openconfig-bgp/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding-sid
// is to be set to a uint32 value.
type Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union ensures that Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union_Uint32
// implements the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union interface.
func (*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union_Uint32) Is_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union() {
}

// To_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) To_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union(i interface{}) (Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union, error) {
	switch v := i.(type) {
	case E_MplsTypes_MplsLabel_Enum:
		return &Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union_E_MplsTypes_MplsLabel_Enum{v}, nil
	case string:
		return &Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union_String{v}, nil
	case uint32:
		return &Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union, unknown union type, got: %T, want any of [E_MplsTypes_MplsLabel_Enum, string, uint32]", i, i)
	}
}

// Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint represents the /openconfig-bgp/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/remote-endpoints/remote-endpoint YANG schema element.
type Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint struct {
	As       *uint32 `path:"state/as" module:"openconfig-bgp"`
	Endpoint *string `path:"state/endpoint|endpoint" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) IsYANGGoStruct() {}

// GetAs retrieves the value of the leaf As from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if As is set, it can safely use t.GetAs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.As == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) GetAs() uint32 {
	if t == nil || t.As == nil {
		return 0
	}
	return *t.As
}

// GetEndpoint retrieves the value of the leaf Endpoint from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Endpoint is set, it can safely use t.GetEndpoint()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Endpoint == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint struct, which is a YANG list entry.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	return map[string]interface{}{
		"endpoint": *t.Endpoint,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList represents the /openconfig-bgp/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list YANG schema element.
type Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList struct {
	InstanceId *uint64                                                                           `path:"state/instance-id|instance-id" module:"openconfig-bgp"`
	Segment    map[uint64]*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment `path:"segments/segment" module:"openconfig-bgp"`
	Weight     *uint32                                                                           `path:"state/weight" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) IsYANGGoStruct() {}

// NewSegment creates a new entry in the Segment list of the
// Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) NewSegment(Index uint64) (*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Segment == nil {
		t.Segment = make(map[uint64]*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Segment[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Segment", key)
	}

	t.Segment[key] = &Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment{
		Index: &Index,
	}

	return t.Segment[key], nil
}

// GetOrCreateSegment retrieves the value with the specified keys from
// the receiver Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) GetOrCreateSegment(Index uint64) *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment {

	key := Index

	if v, ok := t.Segment[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegment(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegment got unexpected error: %v", err))
	}
	return v
}

// GetSegment retrieves the value with the specified key from
// the Segment map field of Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) GetSegment(Index uint64) *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Segment[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegment deletes the value with the specified keys from
// the receiver Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList. If there is no such element, the function
// is a no-op.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) DeleteSegment(Index uint64) {
	key := Index

	delete(t.Segment, key)
}

// AppendSegment appends the supplied Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment struct to the
// list Segment of Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList. If the key value(s) specified in
// the supplied Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment already exist in the list, an error is
// returned.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) AppendSegment(v *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Segment == nil {
		t.Segment = make(map[uint64]*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment)
	}

	if _, ok := t.Segment[key]; ok {
		return fmt.Errorf("duplicate key for list Segment %v", key)
	}

	t.Segment[key] = v
	return nil
}

// GetInstanceId retrieves the value of the leaf InstanceId from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InstanceId is set, it can safely use t.GetInstanceId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InstanceId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) GetInstanceId() uint64 {
	if t == nil || t.InstanceId == nil {
		return 0
	}
	return *t.InstanceId
}

// GetWeight retrieves the value of the leaf Weight from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Weight is set, it can safely use t.GetWeight()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Weight == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList struct, which is a YANG list entry.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InstanceId == nil {
		return nil, fmt.Errorf("nil value for key InstanceId")
	}

	return map[string]interface{}{
		"instance-id": *t.InstanceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment represents the /openconfig-bgp/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list/segments/segment YANG schema element.
type Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment struct {
	Index             *uint64                                                                         `path:"state/index|index" module:"openconfig-bgp"`
	LocalInterfaceId  *uint32                                                                         `path:"state/local-interface-id" module:"openconfig-bgp"`
	LocalIpv4Address  *string                                                                         `path:"state/local-ipv4-address" module:"openconfig-bgp"`
	LocalIpv6Address  *string                                                                         `path:"state/local-ipv6-address" module:"openconfig-bgp"`
	MplsBos           *bool                                                                           `path:"state/mpls-bos" module:"openconfig-bgp"`
	MplsTc            *uint8                                                                          `path:"state/mpls-tc" module:"openconfig-bgp"`
	MplsTtl           *uint8                                                                          `path:"state/mpls-ttl" module:"openconfig-bgp"`
	RemoteIpv4Address *string                                                                         `path:"state/remote-ipv4-address" module:"openconfig-bgp"`
	RemoteIpv6Address *string                                                                         `path:"state/remote-ipv6-address" module:"openconfig-bgp"`
	Sid               Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union `path:"state/sid" module:"openconfig-bgp"`
	Type              E_Segment_Type                                                                  `path:"state/type" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) IsYANGGoStruct() {}

// GetIndex retrieves the value of the leaf Index from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLocalInterfaceId retrieves the value of the leaf LocalInterfaceId from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LocalInterfaceId is set, it can safely use t.GetLocalInterfaceId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LocalInterfaceId == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetLocalInterfaceId() uint32 {
	if t == nil || t.LocalInterfaceId == nil {
		return 0
	}
	return *t.LocalInterfaceId
}

// GetLocalIpv4Address retrieves the value of the leaf LocalIpv4Address from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LocalIpv4Address is set, it can safely use t.GetLocalIpv4Address()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LocalIpv4Address == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetLocalIpv4Address() string {
	if t == nil || t.LocalIpv4Address == nil {
		return ""
	}
	return *t.LocalIpv4Address
}

// GetLocalIpv6Address retrieves the value of the leaf LocalIpv6Address from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LocalIpv6Address is set, it can safely use t.GetLocalIpv6Address()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LocalIpv6Address == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetLocalIpv6Address() string {
	if t == nil || t.LocalIpv6Address == nil {
		return ""
	}
	return *t.LocalIpv6Address
}

// GetMplsBos retrieves the value of the leaf MplsBos from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MplsBos is set, it can safely use t.GetMplsBos()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MplsBos == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetMplsBos() bool {
	if t == nil || t.MplsBos == nil {
		return false
	}
	return *t.MplsBos
}

// GetMplsTc retrieves the value of the leaf MplsTc from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MplsTc is set, it can safely use t.GetMplsTc()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MplsTc == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetMplsTc() uint8 {
	if t == nil || t.MplsTc == nil {
		return 0
	}
	return *t.MplsTc
}

// GetMplsTtl retrieves the value of the leaf MplsTtl from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MplsTtl is set, it can safely use t.GetMplsTtl()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MplsTtl == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetMplsTtl() uint8 {
	if t == nil || t.MplsTtl == nil {
		return 0
	}
	return *t.MplsTtl
}

// GetRemoteIpv4Address retrieves the value of the leaf RemoteIpv4Address from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemoteIpv4Address is set, it can safely use t.GetRemoteIpv4Address()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemoteIpv4Address == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetRemoteIpv4Address() string {
	if t == nil || t.RemoteIpv4Address == nil {
		return ""
	}
	return *t.RemoteIpv4Address
}

// GetRemoteIpv6Address retrieves the value of the leaf RemoteIpv6Address from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemoteIpv6Address is set, it can safely use t.GetRemoteIpv6Address()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemoteIpv6Address == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetRemoteIpv6Address() string {
	if t == nil || t.RemoteIpv6Address == nil {
		return ""
	}
	return *t.RemoteIpv6Address
}

// GetSid retrieves the value of the leaf Sid from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Sid is set, it can safely use t.GetSid()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Sid == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetSid() Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union {
	if t == nil || t.Sid == nil {
		return nil
	}
	return t.Sid
}

// GetType retrieves the value of the leaf Type from the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetType() E_Segment_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// ΛListKeyMap returns the keys of the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment struct, which is a YANG list entry.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-bgp/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list/segments/segment/state/sid within the YANG schema.
type Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union interface {
	Is_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union()
}

// Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union_E_MplsTypes_MplsLabel_Enum is used when /openconfig-bgp/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list/segments/segment/state/sid
// is to be set to a E_MplsTypes_MplsLabel_Enum value.
type Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union_E_MplsTypes_MplsLabel_Enum struct {
	E_MplsTypes_MplsLabel_Enum E_MplsTypes_MplsLabel_Enum
}

// Is_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union ensures that Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union_E_MplsTypes_MplsLabel_Enum
// implements the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union interface.
func (*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union_E_MplsTypes_MplsLabel_Enum) Is_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union() {
}

// Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union_String is used when /openconfig-bgp/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list/segments/segment/state/sid
// is to be set to a string value.
type Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union_String struct {
	String string
}

// Is_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union ensures that Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union_String
// implements the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union interface.
func (*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union_String) Is_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union() {
}

// Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union_Uint32 is used when /openconfig-bgp/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list/segments/segment/state/sid
// is to be set to a uint32 value.
type Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union ensures that Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union_Uint32
// implements the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union interface.
func (*Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union_Uint32) Is_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union() {
}

// To_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) To_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union(i interface{}) (Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union, error) {
	switch v := i.(type) {
	case E_MplsTypes_MplsLabel_Enum:
		return &Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union_E_MplsTypes_MplsLabel_Enum{v}, nil
	case string:
		return &Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union_String{v}, nil
	case uint32:
		return &Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union, unknown union type, got: %T, want any of [E_MplsTypes_MplsLabel_Enum, string, uint32]", i, i)
	}
}

// Bgp_Rib_Community represents the /openconfig-bgp/bgp/rib/communities/community YANG schema element.
type Bgp_Rib_Community struct {
	Community []Bgp_Rib_Community_Community_Union `path:"state/community" module:"openconfig-bgp"`
	Index     *uint64                             `path:"state/index|index" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_Community) IsYANGGoStruct() {}

// GetCommunity retrieves the value of the leaf Community from the Bgp_Rib_Community
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Community is set, it can safely use t.GetCommunity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Community == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_Community) GetCommunity() []Bgp_Rib_Community_Community_Union {
	if t == nil || t.Community == nil {
		return nil
	}
	return t.Community
}

// GetIndex retrieves the value of the leaf Index from the Bgp_Rib_Community
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_Community) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// ΛListKeyMap returns the keys of the Bgp_Rib_Community struct, which is a YANG list entry.
func (t *Bgp_Rib_Community) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_Community) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_Community) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Rib_Community_Community_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-bgp/bgp/rib/communities/community/state/community within the YANG schema.
type Bgp_Rib_Community_Community_Union interface {
	Is_Bgp_Rib_Community_Community_Union()
}

// Bgp_Rib_Community_Community_Union_E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY is used when /openconfig-bgp/bgp/rib/communities/community/state/community
// is to be set to a E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY value.
type Bgp_Rib_Community_Community_Union_E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY struct {
	E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY
}

// Is_Bgp_Rib_Community_Community_Union ensures that Bgp_Rib_Community_Community_Union_E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY
// implements the Bgp_Rib_Community_Community_Union interface.
func (*Bgp_Rib_Community_Community_Union_E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY) Is_Bgp_Rib_Community_Community_Union() {
}

// Bgp_Rib_Community_Community_Union_String is used when /openconfig-bgp/bgp/rib/communities/community/state/community
// is to be set to a string value.
type Bgp_Rib_Community_Community_Union_String struct {
	String string
}

// Is_Bgp_Rib_Community_Community_Union ensures that Bgp_Rib_Community_Community_Union_String
// implements the Bgp_Rib_Community_Community_Union interface.
func (*Bgp_Rib_Community_Community_Union_String) Is_Bgp_Rib_Community_Community_Union() {}

// Bgp_Rib_Community_Community_Union_Uint32 is used when /openconfig-bgp/bgp/rib/communities/community/state/community
// is to be set to a uint32 value.
type Bgp_Rib_Community_Community_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Bgp_Rib_Community_Community_Union ensures that Bgp_Rib_Community_Community_Union_Uint32
// implements the Bgp_Rib_Community_Community_Union interface.
func (*Bgp_Rib_Community_Community_Union_Uint32) Is_Bgp_Rib_Community_Community_Union() {}

// To_Bgp_Rib_Community_Community_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Bgp_Rib_Community_Community_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Bgp_Rib_Community) To_Bgp_Rib_Community_Community_Union(i interface{}) (Bgp_Rib_Community_Community_Union, error) {
	switch v := i.(type) {
	case E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY:
		return &Bgp_Rib_Community_Community_Union_E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY{v}, nil
	case string:
		return &Bgp_Rib_Community_Community_Union_String{v}, nil
	case uint32:
		return &Bgp_Rib_Community_Community_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Bgp_Rib_Community_Community_Union, unknown union type, got: %T, want any of [E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY, string, uint32]", i, i)
	}
}

// Bgp_Rib_ExtCommunity represents the /openconfig-bgp/bgp/rib/ext-communities/ext-community YANG schema element.
type Bgp_Rib_ExtCommunity struct {
	ExtCommunity []Bgp_Rib_ExtCommunity_ExtCommunity_Union `path:"state/ext-community" module:"openconfig-bgp"`
	Index        *uint64                                   `path:"state/index|index" module:"openconfig-bgp"`
}

// IsYANGGoStruct ensures that Bgp_Rib_ExtCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Rib_ExtCommunity) IsYANGGoStruct() {}

// GetExtCommunity retrieves the value of the leaf ExtCommunity from the Bgp_Rib_ExtCommunity
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ExtCommunity is set, it can safely use t.GetExtCommunity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ExtCommunity == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_ExtCommunity) GetExtCommunity() []Bgp_Rib_ExtCommunity_ExtCommunity_Union {
	if t == nil || t.ExtCommunity == nil {
		return nil
	}
	return t.ExtCommunity
}

// GetIndex retrieves the value of the leaf Index from the Bgp_Rib_ExtCommunity
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *Bgp_Rib_ExtCommunity) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// ΛListKeyMap returns the keys of the Bgp_Rib_ExtCommunity struct, which is a YANG list entry.
func (t *Bgp_Rib_ExtCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Rib_ExtCommunity) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Rib_ExtCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Rib_ExtCommunity) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Rib_ExtCommunity_ExtCommunity_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-bgp/bgp/rib/ext-communities/ext-community/state/ext-community within the YANG schema.
type Bgp_Rib_ExtCommunity_ExtCommunity_Union interface {
	Is_Bgp_Rib_ExtCommunity_ExtCommunity_Union()
}

// Bgp_Rib_ExtCommunity_ExtCommunity_Union_Binary is used when /openconfig-bgp/bgp/rib/ext-communities/ext-community/state/ext-community
// is to be set to a Binary value.
type Bgp_Rib_ExtCommunity_ExtCommunity_Union_Binary struct {
	Binary Binary
}

// Is_Bgp_Rib_ExtCommunity_ExtCommunity_Union ensures that Bgp_Rib_ExtCommunity_ExtCommunity_Union_Binary
// implements the Bgp_Rib_ExtCommunity_ExtCommunity_Union interface.
func (*Bgp_Rib_ExtCommunity_ExtCommunity_Union_Binary) Is_Bgp_Rib_ExtCommunity_ExtCommunity_Union() {}

// Bgp_Rib_ExtCommunity_ExtCommunity_Union_String is used when /openconfig-bgp/bgp/rib/ext-communities/ext-community/state/ext-community
// is to be set to a string value.
type Bgp_Rib_ExtCommunity_ExtCommunity_Union_String struct {
	String string
}

// Is_Bgp_Rib_ExtCommunity_ExtCommunity_Union ensures that Bgp_Rib_ExtCommunity_ExtCommunity_Union_String
// implements the Bgp_Rib_ExtCommunity_ExtCommunity_Union interface.
func (*Bgp_Rib_ExtCommunity_ExtCommunity_Union_String) Is_Bgp_Rib_ExtCommunity_ExtCommunity_Union() {}

// To_Bgp_Rib_ExtCommunity_ExtCommunity_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Bgp_Rib_ExtCommunity_ExtCommunity_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Bgp_Rib_ExtCommunity) To_Bgp_Rib_ExtCommunity_ExtCommunity_Union(i interface{}) (Bgp_Rib_ExtCommunity_ExtCommunity_Union, error) {
	switch v := i.(type) {
	case Binary:
		return &Bgp_Rib_ExtCommunity_ExtCommunity_Union_Binary{v}, nil
	case string:
		return &Bgp_Rib_ExtCommunity_ExtCommunity_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Bgp_Rib_ExtCommunity_ExtCommunity_Union, unknown union type, got: %T, want any of [Binary, string]", i, i)
	}
}

// Device represents the /device YANG schema element.
type Device struct {
	Bfd             *Bfd                        `path:"bfd" module:"openconfig-bfd"`
	Bgp             *Bgp                        `path:"bgp" module:"openconfig-bgp"`
	Interface       map[string]*Interface       `path:"interfaces/interface" module:"openconfig-interfaces"`
	LocalRoutes     *LocalRoutes                `path:"local-routes" module:"openconfig-local-routing"`
	NetworkInstance map[string]*NetworkInstance `path:"network-instances/network-instance" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewInterface(Name string) (*Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateInterface(Name string) *Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetInterface(Name string) *Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Device. If there is no such element, the function
// is a no-op.
func (t *Device) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Interface struct to the
// list Interface of Device. If the key value(s) specified in
// the supplied Interface already exist in the list, an error is
// returned.
func (t *Device) AppendInterface(v *Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewNetworkInstance creates a new entry in the NetworkInstance list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewNetworkInstance(Name string) (*NetworkInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*NetworkInstance)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkInstance", key)
	}

	t.NetworkInstance[key] = &NetworkInstance{
		Name: &Name,
	}

	return t.NetworkInstance[key], nil
}

// GetOrCreateNetworkInstance retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateNetworkInstance(Name string) *NetworkInstance {

	key := Name

	if v, ok := t.NetworkInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkInstance(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkInstance got unexpected error: %v", err))
	}
	return v
}

// GetNetworkInstance retrieves the value with the specified key from
// the NetworkInstance map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetNetworkInstance(Name string) *NetworkInstance {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.NetworkInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkInstance deletes the value with the specified keys from
// the receiver Device. If there is no such element, the function
// is a no-op.
func (t *Device) DeleteNetworkInstance(Name string) {
	key := Name

	delete(t.NetworkInstance, key)
}

// AppendNetworkInstance appends the supplied NetworkInstance struct to the
// list NetworkInstance of Device. If the key value(s) specified in
// the supplied NetworkInstance already exist in the list, an error is
// returned.
func (t *Device) AppendNetworkInstance(v *NetworkInstance) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInstance == nil {
		t.NetworkInstance = make(map[string]*NetworkInstance)
	}

	if _, ok := t.NetworkInstance[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkInstance %v", key)
	}

	t.NetworkInstance[key] = v
	return nil
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateBfd() *Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &Bfd{}
	return t.Bfd
}

// GetOrCreateBgp retrieves the value of the Bgp field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateBgp() *Bgp {
	if t.Bgp != nil {
		return t.Bgp
	}
	t.Bgp = &Bgp{}
	return t.Bgp
}

// GetOrCreateLocalRoutes retrieves the value of the LocalRoutes field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateLocalRoutes() *LocalRoutes {
	if t.LocalRoutes != nil {
		return t.LocalRoutes
	}
	t.LocalRoutes = &LocalRoutes{}
	return t.LocalRoutes
}

// GetBfd returns the value of the Bfd struct pointer
// from Device. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetBfd() *Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetBgp returns the value of the Bgp struct pointer
// from Device. If the receiver or the field Bgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetBgp() *Bgp {
	if t != nil && t.Bgp != nil {
		return t.Bgp
	}
	return nil
}

// GetLocalRoutes returns the value of the LocalRoutes struct pointer
// from Device. If the receiver or the field LocalRoutes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetLocalRoutes() *LocalRoutes {
	if t != nil && t.LocalRoutes != nil {
		return t.LocalRoutes
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type Interface struct {
	AdminStatus  E_Interface_AdminStatus            `path:"state/admin-status" module:"openconfig-interfaces"`
	Aggregation  *Interface_Aggregation             `path:"aggregation" module:"openconfig-if-aggregate"`
	Counters     *Interface_Counters                `path:"state/counters" module:"openconfig-interfaces"`
	Cpu          *bool                              `path:"state/cpu" module:"openconfig-interfaces"`
	Description  *string                            `path:"state/description" module:"openconfig-interfaces"`
	Enabled      *bool                              `path:"state/enabled" module:"openconfig-interfaces"`
	Ethernet     *Interface_Ethernet                `path:"ethernet" module:"openconfig-if-ethernet"`
	HoldTime     *Interface_HoldTime                `path:"hold-time" module:"openconfig-interfaces"`
	Ifindex      *uint32                            `path:"state/ifindex" module:"openconfig-interfaces"`
	LastChange   *uint64                            `path:"state/last-change" module:"openconfig-interfaces"`
	Logical      *bool                              `path:"state/logical" module:"openconfig-interfaces"`
	LoopbackMode *bool                              `path:"state/loopback-mode" module:"openconfig-interfaces"`
	Management   *bool                              `path:"state/management" module:"openconfig-interfaces"`
	Mtu          *uint16                            `path:"state/mtu" module:"openconfig-interfaces"`
	Name         *string                            `path:"state/name|name" module:"openconfig-interfaces"`
	OperStatus   E_Interface_OperStatus             `path:"state/oper-status" module:"openconfig-interfaces"`
	RoutedVlan   *Interface_RoutedVlan              `path:"routed-vlan" module:"openconfig-vlan"`
	Subinterface map[uint32]*Interface_Subinterface `path:"subinterfaces/subinterface" module:"openconfig-interfaces"`
	Tpid         E_VlanTypes_TPID_TYPES             `path:"state/tpid" module:"openconfig-vlan"`
	Type         E_IETFInterfaces_InterfaceType     `path:"state/type" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// Interface struct. The keys of the list are populated from the input
// arguments.
func (t *Interface) NewSubinterface(Index uint32) (*Interface_Subinterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*Interface_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &Interface_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// GetOrCreateSubinterface retrieves the value with the specified keys from
// the receiver Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface) GetOrCreateSubinterface(Index uint32) *Interface_Subinterface {

	key := Index

	if v, ok := t.Subinterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubinterface(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubinterface got unexpected error: %v", err))
	}
	return v
}

// GetSubinterface retrieves the value with the specified key from
// the Subinterface map field of Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface) GetSubinterface(Index uint32) *Interface_Subinterface {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Subinterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubinterface deletes the value with the specified keys from
// the receiver Interface. If there is no such element, the function
// is a no-op.
func (t *Interface) DeleteSubinterface(Index uint32) {
	key := Index

	delete(t.Subinterface, key)
}

// AppendSubinterface appends the supplied Interface_Subinterface struct to the
// list Subinterface of Interface. If the key value(s) specified in
// the supplied Interface_Subinterface already exist in the list, an error is
// returned.
func (t *Interface) AppendSubinterface(v *Interface_Subinterface) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*Interface_Subinterface)
	}

	if _, ok := t.Subinterface[key]; ok {
		return fmt.Errorf("duplicate key for list Subinterface %v", key)
	}

	t.Subinterface[key] = v
	return nil
}

// GetOrCreateAggregation retrieves the value of the Aggregation field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateAggregation() *Interface_Aggregation {
	if t.Aggregation != nil {
		return t.Aggregation
	}
	t.Aggregation = &Interface_Aggregation{}
	return t.Aggregation
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateCounters() *Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Counters{}
	return t.Counters
}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateEthernet() *Interface_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &Interface_Ethernet{}
	return t.Ethernet
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateHoldTime() *Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &Interface_HoldTime{}
	return t.HoldTime
}

// GetOrCreateRoutedVlan retrieves the value of the RoutedVlan field
// or returns the existing field if it already exists.
func (t *Interface) GetOrCreateRoutedVlan() *Interface_RoutedVlan {
	if t.RoutedVlan != nil {
		return t.RoutedVlan
	}
	t.RoutedVlan = &Interface_RoutedVlan{}
	return t.RoutedVlan
}

// GetAggregation returns the value of the Aggregation struct pointer
// from Interface. If the receiver or the field Aggregation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetAggregation() *Interface_Aggregation {
	if t != nil && t.Aggregation != nil {
		return t.Aggregation
	}
	return nil
}

// GetCounters returns the value of the Counters struct pointer
// from Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetCounters() *Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetEthernet returns the value of the Ethernet struct pointer
// from Interface. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetEthernet() *Interface_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetHoldTime() *Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetRoutedVlan returns the value of the RoutedVlan struct pointer
// from Interface. If the receiver or the field RoutedVlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface) GetRoutedVlan() *Interface_RoutedVlan {
	if t != nil && t.RoutedVlan != nil {
		return t.RoutedVlan
	}
	return nil
}

// GetAdminStatus retrieves the value of the leaf AdminStatus from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminStatus is set, it can safely use t.GetAdminStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminStatus == nil'
// before retrieving the leaf's value.
func (t *Interface) GetAdminStatus() E_Interface_AdminStatus {
	if t == nil || t.AdminStatus == 0 {
		return 0
	}
	return t.AdminStatus
}

// GetCpu retrieves the value of the leaf Cpu from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Cpu is set, it can safely use t.GetCpu()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Cpu == nil'
// before retrieving the leaf's value.
func (t *Interface) GetCpu() bool {
	if t == nil || t.Cpu == nil {
		return false
	}
	return *t.Cpu
}

// GetDescription retrieves the value of the leaf Description from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *Interface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetIfindex retrieves the value of the leaf Ifindex from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ifindex is set, it can safely use t.GetIfindex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ifindex == nil'
// before retrieving the leaf's value.
func (t *Interface) GetIfindex() uint32 {
	if t == nil || t.Ifindex == nil {
		return 0
	}
	return *t.Ifindex
}

// GetLastChange retrieves the value of the leaf LastChange from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastChange is set, it can safely use t.GetLastChange()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastChange == nil'
// before retrieving the leaf's value.
func (t *Interface) GetLastChange() uint64 {
	if t == nil || t.LastChange == nil {
		return 0
	}
	return *t.LastChange
}

// GetLogical retrieves the value of the leaf Logical from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Logical is set, it can safely use t.GetLogical()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Logical == nil'
// before retrieving the leaf's value.
func (t *Interface) GetLogical() bool {
	if t == nil || t.Logical == nil {
		return false
	}
	return *t.Logical
}

// GetLoopbackMode retrieves the value of the leaf LoopbackMode from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LoopbackMode is set, it can safely use t.GetLoopbackMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LoopbackMode == nil'
// before retrieving the leaf's value.
func (t *Interface) GetLoopbackMode() bool {
	if t == nil || t.LoopbackMode == nil {
		return false
	}
	return *t.LoopbackMode
}

// GetManagement retrieves the value of the leaf Management from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Management is set, it can safely use t.GetManagement()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Management == nil'
// before retrieving the leaf's value.
func (t *Interface) GetManagement() bool {
	if t == nil || t.Management == nil {
		return false
	}
	return *t.Management
}

// GetMtu retrieves the value of the leaf Mtu from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mtu is set, it can safely use t.GetMtu()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mtu == nil'
// before retrieving the leaf's value.
func (t *Interface) GetMtu() uint16 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetName retrieves the value of the leaf Name from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperStatus retrieves the value of the leaf OperStatus from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OperStatus is set, it can safely use t.GetOperStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OperStatus == nil'
// before retrieving the leaf's value.
func (t *Interface) GetOperStatus() E_Interface_OperStatus {
	if t == nil || t.OperStatus == 0 {
		return 0
	}
	return t.OperStatus
}

// GetTpid retrieves the value of the leaf Tpid from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Tpid is set, it can safely use t.GetTpid()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Tpid == nil'
// before retrieving the leaf's value.
func (t *Interface) GetTpid() E_VlanTypes_TPID_TYPES {
	if t == nil || t.Tpid == 0 {
		return VlanTypes_TPID_TYPES_TPID_0X8100
	}
	return t.Tpid
}

// GetType retrieves the value of the leaf Type from the Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *Interface) GetType() E_IETFInterfaces_InterfaceType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// ΛListKeyMap returns the keys of the Interface struct, which is a YANG list entry.
func (t *Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Aggregation represents the /openconfig-interfaces/interfaces/interface/aggregation YANG schema element.
type Interface_Aggregation struct {
	LagSpeed     *uint32                             `path:"state/lag-speed" module:"openconfig-if-aggregate"`
	LagType      E_IfAggregate_AggregationType       `path:"state/lag-type" module:"openconfig-if-aggregate"`
	Member       []string                            `path:"state/member" module:"openconfig-if-aggregate"`
	MinLinks     *uint16                             `path:"state/min-links" module:"openconfig-if-aggregate"`
	SwitchedVlan *Interface_Aggregation_SwitchedVlan `path:"switched-vlan" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Aggregation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Aggregation) IsYANGGoStruct() {}

// GetOrCreateSwitchedVlan retrieves the value of the SwitchedVlan field
// or returns the existing field if it already exists.
func (t *Interface_Aggregation) GetOrCreateSwitchedVlan() *Interface_Aggregation_SwitchedVlan {
	if t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	t.SwitchedVlan = &Interface_Aggregation_SwitchedVlan{}
	return t.SwitchedVlan
}

// GetSwitchedVlan returns the value of the SwitchedVlan struct pointer
// from Interface_Aggregation. If the receiver or the field SwitchedVlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Aggregation) GetSwitchedVlan() *Interface_Aggregation_SwitchedVlan {
	if t != nil && t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	return nil
}

// GetLagSpeed retrieves the value of the leaf LagSpeed from the Interface_Aggregation
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LagSpeed is set, it can safely use t.GetLagSpeed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LagSpeed == nil'
// before retrieving the leaf's value.
func (t *Interface_Aggregation) GetLagSpeed() uint32 {
	if t == nil || t.LagSpeed == nil {
		return 0
	}
	return *t.LagSpeed
}

// GetLagType retrieves the value of the leaf LagType from the Interface_Aggregation
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LagType is set, it can safely use t.GetLagType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LagType == nil'
// before retrieving the leaf's value.
func (t *Interface_Aggregation) GetLagType() E_IfAggregate_AggregationType {
	if t == nil || t.LagType == 0 {
		return 0
	}
	return t.LagType
}

// GetMember retrieves the value of the leaf Member from the Interface_Aggregation
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Member is set, it can safely use t.GetMember()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Member == nil'
// before retrieving the leaf's value.
func (t *Interface_Aggregation) GetMember() []string {
	if t == nil || t.Member == nil {
		return nil
	}
	return t.Member
}

// GetMinLinks retrieves the value of the leaf MinLinks from the Interface_Aggregation
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinLinks is set, it can safely use t.GetMinLinks()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinLinks == nil'
// before retrieving the leaf's value.
func (t *Interface_Aggregation) GetMinLinks() uint16 {
	if t == nil || t.MinLinks == nil {
		return 0
	}
	return *t.MinLinks
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Aggregation) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Aggregation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Aggregation) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Aggregation_SwitchedVlan represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan struct {
	AccessVlan    *uint16                                               `path:"state/access-vlan" module:"openconfig-vlan"`
	InterfaceMode E_VlanTypes_VlanModeType                              `path:"state/interface-mode" module:"openconfig-vlan"`
	NativeVlan    *uint16                                               `path:"state/native-vlan" module:"openconfig-vlan"`
	TrunkVlans    []Interface_Aggregation_SwitchedVlan_TrunkVlans_Union `path:"state/trunk-vlans" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Aggregation_SwitchedVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Aggregation_SwitchedVlan) IsYANGGoStruct() {}

// GetAccessVlan retrieves the value of the leaf AccessVlan from the Interface_Aggregation_SwitchedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AccessVlan is set, it can safely use t.GetAccessVlan()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AccessVlan == nil'
// before retrieving the leaf's value.
func (t *Interface_Aggregation_SwitchedVlan) GetAccessVlan() uint16 {
	if t == nil || t.AccessVlan == nil {
		return 0
	}
	return *t.AccessVlan
}

// GetInterfaceMode retrieves the value of the leaf InterfaceMode from the Interface_Aggregation_SwitchedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InterfaceMode is set, it can safely use t.GetInterfaceMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InterfaceMode == nil'
// before retrieving the leaf's value.
func (t *Interface_Aggregation_SwitchedVlan) GetInterfaceMode() E_VlanTypes_VlanModeType {
	if t == nil || t.InterfaceMode == 0 {
		return 0
	}
	return t.InterfaceMode
}

// GetNativeVlan retrieves the value of the leaf NativeVlan from the Interface_Aggregation_SwitchedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NativeVlan is set, it can safely use t.GetNativeVlan()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NativeVlan == nil'
// before retrieving the leaf's value.
func (t *Interface_Aggregation_SwitchedVlan) GetNativeVlan() uint16 {
	if t == nil || t.NativeVlan == nil {
		return 0
	}
	return *t.NativeVlan
}

// GetTrunkVlans retrieves the value of the leaf TrunkVlans from the Interface_Aggregation_SwitchedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TrunkVlans is set, it can safely use t.GetTrunkVlans()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TrunkVlans == nil'
// before retrieving the leaf's value.
func (t *Interface_Aggregation_SwitchedVlan) GetTrunkVlans() []Interface_Aggregation_SwitchedVlan_TrunkVlans_Union {
	if t == nil || t.TrunkVlans == nil {
		return nil
	}
	return t.TrunkVlans
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Aggregation_SwitchedVlan) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Aggregation_SwitchedVlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Aggregation_SwitchedVlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Aggregation_SwitchedVlan_TrunkVlans_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/trunk-vlans within the YANG schema.
type Interface_Aggregation_SwitchedVlan_TrunkVlans_Union interface {
	Is_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union()
}

// Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_String is used when /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/trunk-vlans
// is to be set to a string value.
type Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_String struct {
	String string
}

// Is_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union ensures that Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_String
// implements the Interface_Aggregation_SwitchedVlan_TrunkVlans_Union interface.
func (*Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_String) Is_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union() {
}

// Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_Uint16 is used when /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/state/trunk-vlans
// is to be set to a uint16 value.
type Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_Uint16 struct {
	Uint16 uint16
}

// Is_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union ensures that Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_Uint16
// implements the Interface_Aggregation_SwitchedVlan_TrunkVlans_Union interface.
func (*Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_Uint16) Is_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union() {
}

// To_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Interface_Aggregation_SwitchedVlan_TrunkVlans_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Interface_Aggregation_SwitchedVlan) To_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union(i interface{}) (Interface_Aggregation_SwitchedVlan_TrunkVlans_Union, error) {
	switch v := i.(type) {
	case string:
		return &Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_String{v}, nil
	case uint16:
		return &Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Interface_Aggregation_SwitchedVlan_TrunkVlans_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
	}
}

// Interface_Counters represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type Interface_Counters struct {
	CarrierTransitions *uint64 `path:"carrier-transitions" module:"openconfig-interfaces"`
	InBroadcastPkts    *uint64 `path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards         *uint64 `path:"in-discards" module:"openconfig-interfaces"`
	InErrors           *uint64 `path:"in-errors" module:"openconfig-interfaces"`
	InFcsErrors        *uint64 `path:"in-fcs-errors" module:"openconfig-interfaces"`
	InMulticastPkts    *uint64 `path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets           *uint64 `path:"in-octets" module:"openconfig-interfaces"`
	InPkts             *uint64 `path:"in-pkts" module:"openconfig-interfaces"`
	InUnicastPkts      *uint64 `path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos    *uint64 `path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear          *uint64 `path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts   *uint64 `path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards        *uint64 `path:"out-discards" module:"openconfig-interfaces"`
	OutErrors          *uint64 `path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts   *uint64 `path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets          *uint64 `path:"out-octets" module:"openconfig-interfaces"`
	OutPkts            *uint64 `path:"out-pkts" module:"openconfig-interfaces"`
	OutUnicastPkts     *uint64 `path:"out-unicast-pkts" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Counters) IsYANGGoStruct() {}

// GetCarrierTransitions retrieves the value of the leaf CarrierTransitions from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CarrierTransitions is set, it can safely use t.GetCarrierTransitions()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CarrierTransitions == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetCarrierTransitions() uint64 {
	if t == nil || t.CarrierTransitions == nil {
		return 0
	}
	return *t.CarrierTransitions
}

// GetInBroadcastPkts retrieves the value of the leaf InBroadcastPkts from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InBroadcastPkts is set, it can safely use t.GetInBroadcastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InBroadcastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInBroadcastPkts() uint64 {
	if t == nil || t.InBroadcastPkts == nil {
		return 0
	}
	return *t.InBroadcastPkts
}

// GetInDiscards retrieves the value of the leaf InDiscards from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InDiscards is set, it can safely use t.GetInDiscards()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InDiscards == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInDiscards() uint64 {
	if t == nil || t.InDiscards == nil {
		return 0
	}
	return *t.InDiscards
}

// GetInErrors retrieves the value of the leaf InErrors from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InErrors is set, it can safely use t.GetInErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InErrors == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInErrors() uint64 {
	if t == nil || t.InErrors == nil {
		return 0
	}
	return *t.InErrors
}

// GetInFcsErrors retrieves the value of the leaf InFcsErrors from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InFcsErrors is set, it can safely use t.GetInFcsErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InFcsErrors == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInFcsErrors() uint64 {
	if t == nil || t.InFcsErrors == nil {
		return 0
	}
	return *t.InFcsErrors
}

// GetInMulticastPkts retrieves the value of the leaf InMulticastPkts from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InMulticastPkts is set, it can safely use t.GetInMulticastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InMulticastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInMulticastPkts() uint64 {
	if t == nil || t.InMulticastPkts == nil {
		return 0
	}
	return *t.InMulticastPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOctets is set, it can safely use t.GetInOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPkts is set, it can safely use t.GetInPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetInUnicastPkts retrieves the value of the leaf InUnicastPkts from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InUnicastPkts is set, it can safely use t.GetInUnicastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InUnicastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInUnicastPkts() uint64 {
	if t == nil || t.InUnicastPkts == nil {
		return 0
	}
	return *t.InUnicastPkts
}

// GetInUnknownProtos retrieves the value of the leaf InUnknownProtos from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InUnknownProtos is set, it can safely use t.GetInUnknownProtos()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InUnknownProtos == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetInUnknownProtos() uint64 {
	if t == nil || t.InUnknownProtos == nil {
		return 0
	}
	return *t.InUnknownProtos
}

// GetLastClear retrieves the value of the leaf LastClear from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastClear is set, it can safely use t.GetLastClear()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastClear == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetLastClear() uint64 {
	if t == nil || t.LastClear == nil {
		return 0
	}
	return *t.LastClear
}

// GetOutBroadcastPkts retrieves the value of the leaf OutBroadcastPkts from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutBroadcastPkts is set, it can safely use t.GetOutBroadcastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutBroadcastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetOutBroadcastPkts() uint64 {
	if t == nil || t.OutBroadcastPkts == nil {
		return 0
	}
	return *t.OutBroadcastPkts
}

// GetOutDiscards retrieves the value of the leaf OutDiscards from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutDiscards is set, it can safely use t.GetOutDiscards()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutDiscards == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetOutDiscards() uint64 {
	if t == nil || t.OutDiscards == nil {
		return 0
	}
	return *t.OutDiscards
}

// GetOutErrors retrieves the value of the leaf OutErrors from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutErrors is set, it can safely use t.GetOutErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutErrors == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetOutErrors() uint64 {
	if t == nil || t.OutErrors == nil {
		return 0
	}
	return *t.OutErrors
}

// GetOutMulticastPkts retrieves the value of the leaf OutMulticastPkts from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutMulticastPkts is set, it can safely use t.GetOutMulticastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutMulticastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetOutMulticastPkts() uint64 {
	if t == nil || t.OutMulticastPkts == nil {
		return 0
	}
	return *t.OutMulticastPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutOctets is set, it can safely use t.GetOutOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutPkts is set, it can safely use t.GetOutPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// GetOutUnicastPkts retrieves the value of the leaf OutUnicastPkts from the Interface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutUnicastPkts is set, it can safely use t.GetOutUnicastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutUnicastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Counters) GetOutUnicastPkts() uint64 {
	if t == nil || t.OutUnicastPkts == nil {
		return 0
	}
	return *t.OutUnicastPkts
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Ethernet represents the /openconfig-interfaces/interfaces/interface/ethernet YANG schema element.
type Interface_Ethernet struct {
	AggregateId          *string                          `path:"state/aggregate-id" module:"openconfig-if-aggregate"`
	AutoNegotiate        *bool                            `path:"state/auto-negotiate" module:"openconfig-if-ethernet"`
	Counters             *Interface_Ethernet_Counters     `path:"state/counters" module:"openconfig-if-ethernet"`
	DuplexMode           E_Ethernet_DuplexMode            `path:"state/duplex-mode" module:"openconfig-if-ethernet"`
	EnableFlowControl    *bool                            `path:"state/enable-flow-control" module:"openconfig-if-ethernet"`
	HwMacAddress         *string                          `path:"state/hw-mac-address" module:"openconfig-if-ethernet"`
	MacAddress           *string                          `path:"state/mac-address" module:"openconfig-if-ethernet"`
	NegotiatedDuplexMode E_Ethernet_NegotiatedDuplexMode  `path:"state/negotiated-duplex-mode" module:"openconfig-if-ethernet"`
	NegotiatedPortSpeed  E_IfEthernet_ETHERNET_SPEED      `path:"state/negotiated-port-speed" module:"openconfig-if-ethernet"`
	PortSpeed            E_IfEthernet_ETHERNET_SPEED      `path:"state/port-speed" module:"openconfig-if-ethernet"`
	SwitchedVlan         *Interface_Ethernet_SwitchedVlan `path:"switched-vlan" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ethernet) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_Ethernet) GetOrCreateCounters() *Interface_Ethernet_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Ethernet_Counters{}
	return t.Counters
}

// GetOrCreateSwitchedVlan retrieves the value of the SwitchedVlan field
// or returns the existing field if it already exists.
func (t *Interface_Ethernet) GetOrCreateSwitchedVlan() *Interface_Ethernet_SwitchedVlan {
	if t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	t.SwitchedVlan = &Interface_Ethernet_SwitchedVlan{}
	return t.SwitchedVlan
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_Ethernet. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Ethernet) GetCounters() *Interface_Ethernet_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetSwitchedVlan returns the value of the SwitchedVlan struct pointer
// from Interface_Ethernet. If the receiver or the field SwitchedVlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Ethernet) GetSwitchedVlan() *Interface_Ethernet_SwitchedVlan {
	if t != nil && t.SwitchedVlan != nil {
		return t.SwitchedVlan
	}
	return nil
}

// GetAggregateId retrieves the value of the leaf AggregateId from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AggregateId is set, it can safely use t.GetAggregateId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AggregateId == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetAggregateId() string {
	if t == nil || t.AggregateId == nil {
		return ""
	}
	return *t.AggregateId
}

// GetAutoNegotiate retrieves the value of the leaf AutoNegotiate from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AutoNegotiate is set, it can safely use t.GetAutoNegotiate()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AutoNegotiate == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetAutoNegotiate() bool {
	if t == nil || t.AutoNegotiate == nil {
		return true
	}
	return *t.AutoNegotiate
}

// GetDuplexMode retrieves the value of the leaf DuplexMode from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DuplexMode is set, it can safely use t.GetDuplexMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DuplexMode == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetDuplexMode() E_Ethernet_DuplexMode {
	if t == nil || t.DuplexMode == 0 {
		return 0
	}
	return t.DuplexMode
}

// GetEnableFlowControl retrieves the value of the leaf EnableFlowControl from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EnableFlowControl is set, it can safely use t.GetEnableFlowControl()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EnableFlowControl == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetEnableFlowControl() bool {
	if t == nil || t.EnableFlowControl == nil {
		return false
	}
	return *t.EnableFlowControl
}

// GetHwMacAddress retrieves the value of the leaf HwMacAddress from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HwMacAddress is set, it can safely use t.GetHwMacAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HwMacAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetHwMacAddress() string {
	if t == nil || t.HwMacAddress == nil {
		return ""
	}
	return *t.HwMacAddress
}

// GetMacAddress retrieves the value of the leaf MacAddress from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MacAddress is set, it can safely use t.GetMacAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MacAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetNegotiatedDuplexMode retrieves the value of the leaf NegotiatedDuplexMode from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NegotiatedDuplexMode is set, it can safely use t.GetNegotiatedDuplexMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NegotiatedDuplexMode == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetNegotiatedDuplexMode() E_Ethernet_NegotiatedDuplexMode {
	if t == nil || t.NegotiatedDuplexMode == 0 {
		return 0
	}
	return t.NegotiatedDuplexMode
}

// GetNegotiatedPortSpeed retrieves the value of the leaf NegotiatedPortSpeed from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NegotiatedPortSpeed is set, it can safely use t.GetNegotiatedPortSpeed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NegotiatedPortSpeed == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetNegotiatedPortSpeed() E_IfEthernet_ETHERNET_SPEED {
	if t == nil || t.NegotiatedPortSpeed == 0 {
		return 0
	}
	return t.NegotiatedPortSpeed
}

// GetPortSpeed retrieves the value of the leaf PortSpeed from the Interface_Ethernet
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortSpeed is set, it can safely use t.GetPortSpeed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortSpeed == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet) GetPortSpeed() E_IfEthernet_ETHERNET_SPEED {
	if t == nil || t.PortSpeed == 0 {
		return 0
	}
	return t.PortSpeed
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Ethernet_Counters represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters YANG schema element.
type Interface_Ethernet_Counters struct {
	In_8021QFrames      *uint64 `path:"in-8021q-frames" module:"openconfig-if-ethernet"`
	InBlockErrors       *uint64 `path:"in-block-errors" module:"openconfig-if-ethernet"`
	InCarrierErrors     *uint64 `path:"in-carrier-errors" module:"openconfig-if-ethernet"`
	InCrcErrors         *uint64 `path:"in-crc-errors" module:"openconfig-if-ethernet"`
	InFragmentFrames    *uint64 `path:"in-fragment-frames" module:"openconfig-if-ethernet"`
	InInterruptedTx     *uint64 `path:"in-interrupted-tx" module:"openconfig-if-ethernet"`
	InJabberFrames      *uint64 `path:"in-jabber-frames" module:"openconfig-if-ethernet"`
	InLateCollision     *uint64 `path:"in-late-collision" module:"openconfig-if-ethernet"`
	InMacControlFrames  *uint64 `path:"in-mac-control-frames" module:"openconfig-if-ethernet"`
	InMacErrorsRx       *uint64 `path:"in-mac-errors-rx" module:"openconfig-if-ethernet"`
	InMacPauseFrames    *uint64 `path:"in-mac-pause-frames" module:"openconfig-if-ethernet"`
	InMaxsizeExceeded   *uint64 `path:"in-maxsize-exceeded" module:"openconfig-if-ethernet"`
	InOversizeFrames    *uint64 `path:"in-oversize-frames" module:"openconfig-if-ethernet"`
	InSingleCollision   *uint64 `path:"in-single-collision" module:"openconfig-if-ethernet"`
	InSymbolError       *uint64 `path:"in-symbol-error" module:"openconfig-if-ethernet"`
	InUndersizeFrames   *uint64 `path:"in-undersize-frames" module:"openconfig-if-ethernet"`
	Out_8021QFrames     *uint64 `path:"out-8021q-frames" module:"openconfig-if-ethernet"`
	OutMacControlFrames *uint64 `path:"out-mac-control-frames" module:"openconfig-if-ethernet"`
	OutMacErrorsTx      *uint64 `path:"out-mac-errors-tx" module:"openconfig-if-ethernet"`
	OutMacPauseFrames   *uint64 `path:"out-mac-pause-frames" module:"openconfig-if-ethernet"`
}

// IsYANGGoStruct ensures that Interface_Ethernet_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ethernet_Counters) IsYANGGoStruct() {}

// GetIn_8021QFrames retrieves the value of the leaf In_8021QFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if In_8021QFrames is set, it can safely use t.GetIn_8021QFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.In_8021QFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetIn_8021QFrames() uint64 {
	if t == nil || t.In_8021QFrames == nil {
		return 0
	}
	return *t.In_8021QFrames
}

// GetInBlockErrors retrieves the value of the leaf InBlockErrors from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InBlockErrors is set, it can safely use t.GetInBlockErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InBlockErrors == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInBlockErrors() uint64 {
	if t == nil || t.InBlockErrors == nil {
		return 0
	}
	return *t.InBlockErrors
}

// GetInCarrierErrors retrieves the value of the leaf InCarrierErrors from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InCarrierErrors is set, it can safely use t.GetInCarrierErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InCarrierErrors == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInCarrierErrors() uint64 {
	if t == nil || t.InCarrierErrors == nil {
		return 0
	}
	return *t.InCarrierErrors
}

// GetInCrcErrors retrieves the value of the leaf InCrcErrors from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InCrcErrors is set, it can safely use t.GetInCrcErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InCrcErrors == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInCrcErrors() uint64 {
	if t == nil || t.InCrcErrors == nil {
		return 0
	}
	return *t.InCrcErrors
}

// GetInFragmentFrames retrieves the value of the leaf InFragmentFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InFragmentFrames is set, it can safely use t.GetInFragmentFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InFragmentFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInFragmentFrames() uint64 {
	if t == nil || t.InFragmentFrames == nil {
		return 0
	}
	return *t.InFragmentFrames
}

// GetInInterruptedTx retrieves the value of the leaf InInterruptedTx from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InInterruptedTx is set, it can safely use t.GetInInterruptedTx()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InInterruptedTx == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInInterruptedTx() uint64 {
	if t == nil || t.InInterruptedTx == nil {
		return 0
	}
	return *t.InInterruptedTx
}

// GetInJabberFrames retrieves the value of the leaf InJabberFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InJabberFrames is set, it can safely use t.GetInJabberFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InJabberFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInJabberFrames() uint64 {
	if t == nil || t.InJabberFrames == nil {
		return 0
	}
	return *t.InJabberFrames
}

// GetInLateCollision retrieves the value of the leaf InLateCollision from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InLateCollision is set, it can safely use t.GetInLateCollision()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InLateCollision == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInLateCollision() uint64 {
	if t == nil || t.InLateCollision == nil {
		return 0
	}
	return *t.InLateCollision
}

// GetInMacControlFrames retrieves the value of the leaf InMacControlFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InMacControlFrames is set, it can safely use t.GetInMacControlFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InMacControlFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInMacControlFrames() uint64 {
	if t == nil || t.InMacControlFrames == nil {
		return 0
	}
	return *t.InMacControlFrames
}

// GetInMacErrorsRx retrieves the value of the leaf InMacErrorsRx from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InMacErrorsRx is set, it can safely use t.GetInMacErrorsRx()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InMacErrorsRx == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInMacErrorsRx() uint64 {
	if t == nil || t.InMacErrorsRx == nil {
		return 0
	}
	return *t.InMacErrorsRx
}

// GetInMacPauseFrames retrieves the value of the leaf InMacPauseFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InMacPauseFrames is set, it can safely use t.GetInMacPauseFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InMacPauseFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInMacPauseFrames() uint64 {
	if t == nil || t.InMacPauseFrames == nil {
		return 0
	}
	return *t.InMacPauseFrames
}

// GetInMaxsizeExceeded retrieves the value of the leaf InMaxsizeExceeded from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InMaxsizeExceeded is set, it can safely use t.GetInMaxsizeExceeded()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InMaxsizeExceeded == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInMaxsizeExceeded() uint64 {
	if t == nil || t.InMaxsizeExceeded == nil {
		return 0
	}
	return *t.InMaxsizeExceeded
}

// GetInOversizeFrames retrieves the value of the leaf InOversizeFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOversizeFrames is set, it can safely use t.GetInOversizeFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOversizeFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInOversizeFrames() uint64 {
	if t == nil || t.InOversizeFrames == nil {
		return 0
	}
	return *t.InOversizeFrames
}

// GetInSingleCollision retrieves the value of the leaf InSingleCollision from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InSingleCollision is set, it can safely use t.GetInSingleCollision()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InSingleCollision == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInSingleCollision() uint64 {
	if t == nil || t.InSingleCollision == nil {
		return 0
	}
	return *t.InSingleCollision
}

// GetInSymbolError retrieves the value of the leaf InSymbolError from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InSymbolError is set, it can safely use t.GetInSymbolError()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InSymbolError == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInSymbolError() uint64 {
	if t == nil || t.InSymbolError == nil {
		return 0
	}
	return *t.InSymbolError
}

// GetInUndersizeFrames retrieves the value of the leaf InUndersizeFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InUndersizeFrames is set, it can safely use t.GetInUndersizeFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InUndersizeFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetInUndersizeFrames() uint64 {
	if t == nil || t.InUndersizeFrames == nil {
		return 0
	}
	return *t.InUndersizeFrames
}

// GetOut_8021QFrames retrieves the value of the leaf Out_8021QFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Out_8021QFrames is set, it can safely use t.GetOut_8021QFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Out_8021QFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetOut_8021QFrames() uint64 {
	if t == nil || t.Out_8021QFrames == nil {
		return 0
	}
	return *t.Out_8021QFrames
}

// GetOutMacControlFrames retrieves the value of the leaf OutMacControlFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutMacControlFrames is set, it can safely use t.GetOutMacControlFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutMacControlFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetOutMacControlFrames() uint64 {
	if t == nil || t.OutMacControlFrames == nil {
		return 0
	}
	return *t.OutMacControlFrames
}

// GetOutMacErrorsTx retrieves the value of the leaf OutMacErrorsTx from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutMacErrorsTx is set, it can safely use t.GetOutMacErrorsTx()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutMacErrorsTx == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetOutMacErrorsTx() uint64 {
	if t == nil || t.OutMacErrorsTx == nil {
		return 0
	}
	return *t.OutMacErrorsTx
}

// GetOutMacPauseFrames retrieves the value of the leaf OutMacPauseFrames from the Interface_Ethernet_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutMacPauseFrames is set, it can safely use t.GetOutMacPauseFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutMacPauseFrames == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_Counters) GetOutMacPauseFrames() uint64 {
	if t == nil || t.OutMacPauseFrames == nil {
		return 0
	}
	return *t.OutMacPauseFrames
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ethernet_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ethernet_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Ethernet_SwitchedVlan represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlan struct {
	AccessVlan    *uint16                                            `path:"state/access-vlan" module:"openconfig-vlan"`
	InterfaceMode E_VlanTypes_VlanModeType                           `path:"state/interface-mode" module:"openconfig-vlan"`
	NativeVlan    *uint16                                            `path:"state/native-vlan" module:"openconfig-vlan"`
	TrunkVlans    []Interface_Ethernet_SwitchedVlan_TrunkVlans_Union `path:"state/trunk-vlans" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Ethernet_SwitchedVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Ethernet_SwitchedVlan) IsYANGGoStruct() {}

// GetAccessVlan retrieves the value of the leaf AccessVlan from the Interface_Ethernet_SwitchedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AccessVlan is set, it can safely use t.GetAccessVlan()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AccessVlan == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_SwitchedVlan) GetAccessVlan() uint16 {
	if t == nil || t.AccessVlan == nil {
		return 0
	}
	return *t.AccessVlan
}

// GetInterfaceMode retrieves the value of the leaf InterfaceMode from the Interface_Ethernet_SwitchedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InterfaceMode is set, it can safely use t.GetInterfaceMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InterfaceMode == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_SwitchedVlan) GetInterfaceMode() E_VlanTypes_VlanModeType {
	if t == nil || t.InterfaceMode == 0 {
		return 0
	}
	return t.InterfaceMode
}

// GetNativeVlan retrieves the value of the leaf NativeVlan from the Interface_Ethernet_SwitchedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NativeVlan is set, it can safely use t.GetNativeVlan()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NativeVlan == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_SwitchedVlan) GetNativeVlan() uint16 {
	if t == nil || t.NativeVlan == nil {
		return 0
	}
	return *t.NativeVlan
}

// GetTrunkVlans retrieves the value of the leaf TrunkVlans from the Interface_Ethernet_SwitchedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TrunkVlans is set, it can safely use t.GetTrunkVlans()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TrunkVlans == nil'
// before retrieving the leaf's value.
func (t *Interface_Ethernet_SwitchedVlan) GetTrunkVlans() []Interface_Ethernet_SwitchedVlan_TrunkVlans_Union {
	if t == nil || t.TrunkVlans == nil {
		return nil
	}
	return t.TrunkVlans
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Ethernet_SwitchedVlan) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Ethernet_SwitchedVlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Ethernet_SwitchedVlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Ethernet_SwitchedVlan_TrunkVlans_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/trunk-vlans within the YANG schema.
type Interface_Ethernet_SwitchedVlan_TrunkVlans_Union interface {
	Is_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union()
}

// Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_String is used when /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/trunk-vlans
// is to be set to a string value.
type Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_String struct {
	String string
}

// Is_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union ensures that Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_String
// implements the Interface_Ethernet_SwitchedVlan_TrunkVlans_Union interface.
func (*Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_String) Is_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union() {
}

// Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_Uint16 is used when /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/state/trunk-vlans
// is to be set to a uint16 value.
type Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_Uint16 struct {
	Uint16 uint16
}

// Is_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union ensures that Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_Uint16
// implements the Interface_Ethernet_SwitchedVlan_TrunkVlans_Union interface.
func (*Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_Uint16) Is_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union() {
}

// To_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Interface_Ethernet_SwitchedVlan_TrunkVlans_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Interface_Ethernet_SwitchedVlan) To_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union(i interface{}) (Interface_Ethernet_SwitchedVlan_TrunkVlans_Union, error) {
	switch v := i.(type) {
	case string:
		return &Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_String{v}, nil
	case uint16:
		return &Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Interface_Ethernet_SwitchedVlan_TrunkVlans_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
	}
}

// Interface_HoldTime represents the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type Interface_HoldTime struct {
	Down *uint32 `path:"state/down" module:"openconfig-interfaces"`
	Up   *uint32 `path:"state/up" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_HoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the Interface_HoldTime
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Down is set, it can safely use t.GetDown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Down == nil'
// before retrieving the leaf's value.
func (t *Interface_HoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the Interface_HoldTime
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Up is set, it can safely use t.GetUp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Up == nil'
// before retrieving the leaf's value.
func (t *Interface_HoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 0
	}
	return *t.Up
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_HoldTime) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_RoutedVlan represents the /openconfig-interfaces/interfaces/interface/routed-vlan YANG schema element.
type Interface_RoutedVlan struct {
	Ipv4 *Interface_RoutedVlan_Ipv4      `path:"ipv4" module:"openconfig-if-ip"`
	Ipv6 *Interface_RoutedVlan_Ipv6      `path:"ipv6" module:"openconfig-if-ip"`
	Vlan Interface_RoutedVlan_Vlan_Union `path:"state/vlan" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan) GetOrCreateIpv4() *Interface_RoutedVlan_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &Interface_RoutedVlan_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan) GetOrCreateIpv6() *Interface_RoutedVlan_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &Interface_RoutedVlan_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from Interface_RoutedVlan. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan) GetIpv4() *Interface_RoutedVlan_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from Interface_RoutedVlan. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan) GetIpv6() *Interface_RoutedVlan_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetVlan retrieves the value of the leaf Vlan from the Interface_RoutedVlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Vlan is set, it can safely use t.GetVlan()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Vlan == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan) GetVlan() Interface_RoutedVlan_Vlan_Union {
	if t == nil || t.Vlan == nil {
		return nil
	}
	return t.Vlan
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_RoutedVlan_Vlan_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/routed-vlan/state/vlan within the YANG schema.
type Interface_RoutedVlan_Vlan_Union interface {
	Is_Interface_RoutedVlan_Vlan_Union()
}

// Interface_RoutedVlan_Vlan_Union_String is used when /openconfig-interfaces/interfaces/interface/routed-vlan/state/vlan
// is to be set to a string value.
type Interface_RoutedVlan_Vlan_Union_String struct {
	String string
}

// Is_Interface_RoutedVlan_Vlan_Union ensures that Interface_RoutedVlan_Vlan_Union_String
// implements the Interface_RoutedVlan_Vlan_Union interface.
func (*Interface_RoutedVlan_Vlan_Union_String) Is_Interface_RoutedVlan_Vlan_Union() {}

// Interface_RoutedVlan_Vlan_Union_Uint16 is used when /openconfig-interfaces/interfaces/interface/routed-vlan/state/vlan
// is to be set to a uint16 value.
type Interface_RoutedVlan_Vlan_Union_Uint16 struct {
	Uint16 uint16
}

// Is_Interface_RoutedVlan_Vlan_Union ensures that Interface_RoutedVlan_Vlan_Union_Uint16
// implements the Interface_RoutedVlan_Vlan_Union interface.
func (*Interface_RoutedVlan_Vlan_Union_Uint16) Is_Interface_RoutedVlan_Vlan_Union() {}

// To_Interface_RoutedVlan_Vlan_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Interface_RoutedVlan_Vlan_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Interface_RoutedVlan) To_Interface_RoutedVlan_Vlan_Union(i interface{}) (Interface_RoutedVlan_Vlan_Union, error) {
	switch v := i.(type) {
	case string:
		return &Interface_RoutedVlan_Vlan_Union_String{v}, nil
	case uint16:
		return &Interface_RoutedVlan_Vlan_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Interface_RoutedVlan_Vlan_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
	}
}

// Interface_RoutedVlan_Ipv4 represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4 YANG schema element.
type Interface_RoutedVlan_Ipv4 struct {
	Address    map[string]*Interface_RoutedVlan_Ipv4_Address  `path:"addresses/address" module:"openconfig-if-ip"`
	Counters   *Interface_RoutedVlan_Ipv4_Counters            `path:"state/counters" module:"openconfig-if-ip"`
	DhcpClient *bool                                          `path:"state/dhcp-client" module:"openconfig-if-ip"`
	Enabled    *bool                                          `path:"state/enabled" module:"openconfig-if-ip"`
	Mtu        *uint16                                        `path:"state/mtu" module:"openconfig-if-ip"`
	Neighbor   map[string]*Interface_RoutedVlan_Ipv4_Neighbor `path:"neighbors/neighbor" module:"openconfig-if-ip"`
	ProxyArp   *Interface_RoutedVlan_Ipv4_ProxyArp            `path:"proxy-arp" module:"openconfig-if-ip"`
	Unnumbered *Interface_RoutedVlan_Ipv4_Unnumbered          `path:"unnumbered" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// Interface_RoutedVlan_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv4) NewAddress(Ip string) (*Interface_RoutedVlan_Ipv4_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_RoutedVlan_Ipv4_Address)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &Interface_RoutedVlan_Ipv4_Address{
		Ip: &Ip,
	}

	return t.Address[key], nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv4) GetOrCreateAddress(Ip string) *Interface_RoutedVlan_Ipv4_Address {

	key := Ip

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of Interface_RoutedVlan_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv4) GetAddress(Ip string) *Interface_RoutedVlan_Ipv4_Address {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv4. If there is no such element, the function
// is a no-op.
func (t *Interface_RoutedVlan_Ipv4) DeleteAddress(Ip string) {
	key := Ip

	delete(t.Address, key)
}

// AppendAddress appends the supplied Interface_RoutedVlan_Ipv4_Address struct to the
// list Address of Interface_RoutedVlan_Ipv4. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv4_Address already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv4) AppendAddress(v *Interface_RoutedVlan_Ipv4_Address) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key received for Ip")
	}

	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_RoutedVlan_Ipv4_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// Interface_RoutedVlan_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv4) NewNeighbor(Ip string) (*Interface_RoutedVlan_Ipv4_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_RoutedVlan_Ipv4_Neighbor)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Interface_RoutedVlan_Ipv4_Neighbor{
		Ip: &Ip,
	}

	return t.Neighbor[key], nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv4) GetOrCreateNeighbor(Ip string) *Interface_RoutedVlan_Ipv4_Neighbor {

	key := Ip

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Interface_RoutedVlan_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv4) GetNeighbor(Ip string) *Interface_RoutedVlan_Ipv4_Neighbor {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv4. If there is no such element, the function
// is a no-op.
func (t *Interface_RoutedVlan_Ipv4) DeleteNeighbor(Ip string) {
	key := Ip

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied Interface_RoutedVlan_Ipv4_Neighbor struct to the
// list Neighbor of Interface_RoutedVlan_Ipv4. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv4_Neighbor already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv4) AppendNeighbor(v *Interface_RoutedVlan_Ipv4_Neighbor) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key received for Ip")
	}

	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_RoutedVlan_Ipv4_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv4) GetOrCreateCounters() *Interface_RoutedVlan_Ipv4_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_RoutedVlan_Ipv4_Counters{}
	return t.Counters
}

// GetOrCreateProxyArp retrieves the value of the ProxyArp field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv4) GetOrCreateProxyArp() *Interface_RoutedVlan_Ipv4_ProxyArp {
	if t.ProxyArp != nil {
		return t.ProxyArp
	}
	t.ProxyArp = &Interface_RoutedVlan_Ipv4_ProxyArp{}
	return t.ProxyArp
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv4) GetOrCreateUnnumbered() *Interface_RoutedVlan_Ipv4_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &Interface_RoutedVlan_Ipv4_Unnumbered{}
	return t.Unnumbered
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_RoutedVlan_Ipv4. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv4) GetCounters() *Interface_RoutedVlan_Ipv4_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetProxyArp returns the value of the ProxyArp struct pointer
// from Interface_RoutedVlan_Ipv4. If the receiver or the field ProxyArp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv4) GetProxyArp() *Interface_RoutedVlan_Ipv4_ProxyArp {
	if t != nil && t.ProxyArp != nil {
		return t.ProxyArp
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from Interface_RoutedVlan_Ipv4. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv4) GetUnnumbered() *Interface_RoutedVlan_Ipv4_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetDhcpClient retrieves the value of the leaf DhcpClient from the Interface_RoutedVlan_Ipv4
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DhcpClient is set, it can safely use t.GetDhcpClient()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DhcpClient == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4) GetDhcpClient() bool {
	if t == nil || t.DhcpClient == nil {
		return false
	}
	return *t.DhcpClient
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_RoutedVlan_Ipv4
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetMtu retrieves the value of the leaf Mtu from the Interface_RoutedVlan_Ipv4
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mtu is set, it can safely use t.GetMtu()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mtu == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4) GetMtu() uint16 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_RoutedVlan_Ipv4_Address represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv4_Address struct {
	Ip           *string                                                `path:"state/ip|ip" module:"openconfig-if-ip"`
	Origin       E_IfIp_IpAddressOrigin                                 `path:"state/origin" module:"openconfig-if-ip"`
	PrefixLength *uint8                                                 `path:"state/prefix-length" module:"openconfig-if-ip"`
	VrrpGroup    map[uint8]*Interface_RoutedVlan_Ipv4_Address_VrrpGroup `path:"vrrp/vrrp-group" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Address) IsYANGGoStruct() {}

// NewVrrpGroup creates a new entry in the VrrpGroup list of the
// Interface_RoutedVlan_Ipv4_Address struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv4_Address) NewVrrpGroup(VirtualRouterId uint8) (*Interface_RoutedVlan_Ipv4_Address_VrrpGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_RoutedVlan_Ipv4_Address_VrrpGroup)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VrrpGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VrrpGroup", key)
	}

	t.VrrpGroup[key] = &Interface_RoutedVlan_Ipv4_Address_VrrpGroup{
		VirtualRouterId: &VirtualRouterId,
	}

	return t.VrrpGroup[key], nil
}

// GetOrCreateVrrpGroup retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv4_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv4_Address) GetOrCreateVrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv4_Address_VrrpGroup {

	key := VirtualRouterId

	if v, ok := t.VrrpGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrpGroup(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrpGroup got unexpected error: %v", err))
	}
	return v
}

// GetVrrpGroup retrieves the value with the specified key from
// the VrrpGroup map field of Interface_RoutedVlan_Ipv4_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv4_Address) GetVrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv4_Address_VrrpGroup {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.VrrpGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrpGroup deletes the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv4_Address. If there is no such element, the function
// is a no-op.
func (t *Interface_RoutedVlan_Ipv4_Address) DeleteVrrpGroup(VirtualRouterId uint8) {
	key := VirtualRouterId

	delete(t.VrrpGroup, key)
}

// AppendVrrpGroup appends the supplied Interface_RoutedVlan_Ipv4_Address_VrrpGroup struct to the
// list VrrpGroup of Interface_RoutedVlan_Ipv4_Address. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv4_Address_VrrpGroup already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv4_Address) AppendVrrpGroup(v *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) error {
	if v.VirtualRouterId == nil {
		return fmt.Errorf("invalid nil key received for VirtualRouterId")
	}

	key := *v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_RoutedVlan_Ipv4_Address_VrrpGroup)
	}

	if _, ok := t.VrrpGroup[key]; ok {
		return fmt.Errorf("duplicate key for list VrrpGroup %v", key)
	}

	t.VrrpGroup[key] = v
	return nil
}

// GetIp retrieves the value of the leaf Ip from the Interface_RoutedVlan_Ipv4_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ip is set, it can safely use t.GetIp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ip == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_RoutedVlan_Ipv4_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address) GetOrigin() E_IfIp_IpAddressOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Interface_RoutedVlan_Ipv4_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PrefixLength is set, it can safely use t.GetPrefixLength()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PrefixLength == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address) GetPrefixLength() uint8 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv4_Address struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv4_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Address) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup struct {
	AcceptMode            *bool                                                          `path:"state/accept-mode" module:"openconfig-if-ip"`
	AdvertisementInterval *uint16                                                        `path:"state/advertisement-interval" module:"openconfig-if-ip"`
	CurrentPriority       *uint8                                                         `path:"state/current-priority" module:"openconfig-if-ip"`
	InterfaceTracking     *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking `path:"interface-tracking" module:"openconfig-if-ip"`
	Preempt               *bool                                                          `path:"state/preempt" module:"openconfig-if-ip"`
	PreemptDelay          *uint16                                                        `path:"state/preempt-delay" module:"openconfig-if-ip"`
	Priority              *uint8                                                         `path:"state/priority" module:"openconfig-if-ip"`
	VirtualAddress        []string                                                       `path:"state/virtual-address" module:"openconfig-if-ip"`
	VirtualRouterId       *uint8                                                         `path:"state/virtual-router-id|virtual-router-id" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Address_VrrpGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Address_VrrpGroup) IsYANGGoStruct() {}

// GetOrCreateInterfaceTracking retrieves the value of the InterfaceTracking field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetOrCreateInterfaceTracking() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking {
	if t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	t.InterfaceTracking = &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking{}
	return t.InterfaceTracking
}

// GetInterfaceTracking returns the value of the InterfaceTracking struct pointer
// from Interface_RoutedVlan_Ipv4_Address_VrrpGroup. If the receiver or the field InterfaceTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetInterfaceTracking() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking {
	if t != nil && t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	return nil
}

// GetAcceptMode retrieves the value of the leaf AcceptMode from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AcceptMode is set, it can safely use t.GetAcceptMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AcceptMode == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetAcceptMode() bool {
	if t == nil || t.AcceptMode == nil {
		return false
	}
	return *t.AcceptMode
}

// GetAdvertisementInterval retrieves the value of the leaf AdvertisementInterval from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdvertisementInterval is set, it can safely use t.GetAdvertisementInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdvertisementInterval == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetAdvertisementInterval() uint16 {
	if t == nil || t.AdvertisementInterval == nil {
		return 100
	}
	return *t.AdvertisementInterval
}

// GetCurrentPriority retrieves the value of the leaf CurrentPriority from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CurrentPriority is set, it can safely use t.GetCurrentPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CurrentPriority == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetCurrentPriority() uint8 {
	if t == nil || t.CurrentPriority == nil {
		return 0
	}
	return *t.CurrentPriority
}

// GetPreempt retrieves the value of the leaf Preempt from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Preempt is set, it can safely use t.GetPreempt()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Preempt == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPreemptDelay retrieves the value of the leaf PreemptDelay from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreemptDelay is set, it can safely use t.GetPreemptDelay()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreemptDelay == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetPreemptDelay() uint16 {
	if t == nil || t.PreemptDelay == nil {
		return 0
	}
	return *t.PreemptDelay
}

// GetPriority retrieves the value of the leaf Priority from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Priority is set, it can safely use t.GetPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Priority == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// GetVirtualAddress retrieves the value of the leaf VirtualAddress from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualAddress is set, it can safely use t.GetVirtualAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetVirtualAddress() []string {
	if t == nil || t.VirtualAddress == nil {
		return nil
	}
	return t.VirtualAddress
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualRouterId is set, it can safely use t.GetVirtualRouterId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualRouterId == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) GetVirtualRouterId() uint8 {
	if t == nil || t.VirtualRouterId == nil {
		return 0
	}
	return *t.VirtualRouterId
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv4_Address_VrrpGroup struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VirtualRouterId == nil {
		return nil, fmt.Errorf("nil value for key VirtualRouterId")
	}

	return map[string]interface{}{
		"virtual-router-id": *t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Address_VrrpGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking struct {
	PriorityDecrement *uint8   `path:"state/priority-decrement" module:"openconfig-if-ip"`
	TrackInterface    []string `path:"state/track-interface" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) IsYANGGoStruct() {}

// GetPriorityDecrement retrieves the value of the leaf PriorityDecrement from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PriorityDecrement is set, it can safely use t.GetPriorityDecrement()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PriorityDecrement == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) GetPriorityDecrement() uint8 {
	if t == nil || t.PriorityDecrement == nil {
		return 0
	}
	return *t.PriorityDecrement
}

// GetTrackInterface retrieves the value of the leaf TrackInterface from the Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TrackInterface is set, it can safely use t.GetTrackInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TrackInterface == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) GetTrackInterface() []string {
	if t == nil || t.TrackInterface == nil {
		return nil
	}
	return t.TrackInterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv4_Counters represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters struct {
	InDiscardedPkts    *uint64 `path:"in-discarded-pkts" module:"openconfig-if-ip"`
	InErrorPkts        *uint64 `path:"in-error-pkts" module:"openconfig-if-ip"`
	InForwardedOctets  *uint64 `path:"in-forwarded-octets" module:"openconfig-if-ip"`
	InForwardedPkts    *uint64 `path:"in-forwarded-pkts" module:"openconfig-if-ip"`
	InOctets           *uint64 `path:"in-octets" module:"openconfig-if-ip"`
	InPkts             *uint64 `path:"in-pkts" module:"openconfig-if-ip"`
	OutDiscardedPkts   *uint64 `path:"out-discarded-pkts" module:"openconfig-if-ip"`
	OutErrorPkts       *uint64 `path:"out-error-pkts" module:"openconfig-if-ip"`
	OutForwardedOctets *uint64 `path:"out-forwarded-octets" module:"openconfig-if-ip"`
	OutForwardedPkts   *uint64 `path:"out-forwarded-pkts" module:"openconfig-if-ip"`
	OutOctets          *uint64 `path:"out-octets" module:"openconfig-if-ip"`
	OutPkts            *uint64 `path:"out-pkts" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Counters) IsYANGGoStruct() {}

// GetInDiscardedPkts retrieves the value of the leaf InDiscardedPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InDiscardedPkts is set, it can safely use t.GetInDiscardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InDiscardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInDiscardedPkts() uint64 {
	if t == nil || t.InDiscardedPkts == nil {
		return 0
	}
	return *t.InDiscardedPkts
}

// GetInErrorPkts retrieves the value of the leaf InErrorPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InErrorPkts is set, it can safely use t.GetInErrorPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InErrorPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInErrorPkts() uint64 {
	if t == nil || t.InErrorPkts == nil {
		return 0
	}
	return *t.InErrorPkts
}

// GetInForwardedOctets retrieves the value of the leaf InForwardedOctets from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InForwardedOctets is set, it can safely use t.GetInForwardedOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InForwardedOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInForwardedOctets() uint64 {
	if t == nil || t.InForwardedOctets == nil {
		return 0
	}
	return *t.InForwardedOctets
}

// GetInForwardedPkts retrieves the value of the leaf InForwardedPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InForwardedPkts is set, it can safely use t.GetInForwardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InForwardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInForwardedPkts() uint64 {
	if t == nil || t.InForwardedPkts == nil {
		return 0
	}
	return *t.InForwardedPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOctets is set, it can safely use t.GetInOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPkts is set, it can safely use t.GetInPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutDiscardedPkts retrieves the value of the leaf OutDiscardedPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutDiscardedPkts is set, it can safely use t.GetOutDiscardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutDiscardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutDiscardedPkts() uint64 {
	if t == nil || t.OutDiscardedPkts == nil {
		return 0
	}
	return *t.OutDiscardedPkts
}

// GetOutErrorPkts retrieves the value of the leaf OutErrorPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutErrorPkts is set, it can safely use t.GetOutErrorPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutErrorPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutErrorPkts() uint64 {
	if t == nil || t.OutErrorPkts == nil {
		return 0
	}
	return *t.OutErrorPkts
}

// GetOutForwardedOctets retrieves the value of the leaf OutForwardedOctets from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutForwardedOctets is set, it can safely use t.GetOutForwardedOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutForwardedOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutForwardedOctets() uint64 {
	if t == nil || t.OutForwardedOctets == nil {
		return 0
	}
	return *t.OutForwardedOctets
}

// GetOutForwardedPkts retrieves the value of the leaf OutForwardedPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutForwardedPkts is set, it can safely use t.GetOutForwardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutForwardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutForwardedPkts() uint64 {
	if t == nil || t.OutForwardedPkts == nil {
		return 0
	}
	return *t.OutForwardedPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutOctets is set, it can safely use t.GetOutOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_RoutedVlan_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutPkts is set, it can safely use t.GetOutPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv4_Neighbor represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor struct {
	Ip               *string               `path:"state/ip|ip" module:"openconfig-if-ip"`
	LinkLayerAddress *string               `path:"state/link-layer-address" module:"openconfig-if-ip"`
	Origin           E_IfIp_NeighborOrigin `path:"state/origin" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Neighbor) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the Interface_RoutedVlan_Ipv4_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ip is set, it can safely use t.GetIp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ip == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_RoutedVlan_Ipv4_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LinkLayerAddress is set, it can safely use t.GetLinkLayerAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LinkLayerAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_RoutedVlan_Ipv4_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) GetOrigin() E_IfIp_NeighborOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv4_Neighbor struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv4_ProxyArp represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArp struct {
	Mode E_ProxyArp_Mode `path:"state/mode" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_ProxyArp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_ProxyArp) IsYANGGoStruct() {}

// GetMode retrieves the value of the leaf Mode from the Interface_RoutedVlan_Ipv4_ProxyArp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mode is set, it can safely use t.GetMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mode == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_ProxyArp) GetMode() E_ProxyArp_Mode {
	if t == nil || t.Mode == 0 {
		return ProxyArp_Mode_DISABLE
	}
	return t.Mode
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_ProxyArp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_ProxyArp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_ProxyArp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv4_Unnumbered represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered struct {
	Enabled      *bool                                              `path:"state/enabled" module:"openconfig-if-ip"`
	InterfaceRef *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef `path:"interface-ref" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Unnumbered) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) GetOrCreateInterfaceRef() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Interface_RoutedVlan_Ipv4_Unnumbered. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) GetInterfaceRef() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_RoutedVlan_Ipv4_Unnumbered
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef struct {
	Interface    *string `path:"state/interface" module:"openconfig-if-ip"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interface is set, it can safely use t.GetInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interface == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Subinterface is set, it can safely use t.GetSubinterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Subinterface == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv6 represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6 YANG schema element.
type Interface_RoutedVlan_Ipv6 struct {
	Address                map[string]*Interface_RoutedVlan_Ipv6_Address  `path:"addresses/address" module:"openconfig-if-ip"`
	Counters               *Interface_RoutedVlan_Ipv6_Counters            `path:"state/counters" module:"openconfig-if-ip"`
	DhcpClient             *bool                                          `path:"state/dhcp-client" module:"openconfig-if-ip"`
	DupAddrDetectTransmits *uint32                                        `path:"state/dup-addr-detect-transmits" module:"openconfig-if-ip"`
	Enabled                *bool                                          `path:"state/enabled" module:"openconfig-if-ip"`
	Mtu                    *uint32                                        `path:"state/mtu" module:"openconfig-if-ip"`
	Neighbor               map[string]*Interface_RoutedVlan_Ipv6_Neighbor `path:"neighbors/neighbor" module:"openconfig-if-ip"`
	RouterAdvertisement    *Interface_RoutedVlan_Ipv6_RouterAdvertisement `path:"router-advertisement" module:"openconfig-if-ip"`
	Unnumbered             *Interface_RoutedVlan_Ipv6_Unnumbered          `path:"unnumbered" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// Interface_RoutedVlan_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv6) NewAddress(Ip string) (*Interface_RoutedVlan_Ipv6_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_RoutedVlan_Ipv6_Address)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &Interface_RoutedVlan_Ipv6_Address{
		Ip: &Ip,
	}

	return t.Address[key], nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv6) GetOrCreateAddress(Ip string) *Interface_RoutedVlan_Ipv6_Address {

	key := Ip

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of Interface_RoutedVlan_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv6) GetAddress(Ip string) *Interface_RoutedVlan_Ipv6_Address {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv6. If there is no such element, the function
// is a no-op.
func (t *Interface_RoutedVlan_Ipv6) DeleteAddress(Ip string) {
	key := Ip

	delete(t.Address, key)
}

// AppendAddress appends the supplied Interface_RoutedVlan_Ipv6_Address struct to the
// list Address of Interface_RoutedVlan_Ipv6. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv6_Address already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv6) AppendAddress(v *Interface_RoutedVlan_Ipv6_Address) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key received for Ip")
	}

	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_RoutedVlan_Ipv6_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// Interface_RoutedVlan_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv6) NewNeighbor(Ip string) (*Interface_RoutedVlan_Ipv6_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_RoutedVlan_Ipv6_Neighbor)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Interface_RoutedVlan_Ipv6_Neighbor{
		Ip: &Ip,
	}

	return t.Neighbor[key], nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv6) GetOrCreateNeighbor(Ip string) *Interface_RoutedVlan_Ipv6_Neighbor {

	key := Ip

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Interface_RoutedVlan_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv6) GetNeighbor(Ip string) *Interface_RoutedVlan_Ipv6_Neighbor {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv6. If there is no such element, the function
// is a no-op.
func (t *Interface_RoutedVlan_Ipv6) DeleteNeighbor(Ip string) {
	key := Ip

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied Interface_RoutedVlan_Ipv6_Neighbor struct to the
// list Neighbor of Interface_RoutedVlan_Ipv6. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv6_Neighbor already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv6) AppendNeighbor(v *Interface_RoutedVlan_Ipv6_Neighbor) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key received for Ip")
	}

	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_RoutedVlan_Ipv6_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv6) GetOrCreateCounters() *Interface_RoutedVlan_Ipv6_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_RoutedVlan_Ipv6_Counters{}
	return t.Counters
}

// GetOrCreateRouterAdvertisement retrieves the value of the RouterAdvertisement field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv6) GetOrCreateRouterAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisement {
	if t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	t.RouterAdvertisement = &Interface_RoutedVlan_Ipv6_RouterAdvertisement{}
	return t.RouterAdvertisement
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv6) GetOrCreateUnnumbered() *Interface_RoutedVlan_Ipv6_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &Interface_RoutedVlan_Ipv6_Unnumbered{}
	return t.Unnumbered
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_RoutedVlan_Ipv6. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv6) GetCounters() *Interface_RoutedVlan_Ipv6_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetRouterAdvertisement returns the value of the RouterAdvertisement struct pointer
// from Interface_RoutedVlan_Ipv6. If the receiver or the field RouterAdvertisement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv6) GetRouterAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisement {
	if t != nil && t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from Interface_RoutedVlan_Ipv6. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv6) GetUnnumbered() *Interface_RoutedVlan_Ipv6_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetDhcpClient retrieves the value of the leaf DhcpClient from the Interface_RoutedVlan_Ipv6
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DhcpClient is set, it can safely use t.GetDhcpClient()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DhcpClient == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6) GetDhcpClient() bool {
	if t == nil || t.DhcpClient == nil {
		return false
	}
	return *t.DhcpClient
}

// GetDupAddrDetectTransmits retrieves the value of the leaf DupAddrDetectTransmits from the Interface_RoutedVlan_Ipv6
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DupAddrDetectTransmits is set, it can safely use t.GetDupAddrDetectTransmits()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DupAddrDetectTransmits == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6) GetDupAddrDetectTransmits() uint32 {
	if t == nil || t.DupAddrDetectTransmits == nil {
		return 1
	}
	return *t.DupAddrDetectTransmits
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_RoutedVlan_Ipv6
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetMtu retrieves the value of the leaf Mtu from the Interface_RoutedVlan_Ipv6
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mtu is set, it can safely use t.GetMtu()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mtu == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_RoutedVlan_Ipv6_Address represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv6_Address struct {
	Ip           *string                                                `path:"state/ip|ip" module:"openconfig-if-ip"`
	Origin       E_IfIp_IpAddressOrigin                                 `path:"state/origin" module:"openconfig-if-ip"`
	PrefixLength *uint8                                                 `path:"state/prefix-length" module:"openconfig-if-ip"`
	Status       E_Address_Status                                       `path:"state/status" module:"openconfig-if-ip"`
	VrrpGroup    map[uint8]*Interface_RoutedVlan_Ipv6_Address_VrrpGroup `path:"vrrp/vrrp-group" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Address) IsYANGGoStruct() {}

// NewVrrpGroup creates a new entry in the VrrpGroup list of the
// Interface_RoutedVlan_Ipv6_Address struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_RoutedVlan_Ipv6_Address) NewVrrpGroup(VirtualRouterId uint8) (*Interface_RoutedVlan_Ipv6_Address_VrrpGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_RoutedVlan_Ipv6_Address_VrrpGroup)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VrrpGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VrrpGroup", key)
	}

	t.VrrpGroup[key] = &Interface_RoutedVlan_Ipv6_Address_VrrpGroup{
		VirtualRouterId: &VirtualRouterId,
	}

	return t.VrrpGroup[key], nil
}

// GetOrCreateVrrpGroup retrieves the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv6_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_RoutedVlan_Ipv6_Address) GetOrCreateVrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv6_Address_VrrpGroup {

	key := VirtualRouterId

	if v, ok := t.VrrpGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrpGroup(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrpGroup got unexpected error: %v", err))
	}
	return v
}

// GetVrrpGroup retrieves the value with the specified key from
// the VrrpGroup map field of Interface_RoutedVlan_Ipv6_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_RoutedVlan_Ipv6_Address) GetVrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv6_Address_VrrpGroup {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.VrrpGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrpGroup deletes the value with the specified keys from
// the receiver Interface_RoutedVlan_Ipv6_Address. If there is no such element, the function
// is a no-op.
func (t *Interface_RoutedVlan_Ipv6_Address) DeleteVrrpGroup(VirtualRouterId uint8) {
	key := VirtualRouterId

	delete(t.VrrpGroup, key)
}

// AppendVrrpGroup appends the supplied Interface_RoutedVlan_Ipv6_Address_VrrpGroup struct to the
// list VrrpGroup of Interface_RoutedVlan_Ipv6_Address. If the key value(s) specified in
// the supplied Interface_RoutedVlan_Ipv6_Address_VrrpGroup already exist in the list, an error is
// returned.
func (t *Interface_RoutedVlan_Ipv6_Address) AppendVrrpGroup(v *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) error {
	if v.VirtualRouterId == nil {
		return fmt.Errorf("invalid nil key received for VirtualRouterId")
	}

	key := *v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_RoutedVlan_Ipv6_Address_VrrpGroup)
	}

	if _, ok := t.VrrpGroup[key]; ok {
		return fmt.Errorf("duplicate key for list VrrpGroup %v", key)
	}

	t.VrrpGroup[key] = v
	return nil
}

// GetIp retrieves the value of the leaf Ip from the Interface_RoutedVlan_Ipv6_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ip is set, it can safely use t.GetIp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ip == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_RoutedVlan_Ipv6_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address) GetOrigin() E_IfIp_IpAddressOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Interface_RoutedVlan_Ipv6_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PrefixLength is set, it can safely use t.GetPrefixLength()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PrefixLength == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address) GetPrefixLength() uint8 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetStatus retrieves the value of the leaf Status from the Interface_RoutedVlan_Ipv6_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Status is set, it can safely use t.GetStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Status == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address) GetStatus() E_Address_Status {
	if t == nil || t.Status == 0 {
		return 0
	}
	return t.Status
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv6_Address struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv6_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Address) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup struct {
	AcceptMode            *bool                                                          `path:"state/accept-mode" module:"openconfig-if-ip"`
	AdvertisementInterval *uint16                                                        `path:"state/advertisement-interval" module:"openconfig-if-ip"`
	CurrentPriority       *uint8                                                         `path:"state/current-priority" module:"openconfig-if-ip"`
	InterfaceTracking     *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking `path:"interface-tracking" module:"openconfig-if-ip"`
	Preempt               *bool                                                          `path:"state/preempt" module:"openconfig-if-ip"`
	PreemptDelay          *uint16                                                        `path:"state/preempt-delay" module:"openconfig-if-ip"`
	Priority              *uint8                                                         `path:"state/priority" module:"openconfig-if-ip"`
	VirtualAddress        []string                                                       `path:"state/virtual-address" module:"openconfig-if-ip"`
	VirtualLinkLocal      *string                                                        `path:"state/virtual-link-local" module:"openconfig-if-ip"`
	VirtualRouterId       *uint8                                                         `path:"state/virtual-router-id|virtual-router-id" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Address_VrrpGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Address_VrrpGroup) IsYANGGoStruct() {}

// GetOrCreateInterfaceTracking retrieves the value of the InterfaceTracking field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetOrCreateInterfaceTracking() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking {
	if t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	t.InterfaceTracking = &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking{}
	return t.InterfaceTracking
}

// GetInterfaceTracking returns the value of the InterfaceTracking struct pointer
// from Interface_RoutedVlan_Ipv6_Address_VrrpGroup. If the receiver or the field InterfaceTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetInterfaceTracking() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking {
	if t != nil && t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	return nil
}

// GetAcceptMode retrieves the value of the leaf AcceptMode from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AcceptMode is set, it can safely use t.GetAcceptMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AcceptMode == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetAcceptMode() bool {
	if t == nil || t.AcceptMode == nil {
		return false
	}
	return *t.AcceptMode
}

// GetAdvertisementInterval retrieves the value of the leaf AdvertisementInterval from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdvertisementInterval is set, it can safely use t.GetAdvertisementInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdvertisementInterval == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetAdvertisementInterval() uint16 {
	if t == nil || t.AdvertisementInterval == nil {
		return 100
	}
	return *t.AdvertisementInterval
}

// GetCurrentPriority retrieves the value of the leaf CurrentPriority from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CurrentPriority is set, it can safely use t.GetCurrentPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CurrentPriority == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetCurrentPriority() uint8 {
	if t == nil || t.CurrentPriority == nil {
		return 0
	}
	return *t.CurrentPriority
}

// GetPreempt retrieves the value of the leaf Preempt from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Preempt is set, it can safely use t.GetPreempt()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Preempt == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPreemptDelay retrieves the value of the leaf PreemptDelay from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreemptDelay is set, it can safely use t.GetPreemptDelay()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreemptDelay == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetPreemptDelay() uint16 {
	if t == nil || t.PreemptDelay == nil {
		return 0
	}
	return *t.PreemptDelay
}

// GetPriority retrieves the value of the leaf Priority from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Priority is set, it can safely use t.GetPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Priority == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// GetVirtualAddress retrieves the value of the leaf VirtualAddress from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualAddress is set, it can safely use t.GetVirtualAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetVirtualAddress() []string {
	if t == nil || t.VirtualAddress == nil {
		return nil
	}
	return t.VirtualAddress
}

// GetVirtualLinkLocal retrieves the value of the leaf VirtualLinkLocal from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualLinkLocal is set, it can safely use t.GetVirtualLinkLocal()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualLinkLocal == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetVirtualLinkLocal() string {
	if t == nil || t.VirtualLinkLocal == nil {
		return ""
	}
	return *t.VirtualLinkLocal
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualRouterId is set, it can safely use t.GetVirtualRouterId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualRouterId == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) GetVirtualRouterId() uint8 {
	if t == nil || t.VirtualRouterId == nil {
		return 0
	}
	return *t.VirtualRouterId
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv6_Address_VrrpGroup struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VirtualRouterId == nil {
		return nil, fmt.Errorf("nil value for key VirtualRouterId")
	}

	return map[string]interface{}{
		"virtual-router-id": *t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Address_VrrpGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking struct {
	PriorityDecrement *uint8   `path:"state/priority-decrement" module:"openconfig-if-ip"`
	TrackInterface    []string `path:"state/track-interface" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) IsYANGGoStruct() {}

// GetPriorityDecrement retrieves the value of the leaf PriorityDecrement from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PriorityDecrement is set, it can safely use t.GetPriorityDecrement()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PriorityDecrement == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) GetPriorityDecrement() uint8 {
	if t == nil || t.PriorityDecrement == nil {
		return 0
	}
	return *t.PriorityDecrement
}

// GetTrackInterface retrieves the value of the leaf TrackInterface from the Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TrackInterface is set, it can safely use t.GetTrackInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TrackInterface == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) GetTrackInterface() []string {
	if t == nil || t.TrackInterface == nil {
		return nil
	}
	return t.TrackInterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv6_Counters represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters struct {
	InDiscardedPkts    *uint64 `path:"in-discarded-pkts" module:"openconfig-if-ip"`
	InErrorPkts        *uint64 `path:"in-error-pkts" module:"openconfig-if-ip"`
	InForwardedOctets  *uint64 `path:"in-forwarded-octets" module:"openconfig-if-ip"`
	InForwardedPkts    *uint64 `path:"in-forwarded-pkts" module:"openconfig-if-ip"`
	InOctets           *uint64 `path:"in-octets" module:"openconfig-if-ip"`
	InPkts             *uint64 `path:"in-pkts" module:"openconfig-if-ip"`
	OutDiscardedPkts   *uint64 `path:"out-discarded-pkts" module:"openconfig-if-ip"`
	OutErrorPkts       *uint64 `path:"out-error-pkts" module:"openconfig-if-ip"`
	OutForwardedOctets *uint64 `path:"out-forwarded-octets" module:"openconfig-if-ip"`
	OutForwardedPkts   *uint64 `path:"out-forwarded-pkts" module:"openconfig-if-ip"`
	OutOctets          *uint64 `path:"out-octets" module:"openconfig-if-ip"`
	OutPkts            *uint64 `path:"out-pkts" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Counters) IsYANGGoStruct() {}

// GetInDiscardedPkts retrieves the value of the leaf InDiscardedPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InDiscardedPkts is set, it can safely use t.GetInDiscardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InDiscardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInDiscardedPkts() uint64 {
	if t == nil || t.InDiscardedPkts == nil {
		return 0
	}
	return *t.InDiscardedPkts
}

// GetInErrorPkts retrieves the value of the leaf InErrorPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InErrorPkts is set, it can safely use t.GetInErrorPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InErrorPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInErrorPkts() uint64 {
	if t == nil || t.InErrorPkts == nil {
		return 0
	}
	return *t.InErrorPkts
}

// GetInForwardedOctets retrieves the value of the leaf InForwardedOctets from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InForwardedOctets is set, it can safely use t.GetInForwardedOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InForwardedOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInForwardedOctets() uint64 {
	if t == nil || t.InForwardedOctets == nil {
		return 0
	}
	return *t.InForwardedOctets
}

// GetInForwardedPkts retrieves the value of the leaf InForwardedPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InForwardedPkts is set, it can safely use t.GetInForwardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InForwardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInForwardedPkts() uint64 {
	if t == nil || t.InForwardedPkts == nil {
		return 0
	}
	return *t.InForwardedPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOctets is set, it can safely use t.GetInOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPkts is set, it can safely use t.GetInPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutDiscardedPkts retrieves the value of the leaf OutDiscardedPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutDiscardedPkts is set, it can safely use t.GetOutDiscardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutDiscardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutDiscardedPkts() uint64 {
	if t == nil || t.OutDiscardedPkts == nil {
		return 0
	}
	return *t.OutDiscardedPkts
}

// GetOutErrorPkts retrieves the value of the leaf OutErrorPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutErrorPkts is set, it can safely use t.GetOutErrorPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutErrorPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutErrorPkts() uint64 {
	if t == nil || t.OutErrorPkts == nil {
		return 0
	}
	return *t.OutErrorPkts
}

// GetOutForwardedOctets retrieves the value of the leaf OutForwardedOctets from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutForwardedOctets is set, it can safely use t.GetOutForwardedOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutForwardedOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutForwardedOctets() uint64 {
	if t == nil || t.OutForwardedOctets == nil {
		return 0
	}
	return *t.OutForwardedOctets
}

// GetOutForwardedPkts retrieves the value of the leaf OutForwardedPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutForwardedPkts is set, it can safely use t.GetOutForwardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutForwardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutForwardedPkts() uint64 {
	if t == nil || t.OutForwardedPkts == nil {
		return 0
	}
	return *t.OutForwardedPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutOctets is set, it can safely use t.GetOutOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_RoutedVlan_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutPkts is set, it can safely use t.GetOutPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv6_Neighbor represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor struct {
	Ip               *string                  `path:"state/ip|ip" module:"openconfig-if-ip"`
	IsRouter         *bool                    `path:"state/is-router" module:"openconfig-if-ip"`
	LinkLayerAddress *string                  `path:"state/link-layer-address" module:"openconfig-if-ip"`
	NeighborState    E_Neighbor_NeighborState `path:"state/neighbor-state" module:"openconfig-if-ip"`
	Origin           E_IfIp_NeighborOrigin    `path:"state/origin" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Neighbor) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the Interface_RoutedVlan_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ip is set, it can safely use t.GetIp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ip == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIsRouter retrieves the value of the leaf IsRouter from the Interface_RoutedVlan_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if IsRouter is set, it can safely use t.GetIsRouter()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.IsRouter == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) GetIsRouter() bool {
	if t == nil || t.IsRouter == nil {
		return false
	}
	return *t.IsRouter
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_RoutedVlan_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LinkLayerAddress is set, it can safely use t.GetLinkLayerAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LinkLayerAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// GetNeighborState retrieves the value of the leaf NeighborState from the Interface_RoutedVlan_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NeighborState is set, it can safely use t.GetNeighborState()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NeighborState == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) GetNeighborState() E_Neighbor_NeighborState {
	if t == nil || t.NeighborState == 0 {
		return 0
	}
	return t.NeighborState
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_RoutedVlan_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) GetOrigin() E_IfIp_NeighborOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// ΛListKeyMap returns the keys of the Interface_RoutedVlan_Ipv6_Neighbor struct, which is a YANG list entry.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement struct {
	Interval *uint32 `path:"state/interval" module:"openconfig-if-ip"`
	Lifetime *uint32 `path:"state/lifetime" module:"openconfig-if-ip"`
	Suppress *bool   `path:"state/suppress" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_RouterAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_RouterAdvertisement) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetLifetime retrieves the value of the leaf Lifetime from the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Lifetime is set, it can safely use t.GetLifetime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Lifetime == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetLifetime() uint32 {
	if t == nil || t.Lifetime == nil {
		return 0
	}
	return *t.Lifetime
}

// GetSuppress retrieves the value of the leaf Suppress from the Interface_RoutedVlan_Ipv6_RouterAdvertisement
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Suppress is set, it can safely use t.GetSuppress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Suppress == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) GetSuppress() bool {
	if t == nil || t.Suppress == nil {
		return false
	}
	return *t.Suppress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_RouterAdvertisement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_RouterAdvertisement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv6_Unnumbered represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered struct {
	Enabled      *bool                                              `path:"state/enabled" module:"openconfig-if-ip"`
	InterfaceRef *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef `path:"interface-ref" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Unnumbered) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) GetOrCreateInterfaceRef() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Interface_RoutedVlan_Ipv6_Unnumbered. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) GetInterfaceRef() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_RoutedVlan_Ipv6_Unnumbered
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef struct {
	Interface    *string `path:"state/interface" module:"openconfig-if-ip"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interface is set, it can safely use t.GetInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interface == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Subinterface is set, it can safely use t.GetSubinterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Subinterface == nil'
// before retrieving the leaf's value.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_Subinterface struct {
	AdminStatus E_Interface_AdminStatus          `path:"state/admin-status" module:"openconfig-interfaces"`
	Counters    *Interface_Subinterface_Counters `path:"state/counters" module:"openconfig-interfaces"`
	Cpu         *bool                            `path:"state/cpu" module:"openconfig-interfaces"`
	Description *string                          `path:"state/description" module:"openconfig-interfaces"`
	Enabled     *bool                            `path:"state/enabled" module:"openconfig-interfaces"`
	Ifindex     *uint32                          `path:"state/ifindex" module:"openconfig-interfaces"`
	Index       *uint32                          `path:"state/index|index" module:"openconfig-interfaces"`
	Ipv4        *Interface_Subinterface_Ipv4     `path:"ipv4" module:"openconfig-if-ip"`
	Ipv6        *Interface_Subinterface_Ipv6     `path:"ipv6" module:"openconfig-if-ip"`
	LastChange  *uint64                          `path:"state/last-change" module:"openconfig-interfaces"`
	Logical     *bool                            `path:"state/logical" module:"openconfig-interfaces"`
	Management  *bool                            `path:"state/management" module:"openconfig-interfaces"`
	Name        *string                          `path:"state/name" module:"openconfig-interfaces"`
	OperStatus  E_Interface_OperStatus           `path:"state/oper-status" module:"openconfig-interfaces"`
	Vlan        *Interface_Subinterface_Vlan     `path:"vlan" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface) GetOrCreateCounters() *Interface_Subinterface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Subinterface_Counters{}
	return t.Counters
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface) GetOrCreateIpv4() *Interface_Subinterface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &Interface_Subinterface_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface) GetOrCreateIpv6() *Interface_Subinterface_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &Interface_Subinterface_Ipv6{}
	return t.Ipv6
}

// GetOrCreateVlan retrieves the value of the Vlan field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface) GetOrCreateVlan() *Interface_Subinterface_Vlan {
	if t.Vlan != nil {
		return t.Vlan
	}
	t.Vlan = &Interface_Subinterface_Vlan{}
	return t.Vlan
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_Subinterface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface) GetCounters() *Interface_Subinterface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from Interface_Subinterface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface) GetIpv4() *Interface_Subinterface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from Interface_Subinterface. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface) GetIpv6() *Interface_Subinterface_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetVlan returns the value of the Vlan struct pointer
// from Interface_Subinterface. If the receiver or the field Vlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface) GetVlan() *Interface_Subinterface_Vlan {
	if t != nil && t.Vlan != nil {
		return t.Vlan
	}
	return nil
}

// GetAdminStatus retrieves the value of the leaf AdminStatus from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminStatus is set, it can safely use t.GetAdminStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminStatus == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetAdminStatus() E_Interface_AdminStatus {
	if t == nil || t.AdminStatus == 0 {
		return 0
	}
	return t.AdminStatus
}

// GetCpu retrieves the value of the leaf Cpu from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Cpu is set, it can safely use t.GetCpu()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Cpu == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetCpu() bool {
	if t == nil || t.Cpu == nil {
		return false
	}
	return *t.Cpu
}

// GetDescription retrieves the value of the leaf Description from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetIfindex retrieves the value of the leaf Ifindex from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ifindex is set, it can safely use t.GetIfindex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ifindex == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetIfindex() uint32 {
	if t == nil || t.Ifindex == nil {
		return 0
	}
	return *t.Ifindex
}

// GetIndex retrieves the value of the leaf Index from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLastChange retrieves the value of the leaf LastChange from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastChange is set, it can safely use t.GetLastChange()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastChange == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetLastChange() uint64 {
	if t == nil || t.LastChange == nil {
		return 0
	}
	return *t.LastChange
}

// GetLogical retrieves the value of the leaf Logical from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Logical is set, it can safely use t.GetLogical()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Logical == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetLogical() bool {
	if t == nil || t.Logical == nil {
		return false
	}
	return *t.Logical
}

// GetManagement retrieves the value of the leaf Management from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Management is set, it can safely use t.GetManagement()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Management == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetManagement() bool {
	if t == nil || t.Management == nil {
		return false
	}
	return *t.Management
}

// GetName retrieves the value of the leaf Name from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperStatus retrieves the value of the leaf OperStatus from the Interface_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OperStatus is set, it can safely use t.GetOperStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OperStatus == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface) GetOperStatus() E_Interface_OperStatus {
	if t == nil || t.OperStatus == 0 {
		return 0
	}
	return t.OperStatus
}

// ΛListKeyMap returns the keys of the Interface_Subinterface struct, which is a YANG list entry.
func (t *Interface_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Subinterface_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_Counters struct {
	CarrierTransitions *uint64 `path:"carrier-transitions" module:"openconfig-interfaces"`
	InBroadcastPkts    *uint64 `path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	InDiscards         *uint64 `path:"in-discards" module:"openconfig-interfaces"`
	InErrors           *uint64 `path:"in-errors" module:"openconfig-interfaces"`
	InFcsErrors        *uint64 `path:"in-fcs-errors" module:"openconfig-interfaces"`
	InMulticastPkts    *uint64 `path:"in-multicast-pkts" module:"openconfig-interfaces"`
	InOctets           *uint64 `path:"in-octets" module:"openconfig-interfaces"`
	InPkts             *uint64 `path:"in-pkts" module:"openconfig-interfaces"`
	InUnicastPkts      *uint64 `path:"in-unicast-pkts" module:"openconfig-interfaces"`
	InUnknownProtos    *uint64 `path:"in-unknown-protos" module:"openconfig-interfaces"`
	LastClear          *uint64 `path:"last-clear" module:"openconfig-interfaces"`
	OutBroadcastPkts   *uint64 `path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	OutDiscards        *uint64 `path:"out-discards" module:"openconfig-interfaces"`
	OutErrors          *uint64 `path:"out-errors" module:"openconfig-interfaces"`
	OutMulticastPkts   *uint64 `path:"out-multicast-pkts" module:"openconfig-interfaces"`
	OutOctets          *uint64 `path:"out-octets" module:"openconfig-interfaces"`
	OutPkts            *uint64 `path:"out-pkts" module:"openconfig-interfaces"`
	OutUnicastPkts     *uint64 `path:"out-unicast-pkts" module:"openconfig-interfaces"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Counters) IsYANGGoStruct() {}

// GetCarrierTransitions retrieves the value of the leaf CarrierTransitions from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CarrierTransitions is set, it can safely use t.GetCarrierTransitions()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CarrierTransitions == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetCarrierTransitions() uint64 {
	if t == nil || t.CarrierTransitions == nil {
		return 0
	}
	return *t.CarrierTransitions
}

// GetInBroadcastPkts retrieves the value of the leaf InBroadcastPkts from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InBroadcastPkts is set, it can safely use t.GetInBroadcastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InBroadcastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInBroadcastPkts() uint64 {
	if t == nil || t.InBroadcastPkts == nil {
		return 0
	}
	return *t.InBroadcastPkts
}

// GetInDiscards retrieves the value of the leaf InDiscards from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InDiscards is set, it can safely use t.GetInDiscards()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InDiscards == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInDiscards() uint64 {
	if t == nil || t.InDiscards == nil {
		return 0
	}
	return *t.InDiscards
}

// GetInErrors retrieves the value of the leaf InErrors from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InErrors is set, it can safely use t.GetInErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InErrors == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInErrors() uint64 {
	if t == nil || t.InErrors == nil {
		return 0
	}
	return *t.InErrors
}

// GetInFcsErrors retrieves the value of the leaf InFcsErrors from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InFcsErrors is set, it can safely use t.GetInFcsErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InFcsErrors == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInFcsErrors() uint64 {
	if t == nil || t.InFcsErrors == nil {
		return 0
	}
	return *t.InFcsErrors
}

// GetInMulticastPkts retrieves the value of the leaf InMulticastPkts from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InMulticastPkts is set, it can safely use t.GetInMulticastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InMulticastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInMulticastPkts() uint64 {
	if t == nil || t.InMulticastPkts == nil {
		return 0
	}
	return *t.InMulticastPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOctets is set, it can safely use t.GetInOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPkts is set, it can safely use t.GetInPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetInUnicastPkts retrieves the value of the leaf InUnicastPkts from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InUnicastPkts is set, it can safely use t.GetInUnicastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InUnicastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInUnicastPkts() uint64 {
	if t == nil || t.InUnicastPkts == nil {
		return 0
	}
	return *t.InUnicastPkts
}

// GetInUnknownProtos retrieves the value of the leaf InUnknownProtos from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InUnknownProtos is set, it can safely use t.GetInUnknownProtos()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InUnknownProtos == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetInUnknownProtos() uint64 {
	if t == nil || t.InUnknownProtos == nil {
		return 0
	}
	return *t.InUnknownProtos
}

// GetLastClear retrieves the value of the leaf LastClear from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastClear is set, it can safely use t.GetLastClear()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastClear == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetLastClear() uint64 {
	if t == nil || t.LastClear == nil {
		return 0
	}
	return *t.LastClear
}

// GetOutBroadcastPkts retrieves the value of the leaf OutBroadcastPkts from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutBroadcastPkts is set, it can safely use t.GetOutBroadcastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutBroadcastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutBroadcastPkts() uint64 {
	if t == nil || t.OutBroadcastPkts == nil {
		return 0
	}
	return *t.OutBroadcastPkts
}

// GetOutDiscards retrieves the value of the leaf OutDiscards from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutDiscards is set, it can safely use t.GetOutDiscards()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutDiscards == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutDiscards() uint64 {
	if t == nil || t.OutDiscards == nil {
		return 0
	}
	return *t.OutDiscards
}

// GetOutErrors retrieves the value of the leaf OutErrors from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutErrors is set, it can safely use t.GetOutErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutErrors == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutErrors() uint64 {
	if t == nil || t.OutErrors == nil {
		return 0
	}
	return *t.OutErrors
}

// GetOutMulticastPkts retrieves the value of the leaf OutMulticastPkts from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutMulticastPkts is set, it can safely use t.GetOutMulticastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutMulticastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutMulticastPkts() uint64 {
	if t == nil || t.OutMulticastPkts == nil {
		return 0
	}
	return *t.OutMulticastPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutOctets is set, it can safely use t.GetOutOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutPkts is set, it can safely use t.GetOutPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// GetOutUnicastPkts retrieves the value of the leaf OutUnicastPkts from the Interface_Subinterface_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutUnicastPkts is set, it can safely use t.GetOutUnicastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutUnicastPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Counters) GetOutUnicastPkts() uint64 {
	if t == nil || t.OutUnicastPkts == nil {
		return 0
	}
	return *t.OutUnicastPkts
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv4 represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4 YANG schema element.
type Interface_Subinterface_Ipv4 struct {
	Address    map[string]*Interface_Subinterface_Ipv4_Address  `path:"addresses/address" module:"openconfig-if-ip"`
	Counters   *Interface_Subinterface_Ipv4_Counters            `path:"state/counters" module:"openconfig-if-ip"`
	DhcpClient *bool                                            `path:"state/dhcp-client" module:"openconfig-if-ip"`
	Enabled    *bool                                            `path:"state/enabled" module:"openconfig-if-ip"`
	Mtu        *uint16                                          `path:"state/mtu" module:"openconfig-if-ip"`
	Neighbor   map[string]*Interface_Subinterface_Ipv4_Neighbor `path:"neighbors/neighbor" module:"openconfig-if-ip"`
	ProxyArp   *Interface_Subinterface_Ipv4_ProxyArp            `path:"proxy-arp" module:"openconfig-if-ip"`
	Unnumbered *Interface_Subinterface_Ipv4_Unnumbered          `path:"unnumbered" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// Interface_Subinterface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv4) NewAddress(Ip string) (*Interface_Subinterface_Ipv4_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_Subinterface_Ipv4_Address)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &Interface_Subinterface_Ipv4_Address{
		Ip: &Ip,
	}

	return t.Address[key], nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv4) GetOrCreateAddress(Ip string) *Interface_Subinterface_Ipv4_Address {

	key := Ip

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of Interface_Subinterface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv4) GetAddress(Ip string) *Interface_Subinterface_Ipv4_Address {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver Interface_Subinterface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *Interface_Subinterface_Ipv4) DeleteAddress(Ip string) {
	key := Ip

	delete(t.Address, key)
}

// AppendAddress appends the supplied Interface_Subinterface_Ipv4_Address struct to the
// list Address of Interface_Subinterface_Ipv4. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv4_Address already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv4) AppendAddress(v *Interface_Subinterface_Ipv4_Address) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key received for Ip")
	}

	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_Subinterface_Ipv4_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// Interface_Subinterface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv4) NewNeighbor(Ip string) (*Interface_Subinterface_Ipv4_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_Subinterface_Ipv4_Neighbor)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Interface_Subinterface_Ipv4_Neighbor{
		Ip: &Ip,
	}

	return t.Neighbor[key], nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv4) GetOrCreateNeighbor(Ip string) *Interface_Subinterface_Ipv4_Neighbor {

	key := Ip

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Interface_Subinterface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv4) GetNeighbor(Ip string) *Interface_Subinterface_Ipv4_Neighbor {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver Interface_Subinterface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *Interface_Subinterface_Ipv4) DeleteNeighbor(Ip string) {
	key := Ip

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied Interface_Subinterface_Ipv4_Neighbor struct to the
// list Neighbor of Interface_Subinterface_Ipv4. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv4_Neighbor already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv4) AppendNeighbor(v *Interface_Subinterface_Ipv4_Neighbor) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key received for Ip")
	}

	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_Subinterface_Ipv4_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv4) GetOrCreateCounters() *Interface_Subinterface_Ipv4_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Subinterface_Ipv4_Counters{}
	return t.Counters
}

// GetOrCreateProxyArp retrieves the value of the ProxyArp field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv4) GetOrCreateProxyArp() *Interface_Subinterface_Ipv4_ProxyArp {
	if t.ProxyArp != nil {
		return t.ProxyArp
	}
	t.ProxyArp = &Interface_Subinterface_Ipv4_ProxyArp{}
	return t.ProxyArp
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv4) GetOrCreateUnnumbered() *Interface_Subinterface_Ipv4_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &Interface_Subinterface_Ipv4_Unnumbered{}
	return t.Unnumbered
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_Subinterface_Ipv4. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv4) GetCounters() *Interface_Subinterface_Ipv4_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetProxyArp returns the value of the ProxyArp struct pointer
// from Interface_Subinterface_Ipv4. If the receiver or the field ProxyArp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv4) GetProxyArp() *Interface_Subinterface_Ipv4_ProxyArp {
	if t != nil && t.ProxyArp != nil {
		return t.ProxyArp
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from Interface_Subinterface_Ipv4. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv4) GetUnnumbered() *Interface_Subinterface_Ipv4_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetDhcpClient retrieves the value of the leaf DhcpClient from the Interface_Subinterface_Ipv4
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DhcpClient is set, it can safely use t.GetDhcpClient()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DhcpClient == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4) GetDhcpClient() bool {
	if t == nil || t.DhcpClient == nil {
		return false
	}
	return *t.DhcpClient
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_Subinterface_Ipv4
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetMtu retrieves the value of the leaf Mtu from the Interface_Subinterface_Ipv4
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mtu is set, it can safely use t.GetMtu()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mtu == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4) GetMtu() uint16 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Subinterface_Ipv4_Address represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address YANG schema element.
type Interface_Subinterface_Ipv4_Address struct {
	Ip           *string                                                  `path:"state/ip|ip" module:"openconfig-if-ip"`
	Origin       E_IfIp_IpAddressOrigin                                   `path:"state/origin" module:"openconfig-if-ip"`
	PrefixLength *uint8                                                   `path:"state/prefix-length" module:"openconfig-if-ip"`
	VrrpGroup    map[uint8]*Interface_Subinterface_Ipv4_Address_VrrpGroup `path:"vrrp/vrrp-group" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Address) IsYANGGoStruct() {}

// NewVrrpGroup creates a new entry in the VrrpGroup list of the
// Interface_Subinterface_Ipv4_Address struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv4_Address) NewVrrpGroup(VirtualRouterId uint8) (*Interface_Subinterface_Ipv4_Address_VrrpGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_Subinterface_Ipv4_Address_VrrpGroup)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VrrpGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VrrpGroup", key)
	}

	t.VrrpGroup[key] = &Interface_Subinterface_Ipv4_Address_VrrpGroup{
		VirtualRouterId: &VirtualRouterId,
	}

	return t.VrrpGroup[key], nil
}

// GetOrCreateVrrpGroup retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv4_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv4_Address) GetOrCreateVrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv4_Address_VrrpGroup {

	key := VirtualRouterId

	if v, ok := t.VrrpGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrpGroup(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrpGroup got unexpected error: %v", err))
	}
	return v
}

// GetVrrpGroup retrieves the value with the specified key from
// the VrrpGroup map field of Interface_Subinterface_Ipv4_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv4_Address) GetVrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv4_Address_VrrpGroup {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.VrrpGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrpGroup deletes the value with the specified keys from
// the receiver Interface_Subinterface_Ipv4_Address. If there is no such element, the function
// is a no-op.
func (t *Interface_Subinterface_Ipv4_Address) DeleteVrrpGroup(VirtualRouterId uint8) {
	key := VirtualRouterId

	delete(t.VrrpGroup, key)
}

// AppendVrrpGroup appends the supplied Interface_Subinterface_Ipv4_Address_VrrpGroup struct to the
// list VrrpGroup of Interface_Subinterface_Ipv4_Address. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv4_Address_VrrpGroup already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv4_Address) AppendVrrpGroup(v *Interface_Subinterface_Ipv4_Address_VrrpGroup) error {
	if v.VirtualRouterId == nil {
		return fmt.Errorf("invalid nil key received for VirtualRouterId")
	}

	key := *v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_Subinterface_Ipv4_Address_VrrpGroup)
	}

	if _, ok := t.VrrpGroup[key]; ok {
		return fmt.Errorf("duplicate key for list VrrpGroup %v", key)
	}

	t.VrrpGroup[key] = v
	return nil
}

// GetIp retrieves the value of the leaf Ip from the Interface_Subinterface_Ipv4_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ip is set, it can safely use t.GetIp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ip == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_Subinterface_Ipv4_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address) GetOrigin() E_IfIp_IpAddressOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Interface_Subinterface_Ipv4_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PrefixLength is set, it can safely use t.GetPrefixLength()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PrefixLength == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address) GetPrefixLength() uint8 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv4_Address struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv4_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Address) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup struct {
	AcceptMode            *bool                                                            `path:"state/accept-mode" module:"openconfig-if-ip"`
	AdvertisementInterval *uint16                                                          `path:"state/advertisement-interval" module:"openconfig-if-ip"`
	CurrentPriority       *uint8                                                           `path:"state/current-priority" module:"openconfig-if-ip"`
	InterfaceTracking     *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking `path:"interface-tracking" module:"openconfig-if-ip"`
	Preempt               *bool                                                            `path:"state/preempt" module:"openconfig-if-ip"`
	PreemptDelay          *uint16                                                          `path:"state/preempt-delay" module:"openconfig-if-ip"`
	Priority              *uint8                                                           `path:"state/priority" module:"openconfig-if-ip"`
	VirtualAddress        []string                                                         `path:"state/virtual-address" module:"openconfig-if-ip"`
	VirtualRouterId       *uint8                                                           `path:"state/virtual-router-id|virtual-router-id" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Address_VrrpGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Address_VrrpGroup) IsYANGGoStruct() {}

// GetOrCreateInterfaceTracking retrieves the value of the InterfaceTracking field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetOrCreateInterfaceTracking() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking {
	if t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	t.InterfaceTracking = &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking{}
	return t.InterfaceTracking
}

// GetInterfaceTracking returns the value of the InterfaceTracking struct pointer
// from Interface_Subinterface_Ipv4_Address_VrrpGroup. If the receiver or the field InterfaceTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetInterfaceTracking() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking {
	if t != nil && t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	return nil
}

// GetAcceptMode retrieves the value of the leaf AcceptMode from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AcceptMode is set, it can safely use t.GetAcceptMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AcceptMode == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetAcceptMode() bool {
	if t == nil || t.AcceptMode == nil {
		return false
	}
	return *t.AcceptMode
}

// GetAdvertisementInterval retrieves the value of the leaf AdvertisementInterval from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdvertisementInterval is set, it can safely use t.GetAdvertisementInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdvertisementInterval == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetAdvertisementInterval() uint16 {
	if t == nil || t.AdvertisementInterval == nil {
		return 100
	}
	return *t.AdvertisementInterval
}

// GetCurrentPriority retrieves the value of the leaf CurrentPriority from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CurrentPriority is set, it can safely use t.GetCurrentPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CurrentPriority == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetCurrentPriority() uint8 {
	if t == nil || t.CurrentPriority == nil {
		return 0
	}
	return *t.CurrentPriority
}

// GetPreempt retrieves the value of the leaf Preempt from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Preempt is set, it can safely use t.GetPreempt()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Preempt == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPreemptDelay retrieves the value of the leaf PreemptDelay from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreemptDelay is set, it can safely use t.GetPreemptDelay()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreemptDelay == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetPreemptDelay() uint16 {
	if t == nil || t.PreemptDelay == nil {
		return 0
	}
	return *t.PreemptDelay
}

// GetPriority retrieves the value of the leaf Priority from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Priority is set, it can safely use t.GetPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Priority == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// GetVirtualAddress retrieves the value of the leaf VirtualAddress from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualAddress is set, it can safely use t.GetVirtualAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetVirtualAddress() []string {
	if t == nil || t.VirtualAddress == nil {
		return nil
	}
	return t.VirtualAddress
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the Interface_Subinterface_Ipv4_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualRouterId is set, it can safely use t.GetVirtualRouterId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualRouterId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) GetVirtualRouterId() uint8 {
	if t == nil || t.VirtualRouterId == nil {
		return 0
	}
	return *t.VirtualRouterId
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv4_Address_VrrpGroup struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VirtualRouterId == nil {
		return nil, fmt.Errorf("nil value for key VirtualRouterId")
	}

	return map[string]interface{}{
		"virtual-router-id": *t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Address_VrrpGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking struct {
	PriorityDecrement *uint8   `path:"state/priority-decrement" module:"openconfig-if-ip"`
	TrackInterface    []string `path:"state/track-interface" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) IsYANGGoStruct() {}

// GetPriorityDecrement retrieves the value of the leaf PriorityDecrement from the Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PriorityDecrement is set, it can safely use t.GetPriorityDecrement()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PriorityDecrement == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) GetPriorityDecrement() uint8 {
	if t == nil || t.PriorityDecrement == nil {
		return 0
	}
	return *t.PriorityDecrement
}

// GetTrackInterface retrieves the value of the leaf TrackInterface from the Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TrackInterface is set, it can safely use t.GetTrackInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TrackInterface == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) GetTrackInterface() []string {
	if t == nil || t.TrackInterface == nil {
		return nil
	}
	return t.TrackInterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv4_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters YANG schema element.
type Interface_Subinterface_Ipv4_Counters struct {
	InDiscardedPkts    *uint64 `path:"in-discarded-pkts" module:"openconfig-if-ip"`
	InErrorPkts        *uint64 `path:"in-error-pkts" module:"openconfig-if-ip"`
	InForwardedOctets  *uint64 `path:"in-forwarded-octets" module:"openconfig-if-ip"`
	InForwardedPkts    *uint64 `path:"in-forwarded-pkts" module:"openconfig-if-ip"`
	InOctets           *uint64 `path:"in-octets" module:"openconfig-if-ip"`
	InPkts             *uint64 `path:"in-pkts" module:"openconfig-if-ip"`
	OutDiscardedPkts   *uint64 `path:"out-discarded-pkts" module:"openconfig-if-ip"`
	OutErrorPkts       *uint64 `path:"out-error-pkts" module:"openconfig-if-ip"`
	OutForwardedOctets *uint64 `path:"out-forwarded-octets" module:"openconfig-if-ip"`
	OutForwardedPkts   *uint64 `path:"out-forwarded-pkts" module:"openconfig-if-ip"`
	OutOctets          *uint64 `path:"out-octets" module:"openconfig-if-ip"`
	OutPkts            *uint64 `path:"out-pkts" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Counters) IsYANGGoStruct() {}

// GetInDiscardedPkts retrieves the value of the leaf InDiscardedPkts from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InDiscardedPkts is set, it can safely use t.GetInDiscardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InDiscardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInDiscardedPkts() uint64 {
	if t == nil || t.InDiscardedPkts == nil {
		return 0
	}
	return *t.InDiscardedPkts
}

// GetInErrorPkts retrieves the value of the leaf InErrorPkts from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InErrorPkts is set, it can safely use t.GetInErrorPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InErrorPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInErrorPkts() uint64 {
	if t == nil || t.InErrorPkts == nil {
		return 0
	}
	return *t.InErrorPkts
}

// GetInForwardedOctets retrieves the value of the leaf InForwardedOctets from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InForwardedOctets is set, it can safely use t.GetInForwardedOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InForwardedOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInForwardedOctets() uint64 {
	if t == nil || t.InForwardedOctets == nil {
		return 0
	}
	return *t.InForwardedOctets
}

// GetInForwardedPkts retrieves the value of the leaf InForwardedPkts from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InForwardedPkts is set, it can safely use t.GetInForwardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InForwardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInForwardedPkts() uint64 {
	if t == nil || t.InForwardedPkts == nil {
		return 0
	}
	return *t.InForwardedPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOctets is set, it can safely use t.GetInOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPkts is set, it can safely use t.GetInPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutDiscardedPkts retrieves the value of the leaf OutDiscardedPkts from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutDiscardedPkts is set, it can safely use t.GetOutDiscardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutDiscardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutDiscardedPkts() uint64 {
	if t == nil || t.OutDiscardedPkts == nil {
		return 0
	}
	return *t.OutDiscardedPkts
}

// GetOutErrorPkts retrieves the value of the leaf OutErrorPkts from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutErrorPkts is set, it can safely use t.GetOutErrorPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutErrorPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutErrorPkts() uint64 {
	if t == nil || t.OutErrorPkts == nil {
		return 0
	}
	return *t.OutErrorPkts
}

// GetOutForwardedOctets retrieves the value of the leaf OutForwardedOctets from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutForwardedOctets is set, it can safely use t.GetOutForwardedOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutForwardedOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutForwardedOctets() uint64 {
	if t == nil || t.OutForwardedOctets == nil {
		return 0
	}
	return *t.OutForwardedOctets
}

// GetOutForwardedPkts retrieves the value of the leaf OutForwardedPkts from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutForwardedPkts is set, it can safely use t.GetOutForwardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutForwardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutForwardedPkts() uint64 {
	if t == nil || t.OutForwardedPkts == nil {
		return 0
	}
	return *t.OutForwardedPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutOctets is set, it can safely use t.GetOutOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_Subinterface_Ipv4_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutPkts is set, it can safely use t.GetOutPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv4_Neighbor represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor struct {
	Ip               *string               `path:"state/ip|ip" module:"openconfig-if-ip"`
	LinkLayerAddress *string               `path:"state/link-layer-address" module:"openconfig-if-ip"`
	Origin           E_IfIp_NeighborOrigin `path:"state/origin" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Neighbor) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the Interface_Subinterface_Ipv4_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ip is set, it can safely use t.GetIp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ip == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Neighbor) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_Subinterface_Ipv4_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LinkLayerAddress is set, it can safely use t.GetLinkLayerAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LinkLayerAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_Subinterface_Ipv4_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Neighbor) GetOrigin() E_IfIp_NeighborOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv4_Neighbor struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv4_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv4_ProxyArp represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArp struct {
	Mode E_ProxyArp_Mode `path:"state/mode" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_ProxyArp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_ProxyArp) IsYANGGoStruct() {}

// GetMode retrieves the value of the leaf Mode from the Interface_Subinterface_Ipv4_ProxyArp
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mode is set, it can safely use t.GetMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mode == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_ProxyArp) GetMode() E_ProxyArp_Mode {
	if t == nil || t.Mode == 0 {
		return ProxyArp_Mode_DISABLE
	}
	return t.Mode
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_ProxyArp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_ProxyArp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_ProxyArp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv4_Unnumbered represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered struct {
	Enabled      *bool                                                `path:"state/enabled" module:"openconfig-if-ip"`
	InterfaceRef *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef `path:"interface-ref" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Unnumbered) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv4_Unnumbered) GetOrCreateInterfaceRef() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Interface_Subinterface_Ipv4_Unnumbered. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv4_Unnumbered) GetInterfaceRef() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_Subinterface_Ipv4_Unnumbered
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Unnumbered) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Unnumbered) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef struct {
	Interface    *string `path:"state/interface" module:"openconfig-if-ip"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interface is set, it can safely use t.GetInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interface == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Subinterface is set, it can safely use t.GetSubinterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Subinterface == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv6 represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6 YANG schema element.
type Interface_Subinterface_Ipv6 struct {
	Address                map[string]*Interface_Subinterface_Ipv6_Address  `path:"addresses/address" module:"openconfig-if-ip"`
	Counters               *Interface_Subinterface_Ipv6_Counters            `path:"state/counters" module:"openconfig-if-ip"`
	DhcpClient             *bool                                            `path:"state/dhcp-client" module:"openconfig-if-ip"`
	DupAddrDetectTransmits *uint32                                          `path:"state/dup-addr-detect-transmits" module:"openconfig-if-ip"`
	Enabled                *bool                                            `path:"state/enabled" module:"openconfig-if-ip"`
	Mtu                    *uint32                                          `path:"state/mtu" module:"openconfig-if-ip"`
	Neighbor               map[string]*Interface_Subinterface_Ipv6_Neighbor `path:"neighbors/neighbor" module:"openconfig-if-ip"`
	RouterAdvertisement    *Interface_Subinterface_Ipv6_RouterAdvertisement `path:"router-advertisement" module:"openconfig-if-ip"`
	Unnumbered             *Interface_Subinterface_Ipv6_Unnumbered          `path:"unnumbered" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// Interface_Subinterface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv6) NewAddress(Ip string) (*Interface_Subinterface_Ipv6_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_Subinterface_Ipv6_Address)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &Interface_Subinterface_Ipv6_Address{
		Ip: &Ip,
	}

	return t.Address[key], nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv6) GetOrCreateAddress(Ip string) *Interface_Subinterface_Ipv6_Address {

	key := Ip

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of Interface_Subinterface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv6) GetAddress(Ip string) *Interface_Subinterface_Ipv6_Address {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver Interface_Subinterface_Ipv6. If there is no such element, the function
// is a no-op.
func (t *Interface_Subinterface_Ipv6) DeleteAddress(Ip string) {
	key := Ip

	delete(t.Address, key)
}

// AppendAddress appends the supplied Interface_Subinterface_Ipv6_Address struct to the
// list Address of Interface_Subinterface_Ipv6. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv6_Address already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv6) AppendAddress(v *Interface_Subinterface_Ipv6_Address) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key received for Ip")
	}

	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*Interface_Subinterface_Ipv6_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// Interface_Subinterface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv6) NewNeighbor(Ip string) (*Interface_Subinterface_Ipv6_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_Subinterface_Ipv6_Neighbor)
	}

	key := Ip

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Interface_Subinterface_Ipv6_Neighbor{
		Ip: &Ip,
	}

	return t.Neighbor[key], nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv6) GetOrCreateNeighbor(Ip string) *Interface_Subinterface_Ipv6_Neighbor {

	key := Ip

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Ip)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of Interface_Subinterface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv6) GetNeighbor(Ip string) *Interface_Subinterface_Ipv6_Neighbor {

	if t == nil {
		return nil
	}

	key := Ip

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver Interface_Subinterface_Ipv6. If there is no such element, the function
// is a no-op.
func (t *Interface_Subinterface_Ipv6) DeleteNeighbor(Ip string) {
	key := Ip

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied Interface_Subinterface_Ipv6_Neighbor struct to the
// list Neighbor of Interface_Subinterface_Ipv6. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv6_Neighbor already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv6) AppendNeighbor(v *Interface_Subinterface_Ipv6_Neighbor) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key received for Ip")
	}

	key := *v.Ip

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Interface_Subinterface_Ipv6_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv6) GetOrCreateCounters() *Interface_Subinterface_Ipv6_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Interface_Subinterface_Ipv6_Counters{}
	return t.Counters
}

// GetOrCreateRouterAdvertisement retrieves the value of the RouterAdvertisement field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv6) GetOrCreateRouterAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisement {
	if t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	t.RouterAdvertisement = &Interface_Subinterface_Ipv6_RouterAdvertisement{}
	return t.RouterAdvertisement
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv6) GetOrCreateUnnumbered() *Interface_Subinterface_Ipv6_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &Interface_Subinterface_Ipv6_Unnumbered{}
	return t.Unnumbered
}

// GetCounters returns the value of the Counters struct pointer
// from Interface_Subinterface_Ipv6. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv6) GetCounters() *Interface_Subinterface_Ipv6_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetRouterAdvertisement returns the value of the RouterAdvertisement struct pointer
// from Interface_Subinterface_Ipv6. If the receiver or the field RouterAdvertisement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv6) GetRouterAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisement {
	if t != nil && t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from Interface_Subinterface_Ipv6. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv6) GetUnnumbered() *Interface_Subinterface_Ipv6_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetDhcpClient retrieves the value of the leaf DhcpClient from the Interface_Subinterface_Ipv6
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DhcpClient is set, it can safely use t.GetDhcpClient()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DhcpClient == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6) GetDhcpClient() bool {
	if t == nil || t.DhcpClient == nil {
		return false
	}
	return *t.DhcpClient
}

// GetDupAddrDetectTransmits retrieves the value of the leaf DupAddrDetectTransmits from the Interface_Subinterface_Ipv6
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DupAddrDetectTransmits is set, it can safely use t.GetDupAddrDetectTransmits()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DupAddrDetectTransmits == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6) GetDupAddrDetectTransmits() uint32 {
	if t == nil || t.DupAddrDetectTransmits == nil {
		return 1
	}
	return *t.DupAddrDetectTransmits
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_Subinterface_Ipv6
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetMtu retrieves the value of the leaf Mtu from the Interface_Subinterface_Ipv6
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mtu is set, it can safely use t.GetMtu()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mtu == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Subinterface_Ipv6_Address represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address YANG schema element.
type Interface_Subinterface_Ipv6_Address struct {
	Ip           *string                                                  `path:"state/ip|ip" module:"openconfig-if-ip"`
	Origin       E_IfIp_IpAddressOrigin                                   `path:"state/origin" module:"openconfig-if-ip"`
	PrefixLength *uint8                                                   `path:"state/prefix-length" module:"openconfig-if-ip"`
	Status       E_Address_Status                                         `path:"state/status" module:"openconfig-if-ip"`
	VrrpGroup    map[uint8]*Interface_Subinterface_Ipv6_Address_VrrpGroup `path:"vrrp/vrrp-group" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Address) IsYANGGoStruct() {}

// NewVrrpGroup creates a new entry in the VrrpGroup list of the
// Interface_Subinterface_Ipv6_Address struct. The keys of the list are populated from the input
// arguments.
func (t *Interface_Subinterface_Ipv6_Address) NewVrrpGroup(VirtualRouterId uint8) (*Interface_Subinterface_Ipv6_Address_VrrpGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_Subinterface_Ipv6_Address_VrrpGroup)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VrrpGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VrrpGroup", key)
	}

	t.VrrpGroup[key] = &Interface_Subinterface_Ipv6_Address_VrrpGroup{
		VirtualRouterId: &VirtualRouterId,
	}

	return t.VrrpGroup[key], nil
}

// GetOrCreateVrrpGroup retrieves the value with the specified keys from
// the receiver Interface_Subinterface_Ipv6_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Interface_Subinterface_Ipv6_Address) GetOrCreateVrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv6_Address_VrrpGroup {

	key := VirtualRouterId

	if v, ok := t.VrrpGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrpGroup(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrpGroup got unexpected error: %v", err))
	}
	return v
}

// GetVrrpGroup retrieves the value with the specified key from
// the VrrpGroup map field of Interface_Subinterface_Ipv6_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Interface_Subinterface_Ipv6_Address) GetVrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv6_Address_VrrpGroup {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.VrrpGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrpGroup deletes the value with the specified keys from
// the receiver Interface_Subinterface_Ipv6_Address. If there is no such element, the function
// is a no-op.
func (t *Interface_Subinterface_Ipv6_Address) DeleteVrrpGroup(VirtualRouterId uint8) {
	key := VirtualRouterId

	delete(t.VrrpGroup, key)
}

// AppendVrrpGroup appends the supplied Interface_Subinterface_Ipv6_Address_VrrpGroup struct to the
// list VrrpGroup of Interface_Subinterface_Ipv6_Address. If the key value(s) specified in
// the supplied Interface_Subinterface_Ipv6_Address_VrrpGroup already exist in the list, an error is
// returned.
func (t *Interface_Subinterface_Ipv6_Address) AppendVrrpGroup(v *Interface_Subinterface_Ipv6_Address_VrrpGroup) error {
	if v.VirtualRouterId == nil {
		return fmt.Errorf("invalid nil key received for VirtualRouterId")
	}

	key := *v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VrrpGroup == nil {
		t.VrrpGroup = make(map[uint8]*Interface_Subinterface_Ipv6_Address_VrrpGroup)
	}

	if _, ok := t.VrrpGroup[key]; ok {
		return fmt.Errorf("duplicate key for list VrrpGroup %v", key)
	}

	t.VrrpGroup[key] = v
	return nil
}

// GetIp retrieves the value of the leaf Ip from the Interface_Subinterface_Ipv6_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ip is set, it can safely use t.GetIp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ip == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_Subinterface_Ipv6_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address) GetOrigin() E_IfIp_IpAddressOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the Interface_Subinterface_Ipv6_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PrefixLength is set, it can safely use t.GetPrefixLength()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PrefixLength == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address) GetPrefixLength() uint8 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetStatus retrieves the value of the leaf Status from the Interface_Subinterface_Ipv6_Address
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Status is set, it can safely use t.GetStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Status == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address) GetStatus() E_Address_Status {
	if t == nil || t.Status == 0 {
		return 0
	}
	return t.Status
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv6_Address struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv6_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Address) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup struct {
	AcceptMode            *bool                                                            `path:"state/accept-mode" module:"openconfig-if-ip"`
	AdvertisementInterval *uint16                                                          `path:"state/advertisement-interval" module:"openconfig-if-ip"`
	CurrentPriority       *uint8                                                           `path:"state/current-priority" module:"openconfig-if-ip"`
	InterfaceTracking     *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking `path:"interface-tracking" module:"openconfig-if-ip"`
	Preempt               *bool                                                            `path:"state/preempt" module:"openconfig-if-ip"`
	PreemptDelay          *uint16                                                          `path:"state/preempt-delay" module:"openconfig-if-ip"`
	Priority              *uint8                                                           `path:"state/priority" module:"openconfig-if-ip"`
	VirtualAddress        []string                                                         `path:"state/virtual-address" module:"openconfig-if-ip"`
	VirtualLinkLocal      *string                                                          `path:"state/virtual-link-local" module:"openconfig-if-ip"`
	VirtualRouterId       *uint8                                                           `path:"state/virtual-router-id|virtual-router-id" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Address_VrrpGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Address_VrrpGroup) IsYANGGoStruct() {}

// GetOrCreateInterfaceTracking retrieves the value of the InterfaceTracking field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetOrCreateInterfaceTracking() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking {
	if t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	t.InterfaceTracking = &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking{}
	return t.InterfaceTracking
}

// GetInterfaceTracking returns the value of the InterfaceTracking struct pointer
// from Interface_Subinterface_Ipv6_Address_VrrpGroup. If the receiver or the field InterfaceTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetInterfaceTracking() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking {
	if t != nil && t.InterfaceTracking != nil {
		return t.InterfaceTracking
	}
	return nil
}

// GetAcceptMode retrieves the value of the leaf AcceptMode from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AcceptMode is set, it can safely use t.GetAcceptMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AcceptMode == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetAcceptMode() bool {
	if t == nil || t.AcceptMode == nil {
		return false
	}
	return *t.AcceptMode
}

// GetAdvertisementInterval retrieves the value of the leaf AdvertisementInterval from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdvertisementInterval is set, it can safely use t.GetAdvertisementInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdvertisementInterval == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetAdvertisementInterval() uint16 {
	if t == nil || t.AdvertisementInterval == nil {
		return 100
	}
	return *t.AdvertisementInterval
}

// GetCurrentPriority retrieves the value of the leaf CurrentPriority from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CurrentPriority is set, it can safely use t.GetCurrentPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CurrentPriority == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetCurrentPriority() uint8 {
	if t == nil || t.CurrentPriority == nil {
		return 0
	}
	return *t.CurrentPriority
}

// GetPreempt retrieves the value of the leaf Preempt from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Preempt is set, it can safely use t.GetPreempt()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Preempt == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPreemptDelay retrieves the value of the leaf PreemptDelay from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PreemptDelay is set, it can safely use t.GetPreemptDelay()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PreemptDelay == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetPreemptDelay() uint16 {
	if t == nil || t.PreemptDelay == nil {
		return 0
	}
	return *t.PreemptDelay
}

// GetPriority retrieves the value of the leaf Priority from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Priority is set, it can safely use t.GetPriority()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Priority == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// GetVirtualAddress retrieves the value of the leaf VirtualAddress from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualAddress is set, it can safely use t.GetVirtualAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetVirtualAddress() []string {
	if t == nil || t.VirtualAddress == nil {
		return nil
	}
	return t.VirtualAddress
}

// GetVirtualLinkLocal retrieves the value of the leaf VirtualLinkLocal from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualLinkLocal is set, it can safely use t.GetVirtualLinkLocal()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualLinkLocal == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetVirtualLinkLocal() string {
	if t == nil || t.VirtualLinkLocal == nil {
		return ""
	}
	return *t.VirtualLinkLocal
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the Interface_Subinterface_Ipv6_Address_VrrpGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VirtualRouterId is set, it can safely use t.GetVirtualRouterId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VirtualRouterId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) GetVirtualRouterId() uint8 {
	if t == nil || t.VirtualRouterId == nil {
		return 0
	}
	return *t.VirtualRouterId
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv6_Address_VrrpGroup struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VirtualRouterId == nil {
		return nil, fmt.Errorf("nil value for key VirtualRouterId")
	}

	return map[string]interface{}{
		"virtual-router-id": *t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Address_VrrpGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking struct {
	PriorityDecrement *uint8   `path:"state/priority-decrement" module:"openconfig-if-ip"`
	TrackInterface    []string `path:"state/track-interface" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) IsYANGGoStruct() {}

// GetPriorityDecrement retrieves the value of the leaf PriorityDecrement from the Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PriorityDecrement is set, it can safely use t.GetPriorityDecrement()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PriorityDecrement == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) GetPriorityDecrement() uint8 {
	if t == nil || t.PriorityDecrement == nil {
		return 0
	}
	return *t.PriorityDecrement
}

// GetTrackInterface retrieves the value of the leaf TrackInterface from the Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TrackInterface is set, it can safely use t.GetTrackInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TrackInterface == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) GetTrackInterface() []string {
	if t == nil || t.TrackInterface == nil {
		return nil
	}
	return t.TrackInterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv6_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters YANG schema element.
type Interface_Subinterface_Ipv6_Counters struct {
	InDiscardedPkts    *uint64 `path:"in-discarded-pkts" module:"openconfig-if-ip"`
	InErrorPkts        *uint64 `path:"in-error-pkts" module:"openconfig-if-ip"`
	InForwardedOctets  *uint64 `path:"in-forwarded-octets" module:"openconfig-if-ip"`
	InForwardedPkts    *uint64 `path:"in-forwarded-pkts" module:"openconfig-if-ip"`
	InOctets           *uint64 `path:"in-octets" module:"openconfig-if-ip"`
	InPkts             *uint64 `path:"in-pkts" module:"openconfig-if-ip"`
	OutDiscardedPkts   *uint64 `path:"out-discarded-pkts" module:"openconfig-if-ip"`
	OutErrorPkts       *uint64 `path:"out-error-pkts" module:"openconfig-if-ip"`
	OutForwardedOctets *uint64 `path:"out-forwarded-octets" module:"openconfig-if-ip"`
	OutForwardedPkts   *uint64 `path:"out-forwarded-pkts" module:"openconfig-if-ip"`
	OutOctets          *uint64 `path:"out-octets" module:"openconfig-if-ip"`
	OutPkts            *uint64 `path:"out-pkts" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Counters) IsYANGGoStruct() {}

// GetInDiscardedPkts retrieves the value of the leaf InDiscardedPkts from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InDiscardedPkts is set, it can safely use t.GetInDiscardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InDiscardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInDiscardedPkts() uint64 {
	if t == nil || t.InDiscardedPkts == nil {
		return 0
	}
	return *t.InDiscardedPkts
}

// GetInErrorPkts retrieves the value of the leaf InErrorPkts from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InErrorPkts is set, it can safely use t.GetInErrorPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InErrorPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInErrorPkts() uint64 {
	if t == nil || t.InErrorPkts == nil {
		return 0
	}
	return *t.InErrorPkts
}

// GetInForwardedOctets retrieves the value of the leaf InForwardedOctets from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InForwardedOctets is set, it can safely use t.GetInForwardedOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InForwardedOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInForwardedOctets() uint64 {
	if t == nil || t.InForwardedOctets == nil {
		return 0
	}
	return *t.InForwardedOctets
}

// GetInForwardedPkts retrieves the value of the leaf InForwardedPkts from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InForwardedPkts is set, it can safely use t.GetInForwardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InForwardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInForwardedPkts() uint64 {
	if t == nil || t.InForwardedPkts == nil {
		return 0
	}
	return *t.InForwardedPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOctets is set, it can safely use t.GetInOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPkts is set, it can safely use t.GetInPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutDiscardedPkts retrieves the value of the leaf OutDiscardedPkts from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutDiscardedPkts is set, it can safely use t.GetOutDiscardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutDiscardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutDiscardedPkts() uint64 {
	if t == nil || t.OutDiscardedPkts == nil {
		return 0
	}
	return *t.OutDiscardedPkts
}

// GetOutErrorPkts retrieves the value of the leaf OutErrorPkts from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutErrorPkts is set, it can safely use t.GetOutErrorPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutErrorPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutErrorPkts() uint64 {
	if t == nil || t.OutErrorPkts == nil {
		return 0
	}
	return *t.OutErrorPkts
}

// GetOutForwardedOctets retrieves the value of the leaf OutForwardedOctets from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutForwardedOctets is set, it can safely use t.GetOutForwardedOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutForwardedOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutForwardedOctets() uint64 {
	if t == nil || t.OutForwardedOctets == nil {
		return 0
	}
	return *t.OutForwardedOctets
}

// GetOutForwardedPkts retrieves the value of the leaf OutForwardedPkts from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutForwardedPkts is set, it can safely use t.GetOutForwardedPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutForwardedPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutForwardedPkts() uint64 {
	if t == nil || t.OutForwardedPkts == nil {
		return 0
	}
	return *t.OutForwardedPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutOctets is set, it can safely use t.GetOutOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutOctets == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the Interface_Subinterface_Ipv6_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutPkts is set, it can safely use t.GetOutPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutPkts == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv6_Neighbor represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor struct {
	Ip               *string                  `path:"state/ip|ip" module:"openconfig-if-ip"`
	IsRouter         *bool                    `path:"state/is-router" module:"openconfig-if-ip"`
	LinkLayerAddress *string                  `path:"state/link-layer-address" module:"openconfig-if-ip"`
	NeighborState    E_Neighbor_NeighborState `path:"state/neighbor-state" module:"openconfig-if-ip"`
	Origin           E_IfIp_NeighborOrigin    `path:"state/origin" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Neighbor) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the Interface_Subinterface_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ip is set, it can safely use t.GetIp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ip == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Neighbor) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIsRouter retrieves the value of the leaf IsRouter from the Interface_Subinterface_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if IsRouter is set, it can safely use t.GetIsRouter()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.IsRouter == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Neighbor) GetIsRouter() bool {
	if t == nil || t.IsRouter == nil {
		return false
	}
	return *t.IsRouter
}

// GetLinkLayerAddress retrieves the value of the leaf LinkLayerAddress from the Interface_Subinterface_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LinkLayerAddress is set, it can safely use t.GetLinkLayerAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LinkLayerAddress == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Neighbor) GetLinkLayerAddress() string {
	if t == nil || t.LinkLayerAddress == nil {
		return ""
	}
	return *t.LinkLayerAddress
}

// GetNeighborState retrieves the value of the leaf NeighborState from the Interface_Subinterface_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NeighborState is set, it can safely use t.GetNeighborState()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NeighborState == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Neighbor) GetNeighborState() E_Neighbor_NeighborState {
	if t == nil || t.NeighborState == 0 {
		return 0
	}
	return t.NeighborState
}

// GetOrigin retrieves the value of the leaf Origin from the Interface_Subinterface_Ipv6_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Origin is set, it can safely use t.GetOrigin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Origin == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Neighbor) GetOrigin() E_IfIp_NeighborOrigin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// ΛListKeyMap returns the keys of the Interface_Subinterface_Ipv6_Neighbor struct, which is a YANG list entry.
func (t *Interface_Subinterface_Ipv6_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	return map[string]interface{}{
		"ip": *t.Ip,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv6_RouterAdvertisement represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement struct {
	Interval *uint32 `path:"state/interval" module:"openconfig-if-ip"`
	Lifetime *uint32 `path:"state/lifetime" module:"openconfig-if-ip"`
	Suppress *bool   `path:"state/suppress" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_RouterAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_RouterAdvertisement) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetLifetime retrieves the value of the leaf Lifetime from the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Lifetime is set, it can safely use t.GetLifetime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Lifetime == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) GetLifetime() uint32 {
	if t == nil || t.Lifetime == nil {
		return 0
	}
	return *t.Lifetime
}

// GetSuppress retrieves the value of the leaf Suppress from the Interface_Subinterface_Ipv6_RouterAdvertisement
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Suppress is set, it can safely use t.GetSuppress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Suppress == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) GetSuppress() bool {
	if t == nil || t.Suppress == nil {
		return false
	}
	return *t.Suppress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_RouterAdvertisement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_RouterAdvertisement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv6_Unnumbered represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered struct {
	Enabled      *bool                                                `path:"state/enabled" module:"openconfig-if-ip"`
	InterfaceRef *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef `path:"interface-ref" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Unnumbered) IsYANGGoStruct() {}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Ipv6_Unnumbered) GetOrCreateInterfaceRef() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef{}
	return t.InterfaceRef
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Interface_Subinterface_Ipv6_Unnumbered. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Ipv6_Unnumbered) GetInterfaceRef() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the Interface_Subinterface_Ipv6_Unnumbered
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Unnumbered) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Unnumbered) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef struct {
	Interface    *string `path:"state/interface" module:"openconfig-if-ip"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-if-ip"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interface is set, it can safely use t.GetInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interface == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Subinterface is set, it can safely use t.GetSubinterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Subinterface == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan YANG schema element.
type Interface_Subinterface_Vlan struct {
	EgressMapping  *Interface_Subinterface_Vlan_EgressMapping  `path:"egress-mapping" module:"openconfig-vlan"`
	IngressMapping *Interface_Subinterface_Vlan_IngressMapping `path:"ingress-mapping" module:"openconfig-vlan"`
	Match          *Interface_Subinterface_Vlan_Match          `path:"match" module:"openconfig-vlan"`
	VlanId         Interface_Subinterface_Vlan_VlanId_Union    `path:"state/vlan-id" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan) IsYANGGoStruct() {}

// GetOrCreateEgressMapping retrieves the value of the EgressMapping field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan) GetOrCreateEgressMapping() *Interface_Subinterface_Vlan_EgressMapping {
	if t.EgressMapping != nil {
		return t.EgressMapping
	}
	t.EgressMapping = &Interface_Subinterface_Vlan_EgressMapping{}
	return t.EgressMapping
}

// GetOrCreateIngressMapping retrieves the value of the IngressMapping field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan) GetOrCreateIngressMapping() *Interface_Subinterface_Vlan_IngressMapping {
	if t.IngressMapping != nil {
		return t.IngressMapping
	}
	t.IngressMapping = &Interface_Subinterface_Vlan_IngressMapping{}
	return t.IngressMapping
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan) GetOrCreateMatch() *Interface_Subinterface_Vlan_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &Interface_Subinterface_Vlan_Match{}
	return t.Match
}

// GetEgressMapping returns the value of the EgressMapping struct pointer
// from Interface_Subinterface_Vlan. If the receiver or the field EgressMapping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan) GetEgressMapping() *Interface_Subinterface_Vlan_EgressMapping {
	if t != nil && t.EgressMapping != nil {
		return t.EgressMapping
	}
	return nil
}

// GetIngressMapping returns the value of the IngressMapping struct pointer
// from Interface_Subinterface_Vlan. If the receiver or the field IngressMapping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan) GetIngressMapping() *Interface_Subinterface_Vlan_IngressMapping {
	if t != nil && t.IngressMapping != nil {
		return t.IngressMapping
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from Interface_Subinterface_Vlan. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan) GetMatch() *Interface_Subinterface_Vlan_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetVlanId retrieves the value of the leaf VlanId from the Interface_Subinterface_Vlan
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VlanId is set, it can safely use t.GetVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan) GetVlanId() Interface_Subinterface_Vlan_VlanId_Union {
	if t == nil || t.VlanId == nil {
		return nil
	}
	return t.VlanId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Interface_Subinterface_Vlan_VlanId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/state/vlan-id within the YANG schema.
type Interface_Subinterface_Vlan_VlanId_Union interface {
	Is_Interface_Subinterface_Vlan_VlanId_Union()
}

// Interface_Subinterface_Vlan_VlanId_Union_String is used when /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/state/vlan-id
// is to be set to a string value.
type Interface_Subinterface_Vlan_VlanId_Union_String struct {
	String string
}

// Is_Interface_Subinterface_Vlan_VlanId_Union ensures that Interface_Subinterface_Vlan_VlanId_Union_String
// implements the Interface_Subinterface_Vlan_VlanId_Union interface.
func (*Interface_Subinterface_Vlan_VlanId_Union_String) Is_Interface_Subinterface_Vlan_VlanId_Union() {
}

// Interface_Subinterface_Vlan_VlanId_Union_Uint16 is used when /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/state/vlan-id
// is to be set to a uint16 value.
type Interface_Subinterface_Vlan_VlanId_Union_Uint16 struct {
	Uint16 uint16
}

// Is_Interface_Subinterface_Vlan_VlanId_Union ensures that Interface_Subinterface_Vlan_VlanId_Union_Uint16
// implements the Interface_Subinterface_Vlan_VlanId_Union interface.
func (*Interface_Subinterface_Vlan_VlanId_Union_Uint16) Is_Interface_Subinterface_Vlan_VlanId_Union() {
}

// To_Interface_Subinterface_Vlan_VlanId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Interface_Subinterface_Vlan_VlanId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Interface_Subinterface_Vlan) To_Interface_Subinterface_Vlan_VlanId_Union(i interface{}) (Interface_Subinterface_Vlan_VlanId_Union, error) {
	switch v := i.(type) {
	case string:
		return &Interface_Subinterface_Vlan_VlanId_Union_String{v}, nil
	case uint16:
		return &Interface_Subinterface_Vlan_VlanId_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Interface_Subinterface_Vlan_VlanId_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
	}
}

// Interface_Subinterface_Vlan_EgressMapping represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping struct {
	Tpid            E_VlanTypes_TPID_TYPES      `path:"state/tpid" module:"openconfig-vlan"`
	VlanId          *uint16                     `path:"state/vlan-id" module:"openconfig-vlan"`
	VlanStackAction E_VlanTypes_VlanStackAction `path:"state/vlan-stack-action" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_EgressMapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_EgressMapping) IsYANGGoStruct() {}

// GetTpid retrieves the value of the leaf Tpid from the Interface_Subinterface_Vlan_EgressMapping
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Tpid is set, it can safely use t.GetTpid()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Tpid == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_EgressMapping) GetTpid() E_VlanTypes_TPID_TYPES {
	if t == nil || t.Tpid == 0 {
		return 0
	}
	return t.Tpid
}

// GetVlanId retrieves the value of the leaf VlanId from the Interface_Subinterface_Vlan_EgressMapping
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VlanId is set, it can safely use t.GetVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_EgressMapping) GetVlanId() uint16 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// GetVlanStackAction retrieves the value of the leaf VlanStackAction from the Interface_Subinterface_Vlan_EgressMapping
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VlanStackAction is set, it can safely use t.GetVlanStackAction()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VlanStackAction == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_EgressMapping) GetVlanStackAction() E_VlanTypes_VlanStackAction {
	if t == nil || t.VlanStackAction == 0 {
		return 0
	}
	return t.VlanStackAction
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_EgressMapping) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_EgressMapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_EgressMapping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_IngressMapping represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping struct {
	Tpid            E_VlanTypes_TPID_TYPES      `path:"state/tpid" module:"openconfig-vlan"`
	VlanId          *uint16                     `path:"state/vlan-id" module:"openconfig-vlan"`
	VlanStackAction E_VlanTypes_VlanStackAction `path:"state/vlan-stack-action" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_IngressMapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_IngressMapping) IsYANGGoStruct() {}

// GetTpid retrieves the value of the leaf Tpid from the Interface_Subinterface_Vlan_IngressMapping
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Tpid is set, it can safely use t.GetTpid()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Tpid == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_IngressMapping) GetTpid() E_VlanTypes_TPID_TYPES {
	if t == nil || t.Tpid == 0 {
		return 0
	}
	return t.Tpid
}

// GetVlanId retrieves the value of the leaf VlanId from the Interface_Subinterface_Vlan_IngressMapping
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VlanId is set, it can safely use t.GetVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_IngressMapping) GetVlanId() uint16 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// GetVlanStackAction retrieves the value of the leaf VlanStackAction from the Interface_Subinterface_Vlan_IngressMapping
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VlanStackAction is set, it can safely use t.GetVlanStackAction()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VlanStackAction == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_IngressMapping) GetVlanStackAction() E_VlanTypes_VlanStackAction {
	if t == nil || t.VlanStackAction == 0 {
		return 0
	}
	return t.VlanStackAction
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_IngressMapping) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_IngressMapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_IngressMapping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match YANG schema element.
type Interface_Subinterface_Vlan_Match struct {
	DoubleTagged                *Interface_Subinterface_Vlan_Match_DoubleTagged                `path:"double-tagged" module:"openconfig-vlan"`
	DoubleTaggedInnerList       *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList       `path:"double-tagged-inner-list" module:"openconfig-vlan"`
	DoubleTaggedInnerOuterRange *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange `path:"double-tagged-inner-outer-range" module:"openconfig-vlan"`
	DoubleTaggedInnerRange      *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange      `path:"double-tagged-inner-range" module:"openconfig-vlan"`
	DoubleTaggedOuterList       *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList       `path:"double-tagged-outer-list" module:"openconfig-vlan"`
	DoubleTaggedOuterRange      *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange      `path:"double-tagged-outer-range" module:"openconfig-vlan"`
	SingleTagged                *Interface_Subinterface_Vlan_Match_SingleTagged                `path:"single-tagged" module:"openconfig-vlan"`
	SingleTaggedList            *Interface_Subinterface_Vlan_Match_SingleTaggedList            `path:"single-tagged-list" module:"openconfig-vlan"`
	SingleTaggedRange           *Interface_Subinterface_Vlan_Match_SingleTaggedRange           `path:"single-tagged-range" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match) IsYANGGoStruct() {}

// GetOrCreateDoubleTagged retrieves the value of the DoubleTagged field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTagged() *Interface_Subinterface_Vlan_Match_DoubleTagged {
	if t.DoubleTagged != nil {
		return t.DoubleTagged
	}
	t.DoubleTagged = &Interface_Subinterface_Vlan_Match_DoubleTagged{}
	return t.DoubleTagged
}

// GetOrCreateDoubleTaggedInnerList retrieves the value of the DoubleTaggedInnerList field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedInnerList() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList {
	if t.DoubleTaggedInnerList != nil {
		return t.DoubleTaggedInnerList
	}
	t.DoubleTaggedInnerList = &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList{}
	return t.DoubleTaggedInnerList
}

// GetOrCreateDoubleTaggedInnerOuterRange retrieves the value of the DoubleTaggedInnerOuterRange field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedInnerOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange {
	if t.DoubleTaggedInnerOuterRange != nil {
		return t.DoubleTaggedInnerOuterRange
	}
	t.DoubleTaggedInnerOuterRange = &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange{}
	return t.DoubleTaggedInnerOuterRange
}

// GetOrCreateDoubleTaggedInnerRange retrieves the value of the DoubleTaggedInnerRange field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedInnerRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange {
	if t.DoubleTaggedInnerRange != nil {
		return t.DoubleTaggedInnerRange
	}
	t.DoubleTaggedInnerRange = &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange{}
	return t.DoubleTaggedInnerRange
}

// GetOrCreateDoubleTaggedOuterList retrieves the value of the DoubleTaggedOuterList field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedOuterList() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList {
	if t.DoubleTaggedOuterList != nil {
		return t.DoubleTaggedOuterList
	}
	t.DoubleTaggedOuterList = &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList{}
	return t.DoubleTaggedOuterList
}

// GetOrCreateDoubleTaggedOuterRange retrieves the value of the DoubleTaggedOuterRange field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateDoubleTaggedOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange {
	if t.DoubleTaggedOuterRange != nil {
		return t.DoubleTaggedOuterRange
	}
	t.DoubleTaggedOuterRange = &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange{}
	return t.DoubleTaggedOuterRange
}

// GetOrCreateSingleTagged retrieves the value of the SingleTagged field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateSingleTagged() *Interface_Subinterface_Vlan_Match_SingleTagged {
	if t.SingleTagged != nil {
		return t.SingleTagged
	}
	t.SingleTagged = &Interface_Subinterface_Vlan_Match_SingleTagged{}
	return t.SingleTagged
}

// GetOrCreateSingleTaggedList retrieves the value of the SingleTaggedList field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateSingleTaggedList() *Interface_Subinterface_Vlan_Match_SingleTaggedList {
	if t.SingleTaggedList != nil {
		return t.SingleTaggedList
	}
	t.SingleTaggedList = &Interface_Subinterface_Vlan_Match_SingleTaggedList{}
	return t.SingleTaggedList
}

// GetOrCreateSingleTaggedRange retrieves the value of the SingleTaggedRange field
// or returns the existing field if it already exists.
func (t *Interface_Subinterface_Vlan_Match) GetOrCreateSingleTaggedRange() *Interface_Subinterface_Vlan_Match_SingleTaggedRange {
	if t.SingleTaggedRange != nil {
		return t.SingleTaggedRange
	}
	t.SingleTaggedRange = &Interface_Subinterface_Vlan_Match_SingleTaggedRange{}
	return t.SingleTaggedRange
}

// GetDoubleTagged returns the value of the DoubleTagged struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTagged is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTagged() *Interface_Subinterface_Vlan_Match_DoubleTagged {
	if t != nil && t.DoubleTagged != nil {
		return t.DoubleTagged
	}
	return nil
}

// GetDoubleTaggedInnerList returns the value of the DoubleTaggedInnerList struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedInnerList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTaggedInnerList() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList {
	if t != nil && t.DoubleTaggedInnerList != nil {
		return t.DoubleTaggedInnerList
	}
	return nil
}

// GetDoubleTaggedInnerOuterRange returns the value of the DoubleTaggedInnerOuterRange struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedInnerOuterRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTaggedInnerOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange {
	if t != nil && t.DoubleTaggedInnerOuterRange != nil {
		return t.DoubleTaggedInnerOuterRange
	}
	return nil
}

// GetDoubleTaggedInnerRange returns the value of the DoubleTaggedInnerRange struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedInnerRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTaggedInnerRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange {
	if t != nil && t.DoubleTaggedInnerRange != nil {
		return t.DoubleTaggedInnerRange
	}
	return nil
}

// GetDoubleTaggedOuterList returns the value of the DoubleTaggedOuterList struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedOuterList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTaggedOuterList() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList {
	if t != nil && t.DoubleTaggedOuterList != nil {
		return t.DoubleTaggedOuterList
	}
	return nil
}

// GetDoubleTaggedOuterRange returns the value of the DoubleTaggedOuterRange struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field DoubleTaggedOuterRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetDoubleTaggedOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange {
	if t != nil && t.DoubleTaggedOuterRange != nil {
		return t.DoubleTaggedOuterRange
	}
	return nil
}

// GetSingleTagged returns the value of the SingleTagged struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field SingleTagged is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetSingleTagged() *Interface_Subinterface_Vlan_Match_SingleTagged {
	if t != nil && t.SingleTagged != nil {
		return t.SingleTagged
	}
	return nil
}

// GetSingleTaggedList returns the value of the SingleTaggedList struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field SingleTaggedList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetSingleTaggedList() *Interface_Subinterface_Vlan_Match_SingleTaggedList {
	if t != nil && t.SingleTaggedList != nil {
		return t.SingleTaggedList
	}
	return nil
}

// GetSingleTaggedRange returns the value of the SingleTaggedRange struct pointer
// from Interface_Subinterface_Vlan_Match. If the receiver or the field SingleTaggedRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Interface_Subinterface_Vlan_Match) GetSingleTaggedRange() *Interface_Subinterface_Vlan_Match_SingleTaggedRange {
	if t != nil && t.SingleTaggedRange != nil {
		return t.SingleTaggedRange
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_DoubleTagged represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged struct {
	InnerVlanId *uint16 `path:"state/inner-vlan-id" module:"openconfig-vlan"`
	OuterVlanId *uint16 `path:"state/outer-vlan-id" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTagged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTagged) IsYANGGoStruct() {}

// GetInnerVlanId retrieves the value of the leaf InnerVlanId from the Interface_Subinterface_Vlan_Match_DoubleTagged
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InnerVlanId is set, it can safely use t.GetInnerVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InnerVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTagged) GetInnerVlanId() uint16 {
	if t == nil || t.InnerVlanId == nil {
		return 0
	}
	return *t.InnerVlanId
}

// GetOuterVlanId retrieves the value of the leaf OuterVlanId from the Interface_Subinterface_Vlan_Match_DoubleTagged
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuterVlanId is set, it can safely use t.GetOuterVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuterVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTagged) GetOuterVlanId() uint16 {
	if t == nil || t.OuterVlanId == nil {
		return 0
	}
	return *t.OuterVlanId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTagged) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTagged"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTagged) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList struct {
	InnerVlanIds []uint16 `path:"state/inner-vlan-ids" module:"openconfig-vlan"`
	OuterVlanId  *uint16  `path:"state/outer-vlan-id" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) IsYANGGoStruct() {}

// GetInnerVlanIds retrieves the value of the leaf InnerVlanIds from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InnerVlanIds is set, it can safely use t.GetInnerVlanIds()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InnerVlanIds == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) GetInnerVlanIds() []uint16 {
	if t == nil || t.InnerVlanIds == nil {
		return nil
	}
	return t.InnerVlanIds
}

// GetOuterVlanId retrieves the value of the leaf OuterVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuterVlanId is set, it can safely use t.GetOuterVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuterVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) GetOuterVlanId() uint16 {
	if t == nil || t.OuterVlanId == nil {
		return 0
	}
	return *t.OuterVlanId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange struct {
	InnerHighVlanId *uint16 `path:"state/inner-high-vlan-id" module:"openconfig-vlan"`
	InnerLowVlanId  *uint16 `path:"state/inner-low-vlan-id" module:"openconfig-vlan"`
	OuterHighVlanId *uint16 `path:"state/outer-high-vlan-id" module:"openconfig-vlan"`
	OuterLowVlanId  *uint16 `path:"state/outer-low-vlan-id" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) IsYANGGoStruct() {}

// GetInnerHighVlanId retrieves the value of the leaf InnerHighVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InnerHighVlanId is set, it can safely use t.GetInnerHighVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InnerHighVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetInnerHighVlanId() uint16 {
	if t == nil || t.InnerHighVlanId == nil {
		return 0
	}
	return *t.InnerHighVlanId
}

// GetInnerLowVlanId retrieves the value of the leaf InnerLowVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InnerLowVlanId is set, it can safely use t.GetInnerLowVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InnerLowVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetInnerLowVlanId() uint16 {
	if t == nil || t.InnerLowVlanId == nil {
		return 0
	}
	return *t.InnerLowVlanId
}

// GetOuterHighVlanId retrieves the value of the leaf OuterHighVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuterHighVlanId is set, it can safely use t.GetOuterHighVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuterHighVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetOuterHighVlanId() uint16 {
	if t == nil || t.OuterHighVlanId == nil {
		return 0
	}
	return *t.OuterHighVlanId
}

// GetOuterLowVlanId retrieves the value of the leaf OuterLowVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuterLowVlanId is set, it can safely use t.GetOuterLowVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuterLowVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) GetOuterLowVlanId() uint16 {
	if t == nil || t.OuterLowVlanId == nil {
		return 0
	}
	return *t.OuterLowVlanId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange struct {
	InnerHighVlanId *uint16  `path:"state/inner-high-vlan-id" module:"openconfig-vlan"`
	InnerLowVlanId  *uint16  `path:"state/inner-low-vlan-id" module:"openconfig-vlan"`
	OuterVlanId     []uint16 `path:"state/outer-vlan-id" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) IsYANGGoStruct() {}

// GetInnerHighVlanId retrieves the value of the leaf InnerHighVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InnerHighVlanId is set, it can safely use t.GetInnerHighVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InnerHighVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) GetInnerHighVlanId() uint16 {
	if t == nil || t.InnerHighVlanId == nil {
		return 0
	}
	return *t.InnerHighVlanId
}

// GetInnerLowVlanId retrieves the value of the leaf InnerLowVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InnerLowVlanId is set, it can safely use t.GetInnerLowVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InnerLowVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) GetInnerLowVlanId() uint16 {
	if t == nil || t.InnerLowVlanId == nil {
		return 0
	}
	return *t.InnerLowVlanId
}

// GetOuterVlanId retrieves the value of the leaf OuterVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuterVlanId is set, it can safely use t.GetOuterVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuterVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) GetOuterVlanId() []uint16 {
	if t == nil || t.OuterVlanId == nil {
		return nil
	}
	return t.OuterVlanId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList struct {
	InnerVlanId  *uint16  `path:"state/inner-vlan-id" module:"openconfig-vlan"`
	OuterVlanIds []uint16 `path:"state/outer-vlan-ids" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) IsYANGGoStruct() {}

// GetInnerVlanId retrieves the value of the leaf InnerVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InnerVlanId is set, it can safely use t.GetInnerVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InnerVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) GetInnerVlanId() uint16 {
	if t == nil || t.InnerVlanId == nil {
		return 0
	}
	return *t.InnerVlanId
}

// GetOuterVlanIds retrieves the value of the leaf OuterVlanIds from the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuterVlanIds is set, it can safely use t.GetOuterVlanIds()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuterVlanIds == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) GetOuterVlanIds() []uint16 {
	if t == nil || t.OuterVlanIds == nil {
		return nil
	}
	return t.OuterVlanIds
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange struct {
	InnerVlanId     *uint16 `path:"state/inner-vlan-id" module:"openconfig-vlan"`
	OuterHighVlanId *uint16 `path:"state/outer-high-vlan-id" module:"openconfig-vlan"`
	OuterLowVlanId  *uint16 `path:"state/outer-low-vlan-id" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) IsYANGGoStruct() {}

// GetInnerVlanId retrieves the value of the leaf InnerVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InnerVlanId is set, it can safely use t.GetInnerVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InnerVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) GetInnerVlanId() uint16 {
	if t == nil || t.InnerVlanId == nil {
		return 0
	}
	return *t.InnerVlanId
}

// GetOuterHighVlanId retrieves the value of the leaf OuterHighVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuterHighVlanId is set, it can safely use t.GetOuterHighVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuterHighVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) GetOuterHighVlanId() uint16 {
	if t == nil || t.OuterHighVlanId == nil {
		return 0
	}
	return *t.OuterHighVlanId
}

// GetOuterLowVlanId retrieves the value of the leaf OuterLowVlanId from the Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuterLowVlanId is set, it can safely use t.GetOuterLowVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuterLowVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) GetOuterLowVlanId() uint16 {
	if t == nil || t.OuterLowVlanId == nil {
		return 0
	}
	return *t.OuterLowVlanId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_SingleTagged represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTagged struct {
	VlanId *uint16 `path:"state/vlan-id" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_SingleTagged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_SingleTagged) IsYANGGoStruct() {}

// GetVlanId retrieves the value of the leaf VlanId from the Interface_Subinterface_Vlan_Match_SingleTagged
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VlanId is set, it can safely use t.GetVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_SingleTagged) GetVlanId() uint16 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_SingleTagged) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_SingleTagged"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_SingleTagged) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_SingleTaggedList represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedList struct {
	VlanIds []uint16 `path:"state/vlan-ids" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_SingleTaggedList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_SingleTaggedList) IsYANGGoStruct() {}

// GetVlanIds retrieves the value of the leaf VlanIds from the Interface_Subinterface_Vlan_Match_SingleTaggedList
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VlanIds is set, it can safely use t.GetVlanIds()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VlanIds == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedList) GetVlanIds() []uint16 {
	if t == nil || t.VlanIds == nil {
		return nil
	}
	return t.VlanIds
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedList) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_SingleTaggedList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange struct {
	HighVlanId *uint16 `path:"state/high-vlan-id" module:"openconfig-vlan"`
	LowVlanId  *uint16 `path:"state/low-vlan-id" module:"openconfig-vlan"`
}

// IsYANGGoStruct ensures that Interface_Subinterface_Vlan_Match_SingleTaggedRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface_Subinterface_Vlan_Match_SingleTaggedRange) IsYANGGoStruct() {}

// GetHighVlanId retrieves the value of the leaf HighVlanId from the Interface_Subinterface_Vlan_Match_SingleTaggedRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HighVlanId is set, it can safely use t.GetHighVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HighVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedRange) GetHighVlanId() uint16 {
	if t == nil || t.HighVlanId == nil {
		return 0
	}
	return *t.HighVlanId
}

// GetLowVlanId retrieves the value of the leaf LowVlanId from the Interface_Subinterface_Vlan_Match_SingleTaggedRange
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LowVlanId is set, it can safely use t.GetLowVlanId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LowVlanId == nil'
// before retrieving the leaf's value.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedRange) GetLowVlanId() uint16 {
	if t == nil || t.LowVlanId == nil {
		return 0
	}
	return *t.LowVlanId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedRange) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Interface_Subinterface_Vlan_Match_SingleTaggedRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Interface_Subinterface_Vlan_Match_SingleTaggedRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// LocalRoutes represents the /openconfig-local-routing/local-routes YANG schema element.
type LocalRoutes struct {
	Aggregate map[string]*LocalRoutes_Aggregate `path:"local-aggregates/aggregate" module:"openconfig-local-routing"`
	Static    map[string]*LocalRoutes_Static    `path:"static-routes/static" module:"openconfig-local-routing"`
}

// IsYANGGoStruct ensures that LocalRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LocalRoutes) IsYANGGoStruct() {}

// NewAggregate creates a new entry in the Aggregate list of the
// LocalRoutes struct. The keys of the list are populated from the input
// arguments.
func (t *LocalRoutes) NewAggregate(Prefix string) (*LocalRoutes_Aggregate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aggregate == nil {
		t.Aggregate = make(map[string]*LocalRoutes_Aggregate)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Aggregate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Aggregate", key)
	}

	t.Aggregate[key] = &LocalRoutes_Aggregate{
		Prefix: &Prefix,
	}

	return t.Aggregate[key], nil
}

// GetOrCreateAggregate retrieves the value with the specified keys from
// the receiver LocalRoutes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *LocalRoutes) GetOrCreateAggregate(Prefix string) *LocalRoutes_Aggregate {

	key := Prefix

	if v, ok := t.Aggregate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAggregate(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAggregate got unexpected error: %v", err))
	}
	return v
}

// GetAggregate retrieves the value with the specified key from
// the Aggregate map field of LocalRoutes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *LocalRoutes) GetAggregate(Prefix string) *LocalRoutes_Aggregate {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Aggregate[key]; ok {
		return lm
	}
	return nil
}

// DeleteAggregate deletes the value with the specified keys from
// the receiver LocalRoutes. If there is no such element, the function
// is a no-op.
func (t *LocalRoutes) DeleteAggregate(Prefix string) {
	key := Prefix

	delete(t.Aggregate, key)
}

// AppendAggregate appends the supplied LocalRoutes_Aggregate struct to the
// list Aggregate of LocalRoutes. If the key value(s) specified in
// the supplied LocalRoutes_Aggregate already exist in the list, an error is
// returned.
func (t *LocalRoutes) AppendAggregate(v *LocalRoutes_Aggregate) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aggregate == nil {
		t.Aggregate = make(map[string]*LocalRoutes_Aggregate)
	}

	if _, ok := t.Aggregate[key]; ok {
		return fmt.Errorf("duplicate key for list Aggregate %v", key)
	}

	t.Aggregate[key] = v
	return nil
}

// NewStatic creates a new entry in the Static list of the
// LocalRoutes struct. The keys of the list are populated from the input
// arguments.
func (t *LocalRoutes) NewStatic(Prefix string) (*LocalRoutes_Static, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Static == nil {
		t.Static = make(map[string]*LocalRoutes_Static)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Static[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Static", key)
	}

	t.Static[key] = &LocalRoutes_Static{
		Prefix: &Prefix,
	}

	return t.Static[key], nil
}

// GetOrCreateStatic retrieves the value with the specified keys from
// the receiver LocalRoutes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *LocalRoutes) GetOrCreateStatic(Prefix string) *LocalRoutes_Static {

	key := Prefix

	if v, ok := t.Static[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStatic(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStatic got unexpected error: %v", err))
	}
	return v
}

// GetStatic retrieves the value with the specified key from
// the Static map field of LocalRoutes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *LocalRoutes) GetStatic(Prefix string) *LocalRoutes_Static {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Static[key]; ok {
		return lm
	}
	return nil
}

// DeleteStatic deletes the value with the specified keys from
// the receiver LocalRoutes. If there is no such element, the function
// is a no-op.
func (t *LocalRoutes) DeleteStatic(Prefix string) {
	key := Prefix

	delete(t.Static, key)
}

// AppendStatic appends the supplied LocalRoutes_Static struct to the
// list Static of LocalRoutes. If the key value(s) specified in
// the supplied LocalRoutes_Static already exist in the list, an error is
// returned.
func (t *LocalRoutes) AppendStatic(v *LocalRoutes_Static) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Static == nil {
		t.Static = make(map[string]*LocalRoutes_Static)
	}

	if _, ok := t.Static[key]; ok {
		return fmt.Errorf("duplicate key for list Static %v", key)
	}

	t.Static[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LocalRoutes) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LocalRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LocalRoutes) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// LocalRoutes_Aggregate represents the /openconfig-local-routing/local-routes/local-aggregates/aggregate YANG schema element.
type LocalRoutes_Aggregate struct {
	Description *string                            `path:"state/description" module:"openconfig-local-routing"`
	Discard     *bool                              `path:"state/discard" module:"openconfig-local-routing"`
	Prefix      *string                            `path:"state/prefix|prefix" module:"openconfig-local-routing"`
	SetTag      LocalRoutes_Aggregate_SetTag_Union `path:"state/set-tag" module:"openconfig-local-routing"`
}

// IsYANGGoStruct ensures that LocalRoutes_Aggregate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LocalRoutes_Aggregate) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the LocalRoutes_Aggregate
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *LocalRoutes_Aggregate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDiscard retrieves the value of the leaf Discard from the LocalRoutes_Aggregate
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Discard is set, it can safely use t.GetDiscard()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Discard == nil'
// before retrieving the leaf's value.
func (t *LocalRoutes_Aggregate) GetDiscard() bool {
	if t == nil || t.Discard == nil {
		return false
	}
	return *t.Discard
}

// GetPrefix retrieves the value of the leaf Prefix from the LocalRoutes_Aggregate
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefix is set, it can safely use t.GetPrefix()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefix == nil'
// before retrieving the leaf's value.
func (t *LocalRoutes_Aggregate) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetSetTag retrieves the value of the leaf SetTag from the LocalRoutes_Aggregate
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SetTag is set, it can safely use t.GetSetTag()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SetTag == nil'
// before retrieving the leaf's value.
func (t *LocalRoutes_Aggregate) GetSetTag() LocalRoutes_Aggregate_SetTag_Union {
	if t == nil || t.SetTag == nil {
		return nil
	}
	return t.SetTag
}

// ΛListKeyMap returns the keys of the LocalRoutes_Aggregate struct, which is a YANG list entry.
func (t *LocalRoutes_Aggregate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LocalRoutes_Aggregate) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LocalRoutes_Aggregate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LocalRoutes_Aggregate) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// LocalRoutes_Aggregate_SetTag_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-local-routing/local-routes/local-aggregates/aggregate/state/set-tag within the YANG schema.
type LocalRoutes_Aggregate_SetTag_Union interface {
	Is_LocalRoutes_Aggregate_SetTag_Union()
}

// LocalRoutes_Aggregate_SetTag_Union_String is used when /openconfig-local-routing/local-routes/local-aggregates/aggregate/state/set-tag
// is to be set to a string value.
type LocalRoutes_Aggregate_SetTag_Union_String struct {
	String string
}

// Is_LocalRoutes_Aggregate_SetTag_Union ensures that LocalRoutes_Aggregate_SetTag_Union_String
// implements the LocalRoutes_Aggregate_SetTag_Union interface.
func (*LocalRoutes_Aggregate_SetTag_Union_String) Is_LocalRoutes_Aggregate_SetTag_Union() {}

// LocalRoutes_Aggregate_SetTag_Union_Uint32 is used when /openconfig-local-routing/local-routes/local-aggregates/aggregate/state/set-tag
// is to be set to a uint32 value.
type LocalRoutes_Aggregate_SetTag_Union_Uint32 struct {
	Uint32 uint32
}

// Is_LocalRoutes_Aggregate_SetTag_Union ensures that LocalRoutes_Aggregate_SetTag_Union_Uint32
// implements the LocalRoutes_Aggregate_SetTag_Union interface.
func (*LocalRoutes_Aggregate_SetTag_Union_Uint32) Is_LocalRoutes_Aggregate_SetTag_Union() {}

// To_LocalRoutes_Aggregate_SetTag_Union takes an input interface{} and attempts to convert it to a struct
// which implements the LocalRoutes_Aggregate_SetTag_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *LocalRoutes_Aggregate) To_LocalRoutes_Aggregate_SetTag_Union(i interface{}) (LocalRoutes_Aggregate_SetTag_Union, error) {
	switch v := i.(type) {
	case string:
		return &LocalRoutes_Aggregate_SetTag_Union_String{v}, nil
	case uint32:
		return &LocalRoutes_Aggregate_SetTag_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to LocalRoutes_Aggregate_SetTag_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}

// LocalRoutes_Static represents the /openconfig-local-routing/local-routes/static-routes/static YANG schema element.
type LocalRoutes_Static struct {
	Description *string                                `path:"state/description" module:"openconfig-local-routing"`
	NextHop     map[string]*LocalRoutes_Static_NextHop `path:"next-hops/next-hop" module:"openconfig-local-routing"`
	Prefix      *string                                `path:"state/prefix|prefix" module:"openconfig-local-routing"`
	SetTag      LocalRoutes_Static_SetTag_Union        `path:"state/set-tag" module:"openconfig-local-routing"`
}

// IsYANGGoStruct ensures that LocalRoutes_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LocalRoutes_Static) IsYANGGoStruct() {}

// NewNextHop creates a new entry in the NextHop list of the
// LocalRoutes_Static struct. The keys of the list are populated from the input
// arguments.
func (t *LocalRoutes_Static) NewNextHop(Index string) (*LocalRoutes_Static_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*LocalRoutes_Static_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &LocalRoutes_Static_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver LocalRoutes_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *LocalRoutes_Static) GetOrCreateNextHop(Index string) *LocalRoutes_Static_NextHop {

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of LocalRoutes_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *LocalRoutes_Static) GetNextHop(Index string) *LocalRoutes_Static_NextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver LocalRoutes_Static. If there is no such element, the function
// is a no-op.
func (t *LocalRoutes_Static) DeleteNextHop(Index string) {
	key := Index

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied LocalRoutes_Static_NextHop struct to the
// list NextHop of LocalRoutes_Static. If the key value(s) specified in
// the supplied LocalRoutes_Static_NextHop already exist in the list, an error is
// returned.
func (t *LocalRoutes_Static) AppendNextHop(v *LocalRoutes_Static_NextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*LocalRoutes_Static_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the LocalRoutes_Static
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *LocalRoutes_Static) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPrefix retrieves the value of the leaf Prefix from the LocalRoutes_Static
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefix is set, it can safely use t.GetPrefix()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefix == nil'
// before retrieving the leaf's value.
func (t *LocalRoutes_Static) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetSetTag retrieves the value of the leaf SetTag from the LocalRoutes_Static
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SetTag is set, it can safely use t.GetSetTag()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SetTag == nil'
// before retrieving the leaf's value.
func (t *LocalRoutes_Static) GetSetTag() LocalRoutes_Static_SetTag_Union {
	if t == nil || t.SetTag == nil {
		return nil
	}
	return t.SetTag
}

// ΛListKeyMap returns the keys of the LocalRoutes_Static struct, which is a YANG list entry.
func (t *LocalRoutes_Static) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LocalRoutes_Static) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LocalRoutes_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LocalRoutes_Static) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// LocalRoutes_Static_SetTag_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-local-routing/local-routes/static-routes/static/state/set-tag within the YANG schema.
type LocalRoutes_Static_SetTag_Union interface {
	Is_LocalRoutes_Static_SetTag_Union()
}

// LocalRoutes_Static_SetTag_Union_String is used when /openconfig-local-routing/local-routes/static-routes/static/state/set-tag
// is to be set to a string value.
type LocalRoutes_Static_SetTag_Union_String struct {
	String string
}

// Is_LocalRoutes_Static_SetTag_Union ensures that LocalRoutes_Static_SetTag_Union_String
// implements the LocalRoutes_Static_SetTag_Union interface.
func (*LocalRoutes_Static_SetTag_Union_String) Is_LocalRoutes_Static_SetTag_Union() {}

// LocalRoutes_Static_SetTag_Union_Uint32 is used when /openconfig-local-routing/local-routes/static-routes/static/state/set-tag
// is to be set to a uint32 value.
type LocalRoutes_Static_SetTag_Union_Uint32 struct {
	Uint32 uint32
}

// Is_LocalRoutes_Static_SetTag_Union ensures that LocalRoutes_Static_SetTag_Union_Uint32
// implements the LocalRoutes_Static_SetTag_Union interface.
func (*LocalRoutes_Static_SetTag_Union_Uint32) Is_LocalRoutes_Static_SetTag_Union() {}

// To_LocalRoutes_Static_SetTag_Union takes an input interface{} and attempts to convert it to a struct
// which implements the LocalRoutes_Static_SetTag_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *LocalRoutes_Static) To_LocalRoutes_Static_SetTag_Union(i interface{}) (LocalRoutes_Static_SetTag_Union, error) {
	switch v := i.(type) {
	case string:
		return &LocalRoutes_Static_SetTag_Union_String{v}, nil
	case uint32:
		return &LocalRoutes_Static_SetTag_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to LocalRoutes_Static_SetTag_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}

// LocalRoutes_Static_NextHop represents the /openconfig-local-routing/local-routes/static-routes/static/next-hops/next-hop YANG schema element.
type LocalRoutes_Static_NextHop struct {
	EnableBfd    *LocalRoutes_Static_NextHop_EnableBfd    `path:"enable-bfd" module:"openconfig-local-routing"`
	Index        *string                                  `path:"state/index|index" module:"openconfig-local-routing"`
	InterfaceRef *LocalRoutes_Static_NextHop_InterfaceRef `path:"interface-ref" module:"openconfig-local-routing"`
	Metric       *uint32                                  `path:"state/metric" module:"openconfig-local-routing"`
	NextHop      LocalRoutes_Static_NextHop_NextHop_Union `path:"state/next-hop" module:"openconfig-local-routing"`
	Recurse      *bool                                    `path:"state/recurse" module:"openconfig-local-routing"`
}

// IsYANGGoStruct ensures that LocalRoutes_Static_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LocalRoutes_Static_NextHop) IsYANGGoStruct() {}

// GetOrCreateEnableBfd retrieves the value of the EnableBfd field
// or returns the existing field if it already exists.
func (t *LocalRoutes_Static_NextHop) GetOrCreateEnableBfd() *LocalRoutes_Static_NextHop_EnableBfd {
	if t.EnableBfd != nil {
		return t.EnableBfd
	}
	t.EnableBfd = &LocalRoutes_Static_NextHop_EnableBfd{}
	return t.EnableBfd
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *LocalRoutes_Static_NextHop) GetOrCreateInterfaceRef() *LocalRoutes_Static_NextHop_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &LocalRoutes_Static_NextHop_InterfaceRef{}
	return t.InterfaceRef
}

// GetEnableBfd returns the value of the EnableBfd struct pointer
// from LocalRoutes_Static_NextHop. If the receiver or the field EnableBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *LocalRoutes_Static_NextHop) GetEnableBfd() *LocalRoutes_Static_NextHop_EnableBfd {
	if t != nil && t.EnableBfd != nil {
		return t.EnableBfd
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from LocalRoutes_Static_NextHop. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *LocalRoutes_Static_NextHop) GetInterfaceRef() *LocalRoutes_Static_NextHop_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the LocalRoutes_Static_NextHop
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *LocalRoutes_Static_NextHop) GetIndex() string {
	if t == nil || t.Index == nil {
		return ""
	}
	return *t.Index
}

// GetMetric retrieves the value of the leaf Metric from the LocalRoutes_Static_NextHop
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Metric is set, it can safely use t.GetMetric()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Metric == nil'
// before retrieving the leaf's value.
func (t *LocalRoutes_Static_NextHop) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetNextHop retrieves the value of the leaf NextHop from the LocalRoutes_Static_NextHop
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NextHop is set, it can safely use t.GetNextHop()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NextHop == nil'
// before retrieving the leaf's value.
func (t *LocalRoutes_Static_NextHop) GetNextHop() LocalRoutes_Static_NextHop_NextHop_Union {
	if t == nil || t.NextHop == nil {
		return nil
	}
	return t.NextHop
}

// GetRecurse retrieves the value of the leaf Recurse from the LocalRoutes_Static_NextHop
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Recurse is set, it can safely use t.GetRecurse()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Recurse == nil'
// before retrieving the leaf's value.
func (t *LocalRoutes_Static_NextHop) GetRecurse() bool {
	if t == nil || t.Recurse == nil {
		return false
	}
	return *t.Recurse
}

// ΛListKeyMap returns the keys of the LocalRoutes_Static_NextHop struct, which is a YANG list entry.
func (t *LocalRoutes_Static_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LocalRoutes_Static_NextHop) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LocalRoutes_Static_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LocalRoutes_Static_NextHop) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// LocalRoutes_Static_NextHop_NextHop_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-local-routing/local-routes/static-routes/static/next-hops/next-hop/state/next-hop within the YANG schema.
type LocalRoutes_Static_NextHop_NextHop_Union interface {
	Is_LocalRoutes_Static_NextHop_NextHop_Union()
}

// LocalRoutes_Static_NextHop_NextHop_Union_E_LocalRouting_LOCAL_DEFINED_NEXT_HOP is used when /openconfig-local-routing/local-routes/static-routes/static/next-hops/next-hop/state/next-hop
// is to be set to a E_LocalRouting_LOCAL_DEFINED_NEXT_HOP value.
type LocalRoutes_Static_NextHop_NextHop_Union_E_LocalRouting_LOCAL_DEFINED_NEXT_HOP struct {
	E_LocalRouting_LOCAL_DEFINED_NEXT_HOP E_LocalRouting_LOCAL_DEFINED_NEXT_HOP
}

// Is_LocalRoutes_Static_NextHop_NextHop_Union ensures that LocalRoutes_Static_NextHop_NextHop_Union_E_LocalRouting_LOCAL_DEFINED_NEXT_HOP
// implements the LocalRoutes_Static_NextHop_NextHop_Union interface.
func (*LocalRoutes_Static_NextHop_NextHop_Union_E_LocalRouting_LOCAL_DEFINED_NEXT_HOP) Is_LocalRoutes_Static_NextHop_NextHop_Union() {
}

// LocalRoutes_Static_NextHop_NextHop_Union_String is used when /openconfig-local-routing/local-routes/static-routes/static/next-hops/next-hop/state/next-hop
// is to be set to a string value.
type LocalRoutes_Static_NextHop_NextHop_Union_String struct {
	String string
}

// Is_LocalRoutes_Static_NextHop_NextHop_Union ensures that LocalRoutes_Static_NextHop_NextHop_Union_String
// implements the LocalRoutes_Static_NextHop_NextHop_Union interface.
func (*LocalRoutes_Static_NextHop_NextHop_Union_String) Is_LocalRoutes_Static_NextHop_NextHop_Union() {
}

// To_LocalRoutes_Static_NextHop_NextHop_Union takes an input interface{} and attempts to convert it to a struct
// which implements the LocalRoutes_Static_NextHop_NextHop_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *LocalRoutes_Static_NextHop) To_LocalRoutes_Static_NextHop_NextHop_Union(i interface{}) (LocalRoutes_Static_NextHop_NextHop_Union, error) {
	switch v := i.(type) {
	case E_LocalRouting_LOCAL_DEFINED_NEXT_HOP:
		return &LocalRoutes_Static_NextHop_NextHop_Union_E_LocalRouting_LOCAL_DEFINED_NEXT_HOP{v}, nil
	case string:
		return &LocalRoutes_Static_NextHop_NextHop_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to LocalRoutes_Static_NextHop_NextHop_Union, unknown union type, got: %T, want any of [E_LocalRouting_LOCAL_DEFINED_NEXT_HOP, string]", i, i)
	}
}

// LocalRoutes_Static_NextHop_EnableBfd represents the /openconfig-local-routing/local-routes/static-routes/static/next-hops/next-hop/enable-bfd YANG schema element.
type LocalRoutes_Static_NextHop_EnableBfd struct {
	Enabled *bool `path:"state/enabled" module:"openconfig-local-routing"`
}

// IsYANGGoStruct ensures that LocalRoutes_Static_NextHop_EnableBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LocalRoutes_Static_NextHop_EnableBfd) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the LocalRoutes_Static_NextHop_EnableBfd
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *LocalRoutes_Static_NextHop_EnableBfd) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LocalRoutes_Static_NextHop_EnableBfd) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LocalRoutes_Static_NextHop_EnableBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LocalRoutes_Static_NextHop_EnableBfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// LocalRoutes_Static_NextHop_InterfaceRef represents the /openconfig-local-routing/local-routes/static-routes/static/next-hops/next-hop/interface-ref YANG schema element.
type LocalRoutes_Static_NextHop_InterfaceRef struct {
	Interface    *string `path:"state/interface" module:"openconfig-local-routing"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-local-routing"`
}

// IsYANGGoStruct ensures that LocalRoutes_Static_NextHop_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*LocalRoutes_Static_NextHop_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the LocalRoutes_Static_NextHop_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interface is set, it can safely use t.GetInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interface == nil'
// before retrieving the leaf's value.
func (t *LocalRoutes_Static_NextHop_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the LocalRoutes_Static_NextHop_InterfaceRef
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Subinterface is set, it can safely use t.GetSubinterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Subinterface == nil'
// before retrieving the leaf's value.
func (t *LocalRoutes_Static_NextHop_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *LocalRoutes_Static_NextHop_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["LocalRoutes_Static_NextHop_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *LocalRoutes_Static_NextHop_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance represents the /openconfig-network-instance/network-instances/network-instance YANG schema element.
type NetworkInstance struct {
	Description            *string                                      `path:"state/description" module:"openconfig-network-instance"`
	Enabled                *bool                                        `path:"state/enabled" module:"openconfig-network-instance"`
	EnabledAddressFamilies []E_Types_ADDRESS_FAMILY                     `path:"state/enabled-address-families" module:"openconfig-network-instance"`
	Interface              map[string]*NetworkInstance_Interface        `path:"interfaces/interface" module:"openconfig-network-instance"`
	Mtu                    *uint16                                      `path:"state/mtu" module:"openconfig-network-instance"`
	Name                   *string                                      `path:"state/name|name" module:"openconfig-network-instance"`
	RouteDistinguisher     *string                                      `path:"state/route-distinguisher" module:"openconfig-network-instance"`
	RouterId               *string                                      `path:"state/router-id" module:"openconfig-network-instance"`
	Type                   E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE `path:"state/type" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NetworkInstance struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance) NewInterface(Id string) (*NetworkInstance_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Interface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NetworkInstance_Interface{
		Id: &Id,
	}

	return t.Interface[key], nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NetworkInstance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance) GetOrCreateInterface(Id string) *NetworkInstance_Interface {

	key := Id

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NetworkInstance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance) GetInterface(Id string) *NetworkInstance_Interface {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NetworkInstance. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance) DeleteInterface(Id string) {
	key := Id

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NetworkInstance_Interface struct to the
// list Interface of NetworkInstance. If the key value(s) specified in
// the supplied NetworkInstance_Interface already exist in the list, an error is
// returned.
func (t *NetworkInstance) AppendInterface(v *NetworkInstance_Interface) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NetworkInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *NetworkInstance) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *NetworkInstance) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetEnabledAddressFamilies retrieves the value of the leaf EnabledAddressFamilies from the NetworkInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EnabledAddressFamilies is set, it can safely use t.GetEnabledAddressFamilies()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EnabledAddressFamilies == nil'
// before retrieving the leaf's value.
func (t *NetworkInstance) GetEnabledAddressFamilies() []E_Types_ADDRESS_FAMILY {
	if t == nil || t.EnabledAddressFamilies == nil {
		return nil
	}
	return t.EnabledAddressFamilies
}

// GetMtu retrieves the value of the leaf Mtu from the NetworkInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mtu is set, it can safely use t.GetMtu()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mtu == nil'
// before retrieving the leaf's value.
func (t *NetworkInstance) GetMtu() uint16 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetName retrieves the value of the leaf Name from the NetworkInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *NetworkInstance) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouteDistinguisher retrieves the value of the leaf RouteDistinguisher from the NetworkInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RouteDistinguisher is set, it can safely use t.GetRouteDistinguisher()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RouteDistinguisher == nil'
// before retrieving the leaf's value.
func (t *NetworkInstance) GetRouteDistinguisher() string {
	if t == nil || t.RouteDistinguisher == nil {
		return ""
	}
	return *t.RouteDistinguisher
}

// GetRouterId retrieves the value of the leaf RouterId from the NetworkInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RouterId is set, it can safely use t.GetRouterId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RouterId == nil'
// before retrieving the leaf's value.
func (t *NetworkInstance) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetType retrieves the value of the leaf Type from the NetworkInstance
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *NetworkInstance) GetType() E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// ΛListKeyMap returns the keys of the NetworkInstance struct, which is a YANG list entry.
func (t *NetworkInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// NetworkInstance_Interface represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface YANG schema element.
type NetworkInstance_Interface struct {
	AssociatedAddressFamilies []E_Types_ADDRESS_FAMILY `path:"state/associated-address-families" module:"openconfig-network-instance"`
	Id                        *string                  `path:"state/id|id" module:"openconfig-network-instance"`
	Interface                 *string                  `path:"state/interface" module:"openconfig-network-instance"`
	Subinterface              *uint32                  `path:"state/subinterface" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Interface) IsYANGGoStruct() {}

// GetAssociatedAddressFamilies retrieves the value of the leaf AssociatedAddressFamilies from the NetworkInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AssociatedAddressFamilies is set, it can safely use t.GetAssociatedAddressFamilies()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AssociatedAddressFamilies == nil'
// before retrieving the leaf's value.
func (t *NetworkInstance_Interface) GetAssociatedAddressFamilies() []E_Types_ADDRESS_FAMILY {
	if t == nil || t.AssociatedAddressFamilies == nil {
		return nil
	}
	return t.AssociatedAddressFamilies
}

// GetId retrieves the value of the leaf Id from the NetworkInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Id is set, it can safely use t.GetId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Id == nil'
// before retrieving the leaf's value.
func (t *NetworkInstance_Interface) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetInterface retrieves the value of the leaf Interface from the NetworkInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interface is set, it can safely use t.GetInterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interface == nil'
// before retrieving the leaf's value.
func (t *NetworkInstance_Interface) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the NetworkInstance_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Subinterface is set, it can safely use t.GetSubinterface()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Subinterface == nil'
// before retrieving the leaf's value.
func (t *NetworkInstance_Interface) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// ΛListKeyMap returns the keys of the NetworkInstance_Interface struct, which is a YANG list entry.
func (t *NetworkInstance_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// E_Address_Status is a derived int64 type which is used to represent
// the enumerated node Address_Status. An additional value named
// Address_Status_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Address_Status int64

// IsYANGGoEnum ensures that Address_Status implements the yang.GoEnum
// interface. This ensures that Address_Status can be identified as a
// mapped type for a YANG enumeration.
func (E_Address_Status) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Address_Status.
func (E_Address_Status) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_Address_Status.
func (e E_Address_Status) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Address_Status")
}

const (
	// Address_Status_UNSET corresponds to the value UNSET of Address_Status
	Address_Status_UNSET E_Address_Status = 0
	// Address_Status_PREFERRED corresponds to the value PREFERRED of Address_Status
	Address_Status_PREFERRED E_Address_Status = 1
	// Address_Status_DEPRECATED corresponds to the value DEPRECATED of Address_Status
	Address_Status_DEPRECATED E_Address_Status = 2
	// Address_Status_INVALID corresponds to the value INVALID of Address_Status
	Address_Status_INVALID E_Address_Status = 3
	// Address_Status_INACCESSIBLE corresponds to the value INACCESSIBLE of Address_Status
	Address_Status_INACCESSIBLE E_Address_Status = 4
	// Address_Status_UNKNOWN corresponds to the value UNKNOWN of Address_Status
	Address_Status_UNKNOWN E_Address_Status = 5
	// Address_Status_TENTATIVE corresponds to the value TENTATIVE of Address_Status
	Address_Status_TENTATIVE E_Address_Status = 6
	// Address_Status_DUPLICATE corresponds to the value DUPLICATE of Address_Status
	Address_Status_DUPLICATE E_Address_Status = 7
	// Address_Status_OPTIMISTIC corresponds to the value OPTIMISTIC of Address_Status
	Address_Status_OPTIMISTIC E_Address_Status = 8
)

// E_Bfd_BfdDiagnosticCode is a derived int64 type which is used to represent
// the enumerated node Bfd_BfdDiagnosticCode. An additional value named
// Bfd_BfdDiagnosticCode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Bfd_BfdDiagnosticCode int64

// IsYANGGoEnum ensures that Bfd_BfdDiagnosticCode implements the yang.GoEnum
// interface. This ensures that Bfd_BfdDiagnosticCode can be identified as a
// mapped type for a YANG enumeration.
func (E_Bfd_BfdDiagnosticCode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Bfd_BfdDiagnosticCode.
func (E_Bfd_BfdDiagnosticCode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_Bfd_BfdDiagnosticCode.
func (e E_Bfd_BfdDiagnosticCode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Bfd_BfdDiagnosticCode")
}

const (
	// Bfd_BfdDiagnosticCode_UNSET corresponds to the value UNSET of Bfd_BfdDiagnosticCode
	Bfd_BfdDiagnosticCode_UNSET E_Bfd_BfdDiagnosticCode = 0
	// Bfd_BfdDiagnosticCode_NO_DIAGNOSTIC corresponds to the value NO_DIAGNOSTIC of Bfd_BfdDiagnosticCode
	Bfd_BfdDiagnosticCode_NO_DIAGNOSTIC E_Bfd_BfdDiagnosticCode = 1
	// Bfd_BfdDiagnosticCode_DETECTION_TIMEOUT corresponds to the value DETECTION_TIMEOUT of Bfd_BfdDiagnosticCode
	Bfd_BfdDiagnosticCode_DETECTION_TIMEOUT E_Bfd_BfdDiagnosticCode = 2
	// Bfd_BfdDiagnosticCode_ECHO_FAILED corresponds to the value ECHO_FAILED of Bfd_BfdDiagnosticCode
	Bfd_BfdDiagnosticCode_ECHO_FAILED E_Bfd_BfdDiagnosticCode = 3
	// Bfd_BfdDiagnosticCode_FORWARDING_RESET corresponds to the value FORWARDING_RESET of Bfd_BfdDiagnosticCode
	Bfd_BfdDiagnosticCode_FORWARDING_RESET E_Bfd_BfdDiagnosticCode = 4
	// Bfd_BfdDiagnosticCode_PATH_DOWN corresponds to the value PATH_DOWN of Bfd_BfdDiagnosticCode
	Bfd_BfdDiagnosticCode_PATH_DOWN E_Bfd_BfdDiagnosticCode = 5
	// Bfd_BfdDiagnosticCode_CONCATENATED_PATH_DOWN corresponds to the value CONCATENATED_PATH_DOWN of Bfd_BfdDiagnosticCode
	Bfd_BfdDiagnosticCode_CONCATENATED_PATH_DOWN E_Bfd_BfdDiagnosticCode = 6
	// Bfd_BfdDiagnosticCode_ADMIN_DOWN corresponds to the value ADMIN_DOWN of Bfd_BfdDiagnosticCode
	Bfd_BfdDiagnosticCode_ADMIN_DOWN E_Bfd_BfdDiagnosticCode = 7
	// Bfd_BfdDiagnosticCode_REVERSE_CONCATENATED_PATH_DOWN corresponds to the value REVERSE_CONCATENATED_PATH_DOWN of Bfd_BfdDiagnosticCode
	Bfd_BfdDiagnosticCode_REVERSE_CONCATENATED_PATH_DOWN E_Bfd_BfdDiagnosticCode = 8
)

// E_Bfd_BfdSessionState is a derived int64 type which is used to represent
// the enumerated node Bfd_BfdSessionState. An additional value named
// Bfd_BfdSessionState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Bfd_BfdSessionState int64

// IsYANGGoEnum ensures that Bfd_BfdSessionState implements the yang.GoEnum
// interface. This ensures that Bfd_BfdSessionState can be identified as a
// mapped type for a YANG enumeration.
func (E_Bfd_BfdSessionState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Bfd_BfdSessionState.
func (E_Bfd_BfdSessionState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_Bfd_BfdSessionState.
func (e E_Bfd_BfdSessionState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Bfd_BfdSessionState")
}

const (
	// Bfd_BfdSessionState_UNSET corresponds to the value UNSET of Bfd_BfdSessionState
	Bfd_BfdSessionState_UNSET E_Bfd_BfdSessionState = 0
	// Bfd_BfdSessionState_UP corresponds to the value UP of Bfd_BfdSessionState
	Bfd_BfdSessionState_UP E_Bfd_BfdSessionState = 1
	// Bfd_BfdSessionState_DOWN corresponds to the value DOWN of Bfd_BfdSessionState
	Bfd_BfdSessionState_DOWN E_Bfd_BfdSessionState = 2
	// Bfd_BfdSessionState_ADMIN_DOWN corresponds to the value ADMIN_DOWN of Bfd_BfdSessionState
	Bfd_BfdSessionState_ADMIN_DOWN E_Bfd_BfdSessionState = 3
	// Bfd_BfdSessionState_INIT corresponds to the value INIT of Bfd_BfdSessionState
	Bfd_BfdSessionState_INIT E_Bfd_BfdSessionState = 4
)

// E_BgpTypes_AFI_SAFI_TYPE is a derived int64 type which is used to represent
// the enumerated node BgpTypes_AFI_SAFI_TYPE. An additional value named
// BgpTypes_AFI_SAFI_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_BgpTypes_AFI_SAFI_TYPE int64

// IsYANGGoEnum ensures that BgpTypes_AFI_SAFI_TYPE implements the yang.GoEnum
// interface. This ensures that BgpTypes_AFI_SAFI_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_BgpTypes_AFI_SAFI_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  BgpTypes_AFI_SAFI_TYPE.
func (E_BgpTypes_AFI_SAFI_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_BgpTypes_AFI_SAFI_TYPE.
func (e E_BgpTypes_AFI_SAFI_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_BgpTypes_AFI_SAFI_TYPE")
}

const (
	// BgpTypes_AFI_SAFI_TYPE_UNSET corresponds to the value UNSET of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_UNSET E_BgpTypes_AFI_SAFI_TYPE = 0
	// BgpTypes_AFI_SAFI_TYPE_IPV4_FLOWSPEC corresponds to the value IPV4_FLOWSPEC of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_IPV4_FLOWSPEC E_BgpTypes_AFI_SAFI_TYPE = 1
	// BgpTypes_AFI_SAFI_TYPE_IPV4_LABELED_UNICAST corresponds to the value IPV4_LABELED_UNICAST of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_IPV4_LABELED_UNICAST E_BgpTypes_AFI_SAFI_TYPE = 2
	// BgpTypes_AFI_SAFI_TYPE_IPV4_UNICAST corresponds to the value IPV4_UNICAST of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_IPV4_UNICAST E_BgpTypes_AFI_SAFI_TYPE = 3
	// BgpTypes_AFI_SAFI_TYPE_IPV6_LABELED_UNICAST corresponds to the value IPV6_LABELED_UNICAST of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_IPV6_LABELED_UNICAST E_BgpTypes_AFI_SAFI_TYPE = 4
	// BgpTypes_AFI_SAFI_TYPE_IPV6_UNICAST corresponds to the value IPV6_UNICAST of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_IPV6_UNICAST E_BgpTypes_AFI_SAFI_TYPE = 5
	// BgpTypes_AFI_SAFI_TYPE_L2VPN_EVPN corresponds to the value L2VPN_EVPN of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_L2VPN_EVPN E_BgpTypes_AFI_SAFI_TYPE = 6
	// BgpTypes_AFI_SAFI_TYPE_L2VPN_VPLS corresponds to the value L2VPN_VPLS of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_L2VPN_VPLS E_BgpTypes_AFI_SAFI_TYPE = 7
	// BgpTypes_AFI_SAFI_TYPE_L3VPN_IPV4_MULTICAST corresponds to the value L3VPN_IPV4_MULTICAST of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_L3VPN_IPV4_MULTICAST E_BgpTypes_AFI_SAFI_TYPE = 8
	// BgpTypes_AFI_SAFI_TYPE_L3VPN_IPV4_UNICAST corresponds to the value L3VPN_IPV4_UNICAST of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_L3VPN_IPV4_UNICAST E_BgpTypes_AFI_SAFI_TYPE = 9
	// BgpTypes_AFI_SAFI_TYPE_L3VPN_IPV6_MULTICAST corresponds to the value L3VPN_IPV6_MULTICAST of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_L3VPN_IPV6_MULTICAST E_BgpTypes_AFI_SAFI_TYPE = 10
	// BgpTypes_AFI_SAFI_TYPE_L3VPN_IPV6_UNICAST corresponds to the value L3VPN_IPV6_UNICAST of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_L3VPN_IPV6_UNICAST E_BgpTypes_AFI_SAFI_TYPE = 11
	// BgpTypes_AFI_SAFI_TYPE_LINKSTATE corresponds to the value LINKSTATE of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_LINKSTATE E_BgpTypes_AFI_SAFI_TYPE = 12
	// BgpTypes_AFI_SAFI_TYPE_LINKSTATE_SPF corresponds to the value LINKSTATE_SPF of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_LINKSTATE_SPF E_BgpTypes_AFI_SAFI_TYPE = 13
	// BgpTypes_AFI_SAFI_TYPE_LINKSTATE_VPN corresponds to the value LINKSTATE_VPN of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_LINKSTATE_VPN E_BgpTypes_AFI_SAFI_TYPE = 14
	// BgpTypes_AFI_SAFI_TYPE_SRTE_POLICY_IPV4 corresponds to the value SRTE_POLICY_IPV4 of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_SRTE_POLICY_IPV4 E_BgpTypes_AFI_SAFI_TYPE = 15
	// BgpTypes_AFI_SAFI_TYPE_SRTE_POLICY_IPV6 corresponds to the value SRTE_POLICY_IPV6 of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_SRTE_POLICY_IPV6 E_BgpTypes_AFI_SAFI_TYPE = 16
	// BgpTypes_AFI_SAFI_TYPE_VPNV4_FLOWSPEC corresponds to the value VPNV4_FLOWSPEC of BgpTypes_AFI_SAFI_TYPE
	BgpTypes_AFI_SAFI_TYPE_VPNV4_FLOWSPEC E_BgpTypes_AFI_SAFI_TYPE = 17
)

// E_BgpTypes_AsPathSegmentType is a derived int64 type which is used to represent
// the enumerated node BgpTypes_AsPathSegmentType. An additional value named
// BgpTypes_AsPathSegmentType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_BgpTypes_AsPathSegmentType int64

// IsYANGGoEnum ensures that BgpTypes_AsPathSegmentType implements the yang.GoEnum
// interface. This ensures that BgpTypes_AsPathSegmentType can be identified as a
// mapped type for a YANG enumeration.
func (E_BgpTypes_AsPathSegmentType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  BgpTypes_AsPathSegmentType.
func (E_BgpTypes_AsPathSegmentType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_BgpTypes_AsPathSegmentType.
func (e E_BgpTypes_AsPathSegmentType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_BgpTypes_AsPathSegmentType")
}

const (
	// BgpTypes_AsPathSegmentType_UNSET corresponds to the value UNSET of BgpTypes_AsPathSegmentType
	BgpTypes_AsPathSegmentType_UNSET E_BgpTypes_AsPathSegmentType = 0
	// BgpTypes_AsPathSegmentType_AS_SEQ corresponds to the value AS_SEQ of BgpTypes_AsPathSegmentType
	BgpTypes_AsPathSegmentType_AS_SEQ E_BgpTypes_AsPathSegmentType = 1
	// BgpTypes_AsPathSegmentType_AS_SET corresponds to the value AS_SET of BgpTypes_AsPathSegmentType
	BgpTypes_AsPathSegmentType_AS_SET E_BgpTypes_AsPathSegmentType = 2
	// BgpTypes_AsPathSegmentType_AS_CONFED_SEQUENCE corresponds to the value AS_CONFED_SEQUENCE of BgpTypes_AsPathSegmentType
	BgpTypes_AsPathSegmentType_AS_CONFED_SEQUENCE E_BgpTypes_AsPathSegmentType = 3
	// BgpTypes_AsPathSegmentType_AS_CONFED_SET corresponds to the value AS_CONFED_SET of BgpTypes_AsPathSegmentType
	BgpTypes_AsPathSegmentType_AS_CONFED_SET E_BgpTypes_AsPathSegmentType = 4
)

// E_BgpTypes_BGP_CAPABILITY is a derived int64 type which is used to represent
// the enumerated node BgpTypes_BGP_CAPABILITY. An additional value named
// BgpTypes_BGP_CAPABILITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_BgpTypes_BGP_CAPABILITY int64

// IsYANGGoEnum ensures that BgpTypes_BGP_CAPABILITY implements the yang.GoEnum
// interface. This ensures that BgpTypes_BGP_CAPABILITY can be identified as a
// mapped type for a YANG enumeration.
func (E_BgpTypes_BGP_CAPABILITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  BgpTypes_BGP_CAPABILITY.
func (E_BgpTypes_BGP_CAPABILITY) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_BgpTypes_BGP_CAPABILITY.
func (e E_BgpTypes_BGP_CAPABILITY) String() string {
	return ygot.EnumLogString(e, int64(e), "E_BgpTypes_BGP_CAPABILITY")
}

const (
	// BgpTypes_BGP_CAPABILITY_UNSET corresponds to the value UNSET of BgpTypes_BGP_CAPABILITY
	BgpTypes_BGP_CAPABILITY_UNSET E_BgpTypes_BGP_CAPABILITY = 0
	// BgpTypes_BGP_CAPABILITY_ADD_PATHS corresponds to the value ADD_PATHS of BgpTypes_BGP_CAPABILITY
	BgpTypes_BGP_CAPABILITY_ADD_PATHS E_BgpTypes_BGP_CAPABILITY = 1
	// BgpTypes_BGP_CAPABILITY_ASN32 corresponds to the value ASN32 of BgpTypes_BGP_CAPABILITY
	BgpTypes_BGP_CAPABILITY_ASN32 E_BgpTypes_BGP_CAPABILITY = 2
	// BgpTypes_BGP_CAPABILITY_EXTENDED_NEXTHOP_ENCODING corresponds to the value EXTENDED_NEXTHOP_ENCODING of BgpTypes_BGP_CAPABILITY
	BgpTypes_BGP_CAPABILITY_EXTENDED_NEXTHOP_ENCODING E_BgpTypes_BGP_CAPABILITY = 3
	// BgpTypes_BGP_CAPABILITY_GRACEFUL_RESTART corresponds to the value GRACEFUL_RESTART of BgpTypes_BGP_CAPABILITY
	BgpTypes_BGP_CAPABILITY_GRACEFUL_RESTART E_BgpTypes_BGP_CAPABILITY = 4
	// BgpTypes_BGP_CAPABILITY_MPBGP corresponds to the value MPBGP of BgpTypes_BGP_CAPABILITY
	BgpTypes_BGP_CAPABILITY_MPBGP E_BgpTypes_BGP_CAPABILITY = 5
	// BgpTypes_BGP_CAPABILITY_ROUTE_REFRESH corresponds to the value ROUTE_REFRESH of BgpTypes_BGP_CAPABILITY
	BgpTypes_BGP_CAPABILITY_ROUTE_REFRESH E_BgpTypes_BGP_CAPABILITY = 6
)

// E_BgpTypes_BGP_ERROR_CODE is a derived int64 type which is used to represent
// the enumerated node BgpTypes_BGP_ERROR_CODE. An additional value named
// BgpTypes_BGP_ERROR_CODE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_BgpTypes_BGP_ERROR_CODE int64

// IsYANGGoEnum ensures that BgpTypes_BGP_ERROR_CODE implements the yang.GoEnum
// interface. This ensures that BgpTypes_BGP_ERROR_CODE can be identified as a
// mapped type for a YANG enumeration.
func (E_BgpTypes_BGP_ERROR_CODE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  BgpTypes_BGP_ERROR_CODE.
func (E_BgpTypes_BGP_ERROR_CODE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_BgpTypes_BGP_ERROR_CODE.
func (e E_BgpTypes_BGP_ERROR_CODE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_BgpTypes_BGP_ERROR_CODE")
}

const (
	// BgpTypes_BGP_ERROR_CODE_UNSET corresponds to the value UNSET of BgpTypes_BGP_ERROR_CODE
	BgpTypes_BGP_ERROR_CODE_UNSET E_BgpTypes_BGP_ERROR_CODE = 0
	// BgpTypes_BGP_ERROR_CODE_CEASE corresponds to the value CEASE of BgpTypes_BGP_ERROR_CODE
	BgpTypes_BGP_ERROR_CODE_CEASE E_BgpTypes_BGP_ERROR_CODE = 1
	// BgpTypes_BGP_ERROR_CODE_FINITE_STATE_MACHINE_ERROR corresponds to the value FINITE_STATE_MACHINE_ERROR of BgpTypes_BGP_ERROR_CODE
	BgpTypes_BGP_ERROR_CODE_FINITE_STATE_MACHINE_ERROR E_BgpTypes_BGP_ERROR_CODE = 2
	// BgpTypes_BGP_ERROR_CODE_HOLD_TIMER_EXPIRED corresponds to the value HOLD_TIMER_EXPIRED of BgpTypes_BGP_ERROR_CODE
	BgpTypes_BGP_ERROR_CODE_HOLD_TIMER_EXPIRED E_BgpTypes_BGP_ERROR_CODE = 3
	// BgpTypes_BGP_ERROR_CODE_MESSAGE_HEADER_ERROR corresponds to the value MESSAGE_HEADER_ERROR of BgpTypes_BGP_ERROR_CODE
	BgpTypes_BGP_ERROR_CODE_MESSAGE_HEADER_ERROR E_BgpTypes_BGP_ERROR_CODE = 4
	// BgpTypes_BGP_ERROR_CODE_OPEN_MESSAGE_ERROR corresponds to the value OPEN_MESSAGE_ERROR of BgpTypes_BGP_ERROR_CODE
	BgpTypes_BGP_ERROR_CODE_OPEN_MESSAGE_ERROR E_BgpTypes_BGP_ERROR_CODE = 5
	// BgpTypes_BGP_ERROR_CODE_ROUTE_REFRESH_MESSAGE_ERROR corresponds to the value ROUTE_REFRESH_MESSAGE_ERROR of BgpTypes_BGP_ERROR_CODE
	BgpTypes_BGP_ERROR_CODE_ROUTE_REFRESH_MESSAGE_ERROR E_BgpTypes_BGP_ERROR_CODE = 6
	// BgpTypes_BGP_ERROR_CODE_UPDATE_MESSAGE_ERROR corresponds to the value UPDATE_MESSAGE_ERROR of BgpTypes_BGP_ERROR_CODE
	BgpTypes_BGP_ERROR_CODE_UPDATE_MESSAGE_ERROR E_BgpTypes_BGP_ERROR_CODE = 7
)

// E_BgpTypes_BGP_ERROR_SUBCODE is a derived int64 type which is used to represent
// the enumerated node BgpTypes_BGP_ERROR_SUBCODE. An additional value named
// BgpTypes_BGP_ERROR_SUBCODE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_BgpTypes_BGP_ERROR_SUBCODE int64

// IsYANGGoEnum ensures that BgpTypes_BGP_ERROR_SUBCODE implements the yang.GoEnum
// interface. This ensures that BgpTypes_BGP_ERROR_SUBCODE can be identified as a
// mapped type for a YANG enumeration.
func (E_BgpTypes_BGP_ERROR_SUBCODE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  BgpTypes_BGP_ERROR_SUBCODE.
func (E_BgpTypes_BGP_ERROR_SUBCODE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_BgpTypes_BGP_ERROR_SUBCODE.
func (e E_BgpTypes_BGP_ERROR_SUBCODE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_BgpTypes_BGP_ERROR_SUBCODE")
}

const (
	// BgpTypes_BGP_ERROR_SUBCODE_UNSET corresponds to the value UNSET of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_UNSET E_BgpTypes_BGP_ERROR_SUBCODE = 0
	// BgpTypes_BGP_ERROR_SUBCODE_ADMINISTRATIVE_RESET corresponds to the value ADMINISTRATIVE_RESET of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_ADMINISTRATIVE_RESET E_BgpTypes_BGP_ERROR_SUBCODE = 1
	// BgpTypes_BGP_ERROR_SUBCODE_ADMINISTRATIVE_SHUTDOWN corresponds to the value ADMINISTRATIVE_SHUTDOWN of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_ADMINISTRATIVE_SHUTDOWN E_BgpTypes_BGP_ERROR_SUBCODE = 2
	// BgpTypes_BGP_ERROR_SUBCODE_ATTRIBUTE_FLAGS_ERROR corresponds to the value ATTRIBUTE_FLAGS_ERROR of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_ATTRIBUTE_FLAGS_ERROR E_BgpTypes_BGP_ERROR_SUBCODE = 3
	// BgpTypes_BGP_ERROR_SUBCODE_ATTRIBUTE_LENGTH_ERROR corresponds to the value ATTRIBUTE_LENGTH_ERROR of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_ATTRIBUTE_LENGTH_ERROR E_BgpTypes_BGP_ERROR_SUBCODE = 4
	// BgpTypes_BGP_ERROR_SUBCODE_BAD_BGP_IDENTIFIER corresponds to the value BAD_BGP_IDENTIFIER of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_BAD_BGP_IDENTIFIER E_BgpTypes_BGP_ERROR_SUBCODE = 5
	// BgpTypes_BGP_ERROR_SUBCODE_BAD_MESSAGE_LENGTH corresponds to the value BAD_MESSAGE_LENGTH of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_BAD_MESSAGE_LENGTH E_BgpTypes_BGP_ERROR_SUBCODE = 6
	// BgpTypes_BGP_ERROR_SUBCODE_BAD_MESSAGE_TYPE corresponds to the value BAD_MESSAGE_TYPE of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_BAD_MESSAGE_TYPE E_BgpTypes_BGP_ERROR_SUBCODE = 7
	// BgpTypes_BGP_ERROR_SUBCODE_BAD_PEER_AS corresponds to the value BAD_PEER_AS of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_BAD_PEER_AS E_BgpTypes_BGP_ERROR_SUBCODE = 8
	// BgpTypes_BGP_ERROR_SUBCODE_CEASE_SUBCODE corresponds to the value CEASE_SUBCODE of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_CEASE_SUBCODE E_BgpTypes_BGP_ERROR_SUBCODE = 9
	// BgpTypes_BGP_ERROR_SUBCODE_CONNECTION_NOT_SYNCHRONIZED corresponds to the value CONNECTION_NOT_SYNCHRONIZED of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_CONNECTION_NOT_SYNCHRONIZED E_BgpTypes_BGP_ERROR_SUBCODE = 10
	// BgpTypes_BGP_ERROR_SUBCODE_CONNECTION_REJECTED corresponds to the value CONNECTION_REJECTED of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_CONNECTION_REJECTED E_BgpTypes_BGP_ERROR_SUBCODE = 11
	// BgpTypes_BGP_ERROR_SUBCODE_CONN_COLLISION_RESOLUTION corresponds to the value CONN_COLLISION_RESOLUTION of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_CONN_COLLISION_RESOLUTION E_BgpTypes_BGP_ERROR_SUBCODE = 12
	// BgpTypes_BGP_ERROR_SUBCODE_FINITE_STATE_MACHINE_SUBCODE corresponds to the value FINITE_STATE_MACHINE_SUBCODE of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_FINITE_STATE_MACHINE_SUBCODE E_BgpTypes_BGP_ERROR_SUBCODE = 13
	// BgpTypes_BGP_ERROR_SUBCODE_INVALID_MESSAGE_LENGTH corresponds to the value INVALID_MESSAGE_LENGTH of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_INVALID_MESSAGE_LENGTH E_BgpTypes_BGP_ERROR_SUBCODE = 14
	// BgpTypes_BGP_ERROR_SUBCODE_INVALID_NETWORK_FIELD corresponds to the value INVALID_NETWORK_FIELD of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_INVALID_NETWORK_FIELD E_BgpTypes_BGP_ERROR_SUBCODE = 15
	// BgpTypes_BGP_ERROR_SUBCODE_INVALID_NEXT_HOP_ATTRIBUTE corresponds to the value INVALID_NEXT_HOP_ATTRIBUTE of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_INVALID_NEXT_HOP_ATTRIBUTE E_BgpTypes_BGP_ERROR_SUBCODE = 16
	// BgpTypes_BGP_ERROR_SUBCODE_INVALID_ORIGIN_ATTRIBUTE corresponds to the value INVALID_ORIGIN_ATTRIBUTE of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_INVALID_ORIGIN_ATTRIBUTE E_BgpTypes_BGP_ERROR_SUBCODE = 17
	// BgpTypes_BGP_ERROR_SUBCODE_MALFORMED_AS_PATH corresponds to the value MALFORMED_AS_PATH of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_MALFORMED_AS_PATH E_BgpTypes_BGP_ERROR_SUBCODE = 18
	// BgpTypes_BGP_ERROR_SUBCODE_MALFORMED_ATTRIBUTE_LIST corresponds to the value MALFORMED_ATTRIBUTE_LIST of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_MALFORMED_ATTRIBUTE_LIST E_BgpTypes_BGP_ERROR_SUBCODE = 19
	// BgpTypes_BGP_ERROR_SUBCODE_MAX_NUM_PREFIXES_REACHED corresponds to the value MAX_NUM_PREFIXES_REACHED of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_MAX_NUM_PREFIXES_REACHED E_BgpTypes_BGP_ERROR_SUBCODE = 20
	// BgpTypes_BGP_ERROR_SUBCODE_MESSAGE_HEADER_SUBCODE corresponds to the value MESSAGE_HEADER_SUBCODE of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_MESSAGE_HEADER_SUBCODE E_BgpTypes_BGP_ERROR_SUBCODE = 21
	// BgpTypes_BGP_ERROR_SUBCODE_MISSING_WELL_KNOWN_ATTRIBUTE corresponds to the value MISSING_WELL_KNOWN_ATTRIBUTE of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_MISSING_WELL_KNOWN_ATTRIBUTE E_BgpTypes_BGP_ERROR_SUBCODE = 22
	// BgpTypes_BGP_ERROR_SUBCODE_OPEN_MESSAGE_SUBCODE corresponds to the value OPEN_MESSAGE_SUBCODE of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_OPEN_MESSAGE_SUBCODE E_BgpTypes_BGP_ERROR_SUBCODE = 23
	// BgpTypes_BGP_ERROR_SUBCODE_OPTIONAL_ATTRIBUTE_ERROR corresponds to the value OPTIONAL_ATTRIBUTE_ERROR of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_OPTIONAL_ATTRIBUTE_ERROR E_BgpTypes_BGP_ERROR_SUBCODE = 24
	// BgpTypes_BGP_ERROR_SUBCODE_OTHER_CONFIG_CHANGE corresponds to the value OTHER_CONFIG_CHANGE of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_OTHER_CONFIG_CHANGE E_BgpTypes_BGP_ERROR_SUBCODE = 25
	// BgpTypes_BGP_ERROR_SUBCODE_OUT_OF_RESOURCES corresponds to the value OUT_OF_RESOURCES of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_OUT_OF_RESOURCES E_BgpTypes_BGP_ERROR_SUBCODE = 26
	// BgpTypes_BGP_ERROR_SUBCODE_PEER_DE_CONFIGURED corresponds to the value PEER_DE_CONFIGURED of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_PEER_DE_CONFIGURED E_BgpTypes_BGP_ERROR_SUBCODE = 27
	// BgpTypes_BGP_ERROR_SUBCODE_RECEIVE_UNEXPECTED_MESSAGE_ESTABLISHED corresponds to the value RECEIVE_UNEXPECTED_MESSAGE_ESTABLISHED of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_RECEIVE_UNEXPECTED_MESSAGE_ESTABLISHED E_BgpTypes_BGP_ERROR_SUBCODE = 28
	// BgpTypes_BGP_ERROR_SUBCODE_RECEIVE_UNEXPECTED_MESSAGE_OPENCONFIRM corresponds to the value RECEIVE_UNEXPECTED_MESSAGE_OPENCONFIRM of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_RECEIVE_UNEXPECTED_MESSAGE_OPENCONFIRM E_BgpTypes_BGP_ERROR_SUBCODE = 29
	// BgpTypes_BGP_ERROR_SUBCODE_RECEIVE_UNEXPECTED_MESSAGE_OPENSENT corresponds to the value RECEIVE_UNEXPECTED_MESSAGE_OPENSENT of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_RECEIVE_UNEXPECTED_MESSAGE_OPENSENT E_BgpTypes_BGP_ERROR_SUBCODE = 30
	// BgpTypes_BGP_ERROR_SUBCODE_ROUTE_REFRESH_SUBCODE corresponds to the value ROUTE_REFRESH_SUBCODE of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_ROUTE_REFRESH_SUBCODE E_BgpTypes_BGP_ERROR_SUBCODE = 31
	// BgpTypes_BGP_ERROR_SUBCODE_UNACCEPTABLE_HOLD_TIME corresponds to the value UNACCEPTABLE_HOLD_TIME of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_UNACCEPTABLE_HOLD_TIME E_BgpTypes_BGP_ERROR_SUBCODE = 32
	// BgpTypes_BGP_ERROR_SUBCODE_UNRECOGNIZED_WELL_KNOWN_ATTRIBUTE corresponds to the value UNRECOGNIZED_WELL_KNOWN_ATTRIBUTE of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_UNRECOGNIZED_WELL_KNOWN_ATTRIBUTE E_BgpTypes_BGP_ERROR_SUBCODE = 33
	// BgpTypes_BGP_ERROR_SUBCODE_UNSPECIFIC corresponds to the value UNSPECIFIC of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_UNSPECIFIC E_BgpTypes_BGP_ERROR_SUBCODE = 34
	// BgpTypes_BGP_ERROR_SUBCODE_UNSUPPORTED_CAPABILITY corresponds to the value UNSUPPORTED_CAPABILITY of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_UNSUPPORTED_CAPABILITY E_BgpTypes_BGP_ERROR_SUBCODE = 35
	// BgpTypes_BGP_ERROR_SUBCODE_UNSUPPORTED_OPTIONAL_PARAMETER corresponds to the value UNSUPPORTED_OPTIONAL_PARAMETER of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_UNSUPPORTED_OPTIONAL_PARAMETER E_BgpTypes_BGP_ERROR_SUBCODE = 36
	// BgpTypes_BGP_ERROR_SUBCODE_UNSUPPORTED_VERSION_NUMBER corresponds to the value UNSUPPORTED_VERSION_NUMBER of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_UNSUPPORTED_VERSION_NUMBER E_BgpTypes_BGP_ERROR_SUBCODE = 37
	// BgpTypes_BGP_ERROR_SUBCODE_UPDATE_MESSAGE_SUBCODE corresponds to the value UPDATE_MESSAGE_SUBCODE of BgpTypes_BGP_ERROR_SUBCODE
	BgpTypes_BGP_ERROR_SUBCODE_UPDATE_MESSAGE_SUBCODE E_BgpTypes_BGP_ERROR_SUBCODE = 38
)

// E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY is a derived int64 type which is used to represent
// the enumerated node BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY. An additional value named
// BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY int64

// IsYANGGoEnum ensures that BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY implements the yang.GoEnum
// interface. This ensures that BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY can be identified as a
// mapped type for a YANG enumeration.
func (E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY.
func (E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY.
func (e E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY) String() string {
	return ygot.EnumLogString(e, int64(e), "E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY")
}

const (
	// BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY_UNSET corresponds to the value UNSET of BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY
	BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY_UNSET E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY = 0
	// BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY_NOPEER corresponds to the value NOPEER of BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY
	BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY_NOPEER E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY = 1
	// BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY_NO_ADVERTISE corresponds to the value NO_ADVERTISE of BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY
	BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY_NO_ADVERTISE E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY = 2
	// BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY_NO_EXPORT corresponds to the value NO_EXPORT of BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY
	BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY_NO_EXPORT E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY = 3
	// BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY_NO_EXPORT_SUBCONFED corresponds to the value NO_EXPORT_SUBCONFED of BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY
	BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY_NO_EXPORT_SUBCONFED E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY = 4
)

// E_BgpTypes_BgpOriginAttrType is a derived int64 type which is used to represent
// the enumerated node BgpTypes_BgpOriginAttrType. An additional value named
// BgpTypes_BgpOriginAttrType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_BgpTypes_BgpOriginAttrType int64

// IsYANGGoEnum ensures that BgpTypes_BgpOriginAttrType implements the yang.GoEnum
// interface. This ensures that BgpTypes_BgpOriginAttrType can be identified as a
// mapped type for a YANG enumeration.
func (E_BgpTypes_BgpOriginAttrType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  BgpTypes_BgpOriginAttrType.
func (E_BgpTypes_BgpOriginAttrType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_BgpTypes_BgpOriginAttrType.
func (e E_BgpTypes_BgpOriginAttrType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_BgpTypes_BgpOriginAttrType")
}

const (
	// BgpTypes_BgpOriginAttrType_UNSET corresponds to the value UNSET of BgpTypes_BgpOriginAttrType
	BgpTypes_BgpOriginAttrType_UNSET E_BgpTypes_BgpOriginAttrType = 0
	// BgpTypes_BgpOriginAttrType_IGP corresponds to the value IGP of BgpTypes_BgpOriginAttrType
	BgpTypes_BgpOriginAttrType_IGP E_BgpTypes_BgpOriginAttrType = 1
	// BgpTypes_BgpOriginAttrType_EGP corresponds to the value EGP of BgpTypes_BgpOriginAttrType
	BgpTypes_BgpOriginAttrType_EGP E_BgpTypes_BgpOriginAttrType = 2
	// BgpTypes_BgpOriginAttrType_INCOMPLETE corresponds to the value INCOMPLETE of BgpTypes_BgpOriginAttrType
	BgpTypes_BgpOriginAttrType_INCOMPLETE E_BgpTypes_BgpOriginAttrType = 3
)

// E_BgpTypes_CommunityType is a derived int64 type which is used to represent
// the enumerated node BgpTypes_CommunityType. An additional value named
// BgpTypes_CommunityType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_BgpTypes_CommunityType int64

// IsYANGGoEnum ensures that BgpTypes_CommunityType implements the yang.GoEnum
// interface. This ensures that BgpTypes_CommunityType can be identified as a
// mapped type for a YANG enumeration.
func (E_BgpTypes_CommunityType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  BgpTypes_CommunityType.
func (E_BgpTypes_CommunityType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_BgpTypes_CommunityType.
func (e E_BgpTypes_CommunityType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_BgpTypes_CommunityType")
}

const (
	// BgpTypes_CommunityType_UNSET corresponds to the value UNSET of BgpTypes_CommunityType
	BgpTypes_CommunityType_UNSET E_BgpTypes_CommunityType = 0
	// BgpTypes_CommunityType_STANDARD corresponds to the value STANDARD of BgpTypes_CommunityType
	BgpTypes_CommunityType_STANDARD E_BgpTypes_CommunityType = 1
	// BgpTypes_CommunityType_EXTENDED corresponds to the value EXTENDED of BgpTypes_CommunityType
	BgpTypes_CommunityType_EXTENDED E_BgpTypes_CommunityType = 2
	// BgpTypes_CommunityType_BOTH corresponds to the value BOTH of BgpTypes_CommunityType
	BgpTypes_CommunityType_BOTH E_BgpTypes_CommunityType = 3
	// BgpTypes_CommunityType_NONE corresponds to the value NONE of BgpTypes_CommunityType
	BgpTypes_CommunityType_NONE E_BgpTypes_CommunityType = 4
)

// E_BgpTypes_PeerType is a derived int64 type which is used to represent
// the enumerated node BgpTypes_PeerType. An additional value named
// BgpTypes_PeerType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_BgpTypes_PeerType int64

// IsYANGGoEnum ensures that BgpTypes_PeerType implements the yang.GoEnum
// interface. This ensures that BgpTypes_PeerType can be identified as a
// mapped type for a YANG enumeration.
func (E_BgpTypes_PeerType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  BgpTypes_PeerType.
func (E_BgpTypes_PeerType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_BgpTypes_PeerType.
func (e E_BgpTypes_PeerType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_BgpTypes_PeerType")
}

const (
	// BgpTypes_PeerType_UNSET corresponds to the value UNSET of BgpTypes_PeerType
	BgpTypes_PeerType_UNSET E_BgpTypes_PeerType = 0
	// BgpTypes_PeerType_INTERNAL corresponds to the value INTERNAL of BgpTypes_PeerType
	BgpTypes_PeerType_INTERNAL E_BgpTypes_PeerType = 1
	// BgpTypes_PeerType_EXTERNAL corresponds to the value EXTERNAL of BgpTypes_PeerType
	BgpTypes_PeerType_EXTERNAL E_BgpTypes_PeerType = 2
)

// E_BgpTypes_RemovePrivateAsOption is a derived int64 type which is used to represent
// the enumerated node BgpTypes_RemovePrivateAsOption. An additional value named
// BgpTypes_RemovePrivateAsOption_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_BgpTypes_RemovePrivateAsOption int64

// IsYANGGoEnum ensures that BgpTypes_RemovePrivateAsOption implements the yang.GoEnum
// interface. This ensures that BgpTypes_RemovePrivateAsOption can be identified as a
// mapped type for a YANG enumeration.
func (E_BgpTypes_RemovePrivateAsOption) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  BgpTypes_RemovePrivateAsOption.
func (E_BgpTypes_RemovePrivateAsOption) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_BgpTypes_RemovePrivateAsOption.
func (e E_BgpTypes_RemovePrivateAsOption) String() string {
	return ygot.EnumLogString(e, int64(e), "E_BgpTypes_RemovePrivateAsOption")
}

const (
	// BgpTypes_RemovePrivateAsOption_UNSET corresponds to the value UNSET of BgpTypes_RemovePrivateAsOption
	BgpTypes_RemovePrivateAsOption_UNSET E_BgpTypes_RemovePrivateAsOption = 0
	// BgpTypes_RemovePrivateAsOption_PRIVATE_AS_REMOVE_ALL corresponds to the value PRIVATE_AS_REMOVE_ALL of BgpTypes_RemovePrivateAsOption
	BgpTypes_RemovePrivateAsOption_PRIVATE_AS_REMOVE_ALL E_BgpTypes_RemovePrivateAsOption = 1
	// BgpTypes_RemovePrivateAsOption_PRIVATE_AS_REPLACE_ALL corresponds to the value PRIVATE_AS_REPLACE_ALL of BgpTypes_RemovePrivateAsOption
	BgpTypes_RemovePrivateAsOption_PRIVATE_AS_REPLACE_ALL E_BgpTypes_RemovePrivateAsOption = 2
)

// E_Ethernet_DuplexMode is a derived int64 type which is used to represent
// the enumerated node Ethernet_DuplexMode. An additional value named
// Ethernet_DuplexMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ethernet_DuplexMode int64

// IsYANGGoEnum ensures that Ethernet_DuplexMode implements the yang.GoEnum
// interface. This ensures that Ethernet_DuplexMode can be identified as a
// mapped type for a YANG enumeration.
func (E_Ethernet_DuplexMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ethernet_DuplexMode.
func (E_Ethernet_DuplexMode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_Ethernet_DuplexMode.
func (e E_Ethernet_DuplexMode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ethernet_DuplexMode")
}

const (
	// Ethernet_DuplexMode_UNSET corresponds to the value UNSET of Ethernet_DuplexMode
	Ethernet_DuplexMode_UNSET E_Ethernet_DuplexMode = 0
	// Ethernet_DuplexMode_FULL corresponds to the value FULL of Ethernet_DuplexMode
	Ethernet_DuplexMode_FULL E_Ethernet_DuplexMode = 1
	// Ethernet_DuplexMode_HALF corresponds to the value HALF of Ethernet_DuplexMode
	Ethernet_DuplexMode_HALF E_Ethernet_DuplexMode = 2
)

// E_Ethernet_NegotiatedDuplexMode is a derived int64 type which is used to represent
// the enumerated node Ethernet_NegotiatedDuplexMode. An additional value named
// Ethernet_NegotiatedDuplexMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Ethernet_NegotiatedDuplexMode int64

// IsYANGGoEnum ensures that Ethernet_NegotiatedDuplexMode implements the yang.GoEnum
// interface. This ensures that Ethernet_NegotiatedDuplexMode can be identified as a
// mapped type for a YANG enumeration.
func (E_Ethernet_NegotiatedDuplexMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Ethernet_NegotiatedDuplexMode.
func (E_Ethernet_NegotiatedDuplexMode) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_Ethernet_NegotiatedDuplexMode.
func (e E_Ethernet_NegotiatedDuplexMode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Ethernet_NegotiatedDuplexMode")
}

const (
	// Ethernet_NegotiatedDuplexMode_UNSET corresponds to the value UNSET of Ethernet_NegotiatedDuplexMode
	Ethernet_NegotiatedDuplexMode_UNSET E_Ethernet_NegotiatedDuplexMode = 0
	// Ethernet_NegotiatedDuplexMode_FULL corresponds to the value FULL of Ethernet_NegotiatedDuplexMode
	Ethernet_NegotiatedDuplexMode_FULL E_Ethernet_NegotiatedDuplexMode = 1
	// Ethernet_NegotiatedDuplexMode_HALF corresponds to the value HALF of Ethernet_NegotiatedDuplexMode
	Ethernet_NegotiatedDuplexMode_HALF E_Ethernet_NegotiatedDuplexMode = 2
)

// E_GracefulRestart_Mode is a derived int64 type which is used to represent
// the enumerated node GracefulRestart_Mode. An additional value named
// GracefulRestart_Mode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_GracefulRestart_Mode int64

// IsYANGGoEnum ensures that GracefulRestart_Mode implements the yang.GoEnum
// interface. This ensures that GracefulRestart_Mode can be identified as a
// mapped type for a YANG enumeration.
func (E_GracefulRestart_Mode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  GracefulRestart_Mode.
func (E_GracefulRestart_Mode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_GracefulRestart_Mode.
func (e E_GracefulRestart_Mode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_GracefulRestart_Mode")
}

const (
	// GracefulRestart_Mode_UNSET corresponds to the value UNSET of GracefulRestart_Mode
	GracefulRestart_Mode_UNSET E_GracefulRestart_Mode = 0
	// GracefulRestart_Mode_HELPER_ONLY corresponds to the value HELPER_ONLY of GracefulRestart_Mode
	GracefulRestart_Mode_HELPER_ONLY E_GracefulRestart_Mode = 1
	// GracefulRestart_Mode_BILATERAL corresponds to the value BILATERAL of GracefulRestart_Mode
	GracefulRestart_Mode_BILATERAL E_GracefulRestart_Mode = 2
	// GracefulRestart_Mode_REMOTE_HELPER corresponds to the value REMOTE_HELPER of GracefulRestart_Mode
	GracefulRestart_Mode_REMOTE_HELPER E_GracefulRestart_Mode = 3
)

// E_IETFInterfaces_InterfaceType is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfaceType. An additional value named
// IETFInterfaces_InterfaceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfaceType int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfaceType implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfaceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfaceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfaceType.
func (E_IETFInterfaces_InterfaceType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_IETFInterfaces_InterfaceType.
func (e E_IETFInterfaces_InterfaceType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IETFInterfaces_InterfaceType")
}

const (
	// IETFInterfaces_InterfaceType_UNSET corresponds to the value UNSET of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_UNSET E_IETFInterfaces_InterfaceType = 0
	// IETFInterfaces_InterfaceType_a12MppSwitch corresponds to the value a12MppSwitch of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_a12MppSwitch E_IETFInterfaces_InterfaceType = 1
	// IETFInterfaces_InterfaceType_aal2 corresponds to the value aal2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aal2 E_IETFInterfaces_InterfaceType = 2
	// IETFInterfaces_InterfaceType_aal5 corresponds to the value aal5 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aal5 E_IETFInterfaces_InterfaceType = 3
	// IETFInterfaces_InterfaceType_actelisMetaLOOP corresponds to the value actelisMetaLOOP of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_actelisMetaLOOP E_IETFInterfaces_InterfaceType = 4
	// IETFInterfaces_InterfaceType_adsl corresponds to the value adsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_adsl E_IETFInterfaces_InterfaceType = 5
	// IETFInterfaces_InterfaceType_adsl2 corresponds to the value adsl2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_adsl2 E_IETFInterfaces_InterfaceType = 6
	// IETFInterfaces_InterfaceType_adsl2plus corresponds to the value adsl2plus of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_adsl2plus E_IETFInterfaces_InterfaceType = 7
	// IETFInterfaces_InterfaceType_aflane8023 corresponds to the value aflane8023 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aflane8023 E_IETFInterfaces_InterfaceType = 8
	// IETFInterfaces_InterfaceType_aflane8025 corresponds to the value aflane8025 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aflane8025 E_IETFInterfaces_InterfaceType = 9
	// IETFInterfaces_InterfaceType_aluELP corresponds to the value aluELP of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluELP E_IETFInterfaces_InterfaceType = 10
	// IETFInterfaces_InterfaceType_aluEpon corresponds to the value aluEpon of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluEpon E_IETFInterfaces_InterfaceType = 11
	// IETFInterfaces_InterfaceType_aluEponLogicalLink corresponds to the value aluEponLogicalLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluEponLogicalLink E_IETFInterfaces_InterfaceType = 12
	// IETFInterfaces_InterfaceType_aluEponOnu corresponds to the value aluEponOnu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluEponOnu E_IETFInterfaces_InterfaceType = 13
	// IETFInterfaces_InterfaceType_aluEponPhysicalUni corresponds to the value aluEponPhysicalUni of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluEponPhysicalUni E_IETFInterfaces_InterfaceType = 14
	// IETFInterfaces_InterfaceType_aluGponOnu corresponds to the value aluGponOnu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluGponOnu E_IETFInterfaces_InterfaceType = 15
	// IETFInterfaces_InterfaceType_aluGponPhysicalUni corresponds to the value aluGponPhysicalUni of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluGponPhysicalUni E_IETFInterfaces_InterfaceType = 16
	// IETFInterfaces_InterfaceType_arap corresponds to the value arap of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_arap E_IETFInterfaces_InterfaceType = 17
	// IETFInterfaces_InterfaceType_arcnet corresponds to the value arcnet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_arcnet E_IETFInterfaces_InterfaceType = 18
	// IETFInterfaces_InterfaceType_arcnetPlus corresponds to the value arcnetPlus of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_arcnetPlus E_IETFInterfaces_InterfaceType = 19
	// IETFInterfaces_InterfaceType_async corresponds to the value async of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_async E_IETFInterfaces_InterfaceType = 20
	// IETFInterfaces_InterfaceType_atm corresponds to the value atm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atm E_IETFInterfaces_InterfaceType = 21
	// IETFInterfaces_InterfaceType_atmDxi corresponds to the value atmDxi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmDxi E_IETFInterfaces_InterfaceType = 22
	// IETFInterfaces_InterfaceType_atmFuni corresponds to the value atmFuni of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmFuni E_IETFInterfaces_InterfaceType = 23
	// IETFInterfaces_InterfaceType_atmIma corresponds to the value atmIma of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmIma E_IETFInterfaces_InterfaceType = 24
	// IETFInterfaces_InterfaceType_atmLogical corresponds to the value atmLogical of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmLogical E_IETFInterfaces_InterfaceType = 25
	// IETFInterfaces_InterfaceType_atmRadio corresponds to the value atmRadio of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmRadio E_IETFInterfaces_InterfaceType = 26
	// IETFInterfaces_InterfaceType_atmSubInterface corresponds to the value atmSubInterface of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmSubInterface E_IETFInterfaces_InterfaceType = 27
	// IETFInterfaces_InterfaceType_atmVciEndPt corresponds to the value atmVciEndPt of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmVciEndPt E_IETFInterfaces_InterfaceType = 28
	// IETFInterfaces_InterfaceType_atmVirtual corresponds to the value atmVirtual of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmVirtual E_IETFInterfaces_InterfaceType = 29
	// IETFInterfaces_InterfaceType_atmbond corresponds to the value atmbond of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmbond E_IETFInterfaces_InterfaceType = 30
	// IETFInterfaces_InterfaceType_aviciOpticalEther corresponds to the value aviciOpticalEther of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aviciOpticalEther E_IETFInterfaces_InterfaceType = 31
	// IETFInterfaces_InterfaceType_basicISDN corresponds to the value basicISDN of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_basicISDN E_IETFInterfaces_InterfaceType = 32
	// IETFInterfaces_InterfaceType_bgppolicyaccounting corresponds to the value bgppolicyaccounting of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_bgppolicyaccounting E_IETFInterfaces_InterfaceType = 33
	// IETFInterfaces_InterfaceType_bits corresponds to the value bits of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_bits E_IETFInterfaces_InterfaceType = 34
	// IETFInterfaces_InterfaceType_bridge corresponds to the value bridge of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_bridge E_IETFInterfaces_InterfaceType = 35
	// IETFInterfaces_InterfaceType_bsc corresponds to the value bsc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_bsc E_IETFInterfaces_InterfaceType = 36
	// IETFInterfaces_InterfaceType_cableDownstreamRfPort corresponds to the value cableDownstreamRfPort of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_cableDownstreamRfPort E_IETFInterfaces_InterfaceType = 37
	// IETFInterfaces_InterfaceType_capwapDot11Bss corresponds to the value capwapDot11Bss of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_capwapDot11Bss E_IETFInterfaces_InterfaceType = 38
	// IETFInterfaces_InterfaceType_capwapDot11Profile corresponds to the value capwapDot11Profile of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_capwapDot11Profile E_IETFInterfaces_InterfaceType = 39
	// IETFInterfaces_InterfaceType_capwapWtpVirtualRadio corresponds to the value capwapWtpVirtualRadio of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_capwapWtpVirtualRadio E_IETFInterfaces_InterfaceType = 40
	// IETFInterfaces_InterfaceType_cblVectaStar corresponds to the value cblVectaStar of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_cblVectaStar E_IETFInterfaces_InterfaceType = 41
	// IETFInterfaces_InterfaceType_cctEmul corresponds to the value cctEmul of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_cctEmul E_IETFInterfaces_InterfaceType = 42
	// IETFInterfaces_InterfaceType_ces corresponds to the value ces of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ces E_IETFInterfaces_InterfaceType = 43
	// IETFInterfaces_InterfaceType_channel corresponds to the value channel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_channel E_IETFInterfaces_InterfaceType = 44
	// IETFInterfaces_InterfaceType_ciscoISLvlan corresponds to the value ciscoISLvlan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ciscoISLvlan E_IETFInterfaces_InterfaceType = 45
	// IETFInterfaces_InterfaceType_cnr corresponds to the value cnr of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_cnr E_IETFInterfaces_InterfaceType = 46
	// IETFInterfaces_InterfaceType_coffee corresponds to the value coffee of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_coffee E_IETFInterfaces_InterfaceType = 47
	// IETFInterfaces_InterfaceType_compositeLink corresponds to the value compositeLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_compositeLink E_IETFInterfaces_InterfaceType = 48
	// IETFInterfaces_InterfaceType_dcn corresponds to the value dcn of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dcn E_IETFInterfaces_InterfaceType = 49
	// IETFInterfaces_InterfaceType_ddnX25 corresponds to the value ddnX25 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ddnX25 E_IETFInterfaces_InterfaceType = 50
	// IETFInterfaces_InterfaceType_digitalPowerline corresponds to the value digitalPowerline of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_digitalPowerline E_IETFInterfaces_InterfaceType = 51
	// IETFInterfaces_InterfaceType_digitalWrapperOverheadChannel corresponds to the value digitalWrapperOverheadChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_digitalWrapperOverheadChannel E_IETFInterfaces_InterfaceType = 52
	// IETFInterfaces_InterfaceType_dlsw corresponds to the value dlsw of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dlsw E_IETFInterfaces_InterfaceType = 53
	// IETFInterfaces_InterfaceType_docsCableDownstream corresponds to the value docsCableDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableDownstream E_IETFInterfaces_InterfaceType = 54
	// IETFInterfaces_InterfaceType_docsCableMCmtsDownstream corresponds to the value docsCableMCmtsDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableMCmtsDownstream E_IETFInterfaces_InterfaceType = 55
	// IETFInterfaces_InterfaceType_docsCableMaclayer corresponds to the value docsCableMaclayer of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableMaclayer E_IETFInterfaces_InterfaceType = 56
	// IETFInterfaces_InterfaceType_docsCableNdf corresponds to the value docsCableNdf of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableNdf E_IETFInterfaces_InterfaceType = 57
	// IETFInterfaces_InterfaceType_docsCableNdr corresponds to the value docsCableNdr of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableNdr E_IETFInterfaces_InterfaceType = 58
	// IETFInterfaces_InterfaceType_docsCableScte55d1FwdOob corresponds to the value docsCableScte55d1FwdOob of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableScte55d1FwdOob E_IETFInterfaces_InterfaceType = 59
	// IETFInterfaces_InterfaceType_docsCableScte55d1RetOob corresponds to the value docsCableScte55d1RetOob of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableScte55d1RetOob E_IETFInterfaces_InterfaceType = 60
	// IETFInterfaces_InterfaceType_docsCableScte55d2DsOob corresponds to the value docsCableScte55d2DsOob of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableScte55d2DsOob E_IETFInterfaces_InterfaceType = 61
	// IETFInterfaces_InterfaceType_docsCableScte55d2UsOob corresponds to the value docsCableScte55d2UsOob of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableScte55d2UsOob E_IETFInterfaces_InterfaceType = 62
	// IETFInterfaces_InterfaceType_docsCableUpstream corresponds to the value docsCableUpstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableUpstream E_IETFInterfaces_InterfaceType = 63
	// IETFInterfaces_InterfaceType_docsCableUpstreamChannel corresponds to the value docsCableUpstreamChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableUpstreamChannel E_IETFInterfaces_InterfaceType = 64
	// IETFInterfaces_InterfaceType_docsCableUpstreamRfPort corresponds to the value docsCableUpstreamRfPort of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableUpstreamRfPort E_IETFInterfaces_InterfaceType = 65
	// IETFInterfaces_InterfaceType_docsOfdmDownstream corresponds to the value docsOfdmDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsOfdmDownstream E_IETFInterfaces_InterfaceType = 66
	// IETFInterfaces_InterfaceType_docsOfdmaUpstream corresponds to the value docsOfdmaUpstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsOfdmaUpstream E_IETFInterfaces_InterfaceType = 67
	// IETFInterfaces_InterfaceType_ds0 corresponds to the value ds0 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds0 E_IETFInterfaces_InterfaceType = 68
	// IETFInterfaces_InterfaceType_ds0Bundle corresponds to the value ds0Bundle of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds0Bundle E_IETFInterfaces_InterfaceType = 69
	// IETFInterfaces_InterfaceType_ds1 corresponds to the value ds1 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds1 E_IETFInterfaces_InterfaceType = 70
	// IETFInterfaces_InterfaceType_ds1FDL corresponds to the value ds1FDL of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds1FDL E_IETFInterfaces_InterfaceType = 71
	// IETFInterfaces_InterfaceType_ds3 corresponds to the value ds3 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds3 E_IETFInterfaces_InterfaceType = 72
	// IETFInterfaces_InterfaceType_dtm corresponds to the value dtm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dtm E_IETFInterfaces_InterfaceType = 73
	// IETFInterfaces_InterfaceType_dvbAsiIn corresponds to the value dvbAsiIn of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbAsiIn E_IETFInterfaces_InterfaceType = 74
	// IETFInterfaces_InterfaceType_dvbAsiOut corresponds to the value dvbAsiOut of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbAsiOut E_IETFInterfaces_InterfaceType = 75
	// IETFInterfaces_InterfaceType_dvbRccDownstream corresponds to the value dvbRccDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRccDownstream E_IETFInterfaces_InterfaceType = 76
	// IETFInterfaces_InterfaceType_dvbRccMacLayer corresponds to the value dvbRccMacLayer of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRccMacLayer E_IETFInterfaces_InterfaceType = 77
	// IETFInterfaces_InterfaceType_dvbRccUpstream corresponds to the value dvbRccUpstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRccUpstream E_IETFInterfaces_InterfaceType = 78
	// IETFInterfaces_InterfaceType_dvbRcsMacLayer corresponds to the value dvbRcsMacLayer of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRcsMacLayer E_IETFInterfaces_InterfaceType = 79
	// IETFInterfaces_InterfaceType_dvbRcsTdma corresponds to the value dvbRcsTdma of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRcsTdma E_IETFInterfaces_InterfaceType = 80
	// IETFInterfaces_InterfaceType_dvbTdm corresponds to the value dvbTdm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbTdm E_IETFInterfaces_InterfaceType = 81
	// IETFInterfaces_InterfaceType_e1 corresponds to the value e1 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_e1 E_IETFInterfaces_InterfaceType = 82
	// IETFInterfaces_InterfaceType_econet corresponds to the value econet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_econet E_IETFInterfaces_InterfaceType = 83
	// IETFInterfaces_InterfaceType_eon corresponds to the value eon of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_eon E_IETFInterfaces_InterfaceType = 84
	// IETFInterfaces_InterfaceType_eplrs corresponds to the value eplrs of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_eplrs E_IETFInterfaces_InterfaceType = 85
	// IETFInterfaces_InterfaceType_escon corresponds to the value escon of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_escon E_IETFInterfaces_InterfaceType = 86
	// IETFInterfaces_InterfaceType_ethernet3Mbit corresponds to the value ethernet3Mbit of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ethernet3Mbit E_IETFInterfaces_InterfaceType = 87
	// IETFInterfaces_InterfaceType_ethernetCsmacd corresponds to the value ethernetCsmacd of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ethernetCsmacd E_IETFInterfaces_InterfaceType = 88
	// IETFInterfaces_InterfaceType_fast corresponds to the value fast of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fast E_IETFInterfaces_InterfaceType = 89
	// IETFInterfaces_InterfaceType_fastEther corresponds to the value fastEther of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fastEther E_IETFInterfaces_InterfaceType = 90
	// IETFInterfaces_InterfaceType_fastEtherFX corresponds to the value fastEtherFX of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fastEtherFX E_IETFInterfaces_InterfaceType = 91
	// IETFInterfaces_InterfaceType_fastdsl corresponds to the value fastdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fastdsl E_IETFInterfaces_InterfaceType = 92
	// IETFInterfaces_InterfaceType_fcipLink corresponds to the value fcipLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fcipLink E_IETFInterfaces_InterfaceType = 93
	// IETFInterfaces_InterfaceType_fddi corresponds to the value fddi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fddi E_IETFInterfaces_InterfaceType = 94
	// IETFInterfaces_InterfaceType_fibreChannel corresponds to the value fibreChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fibreChannel E_IETFInterfaces_InterfaceType = 95
	// IETFInterfaces_InterfaceType_frDlciEndPt corresponds to the value frDlciEndPt of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frDlciEndPt E_IETFInterfaces_InterfaceType = 96
	// IETFInterfaces_InterfaceType_frForward corresponds to the value frForward of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frForward E_IETFInterfaces_InterfaceType = 97
	// IETFInterfaces_InterfaceType_frameRelay corresponds to the value frameRelay of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frameRelay E_IETFInterfaces_InterfaceType = 98
	// IETFInterfaces_InterfaceType_frameRelayInterconnect corresponds to the value frameRelayInterconnect of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frameRelayInterconnect E_IETFInterfaces_InterfaceType = 99
	// IETFInterfaces_InterfaceType_frameRelayMPI corresponds to the value frameRelayMPI of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frameRelayMPI E_IETFInterfaces_InterfaceType = 100
	// IETFInterfaces_InterfaceType_frameRelayService corresponds to the value frameRelayService of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frameRelayService E_IETFInterfaces_InterfaceType = 101
	// IETFInterfaces_InterfaceType_frf16MfrBundle corresponds to the value frf16MfrBundle of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frf16MfrBundle E_IETFInterfaces_InterfaceType = 102
	// IETFInterfaces_InterfaceType_g703at2mb corresponds to the value g703at2mb of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g703at2mb E_IETFInterfaces_InterfaceType = 103
	// IETFInterfaces_InterfaceType_g703at64k corresponds to the value g703at64k of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g703at64k E_IETFInterfaces_InterfaceType = 104
	// IETFInterfaces_InterfaceType_g9981 corresponds to the value g9981 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g9981 E_IETFInterfaces_InterfaceType = 105
	// IETFInterfaces_InterfaceType_g9982 corresponds to the value g9982 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g9982 E_IETFInterfaces_InterfaceType = 106
	// IETFInterfaces_InterfaceType_g9983 corresponds to the value g9983 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g9983 E_IETFInterfaces_InterfaceType = 107
	// IETFInterfaces_InterfaceType_gfast corresponds to the value gfast of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gfast E_IETFInterfaces_InterfaceType = 108
	// IETFInterfaces_InterfaceType_gfp corresponds to the value gfp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gfp E_IETFInterfaces_InterfaceType = 109
	// IETFInterfaces_InterfaceType_gigabitEthernet corresponds to the value gigabitEthernet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gigabitEthernet E_IETFInterfaces_InterfaceType = 110
	// IETFInterfaces_InterfaceType_gpon corresponds to the value gpon of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gpon E_IETFInterfaces_InterfaceType = 111
	// IETFInterfaces_InterfaceType_gr303IDT corresponds to the value gr303IDT of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gr303IDT E_IETFInterfaces_InterfaceType = 112
	// IETFInterfaces_InterfaceType_gr303RDT corresponds to the value gr303RDT of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gr303RDT E_IETFInterfaces_InterfaceType = 113
	// IETFInterfaces_InterfaceType_gtp corresponds to the value gtp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gtp E_IETFInterfaces_InterfaceType = 114
	// IETFInterfaces_InterfaceType_h323Gatekeeper corresponds to the value h323Gatekeeper of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_h323Gatekeeper E_IETFInterfaces_InterfaceType = 115
	// IETFInterfaces_InterfaceType_h323Proxy corresponds to the value h323Proxy of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_h323Proxy E_IETFInterfaces_InterfaceType = 116
	// IETFInterfaces_InterfaceType_hdh1822 corresponds to the value hdh1822 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hdh1822 E_IETFInterfaces_InterfaceType = 117
	// IETFInterfaces_InterfaceType_hdlc corresponds to the value hdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hdlc E_IETFInterfaces_InterfaceType = 118
	// IETFInterfaces_InterfaceType_hdsl2 corresponds to the value hdsl2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hdsl2 E_IETFInterfaces_InterfaceType = 119
	// IETFInterfaces_InterfaceType_hiperlan2 corresponds to the value hiperlan2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hiperlan2 E_IETFInterfaces_InterfaceType = 120
	// IETFInterfaces_InterfaceType_hippi corresponds to the value hippi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hippi E_IETFInterfaces_InterfaceType = 121
	// IETFInterfaces_InterfaceType_hippiInterface corresponds to the value hippiInterface of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hippiInterface E_IETFInterfaces_InterfaceType = 122
	// IETFInterfaces_InterfaceType_homepna corresponds to the value homepna of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_homepna E_IETFInterfaces_InterfaceType = 123
	// IETFInterfaces_InterfaceType_hostPad corresponds to the value hostPad of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hostPad E_IETFInterfaces_InterfaceType = 124
	// IETFInterfaces_InterfaceType_hssi corresponds to the value hssi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hssi E_IETFInterfaces_InterfaceType = 125
	// IETFInterfaces_InterfaceType_hyperchannel corresponds to the value hyperchannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hyperchannel E_IETFInterfaces_InterfaceType = 126
	// IETFInterfaces_InterfaceType_iana_interface_type corresponds to the value iana_interface_type of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iana_interface_type E_IETFInterfaces_InterfaceType = 127
	// IETFInterfaces_InterfaceType_ibm370parChan corresponds to the value ibm370parChan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ibm370parChan E_IETFInterfaces_InterfaceType = 128
	// IETFInterfaces_InterfaceType_idsl corresponds to the value idsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_idsl E_IETFInterfaces_InterfaceType = 129
	// IETFInterfaces_InterfaceType_ieee1394 corresponds to the value ieee1394 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee1394 E_IETFInterfaces_InterfaceType = 130
	// IETFInterfaces_InterfaceType_ieee80211 corresponds to the value ieee80211 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee80211 E_IETFInterfaces_InterfaceType = 131
	// IETFInterfaces_InterfaceType_ieee80212 corresponds to the value ieee80212 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee80212 E_IETFInterfaces_InterfaceType = 132
	// IETFInterfaces_InterfaceType_ieee802154 corresponds to the value ieee802154 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee802154 E_IETFInterfaces_InterfaceType = 133
	// IETFInterfaces_InterfaceType_ieee80216WMAN corresponds to the value ieee80216WMAN of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee80216WMAN E_IETFInterfaces_InterfaceType = 134
	// IETFInterfaces_InterfaceType_ieee8023adLag corresponds to the value ieee8023adLag of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee8023adLag E_IETFInterfaces_InterfaceType = 135
	// IETFInterfaces_InterfaceType_if_gsn corresponds to the value if_gsn of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_if_gsn E_IETFInterfaces_InterfaceType = 136
	// IETFInterfaces_InterfaceType_ifPwType corresponds to the value ifPwType of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ifPwType E_IETFInterfaces_InterfaceType = 137
	// IETFInterfaces_InterfaceType_ifVfiType corresponds to the value ifVfiType of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ifVfiType E_IETFInterfaces_InterfaceType = 138
	// IETFInterfaces_InterfaceType_ilan corresponds to the value ilan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ilan E_IETFInterfaces_InterfaceType = 139
	// IETFInterfaces_InterfaceType_imt corresponds to the value imt of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_imt E_IETFInterfaces_InterfaceType = 140
	// IETFInterfaces_InterfaceType_infiniband corresponds to the value infiniband of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_infiniband E_IETFInterfaces_InterfaceType = 141
	// IETFInterfaces_InterfaceType_interleave corresponds to the value interleave of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_interleave E_IETFInterfaces_InterfaceType = 142
	// IETFInterfaces_InterfaceType_ip corresponds to the value ip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ip E_IETFInterfaces_InterfaceType = 143
	// IETFInterfaces_InterfaceType_ipForward corresponds to the value ipForward of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipForward E_IETFInterfaces_InterfaceType = 144
	// IETFInterfaces_InterfaceType_ipOverAtm corresponds to the value ipOverAtm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipOverAtm E_IETFInterfaces_InterfaceType = 145
	// IETFInterfaces_InterfaceType_ipOverCdlc corresponds to the value ipOverCdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipOverCdlc E_IETFInterfaces_InterfaceType = 146
	// IETFInterfaces_InterfaceType_ipOverClaw corresponds to the value ipOverClaw of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipOverClaw E_IETFInterfaces_InterfaceType = 147
	// IETFInterfaces_InterfaceType_ipSwitch corresponds to the value ipSwitch of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipSwitch E_IETFInterfaces_InterfaceType = 148
	// IETFInterfaces_InterfaceType_isdn corresponds to the value isdn of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_isdn E_IETFInterfaces_InterfaceType = 149
	// IETFInterfaces_InterfaceType_isdns corresponds to the value isdns of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_isdns E_IETFInterfaces_InterfaceType = 150
	// IETFInterfaces_InterfaceType_isdnu corresponds to the value isdnu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_isdnu E_IETFInterfaces_InterfaceType = 151
	// IETFInterfaces_InterfaceType_iso88022llc corresponds to the value iso88022llc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88022llc E_IETFInterfaces_InterfaceType = 152
	// IETFInterfaces_InterfaceType_iso88023Csmacd corresponds to the value iso88023Csmacd of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88023Csmacd E_IETFInterfaces_InterfaceType = 153
	// IETFInterfaces_InterfaceType_iso88024TokenBus corresponds to the value iso88024TokenBus of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88024TokenBus E_IETFInterfaces_InterfaceType = 154
	// IETFInterfaces_InterfaceType_iso88025CRFPInt corresponds to the value iso88025CRFPInt of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88025CRFPInt E_IETFInterfaces_InterfaceType = 155
	// IETFInterfaces_InterfaceType_iso88025Dtr corresponds to the value iso88025Dtr of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88025Dtr E_IETFInterfaces_InterfaceType = 156
	// IETFInterfaces_InterfaceType_iso88025Fiber corresponds to the value iso88025Fiber of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88025Fiber E_IETFInterfaces_InterfaceType = 157
	// IETFInterfaces_InterfaceType_iso88025TokenRing corresponds to the value iso88025TokenRing of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88025TokenRing E_IETFInterfaces_InterfaceType = 158
	// IETFInterfaces_InterfaceType_iso88026Man corresponds to the value iso88026Man of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88026Man E_IETFInterfaces_InterfaceType = 159
	// IETFInterfaces_InterfaceType_isup corresponds to the value isup of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_isup E_IETFInterfaces_InterfaceType = 160
	// IETFInterfaces_InterfaceType_l2vlan corresponds to the value l2vlan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_l2vlan E_IETFInterfaces_InterfaceType = 161
	// IETFInterfaces_InterfaceType_l3ipvlan corresponds to the value l3ipvlan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_l3ipvlan E_IETFInterfaces_InterfaceType = 162
	// IETFInterfaces_InterfaceType_l3ipxvlan corresponds to the value l3ipxvlan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_l3ipxvlan E_IETFInterfaces_InterfaceType = 163
	// IETFInterfaces_InterfaceType_lapb corresponds to the value lapb of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_lapb E_IETFInterfaces_InterfaceType = 164
	// IETFInterfaces_InterfaceType_lapd corresponds to the value lapd of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_lapd E_IETFInterfaces_InterfaceType = 165
	// IETFInterfaces_InterfaceType_lapf corresponds to the value lapf of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_lapf E_IETFInterfaces_InterfaceType = 166
	// IETFInterfaces_InterfaceType_linegroup corresponds to the value linegroup of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_linegroup E_IETFInterfaces_InterfaceType = 167
	// IETFInterfaces_InterfaceType_lmp corresponds to the value lmp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_lmp E_IETFInterfaces_InterfaceType = 168
	// IETFInterfaces_InterfaceType_localTalk corresponds to the value localTalk of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_localTalk E_IETFInterfaces_InterfaceType = 169
	// IETFInterfaces_InterfaceType_macSecControlledIF corresponds to the value macSecControlledIF of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_macSecControlledIF E_IETFInterfaces_InterfaceType = 170
	// IETFInterfaces_InterfaceType_macSecUncontrolledIF corresponds to the value macSecUncontrolledIF of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_macSecUncontrolledIF E_IETFInterfaces_InterfaceType = 171
	// IETFInterfaces_InterfaceType_mediaMailOverIp corresponds to the value mediaMailOverIp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mediaMailOverIp E_IETFInterfaces_InterfaceType = 172
	// IETFInterfaces_InterfaceType_mfSigLink corresponds to the value mfSigLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mfSigLink E_IETFInterfaces_InterfaceType = 173
	// IETFInterfaces_InterfaceType_miox25 corresponds to the value miox25 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_miox25 E_IETFInterfaces_InterfaceType = 174
	// IETFInterfaces_InterfaceType_mocaVersion1 corresponds to the value mocaVersion1 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mocaVersion1 E_IETFInterfaces_InterfaceType = 175
	// IETFInterfaces_InterfaceType_modem corresponds to the value modem of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_modem E_IETFInterfaces_InterfaceType = 176
	// IETFInterfaces_InterfaceType_mpc corresponds to the value mpc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mpc E_IETFInterfaces_InterfaceType = 177
	// IETFInterfaces_InterfaceType_mpegTransport corresponds to the value mpegTransport of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mpegTransport E_IETFInterfaces_InterfaceType = 178
	// IETFInterfaces_InterfaceType_mpls corresponds to the value mpls of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mpls E_IETFInterfaces_InterfaceType = 179
	// IETFInterfaces_InterfaceType_mplsTunnel corresponds to the value mplsTunnel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mplsTunnel E_IETFInterfaces_InterfaceType = 180
	// IETFInterfaces_InterfaceType_msdsl corresponds to the value msdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_msdsl E_IETFInterfaces_InterfaceType = 181
	// IETFInterfaces_InterfaceType_mvl corresponds to the value mvl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mvl E_IETFInterfaces_InterfaceType = 182
	// IETFInterfaces_InterfaceType_myrinet corresponds to the value myrinet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_myrinet E_IETFInterfaces_InterfaceType = 183
	// IETFInterfaces_InterfaceType_nfas corresponds to the value nfas of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_nfas E_IETFInterfaces_InterfaceType = 184
	// IETFInterfaces_InterfaceType_nsip corresponds to the value nsip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_nsip E_IETFInterfaces_InterfaceType = 185
	// IETFInterfaces_InterfaceType_opticalChannel corresponds to the value opticalChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_opticalChannel E_IETFInterfaces_InterfaceType = 186
	// IETFInterfaces_InterfaceType_opticalChannelGroup corresponds to the value opticalChannelGroup of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_opticalChannelGroup E_IETFInterfaces_InterfaceType = 187
	// IETFInterfaces_InterfaceType_opticalTransport corresponds to the value opticalTransport of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_opticalTransport E_IETFInterfaces_InterfaceType = 188
	// IETFInterfaces_InterfaceType_other corresponds to the value other of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_other E_IETFInterfaces_InterfaceType = 189
	// IETFInterfaces_InterfaceType_otnOdu corresponds to the value otnOdu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_otnOdu E_IETFInterfaces_InterfaceType = 190
	// IETFInterfaces_InterfaceType_otnOtu corresponds to the value otnOtu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_otnOtu E_IETFInterfaces_InterfaceType = 191
	// IETFInterfaces_InterfaceType_para corresponds to the value para of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_para E_IETFInterfaces_InterfaceType = 192
	// IETFInterfaces_InterfaceType_pdnEtherLoop1 corresponds to the value pdnEtherLoop1 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pdnEtherLoop1 E_IETFInterfaces_InterfaceType = 193
	// IETFInterfaces_InterfaceType_pdnEtherLoop2 corresponds to the value pdnEtherLoop2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pdnEtherLoop2 E_IETFInterfaces_InterfaceType = 194
	// IETFInterfaces_InterfaceType_pip corresponds to the value pip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pip E_IETFInterfaces_InterfaceType = 195
	// IETFInterfaces_InterfaceType_plc corresponds to the value plc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_plc E_IETFInterfaces_InterfaceType = 196
	// IETFInterfaces_InterfaceType_pon155 corresponds to the value pon155 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pon155 E_IETFInterfaces_InterfaceType = 197
	// IETFInterfaces_InterfaceType_pon622 corresponds to the value pon622 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pon622 E_IETFInterfaces_InterfaceType = 198
	// IETFInterfaces_InterfaceType_pos corresponds to the value pos of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pos E_IETFInterfaces_InterfaceType = 199
	// IETFInterfaces_InterfaceType_ppp corresponds to the value ppp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ppp E_IETFInterfaces_InterfaceType = 200
	// IETFInterfaces_InterfaceType_pppMultilinkBundle corresponds to the value pppMultilinkBundle of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pppMultilinkBundle E_IETFInterfaces_InterfaceType = 201
	// IETFInterfaces_InterfaceType_primaryISDN corresponds to the value primaryISDN of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_primaryISDN E_IETFInterfaces_InterfaceType = 202
	// IETFInterfaces_InterfaceType_propAtm corresponds to the value propAtm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propAtm E_IETFInterfaces_InterfaceType = 203
	// IETFInterfaces_InterfaceType_propBWAp2Mp corresponds to the value propBWAp2Mp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propBWAp2Mp E_IETFInterfaces_InterfaceType = 204
	// IETFInterfaces_InterfaceType_propCnls corresponds to the value propCnls of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propCnls E_IETFInterfaces_InterfaceType = 205
	// IETFInterfaces_InterfaceType_propDocsWirelessDownstream corresponds to the value propDocsWirelessDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propDocsWirelessDownstream E_IETFInterfaces_InterfaceType = 206
	// IETFInterfaces_InterfaceType_propDocsWirelessMaclayer corresponds to the value propDocsWirelessMaclayer of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propDocsWirelessMaclayer E_IETFInterfaces_InterfaceType = 207
	// IETFInterfaces_InterfaceType_propDocsWirelessUpstream corresponds to the value propDocsWirelessUpstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propDocsWirelessUpstream E_IETFInterfaces_InterfaceType = 208
	// IETFInterfaces_InterfaceType_propMultiplexor corresponds to the value propMultiplexor of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propMultiplexor E_IETFInterfaces_InterfaceType = 209
	// IETFInterfaces_InterfaceType_propPointToPointSerial corresponds to the value propPointToPointSerial of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propPointToPointSerial E_IETFInterfaces_InterfaceType = 210
	// IETFInterfaces_InterfaceType_propVirtual corresponds to the value propVirtual of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propVirtual E_IETFInterfaces_InterfaceType = 211
	// IETFInterfaces_InterfaceType_propWirelessP2P corresponds to the value propWirelessP2P of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propWirelessP2P E_IETFInterfaces_InterfaceType = 212
	// IETFInterfaces_InterfaceType_proteon10Mbit corresponds to the value proteon10Mbit of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_proteon10Mbit E_IETFInterfaces_InterfaceType = 213
	// IETFInterfaces_InterfaceType_proteon80Mbit corresponds to the value proteon80Mbit of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_proteon80Mbit E_IETFInterfaces_InterfaceType = 214
	// IETFInterfaces_InterfaceType_ptm corresponds to the value ptm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ptm E_IETFInterfaces_InterfaceType = 215
	// IETFInterfaces_InterfaceType_q2931 corresponds to the value q2931 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_q2931 E_IETFInterfaces_InterfaceType = 216
	// IETFInterfaces_InterfaceType_qam corresponds to the value qam of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_qam E_IETFInterfaces_InterfaceType = 217
	// IETFInterfaces_InterfaceType_qllc corresponds to the value qllc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_qllc E_IETFInterfaces_InterfaceType = 218
	// IETFInterfaces_InterfaceType_radioMAC corresponds to the value radioMAC of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_radioMAC E_IETFInterfaces_InterfaceType = 219
	// IETFInterfaces_InterfaceType_radsl corresponds to the value radsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_radsl E_IETFInterfaces_InterfaceType = 220
	// IETFInterfaces_InterfaceType_reachDSL corresponds to the value reachDSL of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_reachDSL E_IETFInterfaces_InterfaceType = 221
	// IETFInterfaces_InterfaceType_regular1822 corresponds to the value regular1822 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_regular1822 E_IETFInterfaces_InterfaceType = 222
	// IETFInterfaces_InterfaceType_rfc1483 corresponds to the value rfc1483 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rfc1483 E_IETFInterfaces_InterfaceType = 223
	// IETFInterfaces_InterfaceType_rfc877x25 corresponds to the value rfc877x25 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rfc877x25 E_IETFInterfaces_InterfaceType = 224
	// IETFInterfaces_InterfaceType_rpr corresponds to the value rpr of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rpr E_IETFInterfaces_InterfaceType = 225
	// IETFInterfaces_InterfaceType_rs232 corresponds to the value rs232 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rs232 E_IETFInterfaces_InterfaceType = 226
	// IETFInterfaces_InterfaceType_rsrb corresponds to the value rsrb of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rsrb E_IETFInterfaces_InterfaceType = 227
	// IETFInterfaces_InterfaceType_sdci corresponds to the value sdci of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sdci E_IETFInterfaces_InterfaceType = 228
	// IETFInterfaces_InterfaceType_sdlc corresponds to the value sdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sdlc E_IETFInterfaces_InterfaceType = 229
	// IETFInterfaces_InterfaceType_sdsl corresponds to the value sdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sdsl E_IETFInterfaces_InterfaceType = 230
	// IETFInterfaces_InterfaceType_shdsl corresponds to the value shdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_shdsl E_IETFInterfaces_InterfaceType = 231
	// IETFInterfaces_InterfaceType_sip corresponds to the value sip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sip E_IETFInterfaces_InterfaceType = 232
	// IETFInterfaces_InterfaceType_sipSig corresponds to the value sipSig of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sipSig E_IETFInterfaces_InterfaceType = 233
	// IETFInterfaces_InterfaceType_sipTg corresponds to the value sipTg of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sipTg E_IETFInterfaces_InterfaceType = 234
	// IETFInterfaces_InterfaceType_sixToFour corresponds to the value sixToFour of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sixToFour E_IETFInterfaces_InterfaceType = 235
	// IETFInterfaces_InterfaceType_slip corresponds to the value slip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_slip E_IETFInterfaces_InterfaceType = 236
	// IETFInterfaces_InterfaceType_smdsDxi corresponds to the value smdsDxi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_smdsDxi E_IETFInterfaces_InterfaceType = 237
	// IETFInterfaces_InterfaceType_smdsIcip corresponds to the value smdsIcip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_smdsIcip E_IETFInterfaces_InterfaceType = 238
	// IETFInterfaces_InterfaceType_softwareLoopback corresponds to the value softwareLoopback of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_softwareLoopback E_IETFInterfaces_InterfaceType = 239
	// IETFInterfaces_InterfaceType_sonet corresponds to the value sonet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sonet E_IETFInterfaces_InterfaceType = 240
	// IETFInterfaces_InterfaceType_sonetOverheadChannel corresponds to the value sonetOverheadChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sonetOverheadChannel E_IETFInterfaces_InterfaceType = 241
	// IETFInterfaces_InterfaceType_sonetPath corresponds to the value sonetPath of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sonetPath E_IETFInterfaces_InterfaceType = 242
	// IETFInterfaces_InterfaceType_sonetVT corresponds to the value sonetVT of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sonetVT E_IETFInterfaces_InterfaceType = 243
	// IETFInterfaces_InterfaceType_srp corresponds to the value srp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_srp E_IETFInterfaces_InterfaceType = 244
	// IETFInterfaces_InterfaceType_ss7SigLink corresponds to the value ss7SigLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ss7SigLink E_IETFInterfaces_InterfaceType = 245
	// IETFInterfaces_InterfaceType_stackToStack corresponds to the value stackToStack of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_stackToStack E_IETFInterfaces_InterfaceType = 246
	// IETFInterfaces_InterfaceType_starLan corresponds to the value starLan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_starLan E_IETFInterfaces_InterfaceType = 247
	// IETFInterfaces_InterfaceType_tdlc corresponds to the value tdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_tdlc E_IETFInterfaces_InterfaceType = 248
	// IETFInterfaces_InterfaceType_teLink corresponds to the value teLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_teLink E_IETFInterfaces_InterfaceType = 249
	// IETFInterfaces_InterfaceType_termPad corresponds to the value termPad of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_termPad E_IETFInterfaces_InterfaceType = 250
	// IETFInterfaces_InterfaceType_tr008 corresponds to the value tr008 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_tr008 E_IETFInterfaces_InterfaceType = 251
	// IETFInterfaces_InterfaceType_transpHdlc corresponds to the value transpHdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_transpHdlc E_IETFInterfaces_InterfaceType = 252
	// IETFInterfaces_InterfaceType_tunnel corresponds to the value tunnel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_tunnel E_IETFInterfaces_InterfaceType = 253
	// IETFInterfaces_InterfaceType_ultra corresponds to the value ultra of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ultra E_IETFInterfaces_InterfaceType = 254
	// IETFInterfaces_InterfaceType_usb corresponds to the value usb of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_usb E_IETFInterfaces_InterfaceType = 255
	// IETFInterfaces_InterfaceType_v11 corresponds to the value v11 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_v11 E_IETFInterfaces_InterfaceType = 256
	// IETFInterfaces_InterfaceType_v35 corresponds to the value v35 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_v35 E_IETFInterfaces_InterfaceType = 257
	// IETFInterfaces_InterfaceType_v36 corresponds to the value v36 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_v36 E_IETFInterfaces_InterfaceType = 258
	// IETFInterfaces_InterfaceType_v37 corresponds to the value v37 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_v37 E_IETFInterfaces_InterfaceType = 259
	// IETFInterfaces_InterfaceType_vdsl corresponds to the value vdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_vdsl E_IETFInterfaces_InterfaceType = 260
	// IETFInterfaces_InterfaceType_vdsl2 corresponds to the value vdsl2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_vdsl2 E_IETFInterfaces_InterfaceType = 261
	// IETFInterfaces_InterfaceType_virtualIpAddress corresponds to the value virtualIpAddress of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_virtualIpAddress E_IETFInterfaces_InterfaceType = 262
	// IETFInterfaces_InterfaceType_virtualTg corresponds to the value virtualTg of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_virtualTg E_IETFInterfaces_InterfaceType = 263
	// IETFInterfaces_InterfaceType_vmwareNicTeam corresponds to the value vmwareNicTeam of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_vmwareNicTeam E_IETFInterfaces_InterfaceType = 264
	// IETFInterfaces_InterfaceType_vmwareVirtualNic corresponds to the value vmwareVirtualNic of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_vmwareVirtualNic E_IETFInterfaces_InterfaceType = 265
	// IETFInterfaces_InterfaceType_voiceDID corresponds to the value voiceDID of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceDID E_IETFInterfaces_InterfaceType = 266
	// IETFInterfaces_InterfaceType_voiceEBS corresponds to the value voiceEBS of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceEBS E_IETFInterfaces_InterfaceType = 267
	// IETFInterfaces_InterfaceType_voiceEM corresponds to the value voiceEM of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceEM E_IETFInterfaces_InterfaceType = 268
	// IETFInterfaces_InterfaceType_voiceEMFGD corresponds to the value voiceEMFGD of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceEMFGD E_IETFInterfaces_InterfaceType = 269
	// IETFInterfaces_InterfaceType_voiceEncap corresponds to the value voiceEncap of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceEncap E_IETFInterfaces_InterfaceType = 270
	// IETFInterfaces_InterfaceType_voiceFGDEANA corresponds to the value voiceFGDEANA of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceFGDEANA E_IETFInterfaces_InterfaceType = 271
	// IETFInterfaces_InterfaceType_voiceFGDOS corresponds to the value voiceFGDOS of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceFGDOS E_IETFInterfaces_InterfaceType = 272
	// IETFInterfaces_InterfaceType_voiceFXO corresponds to the value voiceFXO of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceFXO E_IETFInterfaces_InterfaceType = 273
	// IETFInterfaces_InterfaceType_voiceFXS corresponds to the value voiceFXS of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceFXS E_IETFInterfaces_InterfaceType = 274
	// IETFInterfaces_InterfaceType_voiceOverAtm corresponds to the value voiceOverAtm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceOverAtm E_IETFInterfaces_InterfaceType = 275
	// IETFInterfaces_InterfaceType_voiceOverCable corresponds to the value voiceOverCable of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceOverCable E_IETFInterfaces_InterfaceType = 276
	// IETFInterfaces_InterfaceType_voiceOverFrameRelay corresponds to the value voiceOverFrameRelay of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceOverFrameRelay E_IETFInterfaces_InterfaceType = 277
	// IETFInterfaces_InterfaceType_voiceOverIp corresponds to the value voiceOverIp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceOverIp E_IETFInterfaces_InterfaceType = 278
	// IETFInterfaces_InterfaceType_wwanPP corresponds to the value wwanPP of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_wwanPP E_IETFInterfaces_InterfaceType = 279
	// IETFInterfaces_InterfaceType_wwanPP2 corresponds to the value wwanPP2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_wwanPP2 E_IETFInterfaces_InterfaceType = 280
	// IETFInterfaces_InterfaceType_x213 corresponds to the value x213 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x213 E_IETFInterfaces_InterfaceType = 281
	// IETFInterfaces_InterfaceType_x25huntGroup corresponds to the value x25huntGroup of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x25huntGroup E_IETFInterfaces_InterfaceType = 282
	// IETFInterfaces_InterfaceType_x25mlp corresponds to the value x25mlp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x25mlp E_IETFInterfaces_InterfaceType = 283
	// IETFInterfaces_InterfaceType_x25ple corresponds to the value x25ple of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x25ple E_IETFInterfaces_InterfaceType = 284
	// IETFInterfaces_InterfaceType_x86Laps corresponds to the value x86Laps of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x86Laps E_IETFInterfaces_InterfaceType = 285
	// IETFInterfaces_InterfaceType_xboxWireless corresponds to the value xboxWireless of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_xboxWireless E_IETFInterfaces_InterfaceType = 286
)

// E_IfAggregate_AggregationType is a derived int64 type which is used to represent
// the enumerated node IfAggregate_AggregationType. An additional value named
// IfAggregate_AggregationType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IfAggregate_AggregationType int64

// IsYANGGoEnum ensures that IfAggregate_AggregationType implements the yang.GoEnum
// interface. This ensures that IfAggregate_AggregationType can be identified as a
// mapped type for a YANG enumeration.
func (E_IfAggregate_AggregationType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IfAggregate_AggregationType.
func (E_IfAggregate_AggregationType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_IfAggregate_AggregationType.
func (e E_IfAggregate_AggregationType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IfAggregate_AggregationType")
}

const (
	// IfAggregate_AggregationType_UNSET corresponds to the value UNSET of IfAggregate_AggregationType
	IfAggregate_AggregationType_UNSET E_IfAggregate_AggregationType = 0
	// IfAggregate_AggregationType_LACP corresponds to the value LACP of IfAggregate_AggregationType
	IfAggregate_AggregationType_LACP E_IfAggregate_AggregationType = 1
	// IfAggregate_AggregationType_STATIC corresponds to the value STATIC of IfAggregate_AggregationType
	IfAggregate_AggregationType_STATIC E_IfAggregate_AggregationType = 2
)

// E_IfEthernet_ETHERNET_SPEED is a derived int64 type which is used to represent
// the enumerated node IfEthernet_ETHERNET_SPEED. An additional value named
// IfEthernet_ETHERNET_SPEED_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IfEthernet_ETHERNET_SPEED int64

// IsYANGGoEnum ensures that IfEthernet_ETHERNET_SPEED implements the yang.GoEnum
// interface. This ensures that IfEthernet_ETHERNET_SPEED can be identified as a
// mapped type for a YANG enumeration.
func (E_IfEthernet_ETHERNET_SPEED) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IfEthernet_ETHERNET_SPEED.
func (E_IfEthernet_ETHERNET_SPEED) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_IfEthernet_ETHERNET_SPEED.
func (e E_IfEthernet_ETHERNET_SPEED) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IfEthernet_ETHERNET_SPEED")
}

const (
	// IfEthernet_ETHERNET_SPEED_UNSET corresponds to the value UNSET of IfEthernet_ETHERNET_SPEED
	IfEthernet_ETHERNET_SPEED_UNSET E_IfEthernet_ETHERNET_SPEED = 0
	// IfEthernet_ETHERNET_SPEED_SPEED_100GB corresponds to the value SPEED_100GB of IfEthernet_ETHERNET_SPEED
	IfEthernet_ETHERNET_SPEED_SPEED_100GB E_IfEthernet_ETHERNET_SPEED = 1
	// IfEthernet_ETHERNET_SPEED_SPEED_100MB corresponds to the value SPEED_100MB of IfEthernet_ETHERNET_SPEED
	IfEthernet_ETHERNET_SPEED_SPEED_100MB E_IfEthernet_ETHERNET_SPEED = 2
	// IfEthernet_ETHERNET_SPEED_SPEED_10GB corresponds to the value SPEED_10GB of IfEthernet_ETHERNET_SPEED
	IfEthernet_ETHERNET_SPEED_SPEED_10GB E_IfEthernet_ETHERNET_SPEED = 3
	// IfEthernet_ETHERNET_SPEED_SPEED_10MB corresponds to the value SPEED_10MB of IfEthernet_ETHERNET_SPEED
	IfEthernet_ETHERNET_SPEED_SPEED_10MB E_IfEthernet_ETHERNET_SPEED = 4
	// IfEthernet_ETHERNET_SPEED_SPEED_1GB corresponds to the value SPEED_1GB of IfEthernet_ETHERNET_SPEED
	IfEthernet_ETHERNET_SPEED_SPEED_1GB E_IfEthernet_ETHERNET_SPEED = 5
	// IfEthernet_ETHERNET_SPEED_SPEED_200GB corresponds to the value SPEED_200GB of IfEthernet_ETHERNET_SPEED
	IfEthernet_ETHERNET_SPEED_SPEED_200GB E_IfEthernet_ETHERNET_SPEED = 6
	// IfEthernet_ETHERNET_SPEED_SPEED_2500MB corresponds to the value SPEED_2500MB of IfEthernet_ETHERNET_SPEED
	IfEthernet_ETHERNET_SPEED_SPEED_2500MB E_IfEthernet_ETHERNET_SPEED = 7
	// IfEthernet_ETHERNET_SPEED_SPEED_25GB corresponds to the value SPEED_25GB of IfEthernet_ETHERNET_SPEED
	IfEthernet_ETHERNET_SPEED_SPEED_25GB E_IfEthernet_ETHERNET_SPEED = 8
	// IfEthernet_ETHERNET_SPEED_SPEED_400GB corresponds to the value SPEED_400GB of IfEthernet_ETHERNET_SPEED
	IfEthernet_ETHERNET_SPEED_SPEED_400GB E_IfEthernet_ETHERNET_SPEED = 9
	// IfEthernet_ETHERNET_SPEED_SPEED_40GB corresponds to the value SPEED_40GB of IfEthernet_ETHERNET_SPEED
	IfEthernet_ETHERNET_SPEED_SPEED_40GB E_IfEthernet_ETHERNET_SPEED = 10
	// IfEthernet_ETHERNET_SPEED_SPEED_50GB corresponds to the value SPEED_50GB of IfEthernet_ETHERNET_SPEED
	IfEthernet_ETHERNET_SPEED_SPEED_50GB E_IfEthernet_ETHERNET_SPEED = 11
	// IfEthernet_ETHERNET_SPEED_SPEED_5GB corresponds to the value SPEED_5GB of IfEthernet_ETHERNET_SPEED
	IfEthernet_ETHERNET_SPEED_SPEED_5GB E_IfEthernet_ETHERNET_SPEED = 12
	// IfEthernet_ETHERNET_SPEED_SPEED_600GB corresponds to the value SPEED_600GB of IfEthernet_ETHERNET_SPEED
	IfEthernet_ETHERNET_SPEED_SPEED_600GB E_IfEthernet_ETHERNET_SPEED = 13
	// IfEthernet_ETHERNET_SPEED_SPEED_800GB corresponds to the value SPEED_800GB of IfEthernet_ETHERNET_SPEED
	IfEthernet_ETHERNET_SPEED_SPEED_800GB E_IfEthernet_ETHERNET_SPEED = 14
	// IfEthernet_ETHERNET_SPEED_SPEED_UNKNOWN corresponds to the value SPEED_UNKNOWN of IfEthernet_ETHERNET_SPEED
	IfEthernet_ETHERNET_SPEED_SPEED_UNKNOWN E_IfEthernet_ETHERNET_SPEED = 15
)

// E_IfIp_IpAddressOrigin is a derived int64 type which is used to represent
// the enumerated node IfIp_IpAddressOrigin. An additional value named
// IfIp_IpAddressOrigin_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IfIp_IpAddressOrigin int64

// IsYANGGoEnum ensures that IfIp_IpAddressOrigin implements the yang.GoEnum
// interface. This ensures that IfIp_IpAddressOrigin can be identified as a
// mapped type for a YANG enumeration.
func (E_IfIp_IpAddressOrigin) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IfIp_IpAddressOrigin.
func (E_IfIp_IpAddressOrigin) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_IfIp_IpAddressOrigin.
func (e E_IfIp_IpAddressOrigin) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IfIp_IpAddressOrigin")
}

const (
	// IfIp_IpAddressOrigin_UNSET corresponds to the value UNSET of IfIp_IpAddressOrigin
	IfIp_IpAddressOrigin_UNSET E_IfIp_IpAddressOrigin = 0
	// IfIp_IpAddressOrigin_OTHER corresponds to the value OTHER of IfIp_IpAddressOrigin
	IfIp_IpAddressOrigin_OTHER E_IfIp_IpAddressOrigin = 1
	// IfIp_IpAddressOrigin_STATIC corresponds to the value STATIC of IfIp_IpAddressOrigin
	IfIp_IpAddressOrigin_STATIC E_IfIp_IpAddressOrigin = 2
	// IfIp_IpAddressOrigin_DHCP corresponds to the value DHCP of IfIp_IpAddressOrigin
	IfIp_IpAddressOrigin_DHCP E_IfIp_IpAddressOrigin = 3
	// IfIp_IpAddressOrigin_LINK_LAYER corresponds to the value LINK_LAYER of IfIp_IpAddressOrigin
	IfIp_IpAddressOrigin_LINK_LAYER E_IfIp_IpAddressOrigin = 4
	// IfIp_IpAddressOrigin_RANDOM corresponds to the value RANDOM of IfIp_IpAddressOrigin
	IfIp_IpAddressOrigin_RANDOM E_IfIp_IpAddressOrigin = 5
)

// E_IfIp_NeighborOrigin is a derived int64 type which is used to represent
// the enumerated node IfIp_NeighborOrigin. An additional value named
// IfIp_NeighborOrigin_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IfIp_NeighborOrigin int64

// IsYANGGoEnum ensures that IfIp_NeighborOrigin implements the yang.GoEnum
// interface. This ensures that IfIp_NeighborOrigin can be identified as a
// mapped type for a YANG enumeration.
func (E_IfIp_NeighborOrigin) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IfIp_NeighborOrigin.
func (E_IfIp_NeighborOrigin) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_IfIp_NeighborOrigin.
func (e E_IfIp_NeighborOrigin) String() string {
	return ygot.EnumLogString(e, int64(e), "E_IfIp_NeighborOrigin")
}

const (
	// IfIp_NeighborOrigin_UNSET corresponds to the value UNSET of IfIp_NeighborOrigin
	IfIp_NeighborOrigin_UNSET E_IfIp_NeighborOrigin = 0
	// IfIp_NeighborOrigin_OTHER corresponds to the value OTHER of IfIp_NeighborOrigin
	IfIp_NeighborOrigin_OTHER E_IfIp_NeighborOrigin = 1
	// IfIp_NeighborOrigin_STATIC corresponds to the value STATIC of IfIp_NeighborOrigin
	IfIp_NeighborOrigin_STATIC E_IfIp_NeighborOrigin = 2
	// IfIp_NeighborOrigin_DYNAMIC corresponds to the value DYNAMIC of IfIp_NeighborOrigin
	IfIp_NeighborOrigin_DYNAMIC E_IfIp_NeighborOrigin = 3
)

// E_Interface_AdminStatus is a derived int64 type which is used to represent
// the enumerated node Interface_AdminStatus. An additional value named
// Interface_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Interface_AdminStatus int64

// IsYANGGoEnum ensures that Interface_AdminStatus implements the yang.GoEnum
// interface. This ensures that Interface_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_Interface_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Interface_AdminStatus.
func (E_Interface_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_Interface_AdminStatus.
func (e E_Interface_AdminStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Interface_AdminStatus")
}

const (
	// Interface_AdminStatus_UNSET corresponds to the value UNSET of Interface_AdminStatus
	Interface_AdminStatus_UNSET E_Interface_AdminStatus = 0
	// Interface_AdminStatus_UP corresponds to the value UP of Interface_AdminStatus
	Interface_AdminStatus_UP E_Interface_AdminStatus = 1
	// Interface_AdminStatus_DOWN corresponds to the value DOWN of Interface_AdminStatus
	Interface_AdminStatus_DOWN E_Interface_AdminStatus = 2
	// Interface_AdminStatus_TESTING corresponds to the value TESTING of Interface_AdminStatus
	Interface_AdminStatus_TESTING E_Interface_AdminStatus = 3
)

// E_Interface_OperStatus is a derived int64 type which is used to represent
// the enumerated node Interface_OperStatus. An additional value named
// Interface_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Interface_OperStatus int64

// IsYANGGoEnum ensures that Interface_OperStatus implements the yang.GoEnum
// interface. This ensures that Interface_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_Interface_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Interface_OperStatus.
func (E_Interface_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_Interface_OperStatus.
func (e E_Interface_OperStatus) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Interface_OperStatus")
}

const (
	// Interface_OperStatus_UNSET corresponds to the value UNSET of Interface_OperStatus
	Interface_OperStatus_UNSET E_Interface_OperStatus = 0
	// Interface_OperStatus_UP corresponds to the value UP of Interface_OperStatus
	Interface_OperStatus_UP E_Interface_OperStatus = 2
	// Interface_OperStatus_DOWN corresponds to the value DOWN of Interface_OperStatus
	Interface_OperStatus_DOWN E_Interface_OperStatus = 3
	// Interface_OperStatus_TESTING corresponds to the value TESTING of Interface_OperStatus
	Interface_OperStatus_TESTING E_Interface_OperStatus = 4
	// Interface_OperStatus_UNKNOWN corresponds to the value UNKNOWN of Interface_OperStatus
	Interface_OperStatus_UNKNOWN E_Interface_OperStatus = 5
	// Interface_OperStatus_DORMANT corresponds to the value DORMANT of Interface_OperStatus
	Interface_OperStatus_DORMANT E_Interface_OperStatus = 6
	// Interface_OperStatus_NOT_PRESENT corresponds to the value NOT_PRESENT of Interface_OperStatus
	Interface_OperStatus_NOT_PRESENT E_Interface_OperStatus = 7
	// Interface_OperStatus_LOWER_LAYER_DOWN corresponds to the value LOWER_LAYER_DOWN of Interface_OperStatus
	Interface_OperStatus_LOWER_LAYER_DOWN E_Interface_OperStatus = 8
)

// E_LocalRouting_LOCAL_DEFINED_NEXT_HOP is a derived int64 type which is used to represent
// the enumerated node LocalRouting_LOCAL_DEFINED_NEXT_HOP. An additional value named
// LocalRouting_LOCAL_DEFINED_NEXT_HOP_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_LocalRouting_LOCAL_DEFINED_NEXT_HOP int64

// IsYANGGoEnum ensures that LocalRouting_LOCAL_DEFINED_NEXT_HOP implements the yang.GoEnum
// interface. This ensures that LocalRouting_LOCAL_DEFINED_NEXT_HOP can be identified as a
// mapped type for a YANG enumeration.
func (E_LocalRouting_LOCAL_DEFINED_NEXT_HOP) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  LocalRouting_LOCAL_DEFINED_NEXT_HOP.
func (E_LocalRouting_LOCAL_DEFINED_NEXT_HOP) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_LocalRouting_LOCAL_DEFINED_NEXT_HOP.
func (e E_LocalRouting_LOCAL_DEFINED_NEXT_HOP) String() string {
	return ygot.EnumLogString(e, int64(e), "E_LocalRouting_LOCAL_DEFINED_NEXT_HOP")
}

const (
	// LocalRouting_LOCAL_DEFINED_NEXT_HOP_UNSET corresponds to the value UNSET of LocalRouting_LOCAL_DEFINED_NEXT_HOP
	LocalRouting_LOCAL_DEFINED_NEXT_HOP_UNSET E_LocalRouting_LOCAL_DEFINED_NEXT_HOP = 0
	// LocalRouting_LOCAL_DEFINED_NEXT_HOP_DROP corresponds to the value DROP of LocalRouting_LOCAL_DEFINED_NEXT_HOP
	LocalRouting_LOCAL_DEFINED_NEXT_HOP_DROP E_LocalRouting_LOCAL_DEFINED_NEXT_HOP = 1
	// LocalRouting_LOCAL_DEFINED_NEXT_HOP_LOCAL_LINK corresponds to the value LOCAL_LINK of LocalRouting_LOCAL_DEFINED_NEXT_HOP
	LocalRouting_LOCAL_DEFINED_NEXT_HOP_LOCAL_LINK E_LocalRouting_LOCAL_DEFINED_NEXT_HOP = 2
)

// E_MplsTypes_MplsLabel_Enum is a derived int64 type which is used to represent
// the enumerated node MplsTypes_MplsLabel_Enum. An additional value named
// MplsTypes_MplsLabel_Enum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_MplsTypes_MplsLabel_Enum int64

// IsYANGGoEnum ensures that MplsTypes_MplsLabel_Enum implements the yang.GoEnum
// interface. This ensures that MplsTypes_MplsLabel_Enum can be identified as a
// mapped type for a YANG enumeration.
func (E_MplsTypes_MplsLabel_Enum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  MplsTypes_MplsLabel_Enum.
func (E_MplsTypes_MplsLabel_Enum) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_MplsTypes_MplsLabel_Enum.
func (e E_MplsTypes_MplsLabel_Enum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_MplsTypes_MplsLabel_Enum")
}

const (
	// MplsTypes_MplsLabel_Enum_UNSET corresponds to the value UNSET of MplsTypes_MplsLabel_Enum
	MplsTypes_MplsLabel_Enum_UNSET E_MplsTypes_MplsLabel_Enum = 0
	// MplsTypes_MplsLabel_Enum_IPV4_EXPLICIT_NULL corresponds to the value IPV4_EXPLICIT_NULL of MplsTypes_MplsLabel_Enum
	MplsTypes_MplsLabel_Enum_IPV4_EXPLICIT_NULL E_MplsTypes_MplsLabel_Enum = 1
	// MplsTypes_MplsLabel_Enum_ROUTER_ALERT corresponds to the value ROUTER_ALERT of MplsTypes_MplsLabel_Enum
	MplsTypes_MplsLabel_Enum_ROUTER_ALERT E_MplsTypes_MplsLabel_Enum = 2
	// MplsTypes_MplsLabel_Enum_IPV6_EXPLICIT_NULL corresponds to the value IPV6_EXPLICIT_NULL of MplsTypes_MplsLabel_Enum
	MplsTypes_MplsLabel_Enum_IPV6_EXPLICIT_NULL E_MplsTypes_MplsLabel_Enum = 3
	// MplsTypes_MplsLabel_Enum_IMPLICIT_NULL corresponds to the value IMPLICIT_NULL of MplsTypes_MplsLabel_Enum
	MplsTypes_MplsLabel_Enum_IMPLICIT_NULL E_MplsTypes_MplsLabel_Enum = 4
	// MplsTypes_MplsLabel_Enum_ENTROPY_LABEL_INDICATOR corresponds to the value ENTROPY_LABEL_INDICATOR of MplsTypes_MplsLabel_Enum
	MplsTypes_MplsLabel_Enum_ENTROPY_LABEL_INDICATOR E_MplsTypes_MplsLabel_Enum = 8
	// MplsTypes_MplsLabel_Enum_NO_LABEL corresponds to the value NO_LABEL of MplsTypes_MplsLabel_Enum
	MplsTypes_MplsLabel_Enum_NO_LABEL E_MplsTypes_MplsLabel_Enum = 9
)

// E_Neighbor_NeighborState is a derived int64 type which is used to represent
// the enumerated node Neighbor_NeighborState. An additional value named
// Neighbor_NeighborState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Neighbor_NeighborState int64

// IsYANGGoEnum ensures that Neighbor_NeighborState implements the yang.GoEnum
// interface. This ensures that Neighbor_NeighborState can be identified as a
// mapped type for a YANG enumeration.
func (E_Neighbor_NeighborState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Neighbor_NeighborState.
func (E_Neighbor_NeighborState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_Neighbor_NeighborState.
func (e E_Neighbor_NeighborState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Neighbor_NeighborState")
}

const (
	// Neighbor_NeighborState_UNSET corresponds to the value UNSET of Neighbor_NeighborState
	Neighbor_NeighborState_UNSET E_Neighbor_NeighborState = 0
	// Neighbor_NeighborState_INCOMPLETE corresponds to the value INCOMPLETE of Neighbor_NeighborState
	Neighbor_NeighborState_INCOMPLETE E_Neighbor_NeighborState = 1
	// Neighbor_NeighborState_REACHABLE corresponds to the value REACHABLE of Neighbor_NeighborState
	Neighbor_NeighborState_REACHABLE E_Neighbor_NeighborState = 2
	// Neighbor_NeighborState_STALE corresponds to the value STALE of Neighbor_NeighborState
	Neighbor_NeighborState_STALE E_Neighbor_NeighborState = 3
	// Neighbor_NeighborState_DELAY corresponds to the value DELAY of Neighbor_NeighborState
	Neighbor_NeighborState_DELAY E_Neighbor_NeighborState = 4
	// Neighbor_NeighborState_PROBE corresponds to the value PROBE of Neighbor_NeighborState
	Neighbor_NeighborState_PROBE E_Neighbor_NeighborState = 5
)

// E_Neighbor_SessionState is a derived int64 type which is used to represent
// the enumerated node Neighbor_SessionState. An additional value named
// Neighbor_SessionState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Neighbor_SessionState int64

// IsYANGGoEnum ensures that Neighbor_SessionState implements the yang.GoEnum
// interface. This ensures that Neighbor_SessionState can be identified as a
// mapped type for a YANG enumeration.
func (E_Neighbor_SessionState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Neighbor_SessionState.
func (E_Neighbor_SessionState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_Neighbor_SessionState.
func (e E_Neighbor_SessionState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Neighbor_SessionState")
}

const (
	// Neighbor_SessionState_UNSET corresponds to the value UNSET of Neighbor_SessionState
	Neighbor_SessionState_UNSET E_Neighbor_SessionState = 0
	// Neighbor_SessionState_IDLE corresponds to the value IDLE of Neighbor_SessionState
	Neighbor_SessionState_IDLE E_Neighbor_SessionState = 1
	// Neighbor_SessionState_CONNECT corresponds to the value CONNECT of Neighbor_SessionState
	Neighbor_SessionState_CONNECT E_Neighbor_SessionState = 2
	// Neighbor_SessionState_ACTIVE corresponds to the value ACTIVE of Neighbor_SessionState
	Neighbor_SessionState_ACTIVE E_Neighbor_SessionState = 3
	// Neighbor_SessionState_OPENSENT corresponds to the value OPENSENT of Neighbor_SessionState
	Neighbor_SessionState_OPENSENT E_Neighbor_SessionState = 4
	// Neighbor_SessionState_OPENCONFIRM corresponds to the value OPENCONFIRM of Neighbor_SessionState
	Neighbor_SessionState_OPENCONFIRM E_Neighbor_SessionState = 5
	// Neighbor_SessionState_ESTABLISHED corresponds to the value ESTABLISHED of Neighbor_SessionState
	Neighbor_SessionState_ESTABLISHED E_Neighbor_SessionState = 6
)

// E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE is a derived int64 type which is used to represent
// the enumerated node NetworkInstanceTypes_NETWORK_INSTANCE_TYPE. An additional value named
// NetworkInstanceTypes_NETWORK_INSTANCE_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE int64

// IsYANGGoEnum ensures that NetworkInstanceTypes_NETWORK_INSTANCE_TYPE implements the yang.GoEnum
// interface. This ensures that NetworkInstanceTypes_NETWORK_INSTANCE_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  NetworkInstanceTypes_NETWORK_INSTANCE_TYPE.
func (E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE.
func (e E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE")
}

const (
	// NetworkInstanceTypes_NETWORK_INSTANCE_TYPE_UNSET corresponds to the value UNSET of NetworkInstanceTypes_NETWORK_INSTANCE_TYPE
	NetworkInstanceTypes_NETWORK_INSTANCE_TYPE_UNSET E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE = 0
	// NetworkInstanceTypes_NETWORK_INSTANCE_TYPE_DEFAULT_INSTANCE corresponds to the value DEFAULT_INSTANCE of NetworkInstanceTypes_NETWORK_INSTANCE_TYPE
	NetworkInstanceTypes_NETWORK_INSTANCE_TYPE_DEFAULT_INSTANCE E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE = 1
	// NetworkInstanceTypes_NETWORK_INSTANCE_TYPE_L2L3 corresponds to the value L2L3 of NetworkInstanceTypes_NETWORK_INSTANCE_TYPE
	NetworkInstanceTypes_NETWORK_INSTANCE_TYPE_L2L3 E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE = 2
	// NetworkInstanceTypes_NETWORK_INSTANCE_TYPE_L2P2P corresponds to the value L2P2P of NetworkInstanceTypes_NETWORK_INSTANCE_TYPE
	NetworkInstanceTypes_NETWORK_INSTANCE_TYPE_L2P2P E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE = 3
	// NetworkInstanceTypes_NETWORK_INSTANCE_TYPE_L2VSI corresponds to the value L2VSI of NetworkInstanceTypes_NETWORK_INSTANCE_TYPE
	NetworkInstanceTypes_NETWORK_INSTANCE_TYPE_L2VSI E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE = 4
	// NetworkInstanceTypes_NETWORK_INSTANCE_TYPE_L3VRF corresponds to the value L3VRF of NetworkInstanceTypes_NETWORK_INSTANCE_TYPE
	NetworkInstanceTypes_NETWORK_INSTANCE_TYPE_L3VRF E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE = 5
)

// E_PolicyTypes_INSTALL_PROTOCOL_TYPE is a derived int64 type which is used to represent
// the enumerated node PolicyTypes_INSTALL_PROTOCOL_TYPE. An additional value named
// PolicyTypes_INSTALL_PROTOCOL_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_PolicyTypes_INSTALL_PROTOCOL_TYPE int64

// IsYANGGoEnum ensures that PolicyTypes_INSTALL_PROTOCOL_TYPE implements the yang.GoEnum
// interface. This ensures that PolicyTypes_INSTALL_PROTOCOL_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_PolicyTypes_INSTALL_PROTOCOL_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  PolicyTypes_INSTALL_PROTOCOL_TYPE.
func (E_PolicyTypes_INSTALL_PROTOCOL_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_PolicyTypes_INSTALL_PROTOCOL_TYPE.
func (e E_PolicyTypes_INSTALL_PROTOCOL_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_PolicyTypes_INSTALL_PROTOCOL_TYPE")
}

const (
	// PolicyTypes_INSTALL_PROTOCOL_TYPE_UNSET corresponds to the value UNSET of PolicyTypes_INSTALL_PROTOCOL_TYPE
	PolicyTypes_INSTALL_PROTOCOL_TYPE_UNSET E_PolicyTypes_INSTALL_PROTOCOL_TYPE = 0
	// PolicyTypes_INSTALL_PROTOCOL_TYPE_BGP corresponds to the value BGP of PolicyTypes_INSTALL_PROTOCOL_TYPE
	PolicyTypes_INSTALL_PROTOCOL_TYPE_BGP E_PolicyTypes_INSTALL_PROTOCOL_TYPE = 1
	// PolicyTypes_INSTALL_PROTOCOL_TYPE_DIRECTLY_CONNECTED corresponds to the value DIRECTLY_CONNECTED of PolicyTypes_INSTALL_PROTOCOL_TYPE
	PolicyTypes_INSTALL_PROTOCOL_TYPE_DIRECTLY_CONNECTED E_PolicyTypes_INSTALL_PROTOCOL_TYPE = 2
	// PolicyTypes_INSTALL_PROTOCOL_TYPE_IGMP corresponds to the value IGMP of PolicyTypes_INSTALL_PROTOCOL_TYPE
	PolicyTypes_INSTALL_PROTOCOL_TYPE_IGMP E_PolicyTypes_INSTALL_PROTOCOL_TYPE = 3
	// PolicyTypes_INSTALL_PROTOCOL_TYPE_ISIS corresponds to the value ISIS of PolicyTypes_INSTALL_PROTOCOL_TYPE
	PolicyTypes_INSTALL_PROTOCOL_TYPE_ISIS E_PolicyTypes_INSTALL_PROTOCOL_TYPE = 4
	// PolicyTypes_INSTALL_PROTOCOL_TYPE_LOCAL_AGGREGATE corresponds to the value LOCAL_AGGREGATE of PolicyTypes_INSTALL_PROTOCOL_TYPE
	PolicyTypes_INSTALL_PROTOCOL_TYPE_LOCAL_AGGREGATE E_PolicyTypes_INSTALL_PROTOCOL_TYPE = 5
	// PolicyTypes_INSTALL_PROTOCOL_TYPE_OSPF corresponds to the value OSPF of PolicyTypes_INSTALL_PROTOCOL_TYPE
	PolicyTypes_INSTALL_PROTOCOL_TYPE_OSPF E_PolicyTypes_INSTALL_PROTOCOL_TYPE = 6
	// PolicyTypes_INSTALL_PROTOCOL_TYPE_OSPF3 corresponds to the value OSPF3 of PolicyTypes_INSTALL_PROTOCOL_TYPE
	PolicyTypes_INSTALL_PROTOCOL_TYPE_OSPF3 E_PolicyTypes_INSTALL_PROTOCOL_TYPE = 7
	// PolicyTypes_INSTALL_PROTOCOL_TYPE_PIM corresponds to the value PIM of PolicyTypes_INSTALL_PROTOCOL_TYPE
	PolicyTypes_INSTALL_PROTOCOL_TYPE_PIM E_PolicyTypes_INSTALL_PROTOCOL_TYPE = 8
	// PolicyTypes_INSTALL_PROTOCOL_TYPE_STATIC corresponds to the value STATIC of PolicyTypes_INSTALL_PROTOCOL_TYPE
	PolicyTypes_INSTALL_PROTOCOL_TYPE_STATIC E_PolicyTypes_INSTALL_PROTOCOL_TYPE = 9
)

// E_ProxyArp_Mode is a derived int64 type which is used to represent
// the enumerated node ProxyArp_Mode. An additional value named
// ProxyArp_Mode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_ProxyArp_Mode int64

// IsYANGGoEnum ensures that ProxyArp_Mode implements the yang.GoEnum
// interface. This ensures that ProxyArp_Mode can be identified as a
// mapped type for a YANG enumeration.
func (E_ProxyArp_Mode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  ProxyArp_Mode.
func (E_ProxyArp_Mode) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_ProxyArp_Mode.
func (e E_ProxyArp_Mode) String() string {
	return ygot.EnumLogString(e, int64(e), "E_ProxyArp_Mode")
}

const (
	// ProxyArp_Mode_UNSET corresponds to the value UNSET of ProxyArp_Mode
	ProxyArp_Mode_UNSET E_ProxyArp_Mode = 0
	// ProxyArp_Mode_DISABLE corresponds to the value DISABLE of ProxyArp_Mode
	ProxyArp_Mode_DISABLE E_ProxyArp_Mode = 1
	// ProxyArp_Mode_REMOTE_ONLY corresponds to the value REMOTE_ONLY of ProxyArp_Mode
	ProxyArp_Mode_REMOTE_ONLY E_ProxyArp_Mode = 2
	// ProxyArp_Mode_ALL corresponds to the value ALL of ProxyArp_Mode
	ProxyArp_Mode_ALL E_ProxyArp_Mode = 3
)

// E_RibBgpTypes_INVALID_ROUTE_REASON is a derived int64 type which is used to represent
// the enumerated node RibBgpTypes_INVALID_ROUTE_REASON. An additional value named
// RibBgpTypes_INVALID_ROUTE_REASON_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_RibBgpTypes_INVALID_ROUTE_REASON int64

// IsYANGGoEnum ensures that RibBgpTypes_INVALID_ROUTE_REASON implements the yang.GoEnum
// interface. This ensures that RibBgpTypes_INVALID_ROUTE_REASON can be identified as a
// mapped type for a YANG enumeration.
func (E_RibBgpTypes_INVALID_ROUTE_REASON) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  RibBgpTypes_INVALID_ROUTE_REASON.
func (E_RibBgpTypes_INVALID_ROUTE_REASON) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_RibBgpTypes_INVALID_ROUTE_REASON.
func (e E_RibBgpTypes_INVALID_ROUTE_REASON) String() string {
	return ygot.EnumLogString(e, int64(e), "E_RibBgpTypes_INVALID_ROUTE_REASON")
}

const (
	// RibBgpTypes_INVALID_ROUTE_REASON_UNSET corresponds to the value UNSET of RibBgpTypes_INVALID_ROUTE_REASON
	RibBgpTypes_INVALID_ROUTE_REASON_UNSET E_RibBgpTypes_INVALID_ROUTE_REASON = 0
	// RibBgpTypes_INVALID_ROUTE_REASON_INVALID_AS_LOOP corresponds to the value INVALID_AS_LOOP of RibBgpTypes_INVALID_ROUTE_REASON
	RibBgpTypes_INVALID_ROUTE_REASON_INVALID_AS_LOOP E_RibBgpTypes_INVALID_ROUTE_REASON = 1
	// RibBgpTypes_INVALID_ROUTE_REASON_INVALID_CLUSTER_LOOP corresponds to the value INVALID_CLUSTER_LOOP of RibBgpTypes_INVALID_ROUTE_REASON
	RibBgpTypes_INVALID_ROUTE_REASON_INVALID_CLUSTER_LOOP E_RibBgpTypes_INVALID_ROUTE_REASON = 2
	// RibBgpTypes_INVALID_ROUTE_REASON_INVALID_CONFED corresponds to the value INVALID_CONFED of RibBgpTypes_INVALID_ROUTE_REASON
	RibBgpTypes_INVALID_ROUTE_REASON_INVALID_CONFED E_RibBgpTypes_INVALID_ROUTE_REASON = 3
	// RibBgpTypes_INVALID_ROUTE_REASON_INVALID_ORIGINATOR corresponds to the value INVALID_ORIGINATOR of RibBgpTypes_INVALID_ROUTE_REASON
	RibBgpTypes_INVALID_ROUTE_REASON_INVALID_ORIGINATOR E_RibBgpTypes_INVALID_ROUTE_REASON = 4
)

// E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE is a derived int64 type which is used to represent
// the enumerated node RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE. An additional value named
// RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE int64

// IsYANGGoEnum ensures that RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE implements the yang.GoEnum
// interface. This ensures that RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE.
func (E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE.
func (e E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE")
}

const (
	// RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE_UNSET corresponds to the value UNSET of RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE
	RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE_UNSET E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE = 0
	// RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE_SRTE_BINDING_SID corresponds to the value SRTE_BINDING_SID of RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE
	RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE_SRTE_BINDING_SID E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE = 1
	// RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE_SRTE_PREFERENCE corresponds to the value SRTE_PREFERENCE of RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE
	RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE_SRTE_PREFERENCE E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE = 2
	// RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE_SRTE_SEGMENT_LIST corresponds to the value SRTE_SEGMENT_LIST of RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE
	RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE_SRTE_SEGMENT_LIST E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE = 3
	// RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE_TUNNEL_COLOR corresponds to the value TUNNEL_COLOR of RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE
	RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE_TUNNEL_COLOR E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE = 4
	// RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE_TUNNEL_REMOTE_ENDPOINT corresponds to the value TUNNEL_REMOTE_ENDPOINT of RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE
	RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE_TUNNEL_REMOTE_ENDPOINT E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE = 5
)

// E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE is a derived int64 type which is used to represent
// the enumerated node RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE. An additional value named
// RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE int64

// IsYANGGoEnum ensures that RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE implements the yang.GoEnum
// interface. This ensures that RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE.
func (E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE.
func (e E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE")
}

const (
	// RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE_UNSET corresponds to the value UNSET of RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE
	RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE_UNSET E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE = 0
	// RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE_SRTE_POLICY_TUNNEL corresponds to the value SRTE_POLICY_TUNNEL of RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE
	RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE_SRTE_POLICY_TUNNEL E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE = 1
)

// E_RoutingPolicy_DefaultPolicyType is a derived int64 type which is used to represent
// the enumerated node RoutingPolicy_DefaultPolicyType. An additional value named
// RoutingPolicy_DefaultPolicyType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_RoutingPolicy_DefaultPolicyType int64

// IsYANGGoEnum ensures that RoutingPolicy_DefaultPolicyType implements the yang.GoEnum
// interface. This ensures that RoutingPolicy_DefaultPolicyType can be identified as a
// mapped type for a YANG enumeration.
func (E_RoutingPolicy_DefaultPolicyType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  RoutingPolicy_DefaultPolicyType.
func (E_RoutingPolicy_DefaultPolicyType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

// String returns a logging-friendly string for E_RoutingPolicy_DefaultPolicyType.
func (e E_RoutingPolicy_DefaultPolicyType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_RoutingPolicy_DefaultPolicyType")
}

const (
	// RoutingPolicy_DefaultPolicyType_UNSET corresponds to the value UNSET of RoutingPolicy_DefaultPolicyType
	RoutingPolicy_DefaultPolicyType_UNSET E_RoutingPolicy_DefaultPolicyType = 0
	// RoutingPolicy_DefaultPolicyType_ACCEPT_ROUTE corresponds to the value ACCEPT_ROUTE of RoutingPolicy_DefaultPolicyType
	RoutingPolicy_DefaultPolicyType_ACCEPT_ROUTE E_RoutingPolicy_DefaultPolicyType = 1
	// RoutingPolicy_DefaultPolicyType_REJECT_ROUTE corresponds to the value REJECT_ROUTE of RoutingPolicy_DefaultPolicyType
	RoutingPolicy_DefaultPolicyType_REJECT_ROUTE E_RoutingPolicy_DefaultPolicyType = 2
)

// E_Segment_Type is a derived int64 type which is used to represent
// the enumerated node Segment_Type. An additional value named
// Segment_Type_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Segment_Type int64

// IsYANGGoEnum ensures that Segment_Type implements the yang.GoEnum
// interface. This ensures that Segment_Type can be identified as a
// mapped type for a YANG enumeration.
func (E_Segment_Type) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Segment_Type.
func (E_Segment_Type) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_Segment_Type.
func (e E_Segment_Type) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Segment_Type")
}

const (
	// Segment_Type_UNSET corresponds to the value UNSET of Segment_Type
	Segment_Type_UNSET E_Segment_Type = 0
	// Segment_Type_MPLS_SID corresponds to the value MPLS_SID of Segment_Type
	Segment_Type_MPLS_SID E_Segment_Type = 2
	// Segment_Type_IPV6_SID corresponds to the value IPV6_SID of Segment_Type
	Segment_Type_IPV6_SID E_Segment_Type = 3
	// Segment_Type_IPV4_NODE_ADDRESS corresponds to the value IPV4_NODE_ADDRESS of Segment_Type
	Segment_Type_IPV4_NODE_ADDRESS E_Segment_Type = 4
	// Segment_Type_IPV6_NODE_ADDRESS corresponds to the value IPV6_NODE_ADDRESS of Segment_Type
	Segment_Type_IPV6_NODE_ADDRESS E_Segment_Type = 5
	// Segment_Type_IPV4_LOCAL_INTF_ID corresponds to the value IPV4_LOCAL_INTF_ID of Segment_Type
	Segment_Type_IPV4_LOCAL_INTF_ID E_Segment_Type = 6
	// Segment_Type_IPV4_LOCAL_REMOTE_ADDR corresponds to the value IPV4_LOCAL_REMOTE_ADDR of Segment_Type
	Segment_Type_IPV4_LOCAL_REMOTE_ADDR E_Segment_Type = 7
	// Segment_Type_IPV6_LOCAL_INTF_ID corresponds to the value IPV6_LOCAL_INTF_ID of Segment_Type
	Segment_Type_IPV6_LOCAL_INTF_ID E_Segment_Type = 8
	// Segment_Type_IPV6_LOCAL_REMOTE_ADDR corresponds to the value IPV6_LOCAL_REMOTE_ADDR of Segment_Type
	Segment_Type_IPV6_LOCAL_REMOTE_ADDR E_Segment_Type = 9
)

// E_Types_ADDRESS_FAMILY is a derived int64 type which is used to represent
// the enumerated node Types_ADDRESS_FAMILY. An additional value named
// Types_ADDRESS_FAMILY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Types_ADDRESS_FAMILY int64

// IsYANGGoEnum ensures that Types_ADDRESS_FAMILY implements the yang.GoEnum
// interface. This ensures that Types_ADDRESS_FAMILY can be identified as a
// mapped type for a YANG enumeration.
func (E_Types_ADDRESS_FAMILY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Types_ADDRESS_FAMILY.
func (E_Types_ADDRESS_FAMILY) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_Types_ADDRESS_FAMILY.
func (e E_Types_ADDRESS_FAMILY) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Types_ADDRESS_FAMILY")
}

const (
	// Types_ADDRESS_FAMILY_UNSET corresponds to the value UNSET of Types_ADDRESS_FAMILY
	Types_ADDRESS_FAMILY_UNSET E_Types_ADDRESS_FAMILY = 0
	// Types_ADDRESS_FAMILY_IPV4 corresponds to the value IPV4 of Types_ADDRESS_FAMILY
	Types_ADDRESS_FAMILY_IPV4 E_Types_ADDRESS_FAMILY = 1
	// Types_ADDRESS_FAMILY_IPV6 corresponds to the value IPV6 of Types_ADDRESS_FAMILY
	Types_ADDRESS_FAMILY_IPV6 E_Types_ADDRESS_FAMILY = 2
	// Types_ADDRESS_FAMILY_L2_ETHERNET corresponds to the value L2_ETHERNET of Types_ADDRESS_FAMILY
	Types_ADDRESS_FAMILY_L2_ETHERNET E_Types_ADDRESS_FAMILY = 3
	// Types_ADDRESS_FAMILY_MPLS corresponds to the value MPLS of Types_ADDRESS_FAMILY
	Types_ADDRESS_FAMILY_MPLS E_Types_ADDRESS_FAMILY = 4
)

// E_VlanTypes_TPID_TYPES is a derived int64 type which is used to represent
// the enumerated node VlanTypes_TPID_TYPES. An additional value named
// VlanTypes_TPID_TYPES_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_VlanTypes_TPID_TYPES int64

// IsYANGGoEnum ensures that VlanTypes_TPID_TYPES implements the yang.GoEnum
// interface. This ensures that VlanTypes_TPID_TYPES can be identified as a
// mapped type for a YANG enumeration.
func (E_VlanTypes_TPID_TYPES) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  VlanTypes_TPID_TYPES.
func (E_VlanTypes_TPID_TYPES) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_VlanTypes_TPID_TYPES.
func (e E_VlanTypes_TPID_TYPES) String() string {
	return ygot.EnumLogString(e, int64(e), "E_VlanTypes_TPID_TYPES")
}

const (
	// VlanTypes_TPID_TYPES_UNSET corresponds to the value UNSET of VlanTypes_TPID_TYPES
	VlanTypes_TPID_TYPES_UNSET E_VlanTypes_TPID_TYPES = 0
	// VlanTypes_TPID_TYPES_TPID_0X8100 corresponds to the value TPID_0X8100 of VlanTypes_TPID_TYPES
	VlanTypes_TPID_TYPES_TPID_0X8100 E_VlanTypes_TPID_TYPES = 1
	// VlanTypes_TPID_TYPES_TPID_0X88A8 corresponds to the value TPID_0X88A8 of VlanTypes_TPID_TYPES
	VlanTypes_TPID_TYPES_TPID_0X88A8 E_VlanTypes_TPID_TYPES = 2
	// VlanTypes_TPID_TYPES_TPID_0X9100 corresponds to the value TPID_0X9100 of VlanTypes_TPID_TYPES
	VlanTypes_TPID_TYPES_TPID_0X9100 E_VlanTypes_TPID_TYPES = 3
	// VlanTypes_TPID_TYPES_TPID_0X9200 corresponds to the value TPID_0X9200 of VlanTypes_TPID_TYPES
	VlanTypes_TPID_TYPES_TPID_0X9200 E_VlanTypes_TPID_TYPES = 4
	// VlanTypes_TPID_TYPES_TPID_ANY corresponds to the value TPID_ANY of VlanTypes_TPID_TYPES
	VlanTypes_TPID_TYPES_TPID_ANY E_VlanTypes_TPID_TYPES = 5
)

// E_VlanTypes_VlanModeType is a derived int64 type which is used to represent
// the enumerated node VlanTypes_VlanModeType. An additional value named
// VlanTypes_VlanModeType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_VlanTypes_VlanModeType int64

// IsYANGGoEnum ensures that VlanTypes_VlanModeType implements the yang.GoEnum
// interface. This ensures that VlanTypes_VlanModeType can be identified as a
// mapped type for a YANG enumeration.
func (E_VlanTypes_VlanModeType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  VlanTypes_VlanModeType.
func (E_VlanTypes_VlanModeType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_VlanTypes_VlanModeType.
func (e E_VlanTypes_VlanModeType) String() string {
	return ygot.EnumLogString(e, int64(e), "E_VlanTypes_VlanModeType")
}

const (
	// VlanTypes_VlanModeType_UNSET corresponds to the value UNSET of VlanTypes_VlanModeType
	VlanTypes_VlanModeType_UNSET E_VlanTypes_VlanModeType = 0
	// VlanTypes_VlanModeType_ACCESS corresponds to the value ACCESS of VlanTypes_VlanModeType
	VlanTypes_VlanModeType_ACCESS E_VlanTypes_VlanModeType = 1
	// VlanTypes_VlanModeType_TRUNK corresponds to the value TRUNK of VlanTypes_VlanModeType
	VlanTypes_VlanModeType_TRUNK E_VlanTypes_VlanModeType = 2
)

// E_VlanTypes_VlanStackAction is a derived int64 type which is used to represent
// the enumerated node VlanTypes_VlanStackAction. An additional value named
// VlanTypes_VlanStackAction_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_VlanTypes_VlanStackAction int64

// IsYANGGoEnum ensures that VlanTypes_VlanStackAction implements the yang.GoEnum
// interface. This ensures that VlanTypes_VlanStackAction can be identified as a
// mapped type for a YANG enumeration.
func (E_VlanTypes_VlanStackAction) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  VlanTypes_VlanStackAction.
func (E_VlanTypes_VlanStackAction) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

// String returns a logging-friendly string for E_VlanTypes_VlanStackAction.
func (e E_VlanTypes_VlanStackAction) String() string {
	return ygot.EnumLogString(e, int64(e), "E_VlanTypes_VlanStackAction")
}

const (
	// VlanTypes_VlanStackAction_UNSET corresponds to the value UNSET of VlanTypes_VlanStackAction
	VlanTypes_VlanStackAction_UNSET E_VlanTypes_VlanStackAction = 0
	// VlanTypes_VlanStackAction_PUSH corresponds to the value PUSH of VlanTypes_VlanStackAction
	VlanTypes_VlanStackAction_PUSH E_VlanTypes_VlanStackAction = 1
	// VlanTypes_VlanStackAction_POP corresponds to the value POP of VlanTypes_VlanStackAction
	VlanTypes_VlanStackAction_POP E_VlanTypes_VlanStackAction = 2
	// VlanTypes_VlanStackAction_SWAP corresponds to the value SWAP of VlanTypes_VlanStackAction
	VlanTypes_VlanStackAction_SWAP E_VlanTypes_VlanStackAction = 3
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_Address_Status": {
		1: {Name: "PREFERRED"},
		2: {Name: "DEPRECATED"},
		3: {Name: "INVALID"},
		4: {Name: "INACCESSIBLE"},
		5: {Name: "UNKNOWN"},
		6: {Name: "TENTATIVE"},
		7: {Name: "DUPLICATE"},
		8: {Name: "OPTIMISTIC"},
	},
	"E_Bfd_BfdDiagnosticCode": {
		1: {Name: "NO_DIAGNOSTIC"},
		2: {Name: "DETECTION_TIMEOUT"},
		3: {Name: "ECHO_FAILED"},
		4: {Name: "FORWARDING_RESET"},
		5: {Name: "PATH_DOWN"},
		6: {Name: "CONCATENATED_PATH_DOWN"},
		7: {Name: "ADMIN_DOWN"},
		8: {Name: "REVERSE_CONCATENATED_PATH_DOWN"},
	},
	"E_Bfd_BfdSessionState": {
		1: {Name: "UP"},
		2: {Name: "DOWN"},
		3: {Name: "ADMIN_DOWN"},
		4: {Name: "INIT"},
	},
	"E_BgpTypes_AFI_SAFI_TYPE": {
		1:  {Name: "IPV4_FLOWSPEC", DefiningModule: "openconfig-bgp-types"},
		2:  {Name: "IPV4_LABELED_UNICAST", DefiningModule: "openconfig-bgp-types"},
		3:  {Name: "IPV4_UNICAST", DefiningModule: "openconfig-bgp-types"},
		4:  {Name: "IPV6_LABELED_UNICAST", DefiningModule: "openconfig-bgp-types"},
		5:  {Name: "IPV6_UNICAST", DefiningModule: "openconfig-bgp-types"},
		6:  {Name: "L2VPN_EVPN", DefiningModule: "openconfig-bgp-types"},
		7:  {Name: "L2VPN_VPLS", DefiningModule: "openconfig-bgp-types"},
		8:  {Name: "L3VPN_IPV4_MULTICAST", DefiningModule: "openconfig-bgp-types"},
		9:  {Name: "L3VPN_IPV4_UNICAST", DefiningModule: "openconfig-bgp-types"},
		10: {Name: "L3VPN_IPV6_MULTICAST", DefiningModule: "openconfig-bgp-types"},
		11: {Name: "L3VPN_IPV6_UNICAST", DefiningModule: "openconfig-bgp-types"},
		12: {Name: "LINKSTATE", DefiningModule: "openconfig-bgp-types"},
		13: {Name: "LINKSTATE_SPF", DefiningModule: "openconfig-bgp-types"},
		14: {Name: "LINKSTATE_VPN", DefiningModule: "openconfig-bgp-types"},
		15: {Name: "SRTE_POLICY_IPV4", DefiningModule: "openconfig-bgp-types"},
		16: {Name: "SRTE_POLICY_IPV6", DefiningModule: "openconfig-bgp-types"},
		17: {Name: "VPNV4_FLOWSPEC", DefiningModule: "openconfig-bgp-types"},
	},
	"E_BgpTypes_AsPathSegmentType": {
		1: {Name: "AS_SEQ"},
		2: {Name: "AS_SET"},
		3: {Name: "AS_CONFED_SEQUENCE"},
		4: {Name: "AS_CONFED_SET"},
	},
	"E_BgpTypes_BGP_CAPABILITY": {
		1: {Name: "ADD_PATHS", DefiningModule: "openconfig-bgp-types"},
		2: {Name: "ASN32", DefiningModule: "openconfig-bgp-types"},
		3: {Name: "EXTENDED_NEXTHOP_ENCODING", DefiningModule: "openconfig-bgp-types"},
		4: {Name: "GRACEFUL_RESTART", DefiningModule: "openconfig-bgp-types"},
		5: {Name: "MPBGP", DefiningModule: "openconfig-bgp-types"},
		6: {Name: "ROUTE_REFRESH", DefiningModule: "openconfig-bgp-types"},
	},
	"E_BgpTypes_BGP_ERROR_CODE": {
		1: {Name: "CEASE", DefiningModule: "openconfig-bgp-types"},
		2: {Name: "FINITE_STATE_MACHINE_ERROR", DefiningModule: "openconfig-bgp-types"},
		3: {Name: "HOLD_TIMER_EXPIRED", DefiningModule: "openconfig-bgp-types"},
		4: {Name: "MESSAGE_HEADER_ERROR", DefiningModule: "openconfig-bgp-types"},
		5: {Name: "OPEN_MESSAGE_ERROR", DefiningModule: "openconfig-bgp-types"},
		6: {Name: "ROUTE_REFRESH_MESSAGE_ERROR", DefiningModule: "openconfig-bgp-types"},
		7: {Name: "UPDATE_MESSAGE_ERROR", DefiningModule: "openconfig-bgp-types"},
	},
	"E_BgpTypes_BGP_ERROR_SUBCODE": {
		1:  {Name: "ADMINISTRATIVE_RESET", DefiningModule: "openconfig-bgp-types"},
		2:  {Name: "ADMINISTRATIVE_SHUTDOWN", DefiningModule: "openconfig-bgp-types"},
		3:  {Name: "ATTRIBUTE_FLAGS_ERROR", DefiningModule: "openconfig-bgp-types"},
		4:  {Name: "ATTRIBUTE_LENGTH_ERROR", DefiningModule: "openconfig-bgp-types"},
		5:  {Name: "BAD_BGP_IDENTIFIER", DefiningModule: "openconfig-bgp-types"},
		6:  {Name: "BAD_MESSAGE_LENGTH", DefiningModule: "openconfig-bgp-types"},
		7:  {Name: "BAD_MESSAGE_TYPE", DefiningModule: "openconfig-bgp-types"},
		8:  {Name: "BAD_PEER_AS", DefiningModule: "openconfig-bgp-types"},
		9:  {Name: "CEASE_SUBCODE", DefiningModule: "openconfig-bgp-types"},
		10: {Name: "CONNECTION_NOT_SYNCHRONIZED", DefiningModule: "openconfig-bgp-types"},
		11: {Name: "CONNECTION_REJECTED", DefiningModule: "openconfig-bgp-types"},
		12: {Name: "CONN_COLLISION_RESOLUTION", DefiningModule: "openconfig-bgp-types"},
		13: {Name: "FINITE_STATE_MACHINE_SUBCODE", DefiningModule: "openconfig-bgp-types"},
		14: {Name: "INVALID_MESSAGE_LENGTH", DefiningModule: "openconfig-bgp-types"},
		15: {Name: "INVALID_NETWORK_FIELD", DefiningModule: "openconfig-bgp-types"},
		16: {Name: "INVALID_NEXT_HOP_ATTRIBUTE", DefiningModule: "openconfig-bgp-types"},
		17: {Name: "INVALID_ORIGIN_ATTRIBUTE", DefiningModule: "openconfig-bgp-types"},
		18: {Name: "MALFORMED_AS_PATH", DefiningModule: "openconfig-bgp-types"},
		19: {Name: "MALFORMED_ATTRIBUTE_LIST", DefiningModule: "openconfig-bgp-types"},
		20: {Name: "MAX_NUM_PREFIXES_REACHED", DefiningModule: "openconfig-bgp-types"},
		21: {Name: "MESSAGE_HEADER_SUBCODE", DefiningModule: "openconfig-bgp-types"},
		22: {Name: "MISSING_WELL_KNOWN_ATTRIBUTE", DefiningModule: "openconfig-bgp-types"},
		23: {Name: "OPEN_MESSAGE_SUBCODE", DefiningModule: "openconfig-bgp-types"},
		24: {Name: "OPTIONAL_ATTRIBUTE_ERROR", DefiningModule: "openconfig-bgp-types"},
		25: {Name: "OTHER_CONFIG_CHANGE", DefiningModule: "openconfig-bgp-types"},
		26: {Name: "OUT_OF_RESOURCES", DefiningModule: "openconfig-bgp-types"},
		27: {Name: "PEER_DE_CONFIGURED", DefiningModule: "openconfig-bgp-types"},
		28: {Name: "RECEIVE_UNEXPECTED_MESSAGE_ESTABLISHED", DefiningModule: "openconfig-bgp-types"},
		29: {Name: "RECEIVE_UNEXPECTED_MESSAGE_OPENCONFIRM", DefiningModule: "openconfig-bgp-types"},
		30: {Name: "RECEIVE_UNEXPECTED_MESSAGE_OPENSENT", DefiningModule: "openconfig-bgp-types"},
		31: {Name: "ROUTE_REFRESH_SUBCODE", DefiningModule: "openconfig-bgp-types"},
		32: {Name: "UNACCEPTABLE_HOLD_TIME", DefiningModule: "openconfig-bgp-types"},
		33: {Name: "UNRECOGNIZED_WELL_KNOWN_ATTRIBUTE", DefiningModule: "openconfig-bgp-types"},
		34: {Name: "UNSPECIFIC", DefiningModule: "openconfig-bgp-types"},
		35: {Name: "UNSUPPORTED_CAPABILITY", DefiningModule: "openconfig-bgp-types"},
		36: {Name: "UNSUPPORTED_OPTIONAL_PARAMETER", DefiningModule: "openconfig-bgp-types"},
		37: {Name: "UNSUPPORTED_VERSION_NUMBER", DefiningModule: "openconfig-bgp-types"},
		38: {Name: "UPDATE_MESSAGE_SUBCODE", DefiningModule: "openconfig-bgp-types"},
	},
	"E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY": {
		1: {Name: "NOPEER", DefiningModule: "openconfig-bgp-types"},
		2: {Name: "NO_ADVERTISE", DefiningModule: "openconfig-bgp-types"},
		3: {Name: "NO_EXPORT", DefiningModule: "openconfig-bgp-types"},
		4: {Name: "NO_EXPORT_SUBCONFED", DefiningModule: "openconfig-bgp-types"},
	},
	"E_BgpTypes_BgpOriginAttrType": {
		1: {Name: "IGP"},
		2: {Name: "EGP"},
		3: {Name: "INCOMPLETE"},
	},
	"E_BgpTypes_CommunityType": {
		1: {Name: "STANDARD"},
		2: {Name: "EXTENDED"},
		3: {Name: "BOTH"},
		4: {Name: "NONE"},
	},
	"E_BgpTypes_PeerType": {
		1: {Name: "INTERNAL"},
		2: {Name: "EXTERNAL"},
	},
	"E_BgpTypes_RemovePrivateAsOption": {
		1: {Name: "PRIVATE_AS_REMOVE_ALL", DefiningModule: "openconfig-bgp-types"},
		2: {Name: "PRIVATE_AS_REPLACE_ALL", DefiningModule: "openconfig-bgp-types"},
	},
	"E_Ethernet_DuplexMode": {
		1: {Name: "FULL"},
		2: {Name: "HALF"},
	},
	"E_Ethernet_NegotiatedDuplexMode": {
		1: {Name: "FULL"},
		2: {Name: "HALF"},
	},
	"E_GracefulRestart_Mode": {
		1: {Name: "HELPER_ONLY"},
		2: {Name: "BILATERAL"},
		3: {Name: "REMOTE_HELPER"},
	},
	"E_IETFInterfaces_InterfaceType": {
		1:   {Name: "a12MppSwitch", DefiningModule: "iana-if-type"},
		2:   {Name: "aal2", DefiningModule: "iana-if-type"},
		3:   {Name: "aal5", DefiningModule: "iana-if-type"},
		4:   {Name: "actelisMetaLOOP", DefiningModule: "iana-if-type"},
		5:   {Name: "adsl", DefiningModule: "iana-if-type"},
		6:   {Name: "adsl2", DefiningModule: "iana-if-type"},
		7:   {Name: "adsl2plus", DefiningModule: "iana-if-type"},
		8:   {Name: "aflane8023", DefiningModule: "iana-if-type"},
		9:   {Name: "aflane8025", DefiningModule: "iana-if-type"},
		10:  {Name: "aluELP", DefiningModule: "iana-if-type"},
		11:  {Name: "aluEpon", DefiningModule: "iana-if-type"},
		12:  {Name: "aluEponLogicalLink", DefiningModule: "iana-if-type"},
		13:  {Name: "aluEponOnu", DefiningModule: "iana-if-type"},
		14:  {Name: "aluEponPhysicalUni", DefiningModule: "iana-if-type"},
		15:  {Name: "aluGponOnu", DefiningModule: "iana-if-type"},
		16:  {Name: "aluGponPhysicalUni", DefiningModule: "iana-if-type"},
		17:  {Name: "arap", DefiningModule: "iana-if-type"},
		18:  {Name: "arcnet", DefiningModule: "iana-if-type"},
		19:  {Name: "arcnetPlus", DefiningModule: "iana-if-type"},
		20:  {Name: "async", DefiningModule: "iana-if-type"},
		21:  {Name: "atm", DefiningModule: "iana-if-type"},
		22:  {Name: "atmDxi", DefiningModule: "iana-if-type"},
		23:  {Name: "atmFuni", DefiningModule: "iana-if-type"},
		24:  {Name: "atmIma", DefiningModule: "iana-if-type"},
		25:  {Name: "atmLogical", DefiningModule: "iana-if-type"},
		26:  {Name: "atmRadio", DefiningModule: "iana-if-type"},
		27:  {Name: "atmSubInterface", DefiningModule: "iana-if-type"},
		28:  {Name: "atmVciEndPt", DefiningModule: "iana-if-type"},
		29:  {Name: "atmVirtual", DefiningModule: "iana-if-type"},
		30:  {Name: "atmbond", DefiningModule: "iana-if-type"},
		31:  {Name: "aviciOpticalEther", DefiningModule: "iana-if-type"},
		32:  {Name: "basicISDN", DefiningModule: "iana-if-type"},
		33:  {Name: "bgppolicyaccounting", DefiningModule: "iana-if-type"},
		34:  {Name: "bits", DefiningModule: "iana-if-type"},
		35:  {Name: "bridge", DefiningModule: "iana-if-type"},
		36:  {Name: "bsc", DefiningModule: "iana-if-type"},
		37:  {Name: "cableDownstreamRfPort", DefiningModule: "iana-if-type"},
		38:  {Name: "capwapDot11Bss", DefiningModule: "iana-if-type"},
		39:  {Name: "capwapDot11Profile", DefiningModule: "iana-if-type"},
		40:  {Name: "capwapWtpVirtualRadio", DefiningModule: "iana-if-type"},
		41:  {Name: "cblVectaStar", DefiningModule: "iana-if-type"},
		42:  {Name: "cctEmul", DefiningModule: "iana-if-type"},
		43:  {Name: "ces", DefiningModule: "iana-if-type"},
		44:  {Name: "channel", DefiningModule: "iana-if-type"},
		45:  {Name: "ciscoISLvlan", DefiningModule: "iana-if-type"},
		46:  {Name: "cnr", DefiningModule: "iana-if-type"},
		47:  {Name: "coffee", DefiningModule: "iana-if-type"},
		48:  {Name: "compositeLink", DefiningModule: "iana-if-type"},
		49:  {Name: "dcn", DefiningModule: "iana-if-type"},
		50:  {Name: "ddnX25", DefiningModule: "iana-if-type"},
		51:  {Name: "digitalPowerline", DefiningModule: "iana-if-type"},
		52:  {Name: "digitalWrapperOverheadChannel", DefiningModule: "iana-if-type"},
		53:  {Name: "dlsw", DefiningModule: "iana-if-type"},
		54:  {Name: "docsCableDownstream", DefiningModule: "iana-if-type"},
		55:  {Name: "docsCableMCmtsDownstream", DefiningModule: "iana-if-type"},
		56:  {Name: "docsCableMaclayer", DefiningModule: "iana-if-type"},
		57:  {Name: "docsCableNdf", DefiningModule: "iana-if-type"},
		58:  {Name: "docsCableNdr", DefiningModule: "iana-if-type"},
		59:  {Name: "docsCableScte55d1FwdOob", DefiningModule: "iana-if-type"},
		60:  {Name: "docsCableScte55d1RetOob", DefiningModule: "iana-if-type"},
		61:  {Name: "docsCableScte55d2DsOob", DefiningModule: "iana-if-type"},
		62:  {Name: "docsCableScte55d2UsOob", DefiningModule: "iana-if-type"},
		63:  {Name: "docsCableUpstream", DefiningModule: "iana-if-type"},
		64:  {Name: "docsCableUpstreamChannel", DefiningModule: "iana-if-type"},
		65:  {Name: "docsCableUpstreamRfPort", DefiningModule: "iana-if-type"},
		66:  {Name: "docsOfdmDownstream", DefiningModule: "iana-if-type"},
		67:  {Name: "docsOfdmaUpstream", DefiningModule: "iana-if-type"},
		68:  {Name: "ds0", DefiningModule: "iana-if-type"},
		69:  {Name: "ds0Bundle", DefiningModule: "iana-if-type"},
		70:  {Name: "ds1", DefiningModule: "iana-if-type"},
		71:  {Name: "ds1FDL", DefiningModule: "iana-if-type"},
		72:  {Name: "ds3", DefiningModule: "iana-if-type"},
		73:  {Name: "dtm", DefiningModule: "iana-if-type"},
		74:  {Name: "dvbAsiIn", DefiningModule: "iana-if-type"},
		75:  {Name: "dvbAsiOut", DefiningModule: "iana-if-type"},
		76:  {Name: "dvbRccDownstream", DefiningModule: "iana-if-type"},
		77:  {Name: "dvbRccMacLayer", DefiningModule: "iana-if-type"},
		78:  {Name: "dvbRccUpstream", DefiningModule: "iana-if-type"},
		79:  {Name: "dvbRcsMacLayer", DefiningModule: "iana-if-type"},
		80:  {Name: "dvbRcsTdma", DefiningModule: "iana-if-type"},
		81:  {Name: "dvbTdm", DefiningModule: "iana-if-type"},
		82:  {Name: "e1", DefiningModule: "iana-if-type"},
		83:  {Name: "econet", DefiningModule: "iana-if-type"},
		84:  {Name: "eon", DefiningModule: "iana-if-type"},
		85:  {Name: "eplrs", DefiningModule: "iana-if-type"},
		86:  {Name: "escon", DefiningModule: "iana-if-type"},
		87:  {Name: "ethernet3Mbit", DefiningModule: "iana-if-type"},
		88:  {Name: "ethernetCsmacd", DefiningModule: "iana-if-type"},
		89:  {Name: "fast", DefiningModule: "iana-if-type"},
		90:  {Name: "fastEther", DefiningModule: "iana-if-type"},
		91:  {Name: "fastEtherFX", DefiningModule: "iana-if-type"},
		92:  {Name: "fastdsl", DefiningModule: "iana-if-type"},
		93:  {Name: "fcipLink", DefiningModule: "iana-if-type"},
		94:  {Name: "fddi", DefiningModule: "iana-if-type"},
		95:  {Name: "fibreChannel", DefiningModule: "iana-if-type"},
		96:  {Name: "frDlciEndPt", DefiningModule: "iana-if-type"},
		97:  {Name: "frForward", DefiningModule: "iana-if-type"},
		98:  {Name: "frameRelay", DefiningModule: "iana-if-type"},
		99:  {Name: "frameRelayInterconnect", DefiningModule: "iana-if-type"},
		100: {Name: "frameRelayMPI", DefiningModule: "iana-if-type"},
		101: {Name: "frameRelayService", DefiningModule: "iana-if-type"},
		102: {Name: "frf16MfrBundle", DefiningModule: "iana-if-type"},
		103: {Name: "g703at2mb", DefiningModule: "iana-if-type"},
		104: {Name: "g703at64k", DefiningModule: "iana-if-type"},
		105: {Name: "g9981", DefiningModule: "iana-if-type"},
		106: {Name: "g9982", DefiningModule: "iana-if-type"},
		107: {Name: "g9983", DefiningModule: "iana-if-type"},
		108: {Name: "gfast", DefiningModule: "iana-if-type"},
		109: {Name: "gfp", DefiningModule: "iana-if-type"},
		110: {Name: "gigabitEthernet", DefiningModule: "iana-if-type"},
		111: {Name: "gpon", DefiningModule: "iana-if-type"},
		112: {Name: "gr303IDT", DefiningModule: "iana-if-type"},
		113: {Name: "gr303RDT", DefiningModule: "iana-if-type"},
		114: {Name: "gtp", DefiningModule: "iana-if-type"},
		115: {Name: "h323Gatekeeper", DefiningModule: "iana-if-type"},
		116: {Name: "h323Proxy", DefiningModule: "iana-if-type"},
		117: {Name: "hdh1822", DefiningModule: "iana-if-type"},
		118: {Name: "hdlc", DefiningModule: "iana-if-type"},
		119: {Name: "hdsl2", DefiningModule: "iana-if-type"},
		120: {Name: "hiperlan2", DefiningModule: "iana-if-type"},
		121: {Name: "hippi", DefiningModule: "iana-if-type"},
		122: {Name: "hippiInterface", DefiningModule: "iana-if-type"},
		123: {Name: "homepna", DefiningModule: "iana-if-type"},
		124: {Name: "hostPad", DefiningModule: "iana-if-type"},
		125: {Name: "hssi", DefiningModule: "iana-if-type"},
		126: {Name: "hyperchannel", DefiningModule: "iana-if-type"},
		127: {Name: "iana-interface-type", DefiningModule: "iana-if-type"},
		128: {Name: "ibm370parChan", DefiningModule: "iana-if-type"},
		129: {Name: "idsl", DefiningModule: "iana-if-type"},
		130: {Name: "ieee1394", DefiningModule: "iana-if-type"},
		131: {Name: "ieee80211", DefiningModule: "iana-if-type"},
		132: {Name: "ieee80212", DefiningModule: "iana-if-type"},
		133: {Name: "ieee802154", DefiningModule: "iana-if-type"},
		134: {Name: "ieee80216WMAN", DefiningModule: "iana-if-type"},
		135: {Name: "ieee8023adLag", DefiningModule: "iana-if-type"},
		136: {Name: "if-gsn", DefiningModule: "iana-if-type"},
		137: {Name: "ifPwType", DefiningModule: "iana-if-type"},
		138: {Name: "ifVfiType", DefiningModule: "iana-if-type"},
		139: {Name: "ilan", DefiningModule: "iana-if-type"},
		140: {Name: "imt", DefiningModule: "iana-if-type"},
		141: {Name: "infiniband", DefiningModule: "iana-if-type"},
		142: {Name: "interleave", DefiningModule: "iana-if-type"},
		143: {Name: "ip", DefiningModule: "iana-if-type"},
		144: {Name: "ipForward", DefiningModule: "iana-if-type"},
		145: {Name: "ipOverAtm", DefiningModule: "iana-if-type"},
		146: {Name: "ipOverCdlc", DefiningModule: "iana-if-type"},
		147: {Name: "ipOverClaw", DefiningModule: "iana-if-type"},
		148: {Name: "ipSwitch", DefiningModule: "iana-if-type"},
		149: {Name: "isdn", DefiningModule: "iana-if-type"},
		150: {Name: "isdns", DefiningModule: "iana-if-type"},
		151: {Name: "isdnu", DefiningModule: "iana-if-type"},
		152: {Name: "iso88022llc", DefiningModule: "iana-if-type"},
		153: {Name: "iso88023Csmacd", DefiningModule: "iana-if-type"},
		154: {Name: "iso88024TokenBus", DefiningModule: "iana-if-type"},
		155: {Name: "iso88025CRFPInt", DefiningModule: "iana-if-type"},
		156: {Name: "iso88025Dtr", DefiningModule: "iana-if-type"},
		157: {Name: "iso88025Fiber", DefiningModule: "iana-if-type"},
		158: {Name: "iso88025TokenRing", DefiningModule: "iana-if-type"},
		159: {Name: "iso88026Man", DefiningModule: "iana-if-type"},
		160: {Name: "isup", DefiningModule: "iana-if-type"},
		161: {Name: "l2vlan", DefiningModule: "iana-if-type"},
		162: {Name: "l3ipvlan", DefiningModule: "iana-if-type"},
		163: {Name: "l3ipxvlan", DefiningModule: "iana-if-type"},
		164: {Name: "lapb", DefiningModule: "iana-if-type"},
		165: {Name: "lapd", DefiningModule: "iana-if-type"},
		166: {Name: "lapf", DefiningModule: "iana-if-type"},
		167: {Name: "linegroup", DefiningModule: "iana-if-type"},
		168: {Name: "lmp", DefiningModule: "iana-if-type"},
		169: {Name: "localTalk", DefiningModule: "iana-if-type"},
		170: {Name: "macSecControlledIF", DefiningModule: "iana-if-type"},
		171: {Name: "macSecUncontrolledIF", DefiningModule: "iana-if-type"},
		172: {Name: "mediaMailOverIp", DefiningModule: "iana-if-type"},
		173: {Name: "mfSigLink", DefiningModule: "iana-if-type"},
		174: {Name: "miox25", DefiningModule: "iana-if-type"},
		175: {Name: "mocaVersion1", DefiningModule: "iana-if-type"},
		176: {Name: "modem", DefiningModule: "iana-if-type"},
		177: {Name: "mpc", DefiningModule: "iana-if-type"},
		178: {Name: "mpegTransport", DefiningModule: "iana-if-type"},
		179: {Name: "mpls", DefiningModule: "iana-if-type"},
		180: {Name: "mplsTunnel", DefiningModule: "iana-if-type"},
		181: {Name: "msdsl", DefiningModule: "iana-if-type"},
		182: {Name: "mvl", DefiningModule: "iana-if-type"},
		183: {Name: "myrinet", DefiningModule: "iana-if-type"},
		184: {Name: "nfas", DefiningModule: "iana-if-type"},
		185: {Name: "nsip", DefiningModule: "iana-if-type"},
		186: {Name: "opticalChannel", DefiningModule: "iana-if-type"},
		187: {Name: "opticalChannelGroup", DefiningModule: "iana-if-type"},
		188: {Name: "opticalTransport", DefiningModule: "iana-if-type"},
		189: {Name: "other", DefiningModule: "iana-if-type"},
		190: {Name: "otnOdu", DefiningModule: "iana-if-type"},
		191: {Name: "otnOtu", DefiningModule: "iana-if-type"},
		192: {Name: "para", DefiningModule: "iana-if-type"},
		193: {Name: "pdnEtherLoop1", DefiningModule: "iana-if-type"},
		194: {Name: "pdnEtherLoop2", DefiningModule: "iana-if-type"},
		195: {Name: "pip", DefiningModule: "iana-if-type"},
		196: {Name: "plc", DefiningModule: "iana-if-type"},
		197: {Name: "pon155", DefiningModule: "iana-if-type"},
		198: {Name: "pon622", DefiningModule: "iana-if-type"},
		199: {Name: "pos", DefiningModule: "iana-if-type"},
		200: {Name: "ppp", DefiningModule: "iana-if-type"},
		201: {Name: "pppMultilinkBundle", DefiningModule: "iana-if-type"},
		202: {Name: "primaryISDN", DefiningModule: "iana-if-type"},
		203: {Name: "propAtm", DefiningModule: "iana-if-type"},
		204: {Name: "propBWAp2Mp", DefiningModule: "iana-if-type"},
		205: {Name: "propCnls", DefiningModule: "iana-if-type"},
		206: {Name: "propDocsWirelessDownstream", DefiningModule: "iana-if-type"},
		207: {Name: "propDocsWirelessMaclayer", DefiningModule: "iana-if-type"},
		208: {Name: "propDocsWirelessUpstream", DefiningModule: "iana-if-type"},
		209: {Name: "propMultiplexor", DefiningModule: "iana-if-type"},
		210: {Name: "propPointToPointSerial", DefiningModule: "iana-if-type"},
		211: {Name: "propVirtual", DefiningModule: "iana-if-type"},
		212: {Name: "propWirelessP2P", DefiningModule: "iana-if-type"},
		213: {Name: "proteon10Mbit", DefiningModule: "iana-if-type"},
		214: {Name: "proteon80Mbit", DefiningModule: "iana-if-type"},
		215: {Name: "ptm", DefiningModule: "iana-if-type"},
		216: {Name: "q2931", DefiningModule: "iana-if-type"},
		217: {Name: "qam", DefiningModule: "iana-if-type"},
		218: {Name: "qllc", DefiningModule: "iana-if-type"},
		219: {Name: "radioMAC", DefiningModule: "iana-if-type"},
		220: {Name: "radsl", DefiningModule: "iana-if-type"},
		221: {Name: "reachDSL", DefiningModule: "iana-if-type"},
		222: {Name: "regular1822", DefiningModule: "iana-if-type"},
		223: {Name: "rfc1483", DefiningModule: "iana-if-type"},
		224: {Name: "rfc877x25", DefiningModule: "iana-if-type"},
		225: {Name: "rpr", DefiningModule: "iana-if-type"},
		226: {Name: "rs232", DefiningModule: "iana-if-type"},
		227: {Name: "rsrb", DefiningModule: "iana-if-type"},
		228: {Name: "sdci", DefiningModule: "iana-if-type"},
		229: {Name: "sdlc", DefiningModule: "iana-if-type"},
		230: {Name: "sdsl", DefiningModule: "iana-if-type"},
		231: {Name: "shdsl", DefiningModule: "iana-if-type"},
		232: {Name: "sip", DefiningModule: "iana-if-type"},
		233: {Name: "sipSig", DefiningModule: "iana-if-type"},
		234: {Name: "sipTg", DefiningModule: "iana-if-type"},
		235: {Name: "sixToFour", DefiningModule: "iana-if-type"},
		236: {Name: "slip", DefiningModule: "iana-if-type"},
		237: {Name: "smdsDxi", DefiningModule: "iana-if-type"},
		238: {Name: "smdsIcip", DefiningModule: "iana-if-type"},
		239: {Name: "softwareLoopback", DefiningModule: "iana-if-type"},
		240: {Name: "sonet", DefiningModule: "iana-if-type"},
		241: {Name: "sonetOverheadChannel", DefiningModule: "iana-if-type"},
		242: {Name: "sonetPath", DefiningModule: "iana-if-type"},
		243: {Name: "sonetVT", DefiningModule: "iana-if-type"},
		244: {Name: "srp", DefiningModule: "iana-if-type"},
		245: {Name: "ss7SigLink", DefiningModule: "iana-if-type"},
		246: {Name: "stackToStack", DefiningModule: "iana-if-type"},
		247: {Name: "starLan", DefiningModule: "iana-if-type"},
		248: {Name: "tdlc", DefiningModule: "iana-if-type"},
		249: {Name: "teLink", DefiningModule: "iana-if-type"},
		250: {Name: "termPad", DefiningModule: "iana-if-type"},
		251: {Name: "tr008", DefiningModule: "iana-if-type"},
		252: {Name: "transpHdlc", DefiningModule: "iana-if-type"},
		253: {Name: "tunnel", DefiningModule: "iana-if-type"},
		254: {Name: "ultra", DefiningModule: "iana-if-type"},
		255: {Name: "usb", DefiningModule: "iana-if-type"},
		256: {Name: "v11", DefiningModule: "iana-if-type"},
		257: {Name: "v35", DefiningModule: "iana-if-type"},
		258: {Name: "v36", DefiningModule: "iana-if-type"},
		259: {Name: "v37", DefiningModule: "iana-if-type"},
		260: {Name: "vdsl", DefiningModule: "iana-if-type"},
		261: {Name: "vdsl2", DefiningModule: "iana-if-type"},
		262: {Name: "virtualIpAddress", DefiningModule: "iana-if-type"},
		263: {Name: "virtualTg", DefiningModule: "iana-if-type"},
		264: {Name: "vmwareNicTeam", DefiningModule: "iana-if-type"},
		265: {Name: "vmwareVirtualNic", DefiningModule: "iana-if-type"},
		266: {Name: "voiceDID", DefiningModule: "iana-if-type"},
		267: {Name: "voiceEBS", DefiningModule: "iana-if-type"},
		268: {Name: "voiceEM", DefiningModule: "iana-if-type"},
		269: {Name: "voiceEMFGD", DefiningModule: "iana-if-type"},
		270: {Name: "voiceEncap", DefiningModule: "iana-if-type"},
		271: {Name: "voiceFGDEANA", DefiningModule: "iana-if-type"},
		272: {Name: "voiceFGDOS", DefiningModule: "iana-if-type"},
		273: {Name: "voiceFXO", DefiningModule: "iana-if-type"},
		274: {Name: "voiceFXS", DefiningModule: "iana-if-type"},
		275: {Name: "voiceOverAtm", DefiningModule: "iana-if-type"},
		276: {Name: "voiceOverCable", DefiningModule: "iana-if-type"},
		277: {Name: "voiceOverFrameRelay", DefiningModule: "iana-if-type"},
		278: {Name: "voiceOverIp", DefiningModule: "iana-if-type"},
		279: {Name: "wwanPP", DefiningModule: "iana-if-type"},
		280: {Name: "wwanPP2", DefiningModule: "iana-if-type"},
		281: {Name: "x213", DefiningModule: "iana-if-type"},
		282: {Name: "x25huntGroup", DefiningModule: "iana-if-type"},
		283: {Name: "x25mlp", DefiningModule: "iana-if-type"},
		284: {Name: "x25ple", DefiningModule: "iana-if-type"},
		285: {Name: "x86Laps", DefiningModule: "iana-if-type"},
		286: {Name: "xboxWireless", DefiningModule: "iana-if-type"},
	},
	"E_IfAggregate_AggregationType": {
		1: {Name: "LACP"},
		2: {Name: "STATIC"},
	},
	"E_IfEthernet_ETHERNET_SPEED": {
		1:  {Name: "SPEED_100GB", DefiningModule: "openconfig-if-ethernet"},
		2:  {Name: "SPEED_100MB", DefiningModule: "openconfig-if-ethernet"},
		3:  {Name: "SPEED_10GB", DefiningModule: "openconfig-if-ethernet"},
		4:  {Name: "SPEED_10MB", DefiningModule: "openconfig-if-ethernet"},
		5:  {Name: "SPEED_1GB", DefiningModule: "openconfig-if-ethernet"},
		6:  {Name: "SPEED_200GB", DefiningModule: "openconfig-if-ethernet"},
		7:  {Name: "SPEED_2500MB", DefiningModule: "openconfig-if-ethernet"},
		8:  {Name: "SPEED_25GB", DefiningModule: "openconfig-if-ethernet"},
		9:  {Name: "SPEED_400GB", DefiningModule: "openconfig-if-ethernet"},
		10: {Name: "SPEED_40GB", DefiningModule: "openconfig-if-ethernet"},
		11: {Name: "SPEED_50GB", DefiningModule: "openconfig-if-ethernet"},
		12: {Name: "SPEED_5GB", DefiningModule: "openconfig-if-ethernet"},
		13: {Name: "SPEED_600GB", DefiningModule: "openconfig-if-ethernet"},
		14: {Name: "SPEED_800GB", DefiningModule: "openconfig-if-ethernet"},
		15: {Name: "SPEED_UNKNOWN", DefiningModule: "openconfig-if-ethernet"},
	},
	"E_IfIp_IpAddressOrigin": {
		1: {Name: "OTHER"},
		2: {Name: "STATIC"},
		3: {Name: "DHCP"},
		4: {Name: "LINK_LAYER"},
		5: {Name: "RANDOM"},
	},
	"E_IfIp_NeighborOrigin": {
		1: {Name: "OTHER"},
		2: {Name: "STATIC"},
		3: {Name: "DYNAMIC"},
	},
	"E_Interface_AdminStatus": {
		1: {Name: "UP"},
		2: {Name: "DOWN"},
		3: {Name: "TESTING"},
	},
	"E_Interface_OperStatus": {
		2: {Name: "UP"},
		3: {Name: "DOWN"},
		4: {Name: "TESTING"},
		5: {Name: "UNKNOWN"},
		6: {Name: "DORMANT"},
		7: {Name: "NOT_PRESENT"},
		8: {Name: "LOWER_LAYER_DOWN"},
	},
	"E_LocalRouting_LOCAL_DEFINED_NEXT_HOP": {
		1: {Name: "DROP", DefiningModule: "openconfig-local-routing"},
		2: {Name: "LOCAL_LINK", DefiningModule: "openconfig-local-routing"},
	},
	"E_MplsTypes_MplsLabel_Enum": {
		1: {Name: "IPV4_EXPLICIT_NULL"},
		2: {Name: "ROUTER_ALERT"},
		3: {Name: "IPV6_EXPLICIT_NULL"},
		4: {Name: "IMPLICIT_NULL"},
		8: {Name: "ENTROPY_LABEL_INDICATOR"},
		9: {Name: "NO_LABEL"},
	},
	"E_Neighbor_NeighborState": {
		1: {Name: "INCOMPLETE"},
		2: {Name: "REACHABLE"},
		3: {Name: "STALE"},
		4: {Name: "DELAY"},
		5: {Name: "PROBE"},
	},
	"E_Neighbor_SessionState": {
		1: {Name: "IDLE"},
		2: {Name: "CONNECT"},
		3: {Name: "ACTIVE"},
		4: {Name: "OPENSENT"},
		5: {Name: "OPENCONFIRM"},
		6: {Name: "ESTABLISHED"},
	},
	"E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE": {
		1: {Name: "DEFAULT_INSTANCE", DefiningModule: "openconfig-network-instance-types"},
		2: {Name: "L2L3", DefiningModule: "openconfig-network-instance-types"},
		3: {Name: "L2P2P", DefiningModule: "openconfig-network-instance-types"},
		4: {Name: "L2VSI", DefiningModule: "openconfig-network-instance-types"},
		5: {Name: "L3VRF", DefiningModule: "openconfig-network-instance-types"},
	},
	"E_PolicyTypes_INSTALL_PROTOCOL_TYPE": {
		1: {Name: "BGP", DefiningModule: "openconfig-policy-types"},
		2: {Name: "DIRECTLY_CONNECTED", DefiningModule: "openconfig-policy-types"},
		3: {Name: "IGMP", DefiningModule: "openconfig-policy-types"},
		4: {Name: "ISIS", DefiningModule: "openconfig-policy-types"},
		5: {Name: "LOCAL_AGGREGATE", DefiningModule: "openconfig-policy-types"},
		6: {Name: "OSPF", DefiningModule: "openconfig-policy-types"},
		7: {Name: "OSPF3", DefiningModule: "openconfig-policy-types"},
		8: {Name: "PIM", DefiningModule: "openconfig-policy-types"},
		9: {Name: "STATIC", DefiningModule: "openconfig-policy-types"},
	},
	"E_ProxyArp_Mode": {
		1: {Name: "DISABLE"},
		2: {Name: "REMOTE_ONLY"},
		3: {Name: "ALL"},
	},
	"E_RibBgpTypes_INVALID_ROUTE_REASON": {
		1: {Name: "INVALID_AS_LOOP", DefiningModule: "openconfig-rib-bgp-types"},
		2: {Name: "INVALID_CLUSTER_LOOP", DefiningModule: "openconfig-rib-bgp-types"},
		3: {Name: "INVALID_CONFED", DefiningModule: "openconfig-rib-bgp-types"},
		4: {Name: "INVALID_ORIGINATOR", DefiningModule: "openconfig-rib-bgp-types"},
	},
	"E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE": {
		1: {Name: "SRTE_BINDING_SID", DefiningModule: "openconfig-rib-bgp-types"},
		2: {Name: "SRTE_PREFERENCE", DefiningModule: "openconfig-rib-bgp-types"},
		3: {Name: "SRTE_SEGMENT_LIST", DefiningModule: "openconfig-rib-bgp-types"},
		4: {Name: "TUNNEL_COLOR", DefiningModule: "openconfig-rib-bgp-types"},
		5: {Name: "TUNNEL_REMOTE_ENDPOINT", DefiningModule: "openconfig-rib-bgp-types"},
	},
	"E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE": {
		1: {Name: "SRTE_POLICY_TUNNEL", DefiningModule: "openconfig-rib-bgp-types"},
	},
	"E_RoutingPolicy_DefaultPolicyType": {
		1: {Name: "ACCEPT_ROUTE"},
		2: {Name: "REJECT_ROUTE"},
	},
	"E_Segment_Type": {
		2: {Name: "MPLS_SID"},
		3: {Name: "IPV6_SID"},
		4: {Name: "IPV4_NODE_ADDRESS"},
		5: {Name: "IPV6_NODE_ADDRESS"},
		6: {Name: "IPV4_LOCAL_INTF_ID"},
		7: {Name: "IPV4_LOCAL_REMOTE_ADDR"},
		8: {Name: "IPV6_LOCAL_INTF_ID"},
		9: {Name: "IPV6_LOCAL_REMOTE_ADDR"},
	},
	"E_Types_ADDRESS_FAMILY": {
		1: {Name: "IPV4", DefiningModule: "openconfig-types"},
		2: {Name: "IPV6", DefiningModule: "openconfig-types"},
		3: {Name: "L2_ETHERNET", DefiningModule: "openconfig-types"},
		4: {Name: "MPLS", DefiningModule: "openconfig-types"},
	},
	"E_VlanTypes_TPID_TYPES": {
		1: {Name: "TPID_0X8100", DefiningModule: "openconfig-vlan-types"},
		2: {Name: "TPID_0X88A8", DefiningModule: "openconfig-vlan-types"},
		3: {Name: "TPID_0X9100", DefiningModule: "openconfig-vlan-types"},
		4: {Name: "TPID_0X9200", DefiningModule: "openconfig-vlan-types"},
		5: {Name: "TPID_ANY", DefiningModule: "openconfig-vlan-types"},
	},
	"E_VlanTypes_VlanModeType": {
		1: {Name: "ACCESS"},
		2: {Name: "TRUNK"},
	},
	"E_VlanTypes_VlanStackAction": {
		1: {Name: "PUSH"},
		2: {Name: "POP"},
		3: {Name: "SWAP"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0xeb, 0x53, 0x1b, 0x49,
		0xd2, 0xc6, 0xfb, 0xdd, 0x7f, 0x05, 0xa1, 0xd8, 0x0f, 0x76, 0x84, 0xdb, 0x06, 0x21, 0x60, 0x70,
		0xc4, 0xf9, 0x80, 0xb1, 0xec, 0xe1, 0x5d, 0x2e, 0x3a, 0x80, 0xbd, 0xb3, 0xc7, 0xc3, 0x12, 0x8d,
		0x54, 0xe0, 0x8e, 0x95, 0x5a, 0xda, 0xee, 0x16, 0x63, 0xc7, 0x98, 0xff, 0xfd, 0x84, 0xae, 0x48,
		0x48, 0x32, 0xea, 0xaa, 0xac, 0xbe, 0xfe, 0x1c, 0xef, 0xbb, 0xcb, 0xda, 0x28, 0x5b, 0x5d, 0x97,
		0xa7, 0x9e, 0xcc, 0x7a, 0x32, 0xf3, 0xef, 0x17, 0x1b, 0x1b, 0x1b, 0x1b, 0x95, 0x53, 0xb7, 0xa3,
		0x2a, 0xef, 0x36, 0x2a, 0x2d, 0x75, 0xef, 0x35, 0x55, 0xe5, 0xf5, 0xe8, 0x6f, 0xff, 0xe9, 0xf9,
		0xad, 0xca, 0xbb, 0x8d, 0xad, 0xf1, 0xff, 0x3c, 0xec, 0xfa, 0xb7, 0xde, 0x5d, 0xe5, 0xdd, 0xc6,
		0xe6, 0xf8, 0x2f, 0x3e, 0x78, 0x41, 0xe5, 0xdd, 0xc6, 0xc8, 0xc4, 0xf0, 0x2f, 0x6e, 0x6e, 0x5b,
		0x73, 0x7f, 0x31, 0x67, 0x7b, 0xf0, 0x8f, 0xaf, 0xe7, 0xff, 0x69, 0xfe, 0x01, 0xd3, 0xbf, 0x7e,
		0xfa, 0xa0, 0xe9, 0x3f, 0x34, 0x02, 0x75, 0xeb, 0x7d, 0x5f, 0x78, 0xc4, 0xdc, 0x63, 0xba, 0x4d,
		0x67, 0xf1, 0x49, 0xc3, 0xdf, 0xb8, 0xe8, 0xf6, 0x83, 0xa6, 0x5a, 0xfa, 0xe9, 0xd1, 0xb7, 0x51,
		0x3f, 0xfe, 0xea, 0x06, 0x83, 0x2f, 0x54, 0xe9, 0x8d, 0x1e, 0xf4, 0x7a, 0xf9, 0x2f, 0xfe, 0xee,
		0x86, 0x07, 0xc1, 0x5d, 0xbf, 0xa3, 0xfc, 0xa8, 0xf2, 0x6e, 0x23, 0x0a, 0xfa, 0x6a, 0xc5, 0x2f,
		0xce, 0xfc, 0xd6, 0xe4, 0x7b, 0x2d, 0xfc, 0xe2, 0xc3, 0xdc, 0xdf, 0x3c, 0x3c, 0x79, 0xe3, 0xa7,
		0x43, 0x3c, 0xfd, 0x07, 0xcf, 0x8f, 0x54, 0x70, 0xeb, 0x36, 0x55, 0xb8, 0xfa, 0x85, 0x26, 0x43,
		0x32, 0xf3, 0xbb, 0x2b, 0xbe, 0xe8, 0xf2, 0x89, 0x78, 0x76, 0x42, 0xd6, 0x99, 0x98, 0xf5, 0x27,
		0x68, 0xdd, 0x89, 0x8a, 0x3d, 0x61, 0xb1, 0x27, 0x2e, 0xd6, 0x04, 0x2e, 0x9f, 0xc8, 0x15, 0x13,
		0xfa, 0xec, 0xc4, 0x2e, 0x4e, 0xf0, 0xf3, 0xe3, 0xb0, 0x30, 0xcf, 0xcf, 0x8d, 0xc3, 0xaf, 0xa7,
		0x7b, 0xed, 0x69, 0x8f, 0x33, 0xfd, 0xf1, 0x97, 0x41, 0xdc, 0xe5, 0xa0, 0xbd, 0x2c, 0xb4, 0x97,
		0x87, 0xd6, 0x32, 0xf9, 0xf5, 0x72, 0x79, 0x66, 0xd9, 0xac, 0xbd, 0x7c, 0xa6, 0xbf, 0xd8, 0x9c,
		0xcc, 0xe1, 0x9a, 0x83, 0x37, 0x99, 0x9e, 0xf1, 0xe7, 0xd6, 0x1c, 0x80, 0xf5, 0x16, 0x54, 0xec,
		0x85, 0xa5, 0xb3, 0xc0, 0xf4, 0x17, 0x9a, 0xee, 0x82, 0x33, 0x5e, 0x78, 0xc6, 0x0b, 0xd0, 0x68,
		0x21, 0xae, 0xb7, 0x20, 0xd7, 0x5c, 0x98, 0xb1, 0x17, 0xe8, 0xf4, 0x03, 0x2d, 0x15, 0x7a, 0x81,
		0x6a, 0x39, 0x1d, 0xcf, 0xf7, 0x3a, 0xfd, 0x8e, 0x13, 0x7d, 0x77, 0x86, 0x78, 0x76, 0xef, 0xb6,
		0xe3, 0xcf, 0xc4, 0x23, 0x9f, 0x59, 0x6d, 0x34, 0xe6, 0xd0, 0x8e, 0x97, 0xf8, 0x66, 0xcc, 0x8f,
		0xc5, 0x5d, 0xea, 0x26, 0x4b, 0xde, 0x7c, 0xe9, 0x9b, 0x6e, 0x01, 0xb1, 0xad, 0x20, 0xb6, 0x25,
		0x44, 0xb6, 0x46, 0xbc, 0x2d, 0x12, 0x73, 0xab, 0x4c, 0xbf, 0xe1, 0xe5, 0x8f, 0x9e, 0x32, 0x9b,
		0xef, 0xbe, 0xe7, 0x47, 0xdb, 0x55, 0x9d, 0xf9, 0x1e, 0xaf, 0xee, 0x3d, 0x8d, 0x8f, 0x9e, 0xbb,
		0xfe, 0xdd, 0xe0, 0xe9, 0x5f, 0xb5, 0xe6, 0x45, 0x6f, 0x7d, 0x0d, 0x1f, 0x7c, 0xe2, 0xf9, 0xda,
		0x0b, 0xd4, 0x70, 0x5b, 0x2f, 0x98, 0xf9, 0xe2, 0xb6, 0xfb, 0x4a, 0xc0, 0xce, 0xc7, 0xc0, 0x6d,
		0x46, 0x5e, 0xd7, 0xff, 0xe0, 0xdd, 0x79, 0xd1, 0x80, 0xda, 0x6f, 0x6a, 0xdb, 0x7b, 0x78, 0x6d,
		0x30, 0xb4, 0xee, 0xf7, 0xcc, 0x0d, 0x6d, 0xad, 0xba, 0x5f, 0xdb, 0xdf, 0xdd, 0xab, 0xee, 0xef,
		0x64, 0x68, 0x8c, 0x5f, 0x24, 0xf3, 0xa9, 0xab, 0x17, 0x76, 0xec, 0xc7, 0x58, 0x23, 0x95, 0x96,
		0x8a, 0xd4, 0x70, 0xdc, 0x9c, 0x4e, 0xbf, 0x1d, 0x79, 0xbd, 0xb6, 0xa7, 0x02, 0x93, 0x93, 0x79,
		0x89, 0x35, 0x8e, 0x64, 0x8e, 0xe4, 0x02, 0x1e, 0xc9, 0xbf, 0x19, 0x9c, 0xc8, 0x3b, 0x9c, 0xc8,
		0x66, 0xc7, 0xc6, 0x16, 0x27, 0xf2, 0xd3, 0xa1, 0xdd, 0x2e, 0x20, 0xd9, 0x29, 0xd1, 0x41, 0xac,
		0x7c, 0xf7, 0xa6, 0xad, 0x9c, 0x9e, 0x0a, 0x9c, 0x8e, 0xea, 0xdc, 0xa8, 0xc0, 0x69, 0x7b, 0xfe,
		0x7f, 0xf5, 0x8f, 0xe2, 0x15, 0xf6, 0x62, 0x42, 0xe5, 0x07, 0x75, 0xeb, 0xf6, 0xdb, 0x43, 0x2c,
		0xbf, 0x75, 0xdb, 0xa1, 0xe2, 0x30, 0xe7, 0x30, 0x2f, 0xda, 0x61, 0x7e, 0xd3, 0xed, 0xb6, 0x95,
		0xeb, 0x1b, 0x1c, 0xe7, 0x5b, 0x5b, 0x99, 0x01, 0x90, 0x96, 0x29, 0x62, 0xb4, 0xd8, 0xe2, 0x6c,
		0x71, 0xb6, 0x78, 0x26, 0xb7, 0xb8, 0x67, 0xb0, 0xbb, 0x3d, 0x36, 0x36, 0x1b, 0xbb, 0x70, 0x1b,
		0x3b, 0x8c, 0x02, 0xcf, 0xbf, 0x33, 0xd9, 0xd7, 0xbf, 0x65, 0x60, 0x5f, 0xb7, 0xbb, 0x4d, 0xb7,
		0xed, 0xb8, 0xad, 0x56, 0xa0, 0xc2, 0x50, 0x7f, 0x8b, 0xcf, 0x9b, 0x61, 0xb7, 0xb3, 0xdb, 0x0b,
		0xb6, 0xdb, 0xbd, 0x9e, 0xe6, 0xea, 0x9e, 0xdb, 0xf1, 0xfb, 0x1a, 0x9f, 0x1d, 0x7f, 0xf7, 0xc4,
		0x63, 0x6f, 0x8f, 0x6f, 0x7e, 0x5f, 0x33, 0x78, 0xf7, 0x45, 0xd4, 0x33, 0xb0, 0xd1, 0x70, 0xa3,
		0x48, 0x05, 0xbe, 0xf6, 0x70, 0x4c, 0x0d, 0xbd, 0x7c, 0xf9, 0x75, 0xd3, 0xd9, 0xbf, 0xfa, 0xf9,
		0x75, 0xcb, 0xd9, 0xbf, 0x1a, 0xfd, 0xb8, 0x35, 0xfc, 0xaf, 0xd1, 0xcf, 0xd5, 0xaf, 0x9b, 0x4e,
		0x6d, 0xf2, 0xf3, 0xce, 0xd7, 0x4d, 0x67, 0xe7, 0xea, 0xd5, 0x9f, 0x7f, 0xbe, 0x79, 0xf5, 0xf7,
		0xf6, 0x43, 0xfc, 0x0f, 0x56, 0xb4, 0xbf, 0xea, 0x95, 0xc9, 0x50, 0x9d, 0x5d, 0x1c, 0xfd, 0x21,
		0x36, 0x5e, 0xff, 0x49, 0x72, 0xc0, 0xfe, 0x61, 0x30, 0x62, 0x2f, 0x12, 0x8c, 0xa3, 0xca, 0x6c,
		0xae, 0xdd, 0x82, 0x6e, 0x2e, 0xd7, 0xb9, 0x3d, 0x70, 0x3e, 0x5e, 0xfd, 0xbd, 0xf5, 0xba, 0xf6,
		0xf0, 0xee, 0xd5, 0xdf, 0x7b, 0x0f, 0x4f, 0xff, 0xf2, 0xe7, 0xb2, 0x5f, 0xdb, 0x7a, 0xbd, 0xf7,
		0xf0, 0x6e, 0xc5, 0xbf, 0xec, 0x3e, 0xbc, 0x5b, 0xd3, 0xc6, 0xce, 0xc3, 0xcb, 0x85, 0x5f, 0x1d,
		0xfc, 0x7d, 0x75, 0xd5, 0x07, 0x6a, 0x2b, 0x3e, 0xb0, 0xbd, 0xea, 0x03, 0xdb, 0x2b, 0x3e, 0xb0,
		0xf2, 0x2b, 0x55, 0x57, 0x7c, 0x60, 0xe7, 0xe1, 0xe7, 0xc2, 0xef, 0xbf, 0x5c, 0xfe, 0xab, 0xbb,
		0x0f, 0xaf, 0x7e, 0xae, 0xfa, 0xb7, 0xbd, 0x87, 0x9f, 0xef, 0x5e, 0x15, 0x09, 0x6a, 0x58, 0x3e,
		0xc9, 0x2f, 0x9f, 0xe4, 0x81, 0x37, 0x97, 0xf7, 0x25, 0x81, 0xfa, 0x5f, 0x7f, 0x4e, 0x05, 0x18,
		0xa8, 0xa6, 0xf2, 0xee, 0x95, 0xbe, 0xfb, 0xb4, 0xd2, 0x22, 0x9e, 0x14, 0x9e, 0x54, 0xc1, 0x3c,
		0x29, 0x34, 0x85, 0xba, 0x2f, 0x8e, 0xa6, 0x70, 0x7e, 0x68, 0xd1, 0x14, 0x5a, 0x3a, 0x64, 0x33,
		0x76, 0x34, 0x8b, 0xe6, 0x11, 0x1c, 0xf8, 0x7e, 0x37, 0x72, 0x07, 0x43, 0x1b, 0x2f, 0x9d, 0x20,
		0x6c, 0x7e, 0x53, 0x1d, 0xb7, 0xe7, 0x46, 0xdf, 0x06, 0x20, 0xf6, 0xb6, 0xdb, 0x53, 0xfe, 0x28,
		0xa5, 0x65, 0x80, 0xd2, 0x6f, 0x07, 0xff, 0xff, 0x98, 0x15, 0xf7, 0xf8, 0xe3, 0xdb, 0x71, 0xda,
		0xcb, 0x0b, 0x99, 0x17, 0x5d, 0xe3, 0x25, 0xe3, 0xdc, 0xd4, 0xc4, 0xbf, 0xa1, 0x89, 0xb9, 0x5f,
		0x48, 0xcc, 0xb1, 0xc4, 0x18, 0x32, 0x94, 0x98, 0x13, 0x9b, 0x11, 0x3c, 0x5e, 0x1a, 0x28, 0xf7,
		0x36, 0x50, 0xb7, 0x71, 0x26, 0x6c, 0x12, 0xe7, 0x88, 0xc1, 0x01, 0x2a, 0x8d, 0xf1, 0x9e, 0x7d,
		0xf3, 0xe6, 0x6d, 0x18, 0xb9, 0x91, 0x7a, 0xeb, 0xb5, 0x12, 0xdd, 0x8f, 0x13, 0x2c, 0x70, 0x06,
		0xef, 0x1a, 0x7f, 0x6b, 0xce, 0x7d, 0xbc, 0x18, 0xe9, 0x73, 0xde, 0x6d, 0x29, 0x37, 0xa9, 0x77,
		0x9b, 0x9b, 0xe4, 0xb9, 0x98, 0x59, 0x9e, 0x0b, 0x93, 0x1c, 0x2b, 0xdb, 0x53, 0x73, 0xd9, 0x66,
		0xc6, 0x7d, 0x8d, 0xb5, 0x9c, 0xcb, 0xe3, 0xbd, 0xc6, 0x59, 0xee, 0xc9, 0x38, 0xaf, 0x71, 0xb7,
		0xc1, 0x22, 0x86, 0xeb, 0x4f, 0x57, 0xdc, 0x9c, 0x7a, 0x4b, 0x1e, 0x8b, 0xf6, 0x66, 0x91, 0xd8,
		0x34, 0x62, 0x9b, 0x47, 0x6a, 0x13, 0x89, 0x6f, 0x26, 0xf1, 0x4d, 0x25, 0xb9, 0xb9, 0x0c, 0x1d,
		0x42, 0xcd, 0xf5, 0xa2, 0x1d, 0x31, 0x12, 0xe0, 0x8b, 0x12, 0xfc, 0x71, 0x25, 0x9f, 0x7c, 0x3b,
		0x9c, 0x86, 0x77, 0x33, 0x6e, 0xdf, 0x93, 0xbf, 0x18, 0xff, 0x6f, 0x7f, 0xf0, 0xf5, 0x13, 0xf2,
		0xc1, 0x35, 0x26, 0xa9, 0x12, 0xf6, 0x6f, 0x04, 0xf1, 0x6d, 0xce, 0x1a, 0x10, 0x07, 0xc4, 0x01,
		0x71, 0x05, 0x86, 0xb8, 0xaf, 0x8f, 0x10, 0xf7, 0xff, 0x34, 0xfb, 0x41, 0xa0, 0xfc, 0xe8, 0xe5,
		0xab, 0xb7, 0x6f, 0xde, 0x3c, 0x46, 0xc0, 0xae, 0xc6, 0x1f, 0x99, 0xc5, 0x85, 0x70, 0xc9, 0xdf,
		0x4d, 0x2d, 0xb7, 0xd4, 0xf7, 0xc4, 0xd0, 0xd2, 0x2a, 0xdb, 0xac, 0x7f, 0x1f, 0x06, 0x6e, 0xe3,
		0x5f, 0x39, 0x98, 0x3b, 0x04, 0xdd, 0xa6, 0xa3, 0xbe, 0x47, 0xef, 0x22, 0xd5, 0x56, 0x1d, 0x15,
		0x05, 0x3f, 0x9c, 0xae, 0xef, 0x34, 0xbf, 0x0d, 0xef, 0x40, 0x44, 0x9c, 0x84, 0x61, 0x42, 0x96,
		0x80, 0x97, 0x60, 0xdb, 0x41, 0xb8, 0x8a, 0xeb, 0xb0, 0xeb, 0x05, 0x87, 0x4d, 0x83, 0xc4, 0x73,
		0x31, 0x9e, 0x58, 0x21, 0xe3, 0xf8, 0xc3, 0x12, 0xe7, 0xa2, 0x7b, 0x18, 0x2e, 0xd3, 0x0f, 0x02,
		0x8c, 0x3e, 0x9e, 0x70, 0x0c, 0xa0, 0x4a, 0x0c, 0x80, 0x18, 0x00, 0x31, 0x00, 0x08, 0x32, 0x04,
		0x19, 0x82, 0x4c, 0x0c, 0x80, 0x18, 0x00, 0x10, 0x07, 0xc4, 0x01, 0x71, 0xc4, 0x00, 0x52, 0x61,
		0x9b, 0x99, 0x70, 0x28, 0x47, 0x7e, 0x18, 0xea, 0xac, 0x67, 0xc6, 0xa9, 0x12, 0xcb, 0x33, 0x0e,
		0xfa, 0xcd, 0xc8, 0x1f, 0xef, 0xd8, 0xf7, 0xb7, 0xad, 0xeb, 0xa3, 0x89, 0xa9, 0xc7, 0x9f, 0xce,
		0xd5, 0x6d, 0x92, 0x42, 0x93, 0x8e, 0xd7, 0x0c, 0xba, 0x83, 0xf7, 0x75, 0x42, 0x15, 0x86, 0x5e,
		0xd7, 0x0f, 0xe3, 0xab, 0x4d, 0x96, 0xd8, 0xa0, 0x62, 0x73, 0x82, 0x07, 0x6c, 0xa9, 0x2b, 0x36,
		0x2f, 0x2c, 0x3e, 0xfd, 0xd0, 0xd3, 0xa2, 0xa9, 0x72, 0x48, 0x51, 0xc8, 0xa4, 0x10, 0xd8, 0x06,
		0x19, 0x0f, 0x44, 0x69, 0x6a, 0xb3, 0x16, 0x96, 0x8b, 0x96, 0x46, 0xcb, 0x70, 0x83, 0x64, 0xd6,
		0x3f, 0xd3, 0xdb, 0x38, 0x38, 0x68, 0x5a, 0x1b, 0x2b, 0x1d, 0x0f, 0x4d, 0x77, 0xc3, 0x4d, 0x0d,
		0x98, 0xd5, 0x4a, 0x59, 0xed, 0xef, 0x19, 0xd4, 0x4e, 0x11, 0x0e, 0x9b, 0x88, 0x6d, 0x4f, 0xc9,
		0x6d, 0x2a, 0xbf, 0x5d, 0xa5, 0xb7, 0xad, 0xb5, 0xed, 0x6b, 0x6d, 0x1b, 0x5b, 0xd9, 0xce, 0x66,
		0xdb, 0xda, 0x70, 0x7b, 0xcb, 0x05, 0x62, 0x16, 0xd6, 0x9b, 0x51, 0xed, 0x97, 0x95, 0x07, 0xe7,
		0xbe, 0x80, 0x2d, 0xa3, 0xda, 0x30, 0x4f, 0xff, 0xc8, 0xec, 0x81, 0x0d, 0x0b, 0xb5, 0x63, 0x56,
		0x8e, 0xe1, 0x6f, 0x82, 0x36, 0xa5, 0x0a, 0x18, 0x2c, 0x18, 0xce, 0x47, 0xad, 0x99, 0xa7, 0x7f,
		0xae, 0x24, 0x87, 0x56, 0xb2, 0x40, 0xc4, 0x82, 0xf5, 0xbc, 0xd4, 0xa6, 0x59, 0x18, 0x61, 0x11,
		0x4b, 0x0f, 0xaf, 0x33, 0xbc, 0xf9, 0x77, 0xd9, 0xfc, 0x14, 0x33, 0xc9, 0x5d, 0x2d, 0x9c, 0xdc,
		0x43, 0x21, 0xcb, 0x2d, 0x57, 0xb5, 0x73, 0x2c, 0x1d, 0x0c, 0x2f, 0xd2, 0xfd, 0x1e, 0x0f, 0xa9,
		0x14, 0x85, 0x18, 0x37, 0x1c, 0x30, 0x17, 0x33, 0x2c, 0x86, 0x94, 0x9f, 0x5a, 0xc6, 0x53, 0xc7,
		0x53, 0xc7, 0x53, 0xcf, 0x94, 0xa7, 0x6e, 0x2e, 0x9d, 0x58, 0x60, 0x99, 0x7b, 0x02, 0xb6, 0xe2,
		0xaa, 0xc5, 0x46, 0x65, 0x0a, 0x4c, 0x95, 0x63, 0xe9, 0x02, 0x71, 0xa0, 0x3a, 0xdd, 0x48, 0xc9,
		0x47, 0x4b, 0x9f, 0xd8, 0x05, 0x84, 0x01, 0x61, 0x40, 0x98, 0x70, 0x29, 0xe1, 0x52, 0xc2, 0xa5,
		0x84, 0x4b, 0x09, 0x97, 0x12, 0x2e, 0x25, 0x5c, 0x4a, 0xfc, 0x8a, 0x70, 0x29, 0xe1, 0x52, 0xc2,
		0xa5, 0x65, 0x09, 0x97, 0x26, 0xaa, 0xa2, 0x32, 0xcc, 0x68, 0x98, 0xda, 0xd1, 0x54, 0xec, 0x2f,
		0x0a, 0xd4, 0x17, 0xff, 0x4a, 0x2b, 0x83, 0x5e, 0x7f, 0x34, 0x75, 0xf2, 0xed, 0xc4, 0xc2, 0xd4,
		0xd2, 0xe1, 0xe9, 0xa2, 0xe5, 0xdd, 0xa1, 0xeb, 0x4c, 0x21, 0xb2, 0x41, 0xe6, 0x9d, 0x48, 0xe6,
		0xdd, 0xb4, 0x60, 0xed, 0xc2, 0xde, 0xce, 0x72, 0x26, 0xb1, 0x56, 0xcd, 0x90, 0x85, 0xa9, 0xd0,
		0xa9, 0x1d, 0xb2, 0x30, 0x09, 0xa6, 0x18, 0x56, 0x05, 0xc3, 0xc0, 0xb0, 0x44, 0x30, 0xcc, 0x58,
		0x9b, 0xee, 0x86, 0x3f, 0xfc, 0xa6, 0xdc, 0x2d, 0xcb, 0xc8, 0x9c, 0xcc, 0xe5, 0xca, 0x16, 0x97,
		0x2b, 0x09, 0x6e, 0x53, 0x6b, 0xdb, 0xd5, 0xda, 0xb6, 0xb5, 0xb2, 0x7d, 0x65, 0xdc, 0x3a, 0xd3,
		0xcb, 0x15, 0xd3, 0x6d, 0x3d, 0x35, 0xd4, 0x76, 0xc3, 0xc8, 0xe9, 0xb9, 0xcd, 0xff, 0xaa, 0x68,
		0xd2, 0x1b, 0xaa, 0x25, 0xb7, 0x54, 0xa6, 0xfc, 0x67, 0xd9, 0x53, 0x84, 0x26, 0x57, 0xe6, 0xa6,
		0x55, 0x1c, 0x14, 0x6c, 0x80, 0x83, 0x3d, 0x90, 0xb0, 0x05, 0x16, 0xd6, 0x41, 0xc3, 0x3a, 0x78,
		0x58, 0x05, 0x11, 0xb9, 0x18, 0xd1, 0x86, 0xdc, 0x15, 0x84, 0xdc, 0xcd, 0xed, 0xc2, 0x7a, 0xed,
		0x7b, 0x7e, 0xb4, 0x5b, 0xb3, 0x70, 0x09, 0x21, 0x79, 0x07, 0x61, 0xd6, 0xd2, 0x6b, 0xd5, 0x1f,
		0xd9, 0xfd, 0xb4, 0x21, 0xd5, 0x02, 0x2c, 0x21, 0x58, 0x5d, 0x30, 0x2f, 0xd4, 0x32, 0x6c, 0xa5,
		0x7d, 0xc1, 0x36, 0x57, 0x96, 0xb7, 0xdb, 0xfc, 0x94, 0xba, 0xdf, 0x73, 0x3f, 0xa5, 0x5b, 0xbf,
		0xd5, 0x6a, 0xbb, 0x7b, 0xb5, 0xda, 0xe6, 0xde, 0xf6, 0xde, 0xe6, 0xfe, 0xce, 0xce, 0xd6, 0xee,
		0xd6, 0x4e, 0x8e, 0x67, 0xf9, 0x45, 0x36, 0xad, 0x65, 0xe5, 0x72, 0x42, 0x60, 0x17, 0xcc, 0xd1,
		0xc3, 0x28, 0x70, 0xfd, 0xb0, 0xe3, 0x45, 0x91, 0x6d, 0x1e, 0x3a, 0xfb, 0x20, 0xa8, 0x28, 0x54,
		0x14, 0x2a, 0x0a, 0x15, 0x85, 0x8a, 0x42, 0x45, 0xa1, 0xa2, 0x50, 0x51, 0xa8, 0x68, 0x59, 0xa9,
		0xe8, 0x24, 0x3a, 0x39, 0x66, 0x89, 0xa1, 0x3c, 0x07, 0x5d, 0x78, 0x02, 0xe4, 0x13, 0xf2, 0x09,
		0xf9, 0x84, 0x7c, 0x42, 0x3e, 0x21, 0x9f, 0x90, 0x4f, 0xc8, 0x27, 0xe4, 0xb3, 0xac, 0xe4, 0x73,
		0x26, 0x24, 0x69, 0x8f, 0x7f, 0x2e, 0x7b, 0x08, 0x14, 0x14, 0x0a, 0x0a, 0x05, 0x85, 0x82, 0x42,
		0x41, 0xa1, 0xa0, 0x50, 0x50, 0x28, 0x28, 0x14, 0xb4, 0xac, 0x14, 0xb4, 0xdf, 0x1b, 0x5d, 0x8c,
		0x7b, 0x51, 0xac, 0x3e, 0x2f, 0xeb, 0x1f, 0x3b, 0xf3, 0xf6, 0x21, 0x9e, 0x10, 0x4f, 0x88, 0x27,
		0xc4, 0x13, 0xe2, 0x09, 0xf1, 0x84, 0x78, 0x42, 0x3c, 0x21, 0x9e, 0xb9, 0x24, 0x9e, 0xa9, 0xe6,
		0x42, 0x09, 0x15, 0x8e, 0x98, 0xda, 0xb3, 0x59, 0x40, 0x62, 0x94, 0x76, 0x2d, 0x91, 0x04, 0xb9,
		0xf1, 0x5c, 0xb7, 0xc8, 0x93, 0xc1, 0xc3, 0xdf, 0xdf, 0xb6, 0x2e, 0x46, 0x8f, 0xbe, 0x3e, 0x18,
		0x3e, 0x34, 0x87, 0x05, 0x3f, 0x5b, 0xaa, 0xe3, 0xfa, 0x2d, 0xa7, 0xd3, 0x6d, 0x29, 0x27, 0x50,
		0xff, 0xeb, 0xab, 0x50, 0x42, 0x1b, 0x3c, 0xe5, 0x23, 0xcb, 0xcd, 0x53, 0xfe, 0x33, 0x39, 0xc7,
		0x83, 0x0c, 0x55, 0xca, 0x7f, 0xae, 0xb1, 0xde, 0x6e, 0xba, 0xdd, 0xb6, 0x72, 0x7d, 0xc9, 0xda,
		0x9f, 0x5b, 0x39, 0x84, 0xc3, 0x5b, 0xd7, 0x6b, 0xf7, 0x03, 0x25, 0x1a, 0xa6, 0x99, 0x8e, 0xf1,
		0x32, 0xe3, 0x40, 0x21, 0x50, 0x08, 0x14, 0x66, 0x0a, 0x0a, 0xc5, 0x62, 0x28, 0x82, 0xb1, 0x13,
		0xe1, 0x98, 0x89, 0x60, 0xe4, 0xc9, 0x46, 0x8c, 0xc4, 0x92, 0x23, 0x6d, 0x2b, 0x26, 0x62, 0xd3,
		0x4b, 0x16, 0x8c, 0x81, 0x58, 0x89, 0x7d, 0xd8, 0x9e, 0x2a, 0xfb, 0xb1, 0x0e, 0xab, 0xb3, 0x47,
		0x4f, 0x20, 0xed, 0x69, 0x19, 0xa6, 0x93, 0x4e, 0x29, 0x93, 0xd7, 0x11, 0x6c, 0x0a, 0xb4, 0x68,
		0x1a, 0x1a, 0x06, 0x0d, 0x83, 0x86, 0x65, 0x8a, 0x86, 0x0d, 0xf6, 0x65, 0xe4, 0x35, 0xff, 0x1b,
		0x66, 0x8e, 0x8b, 0x7d, 0xf6, 0x47, 0xe7, 0x44, 0xc5, 0x77, 0xfd, 0x6e, 0xa8, 0x9a, 0x5d, 0xbf,
		0x25, 0xd2, 0x34, 0x03, 0x8e, 0x07, 0xc7, 0x83, 0xe3, 0xc1, 0xf1, 0x4a, 0xc4, 0xf1, 0xba, 0x4d,
		0xb7, 0x2d, 0xdf, 0x6d, 0x6c, 0xde, 0x2c, 0xdc, 0x0e, 0x6e, 0x07, 0xb7, 0xcb, 0x14, 0xb7, 0xa3,
		0xd9, 0x98, 0xfe, 0xc8, 0xd1, 0x6c, 0x8c, 0x66, 0x63, 0x34, 0x1b, 0xb3, 0x40, 0x81, 0x84, 0xe9,
		0x38, 0xcd, 0xc6, 0x68, 0x36, 0x46, 0xb3, 0xb1, 0x82, 0x40, 0x21, 0xcb, 0x8d, 0x66, 0x63, 0xa5,
		0xf6, 0xd1, 0x5b, 0x9e, 0x7b, 0xe7, 0x77, 0xc3, 0xc8, 0x6b, 0x3a, 0xcd, 0x6e, 0x4b, 0x49, 0xfb,
		0xea, 0x4f, 0xcd, 0xe3, 0xb3, 0xe3, 0xb3, 0xe3, 0xb3, 0x67, 0xca, 0x67, 0xbf, 0xb9, 0x6d, 0x09,
		0x6f, 0xd3, 0x39, 0xee, 0x59, 0x13, 0xb0, 0x55, 0xf7, 0xfb, 0x9d, 0xc1, 0x4b, 0x3f, 0xe4, 0x18,
		0x66, 0xc3, 0x66, 0xe0, 0x75, 0x3c, 0xdf, 0x8d, 0xba, 0x81, 0x3c, 0xc8, 0xce, 0x1a, 0x07, 0x62,
		0x81, 0x58, 0x20, 0x36, 0x53, 0x10, 0x1b, 0x46, 0x81, 0xe7, 0xdf, 0x49, 0xa2, 0xea, 0x6f, 0x39,
		0x44, 0x42, 0xb1, 0x2e, 0xab, 0x0b, 0xe3, 0x2b, 0xd4, 0x6d, 0x15, 0x0c, 0x04, 0x03, 0xc1, 0x40,
		0x4b, 0x18, 0x68, 0xde, 0xcd, 0x75, 0x01, 0x04, 0xf7, 0x04, 0x6c, 0x35, 0xa6, 0x19, 0x8b, 0x4d,
		0xc7, 0xbb, 0x7d, 0x37, 0x93, 0xa4, 0xf8, 0xe4, 0x2f, 0xc6, 0xff, 0x7b, 0x94, 0x8b, 0x38, 0xfa,
		0x79, 0x98, 0x42, 0x98, 0x43, 0x20, 0x0e, 0x54, 0xa7, 0x1b, 0x29, 0xf9, 0xeb, 0xf9, 0x27, 0x76,
		0x01, 0x61, 0x40, 0x18, 0x10, 0xce, 0x14, 0x08, 0x73, 0x3f, 0xaf, 0x3f, 0x72, 0xdc, 0xcf, 0x73,
		0x3f, 0xcf, 0xfd, 0xfc, 0xf2, 0x11, 0xe6, 0x7e, 0xbe, 0x2c, 0x9b, 0x9f, 0x0b, 0x53, 0xee, 0xe7,
		0x13, 0x84, 0x42, 0x96, 0x1b, 0xf7, 0xf3, 0x25, 0xbd, 0x9f, 0x9f, 0x78, 0xd3, 0xfd, 0xe8, 0x9b,
		0xf2, 0x23, 0xaf, 0x39, 0x2c, 0xd6, 0xe4, 0x28, 0xdf, 0xbd, 0x69, 0x4b, 0x56, 0xf2, 0xf9, 0xf5,
		0x63, 0xf0, 0xe1, 0xf1, 0xe1, 0xf1, 0xe1, 0x33, 0xe5, 0xc3, 0x53, 0xd1, 0x67, 0x16, 0x1e, 0x9b,
		0x5d, 0x3f, 0x0a, 0xba, 0x6d, 0xa7, 0xd7, 0x76, 0x7d, 0xe5, 0x78, 0x7e, 0x4b, 0xf5, 0x94, 0xdf,
		0x1a, 0x2d, 0x21, 0x59, 0x84, 0x5c, 0xfd, 0x24, 0x40, 0x12, 0x90, 0x04, 0x24, 0x01, 0xc9, 0xcc,
		0x82, 0xa4, 0x35, 0x91, 0xe7, 0x0a, 0xfb, 0x00, 0x22, 0x80, 0x08, 0x20, 0x66, 0x0b, 0x10, 0x51,
		0x79, 0x26, 0x02, 0xb4, 0x56, 0x64, 0x9e, 0x4b, 0xad, 0x03, 0xb2, 0x80, 0x2c, 0x20, 0x9b, 0x29,
		0x90, 0x45, 0xe7, 0x39, 0x83, 0x85, 0x1d, 0xcf, 0xf7, 0x3a, 0xfd, 0x8e, 0x33, 0x6e, 0xdd, 0x3e,
		0x52, 0x67, 0xde, 0xbb, 0x6d, 0x71, 0x58, 0x5c, 0xf9, 0x20, 0x10, 0x12, 0x84, 0x04, 0x21, 0x33,
		0x85, 0x90, 0x7d, 0xcf, 0x8f, 0xb6, 0xab, 0x82, 0x08, 0xb9, 0x47, 0x7d, 0xb6, 0x54, 0x60, 0x6d,
		0xc1, 0x2c, 0xf5, 0xd9, 0x72, 0x37, 0x55, 0xb5, 0xea, 0x7e, 0x6d, 0x7f, 0x77, 0xaf, 0xba, 0x4f,
		0x55, 0xb6, 0xd8, 0x7f, 0x72, 0x7c, 0xa3, 0x3c, 0x6e, 0xab, 0xe3, 0x0c, 0xa5, 0xec, 0xe2, 0x6c,
		0x6c, 0xde, 0x3a, 0x14, 0x0c, 0x0a, 0x06, 0x05, 0xcb, 0x5c, 0x24, 0x50, 0x72, 0x93, 0x12, 0x07,
		0x9c, 0xf9, 0xee, 0x96, 0xb0, 0x15, 0x50, 0x05, 0x54, 0x01, 0x55, 0x40, 0x35, 0xc7, 0xa0, 0xfa,
		0x22, 0xc1, 0x89, 0x96, 0xea, 0x6e, 0x69, 0xbf, 0xab, 0xa5, 0xde, 0x4e, 0x8a, 0x3f, 0x98, 0xf1,
		0x3e, 0x11, 0x73, 0xd8, 0x07, 0x98, 0x26, 0x90, 0x86, 0x5f, 0x39, 0xf6, 0xc2, 0xe8, 0x20, 0x8a,
		0xf4, 0x2e, 0xce, 0x2a, 0x27, 0x9e, 0x5f, 0x6f, 0xab, 0x01, 0x50, 0x85, 0x7a, 0x87, 0xd2, 0xc0,
		0x87, 0x9f, 0xb1, 0x20, 0x53, 0xbd, 0xbc, 0x72, 0x16, 0xb4, 0x54, 0xa0, 0x5a, 0xef, 0x07, 0x23,
		0xe4, 0xf7, 0xdb, 0x6d, 0xab, 0x13, 0x61, 0xb8, 0xee, 0x6d, 0xae, 0x77, 0x0d, 0x40, 0x8c, 0xd3,
		0xa9, 0x35, 0xde, 0x46, 0x5a, 0x7f, 0x3b, 0xac, 0xf7, 0x9b, 0x6b, 0xce, 0x93, 0xee, 0xfc, 0xc8,
		0xcd, 0xcb, 0x7a, 0xc3, 0xf4, 0xfc, 0x4b, 0xaf, 0xf1, 0xc2, 0x95, 0x9e, 0x52, 0xc1, 0xfa, 0xd9,
		0xe5, 0xd3, 0xa3, 0x74, 0xf4, 0xb1, 0x35, 0x07, 0x74, 0x72, 0x44, 0xae, 0xf9, 0xeb, 0x71, 0x39,
		0xab, 0x0e, 0x37, 0xd5, 0xe7, 0xa0, 0xba, 0x5c, 0xd3, 0x98, 0x53, 0x1a, 0x73, 0x47, 0x23, 0x8e,
		0x28, 0xbb, 0xc5, 0x3e, 0x78, 0xf1, 0xce, 0x8f, 0xe1, 0x7a, 0x8b, 0x3f, 0xe4, 0xb3, 0xab, 0x35,
		0xee, 0x68, 0xc7, 0x5b, 0xb4, 0x8b, 0x8b, 0xb7, 0x1a, 0xf3, 0x83, 0x06, 0x0e, 0x96, 0xb9, 0x43,
		0x65, 0xea, 0x40, 0x89, 0x39, 0x4c, 0x62, 0x0e, 0x92, 0x88, 0x43, 0x64, 0x97, 0x90, 0xc5, 0xdd,
		0x04, 0xd3, 0x0f, 0x4a, 0x56, 0xab, 0xb3, 0x50, 0xa5, 0xce, 0x30, 0x76, 0x61, 0x1c, 0xb3, 0x90,
		0x88, 0x55, 0xc8, 0xc5, 0x28, 0xa4, 0x62, 0x13, 0xe2, 0x31, 0x09, 0xf1, 0x58, 0x84, 0x68, 0x0c,
		0x22, 0x59, 0x57, 0xd4, 0x38, 0xd6, 0x20, 0x58, 0x41, 0x49, 0xa2, 0x72, 0xd2, 0xb4, 0x62, 0xd2,
		0x9b, 0x37, 0x23, 0x17, 0xf6, 0xed, 0xb2, 0xed, 0x9d, 0x94, 0x5b, 0xab, 0xe5, 0x54, 0x98, 0x84,
		0x66, 0x67, 0xb4, 0x5e, 0xfa, 0x51, 0x1e, 0x4d, 0x06, 0x60, 0xcc, 0x04, 0x80, 0x31, 0x60, 0x4c,
		0x73, 0xc5, 0xe8, 0x32, 0x8a, 0xa9, 0x01, 0x37, 0xfc, 0xe1, 0x37, 0xe5, 0x6e, 0x44, 0x46, 0xe6,
		0x64, 0x6e, 0x42, 0xb6, 0xb8, 0x09, 0x49, 0x70, 0x9b, 0x5a, 0xdb, 0xae, 0xd6, 0xb6, 0xad, 0x95,
		0xed, 0x6b, 0xb6, 0x8d, 0x0d, 0xb7, 0xb3, 0xd8, 0xb6, 0x7e, 0x74, 0x1c, 0xdc, 0x30, 0x72, 0x7a,
		0x6e, 0xf3, 0xbf, 0x2a, 0x9a, 0x08, 0x71, 0x5b, 0x72, 0x4b, 0x65, 0xae, 0xc1, 0xf3, 0xd3, 0xa7,
		0x08, 0x4d, 0xae, 0xac, 0xd8, 0x4a, 0x0c, 0x14, 0x6c, 0x80, 0x83, 0x3d, 0x90, 0xb0, 0x05, 0x16,
		0xd6, 0x41, 0xc3, 0x3a, 0x78, 0x58, 0x05, 0x11, 0x19, 0x30, 0x11, 0x02, 0x15, 0x39, 0xd7, 0x67,
		0xe5, 0x7a, 0xed, 0x7b, 0x7e, 0x24, 0xd2, 0x3e, 0xfa, 0xe9, 0xee, 0x97, 0xac, 0xc4, 0x25, 0x2b,
		0x2b, 0x9e, 0xfc, 0x91, 0xdd, 0x4f, 0x1b, 0xb6, 0x64, 0xc6, 0x96, 0x60, 0x75, 0xc1, 0xbc, 0x25,
		0xd9, 0xf1, 0xd4, 0xbe, 0x45, 0x29, 0xab, 0xf0, 0x76, 0x9b, 0x9f, 0x52, 0x0b, 0x72, 0xe4, 0xa4,
		0xa7, 0xd4, 0x7e, 0xfb, 0xe8, 0x44, 0x67, 0xf9, 0x45, 0x36, 0xad, 0x65, 0xa5, 0x44, 0x97, 0xc0,
		0x2e, 0x98, 0xa3, 0x87, 0x51, 0xe0, 0xfa, 0x61, 0xc7, 0x8b, 0x22, 0xdb, 0x3c, 0x74, 0xf6, 0x41,
		0x50, 0x51, 0xa8, 0x28, 0x54, 0x14, 0x2a, 0x0a, 0x15, 0x85, 0x8a, 0x42, 0x45, 0xa1, 0xa2, 0x50,
		0xd1, 0xb2, 0x52, 0xd1, 0x49, 0x74, 0x72, 0xcc, 0x12, 0x43, 0x79, 0x0e, 0xba, 0xf0, 0x04, 0xc8,
		0x27, 0xe4, 0x13, 0xf2, 0x09, 0xf9, 0x84, 0x7c, 0x42, 0x3e, 0x21, 0x9f, 0x90, 0x4f, 0xc8, 0x67,
		0x59, 0xc9, 0xe7, 0x4c, 0x48, 0xd2, 0x1e, 0xff, 0x5c, 0xf6, 0x10, 0x28, 0x28, 0x14, 0x14, 0x0a,
		0x0a, 0x05, 0x85, 0x82, 0x42, 0x41, 0xa1, 0xa0, 0x50, 0x50, 0x28, 0x68, 0x59, 0x29, 0x68, 0xbf,
		0x37, 0xba, 0x18, 0xf7, 0xa2, 0x61, 0xda, 0xb1, 0x38, 0xfb, 0x7c, 0x62, 0x1f, 0xe2, 0x09, 0xf1,
		0x84, 0x78, 0x42, 0x3c, 0x21, 0x9e, 0x10, 0x4f, 0x88, 0x27, 0xc4, 0x13, 0xe2, 0x99, 0x4b, 0xe2,
		0x99, 0x6a, 0x2e, 0x94, 0x50, 0xd1, 0xb0, 0xa9, 0x3d, 0xcd, 0xa2, 0x3d, 0xc3, 0xfa, 0x37, 0xc3,
		0xff, 0x1c, 0xe7, 0x57, 0x4b, 0xa4, 0x3a, 0x6e, 0x3c, 0x57, 0x4e, 0xa9, 0xa1, 0x54, 0x70, 0x7d,
		0x30, 0x7c, 0x52, 0x0e, 0xcb, 0x6e, 0xb6, 0x54, 0xc7, 0xf5, 0x5b, 0x4e, 0xa7, 0xdb, 0x52, 0x4e,
		0xa0, 0xfe, 0xd7, 0x57, 0x61, 0x24, 0xd9, 0x23, 0x77, 0xb9, 0x79, 0xca, 0x70, 0x26, 0xe7, 0x53,
		0x90, 0x7c, 0x4a, 0x19, 0xce, 0x35, 0xd6, 0x1b, 0x6d, 0x1f, 0x87, 0xdf, 0x5d, 0x35, 0xbf, 0x75,
		0xe5, 0xd0, 0x6f, 0x68, 0x8d, 0x4c, 0x7b, 0xc0, 0x0e, 0xb0, 0x33, 0x78, 0x23, 0xb1, 0x4c, 0xfb,
		0x81, 0x97, 0x72, 0xaf, 0xe4, 0x23, 0xaa, 0x63, 0xbb, 0x44, 0x52, 0xb3, 0x03, 0x04, 0xb6, 0x00,
		0xc1, 0x3a, 0x30, 0x58, 0x07, 0x08, 0xab, 0x40, 0x21, 0xeb, 0x60, 0x67, 0x3f, 0x92, 0x2a, 0xc7,
		0x9a, 0x84, 0xd9, 0x93, 0x60, 0x64, 0xe1, 0x35, 0x25, 0x4e, 0x00, 0x65, 0x40, 0x19, 0x50, 0xce,
		0x0b, 0x28, 0x73, 0xbd, 0x25, 0xb9, 0x22, 0xb9, 0xde, 0x5a, 0x6d, 0x9f, 0xeb, 0xad, 0xd4, 0xa6,
		0x94, 0xeb, 0xad, 0x24, 0xac, 0x51, 0xe2, 0xc4, 0x90, 0x87, 0x52, 0xe2, 0x04, 0x2a, 0x0a, 0x15,
		0x85, 0x8a, 0x42, 0x45, 0xa1, 0xa2, 0x50, 0x51, 0xa8, 0x28, 0x54, 0x14, 0x2a, 0x4a, 0x89, 0x13,
		0xc8, 0x27, 0xe4, 0x13, 0xf2, 0x09, 0xf9, 0x84, 0x7c, 0x42, 0x3e, 0x21, 0x9f, 0x90, 0x4f, 0xc8,
		0x67, 0x82, 0xe4, 0x93, 0x12, 0x27, 0x50, 0x50, 0x28, 0x28, 0x14, 0x14, 0x0a, 0x0a, 0x05, 0x85,
		0x82, 0x42, 0x41, 0xa1, 0xa0, 0x50, 0xd0, 0x84, 0x29, 0x28, 0x25, 0x4e, 0x20, 0x9e, 0x10, 0x4f,
		0x88, 0x27, 0xc4, 0x13, 0xe2, 0x09, 0xf1, 0x84, 0x78, 0x42, 0x3c, 0x21, 0x9e, 0x96, 0x2d, 0x14,
		0xb5, 0xc4, 0x89, 0x40, 0x8a, 0xf9, 0xc6, 0x5a, 0x15, 0x4e, 0xea, 0x83, 0x07, 0xe5, 0x30, 0xa3,
		0xff, 0xd6, 0xf5, 0xda, 0xfd, 0x40, 0x89, 0x3a, 0x1c, 0x53, 0x9a, 0xb1, 0xcc, 0x38, 0xc5, 0x4d,
		0x92, 0xf3, 0x26, 0xc8, 0xf7, 0xa7, 0xb8, 0x49, 0x92, 0xde, 0x80, 0xa0, 0x17, 0x20, 0xcc, 0xfe,
		0x05, 0x7d, 0x28, 0x1b, 0x6c, 0xdf, 0x12, 0x25, 0xb4, 0xc5, 0xee, 0x6d, 0xf2, 0x3d, 0x41, 0x36,
		0x6f, 0x85, 0xc5, 0xdb, 0x9e, 0x2a, 0xfb, 0xac, 0xdd, 0xea, 0xec, 0x65, 0x84, 0x0d, 0x5f, 0xe5,
		0x90, 0x8a, 0x0d, 0x13, 0xa3, 0xa6, 0x94, 0xc9, 0xeb, 0x28, 0x39, 0x22, 0xb6, 0x68, 0x1a, 0x1a,
		0x06, 0x0d, 0x83, 0x86, 0x65, 0x8a, 0x86, 0x0d, 0xf6, 0x65, 0xe4, 0x35, 0xff, 0x1b, 0x66, 0x8e,
		0x8b, 0x7d, 0xf6, 0x47, 0xe7, 0x44, 0xc5, 0x77, 0xfd, 0x6e, 0xa8, 0x9a, 0x5d, 0xbf, 0x25, 0x71,
		0x6d, 0x04, 0xc7, 0x83, 0xe3, 0xc1, 0xf1, 0xe0, 0x78, 0x65, 0xe2, 0x78, 0xdd, 0xa6, 0xdb, 0x76,
		0xdc, 0x56, 0x2b, 0x50, 0xa1, 0x60, 0xa0, 0x6d, 0xde, 0x2c, 0xdc, 0x0e, 0x6e, 0x07, 0xb7, 0xcb,
		0x14, 0xb7, 0xf3, 0x7a, 0x42, 0xbb, 0x73, 0x76, 0x87, 0x6e, 0xed, 0x0b, 0xd8, 0x1a, 0xbf, 0x6b,
		0xe6, 0x28, 0xd8, 0xe3, 0xc8, 0xdd, 0xd7, 0x04, 0xc7, 0x6e, 0x61, 0x0c, 0x25, 0x15, 0x0b, 0x0d,
		0x37, 0x8a, 0x54, 0xe0, 0x8b, 0x6b, 0x16, 0x2a, 0x2f, 0x5f, 0x7e, 0xdd, 0x74, 0xf6, 0xaf, 0x7e,
		0x7e, 0xdd, 0x72, 0xf6, 0xaf, 0x46, 0x3f, 0x6e, 0x0d, 0xff, 0x6b, 0xf4, 0x73, 0xf5, 0xeb, 0xa6,
		0x53, 0x9b, 0xfc, 0xbc, 0xf3, 0x75, 0xd3, 0xd9, 0xb9, 0x7a, 0xf5, 0xe7, 0x9f, 0x6f, 0x5e, 0xfd,
		0xbd, 0xfd, 0x10, 0xff, 0x83, 0x72, 0x6a, 0x9a, 0x2b, 0xc9, 0xa1, 0x3d, 0xbb, 0x38, 0xfa, 0xc3,
		0xda, 0xf8, 0xfe, 0x27, 0xc9, 0x01, 0xfe, 0x47, 0x25, 0x6b, 0x97, 0xcf, 0xaf, 0x33, 0xbc, 0xf9,
		0x77, 0xd9, 0xfc, 0xc3, 0x25, 0xe6, 0x3a, 0xb7, 0x07, 0xce, 0xc7, 0xab, 0xbf, 0xb7, 0x5e, 0xd7,
		0x1e, 0xde, 0xbd, 0xfa, 0x7b, 0xef, 0xe1, 0xe9, 0x5f, 0xfe, 0x5c, 0xf6, 0x6b, 0x5b, 0xaf, 0xf7,
		0x1e, 0xde, 0xad, 0xf8, 0x97, 0xdd, 0x87, 0x77, 0x6b, 0xda, 0xd8, 0x79, 0x78, 0xb9, 0xf0, 0xab,
		0x83, 0xbf, 0xaf, 0xae, 0xfa, 0x40, 0x6d, 0xc5, 0x07, 0xb6, 0x57, 0x7d, 0x60, 0x7b, 0xc5, 0x07,
		0x56, 0x7e, 0xa5, 0xea, 0x8a, 0x0f, 0xec, 0x3c, 0xfc, 0x5c, 0xf8, 0xfd, 0x97, 0xcb, 0x7f, 0x75,
		0xf7, 0xe1, 0xd5, 0xcf, 0x55, 0xff, 0xb6, 0xf7, 0xf0, 0xf3, 0xdd, 0xab, 0x32, 0x43, 0x21, 0xcb,
		0x2d, 0xf9, 0xe5, 0x96, 0xbd, 0x83, 0xa1, 0xc4, 0x3e, 0x7a, 0xcb, 0x73, 0xef, 0xfc, 0x6e, 0x18,
		0x79, 0x4d, 0xa7, 0xd9, 0x6d, 0x29, 0x69, 0x5f, 0xfd, 0xa9, 0x79, 0x7c, 0x76, 0x7c, 0x76, 0x7c,
		0xf6, 0x4c, 0xf9, 0xec, 0x37, 0xb7, 0x2d, 0xe1, 0x6d, 0x3a, 0xc7, 0x3d, 0x6b, 0x02, 0xb6, 0xea,
		0x7e, 0xbf, 0x33, 0x78, 0xe9, 0x87, 0x1c, 0xc3, 0x6c, 0xd8, 0x0c, 0xbc, 0x8e, 0xe7, 0xbb, 0x51,
		0x37, 0x90, 0x07, 0xd9, 0x59, 0xe3, 0x40, 0x2c, 0x10, 0x0b, 0xc4, 0x66, 0x0a, 0x62, 0xc3, 0x28,
		0xf0, 0xfc, 0x3b, 0x49, 0x54, 0xfd, 0x2d, 0x87, 0x48, 0x18, 0xa8, 0x4e, 0x37, 0x52, 0xf2, 0xb7,
		0x42, 0x4f, 0xec, 0x82, 0x7f, 0xe0, 0x1f, 0xf8, 0x97, 0x29, 0xfc, 0xe3, 0x5a, 0xc8, 0x20, 0x32,
		0xcc, 0xb5, 0x10, 0xd7, 0x42, 0x5c, 0x0b, 0x59, 0x8c, 0xfe, 0x71, 0x2d, 0x94, 0xfd, 0xcd, 0x4f,
		0x9c, 0x9e, 0x6b, 0xa1, 0x04, 0xa1, 0x90, 0xe5, 0xc6, 0xb5, 0x50, 0x49, 0xaf, 0x85, 0x26, 0xde,
		0x74, 0x3f, 0xfa, 0xa6, 0xfc, 0xc8, 0x6b, 0x0e, 0xb3, 0xdd, 0x1d, 0xe5, 0xbb, 0x37, 0x6d, 0x81,
		0x36, 0x49, 0x0b, 0x4e, 0xfb, 0xf2, 0xc7, 0xe0, 0xc3, 0xe3, 0xc3, 0xe3, 0xc3, 0x67, 0xca, 0x87,
		0x97, 0x6b, 0x72, 0x2c, 0xd4, 0xdc, 0x38, 0x55, 0x78, 0x6c, 0x76, 0xfd, 0x28, 0xe8, 0xb6, 0x9d,
		0x5e, 0xdb, 0xf5, 0x95, 0xe3, 0xf9, 0x2d, 0xd5, 0x53, 0x7e, 0x6b, 0xb4, 0x84, 0x64, 0x11, 0x72,
		0xf5, 0x93, 0x00, 0x49, 0x40, 0x12, 0x90, 0x04, 0x24, 0x33, 0x0b, 0x92, 0xd6, 0xb4, 0x45, 0x2b,
		0xec, 0x03, 0x88, 0x00, 0x22, 0x80, 0x98, 0x2d, 0x40, 0x44, 0x5c, 0x94, 0x08, 0xd0, 0x5a, 0x51,
		0x17, 0x2d, 0xb5, 0x0e, 0xc8, 0x02, 0xb2, 0x80, 0x6c, 0xa6, 0x40, 0x16, 0x79, 0xd1, 0x0c, 0x16,
		0x76, 0x3c, 0xdf, 0xeb, 0xf4, 0x3b, 0xce, 0xb8, 0xf7, 0xa5, 0x33, 0xac, 0x9a, 0x79, 0xef, 0xb6,
		0xc5, 0x61, 0x71, 0xe5, 0x83, 0x40, 0x48, 0x10, 0x12, 0x84, 0xcc, 0x14, 0x42, 0xf6, 0x3d, 0x3f,
		0xda, 0xae, 0x0a, 0x22, 0xe4, 0x1e, 0x65, 0x81, 0x52, 0x81, 0xb5, 0x05, 0xb3, 0x94, 0x05, 0xca,
		0xdd, 0x54, 0xd5, 0xaa, 0xfb, 0xb5, 0xfd, 0xdd, 0xbd, 0xea, 0x3e, 0xc5, 0x80, 0x62, 0xff, 0xc9,
		0xf1, 0x8d, 0x72, 0xa8, 0xc2, 0xd0, 0xeb, 0xfa, 0xce, 0xb0, 0x62, 0xb9, 0x38, 0x1b, 0x9b, 0xb7,
		0x0e, 0x05, 0x83, 0x82, 0x41, 0xc1, 0x32, 0x17, 0x09, 0x94, 0xdc, 0xa4, 0xc4, 0x01, 0x67, 0xbe,
		0xbb, 0x25, 0x6c, 0x05, 0x54, 0x01, 0x55, 0x40, 0x15, 0x50, 0x2d, 0x29, 0xa8, 0xf6, 0x6f, 0xc2,
		0x66, 0xe0, 0xdd, 0xa8, 0x96, 0xd3, 0x0b, 0xba, 0x51, 0xb7, 0xd9, 0x6d, 0x0b, 0x66, 0x2d, 0x2e,
		0xb5, 0x0e, 0xc4, 0x02, 0xb1, 0x40, 0x6c, 0xa6, 0x20, 0xd6, 0x6b, 0x29, 0x3f, 0xf2, 0xa2, 0x1f,
		0x81, 0xba, 0x95, 0x04, 0x57, 0x81, 0xd8, 0x47, 0xe5, 0x68, 0xfc, 0xd5, 0xde, 0xbb, 0xa1, 0x92,
		0x6f, 0x9f, 0x7b, 0x74, 0x7a, 0x71, 0x79, 0x70, 0x7c, 0x7c, 0xdd, 0x38, 0x3f, 0xbb, 0x3c, 0x3b,
		0x3c, 0x3b, 0xbe, 0xbe, 0xfc, 0x77, 0xa3, 0x2e, 0xb5, 0xa4, 0x87, 0xb1, 0xa0, 0x50, 0x34, 0x7f,
		0x43, 0x38, 0x08, 0x36, 0x19, 0x86, 0x0f, 0x47, 0xe7, 0xf5, 0xc3, 0xcb, 0xe3, 0x7f, 0x5f, 0x1f,
		0x9e, 0x9d, 0x9e, 0xd6, 0x0f, 0x2f, 0xeb, 0x1f, 0x2a, 0x59, 0x8c, 0x04, 0x5a, 0x7a, 0xfb, 0x8b,
		0xcb, 0x83, 0xcb, 0xa3, 0xc3, 0x32, 0xbd, 0xf1, 0xf1, 0xd9, 0xe1, 0xc1, 0xf1, 0xf5, 0xc1, 0xa7,
		0x4f, 0xe7, 0xf5, 0x4f, 0x07, 0x97, 0xf5, 0x32, 0xbd, 0xfa, 0xd1, 0xa7, 0x93, 0x46, 0x99, 0xde,
		0xf7, 0xfd, 0xa7, 0x52, 0xbd, 0xee, 0xd9, 0x45, 0xe3, 0x63, 0xd9, 0xde, 0x77, 0xbb, 0x4c, 0x2f,
		0xdc, 0x38, 0x3a, 0x29, 0x15, 0x5c, 0x5d, 0x1c, 0x5d, 0x64, 0xad, 0x27, 0xfa, 0x55, 0xce, 0xf9,
		0xf3, 0xb1, 0x17, 0x46, 0x07, 0x51, 0x14, 0xc8, 0x70, 0xe8, 0x13, 0xcf, 0xaf, 0xb7, 0xd5, 0xc0,
		0xc3, 0x08, 0x65, 0xee, 0x13, 0x2b, 0x27, 0xee, 0xf7, 0x19, 0x8b, 0x76, 0x1a, 0x8c, 0x54, 0xce,
		0x82, 0x96, 0x0a, 0x54, 0xeb, 0xfd, 0x8f, 0xca, 0xbb, 0x0d, 0xbf, 0xdf, 0x6e, 0xa7, 0x15, 0xbb,
		0x78, 0x91, 0xe0, 0x0a, 0x90, 0x6a, 0x6d, 0x2c, 0xd5, 0xd2, 0x58, 0x6f, 0x63, 0xc7, 0x1f, 0xb2,
		0x78, 0x9f, 0x88, 0x39, 0xb8, 0x95, 0x7f, 0xaa, 0x1f, 0x32, 0x65, 0xfa, 0xcc, 0x36, 0xa6, 0xf9,
		0x46, 0xb4, 0xb2, 0xf1, 0xcc, 0x36, 0x5a, 0xdc, 0xb9, 0x30, 0x5c, 0xe0, 0xe6, 0x0b, 0x5b, 0xc3,
		0x77, 0x7e, 0xb6, 0x21, 0x77, 0xbc, 0x6d, 0xb2, 0xfe, 0x62, 0x5f, 0xef, 0x37, 0xd7, 0x9c, 0x02,
		0xdd, 0xa1, 0x37, 0x1a, 0xf2, 0xf5, 0x46, 0xe6, 0xf9, 0xf7, 0x5c, 0xe3, 0x1d, 0x2b, 0xf1, 0xae,
		0xdd, 0x66, 0x74, 0xbb, 0xeb, 0x47, 0xec, 0xa7, 0x81, 0xa3, 0x35, 0x7f, 0x7d, 0x1a, 0xc3, 0xad,
		0xae, 0xf9, 0x01, 0x8d, 0x58, 0xad, 0x7e, 0x4c, 0x56, 0x37, 0xf6, 0x6a, 0x1c, 0x63, 0x35, 0x8e,
		0xa5, 0x1a, 0xc5, 0x4c, 0x65, 0x77, 0xd5, 0x07, 0x2f, 0xde, 0x69, 0x50, 0x69, 0xa9, 0xd0, 0x0b,
		0x54, 0x6b, 0xaa, 0x5c, 0x8e, 0xbe, 0xeb, 0xab, 0xa3, 0xa7, 0x73, 0xff, 0x2b, 0xa3, 0x71, 0x4f,
		0x4b, 0xad, 0xeb, 0x0b, 0xed, 0xeb, 0x0a, 0x93, 0xeb, 0x09, 0xf3, 0xeb, 0x08, 0xd3, 0xeb, 0x07,
		0xb1, 0xeb, 0x06, 0xb1, 0xeb, 0x05, 0x91, 0xeb, 0x04, 0xbb, 0x7c, 0x4c, 0xfb, 0x7a, 0xc0, 0x5c,
		0x49, 0x6c, 0xa0, 0x1c, 0x36, 0x54, 0x0a, 0x1b, 0x90, 0x79, 0x09, 0x25, 0xb0, 0xd4, 0xad, 0xa4,
		0x90, 0xd2, 0x57, 0x52, 0x25, 0x6a, 0x72, 0xbb, 0x2c, 0xa1, 0xdc, 0x95, 0x1e, 0x5a, 0x29, 0x65,
		0xae, 0xe8, 0x18, 0x27, 0xe4, 0x08, 0x5e, 0xd9, 0x62, 0xd2, 0xaf, 0xe3, 0x1c, 0xd0, 0x91, 0x1a,
		0x8e, 0x9b, 0xd3, 0xe9, 0xb7, 0x23, 0xaf, 0xd7, 0xf6, 0x54, 0x60, 0x72, 0x32, 0x2f, 0xb1, 0xc6,
		0x91, 0xcc, 0x91, 0x5c, 0xc0, 0x23, 0xf9, 0x37, 0x83, 0x13, 0x79, 0x87, 0x13, 0xd9, 0xec, 0xd8,
		0xd8, 0xe2, 0x44, 0x7e, 0x3a, 0xb4, 0xdb, 0x05, 0x24, 0x3b, 0x25, 0x3a, 0x88, 0x47, 0x75, 0x08,
		0x9d, 0x9e, 0x0a, 0x9c, 0x8e, 0xea, 0xdc, 0xa8, 0xc0, 0x69, 0x7b, 0xfe, 0x7f, 0xf5, 0x8f, 0xe2,
		0x15, 0xf6, 0x62, 0x42, 0xe5, 0x07, 0x75, 0xeb, 0xf6, 0xdb, 0x43, 0x2c, 0xbf, 0x75, 0xdb, 0xa1,
		0xe2, 0x30, 0xe7, 0x30, 0x2f, 0xda, 0x61, 0xae, 0x5f, 0x41, 0x4b, 0xb3, 0x62, 0x96, 0x4d, 0x00,
		0x69, 0x99, 0x22, 0x46, 0x8b, 0x2d, 0xce, 0x16, 0x67, 0x8b, 0x67, 0x72, 0x8b, 0x7b, 0x06, 0xbb,
		0xdb, 0x63, 0x63, 0xb3, 0xb1, 0x0b, 0xb7, 0xb1, 0xb5, 0xeb, 0x10, 0x69, 0xd6, 0x1d, 0xb2, 0xb3,
		0xaf, 0x47, 0x62, 0x0d, 0xdd, 0x2e, 0x65, 0x4f, 0x5a, 0x33, 0xea, 0x75, 0xef, 0x60, 0xb7, 0xb3,
		0xdb, 0x33, 0xbf, 0xdb, 0x8d, 0x9a, 0x7a, 0x99, 0x34, 0xf1, 0x32, 0x6b, 0xda, 0x65, 0x10, 0x7b,
		0x13, 0x6e, 0xca, 0x25, 0xd1, 0x87, 0x47, 0xac, 0xef, 0x4e, 0x4e, 0x9a, 0x6c, 0x5d, 0x99, 0x0c,
		0x95, 0x64, 0xe7, 0x98, 0xdc, 0x34, 0xcd, 0xba, 0x4a, 0x52, 0x45, 0x2a, 0xb3, 0xb9, 0x76, 0x0b,
		0xba, 0xb9, 0xe8, 0x2a, 0x94, 0xa7, 0x26, 0x56, 0x99, 0x83, 0x1a, 0x96, 0x4f, 0xae, 0x9a, 0x52,
		0x5d, 0x95, 0xe8, 0xbe, 0x24, 0x50, 0xff, 0xeb, 0xcf, 0xa9, 0x00, 0xc7, 0x45, 0x51, 0xf5, 0xdd,
		0xa7, 0x95, 0x16, 0xf1, 0xa4, 0xf0, 0xa4, 0x0a, 0xe6, 0x49, 0xa1, 0x29, 0xd4, 0x7d, 0x71, 0x34,
		0x85, 0xf3, 0x43, 0x8b, 0xa6, 0xd0, 0xd2, 0x21, 0x9b, 0xb1, 0xa3, 0x39, 0xcf, 0xd9, 0x39, 0x31,
		0xd2, 0xfb, 0xd6, 0xc8, 0xce, 0x79, 0x61, 0x30, 0x02, 0x93, 0xf4, 0xbc, 0x67, 0x6f, 0x63, 0xe2,
		0x65, 0xdf, 0xc5, 0xcf, 0xb6, 0x13, 0xc9, 0xae, 0x8b, 0x97, 0x4d, 0xf7, 0xdc, 0xd0, 0xc4, 0x5c,
		0x14, 0x9a, 0x8b, 0xa1, 0xb2, 0x56, 0x72, 0xd5, 0xca, 0x14, 0xb8, 0x5f, 0xaf, 0xa2, 0xd5, 0x6b,
		0x63, 0xf9, 0xbf, 0xac, 0x18, 0x92, 0x75, 0x87, 0x22, 0xd6, 0x10, 0x2c, 0xff, 0xe6, 0x8b, 0xdf,
		0x6b, 0xfe, 0x6f, 0x9e, 0x7c, 0xc3, 0xe7, 0xbe, 0xd9, 0xf3, 0xdf, 0x68, 0xc9, 0xf8, 0x2f, 0x8e,
		0xf7, 0xfc, 0x77, 0x7d, 0xfc, 0x46, 0x33, 0xdf, 0xa6, 0x72, 0x73, 0xd7, 0x5b, 0xf8, 0x0a, 0x8f,
		0x17, 0xbe, 0x77, 0xbd, 0x27, 0x0f, 0x5a, 0x91, 0xcd, 0xb6, 0x92, 0x76, 0xff, 0x8a, 0x56, 0xcf,
		0xd1, 0xe6, 0x85, 0x27, 0xad, 0x43, 0x8b, 0xd7, 0xa6, 0xbd, 0x6b, 0xd3, 0xda, 0x05, 0xda, 0x7a,
		0xd7, 0xab, 0xc4, 0x9c, 0xdb, 0x55, 0xd9, 0x5d, 0x95, 0xbb, 0x76, 0xf7, 0xe6, 0x17, 0x09, 0x5b,
		0xd3, 0xe1, 0x18, 0xff, 0xde, 0x8a, 0x2f, 0xf8, 0xeb, 0x74, 0xc2, 0x67, 0xfd, 0x9f, 0x75, 0xfc,
		0x9c, 0xe7, 0x27, 0x26, 0xae, 0xdf, 0x12, 0xdb, 0x3f, 0x89, 0xed, 0x87, 0xac, 0x35, 0x71, 0x7a,
		0x30, 0xf2, 0x5c, 0xba, 0x5e, 0xc5, 0xbd, 0xf5, 0x9c, 0xd0, 0xbd, 0xf5, 0x9e, 0xbf, 0x74, 0x9c,
		0x8e, 0xec, 0xe3, 0x47, 0x9e, 0x3b, 0xe9, 0xd6, 0xca, 0x1e, 0x5d, 0xdb, 0xed, 0x8d, 0xe3, 0xe6,
		0xae, 0xbf, 0x0c, 0x74, 0xdd, 0x58, 0x6d, 0xb7, 0x55, 0xdb, 0x4d, 0x8d, 0xb5, 0x4c, 0x64, 0xb8,
		0xca, 0xba, 0xd9, 0x9e, 0xd3, 0x35, 0x11, 0x3f, 0x1f, 0x79, 0xfa, 0x49, 0xcb, 0x29, 0xc9, 0x9b,
		0x09, 0xa5, 0x24, 0xaf, 0xb5, 0xd8, 0x4c, 0x63, 0x27, 0x19, 0x4c, 0x49, 0x5e, 0x67, 0x31, 0xda,
		0x71, 0x25, 0x62, 0xa7, 0x24, 0xbb, 0xad, 0x96, 0x33, 0xe0, 0x27, 0x06, 0x42, 0x8b, 0x47, 0x13,
		0x7a, 0xa1, 0xc1, 0xad, 0xbc, 0x85, 0x06, 0x63, 0x2d, 0xeb, 0x12, 0x85, 0x06, 0xe3, 0x2c, 0xfb,
		0x64, 0x42, 0x83, 0x71, 0xb7, 0xc3, 0xf4, 0x83, 0xcd, 0xc9, 0x1a, 0xd3, 0x9c, 0xac, 0xc9, 0x72,
		0x19, 0xdb, 0xd1, 0x1c, 0x60, 0xbd, 0x0d, 0x62, 0xbc, 0x51, 0x24, 0x36, 0x8c, 0xdc, 0xc6, 0x91,
		0xda, 0x40, 0xe2, 0x1b, 0x49, 0x7c, 0x43, 0x89, 0x6e, 0x2c, 0xc3, 0x50, 0x9b, 0xe6, 0x8a, 0xd1,
		0xdd, 0x70, 0x53, 0x03, 0xaa, 0xed, 0xdd, 0x79, 0xc3, 0x54, 0x9d, 0xe1, 0xd4, 0x38, 0xbd, 0x6e,
		0xdb, 0x6b, 0xfe, 0x90, 0xab, 0xfa, 0xbd, 0xc2, 0x3e, 0x75, 0xbf, 0xed, 0x6f, 0x60, 0xe9, 0x8d,
		0x6c, 0x6d, 0x43, 0x5b, 0xdb, 0xd8, 0x56, 0x36, 0xb8, 0xd9, 0x46, 0x37, 0xdc, 0xf0, 0xd3, 0x37,
		0x92, 0xaf, 0xfb, 0xdd, 0x56, 0xee, 0xad, 0x70, 0xcd, 0x6f, 0x89, 0xa6, 0x81, 0x8d, 0x69, 0x30,
		0xaf, 0xe9, 0x04, 0xbd, 0x6e, 0xfb, 0x5d, 0xd0, 0xed, 0x47, 0x9e, 0x7f, 0x37, 0x46, 0x92, 0xe9,
		0x5f, 0x8f, 0xfe, 0xa7, 0xd3, 0x52, 0xb7, 0x9e, 0xef, 0x45, 0x5e, 0xd7, 0x0f, 0x57, 0xff, 0xd3,
		0xf4, 0x5f, 0x86, 0x41, 0xbf, 0x5c, 0x76, 0x18, 0xd3, 0x53, 0x1b, 0xac, 0x9c, 0x7c, 0x3d, 0xb1,
		0xc1, 0xe2, 0x71, 0x64, 0x96, 0xb0, 0x09, 0xce, 0x83, 0xf3, 0xe0, 0xbc, 0x65, 0x9c, 0xd7, 0xcf,
		0x46, 0x5b, 0x89, 0xf3, 0x5b, 0xb9, 0xec, 0x20, 0xe6, 0xb7, 0x24, 0x1b, 0x87, 0xf9, 0x2d, 0xc0,
		0x13, 0xf0, 0x04, 0x3c, 0x01, 0xcf, 0x92, 0x80, 0xa7, 0xd3, 0x91, 0x10, 0x5f, 0xcd, 0x02, 0xe8,
		0xd0, 0x22, 0xa0, 0x07, 0xe8, 0x01, 0x7a, 0x99, 0x02, 0x3d, 0xdd, 0x7a, 0x63, 0xab, 0x36, 0xa7,
		0x44, 0xcb, 0x02, 0x33, 0x35, 0xef, 0xd3, 0x3f, 0x7f, 0x0b, 0x36, 0xa8, 0x17, 0x50, 0xfb, 0x5a,
		0x42, 0xb5, 0x05, 0xb3, 0x42, 0x6a, 0xe0, 0x05, 0xbb, 0x36, 0xfb, 0xd2, 0xbf, 0x16, 0x9c, 0x2a,
		0xf7, 0x7b, 0xee, 0xa6, 0xaa, 0xba, 0xb3, 0x93, 0xa3, 0xc9, 0x7a, 0x91, 0x0d, 0x2b, 0x57, 0x34,
		0x34, 0x89, 0x43, 0xee, 0x56, 0x8b, 0x28, 0xef, 0x7a, 0x6f, 0x07, 0xff, 0x3f, 0x52, 0xda, 0xbd,
		0x9d, 0x8a, 0xb1, 0xa6, 0x3f, 0xbd, 0x9d, 0x6a, 0x13, 0xde, 0x8e, 0x6f, 0x62, 0x93, 0xea, 0x6a,
		0xa2, 0xd5, 0x6a, 0xc2, 0xa4, 0x77, 0xb8, 0x56, 0x53, 0x83, 0x95, 0x4e, 0x80, 0xe9, 0x8d, 0x73,
		0x95, 0x1b, 0x67, 0x8b, 0x34, 0x94, 0x1b, 0xe7, 0x99, 0x28, 0x15, 0x37, 0xce, 0xf8, 0x95, 0xf8,
		0x95, 0xf8, 0x95, 0xe6, 0xeb, 0x8d, 0x1b, 0xe7, 0xfc, 0x44, 0xfc, 0xb8, 0x71, 0x06, 0xe7, 0xc1,
		0x79, 0x70, 0x5e, 0x67, 0xbd, 0x71, 0x69, 0xb2, 0xc1, 0x8d, 0x33, 0xe0, 0x09, 0x78, 0x02, 0x9e,
		0x80, 0xa7, 0x01, 0x78, 0x72, 0xe3, 0x0c, 0xe8, 0x01, 0x7a, 0x65, 0x00, 0x3d, 0x6e, 0x9c, 0x63,
		0x7c, 0x31, 0x6e, 0x9c, 0xb9, 0x71, 0xe6, 0xc6, 0x59, 0x02, 0x08, 0xe5, 0xac, 0x70, 0xe3, 0x1c,
		0x8b, 0xdc, 0x89, 0xdc, 0x38, 0xc7, 0xa8, 0xb3, 0x65, 0x3e, 0x6c, 0x76, 0xf3, 0xa8, 0x0d, 0x07,
		0x56, 0x66, 0x40, 0x2b, 0x5a, 0x77, 0xea, 0x73, 0xb5, 0x94, 0xee, 0x7a, 0xd7, 0x9f, 0x86, 0x0f,
		0xba, 0x3e, 0xb8, 0xf5, 0x2e, 0xdc, 0x5b, 0xef, 0xfa, 0xa0, 0xd5, 0x6a, 0x0c, 0x8d, 0x67, 0xa0,
		0x88, 0xeb, 0xe4, 0x95, 0x9d, 0xf1, 0xf7, 0xd5, 0xad, 0xc7, 0x30, 0x67, 0xa6, 0x24, 0xe5, 0x5a,
		0xa9, 0xc9, 0x20, 0xc7, 0xe6, 0xb3, 0x5e, 0xae, 0x55, 0xff, 0x9e, 0xce, 0xe4, 0x5e, 0x6e, 0x7a,
		0x0f, 0xf7, 0xe6, 0xcd, 0x08, 0xda, 0xdf, 0xce, 0x6f, 0xb4, 0x0c, 0x00, 0x88, 0x66, 0xd5, 0x0a,
		0xb3, 0x6a, 0x15, 0x94, 0x71, 0x01, 0x32, 0xb2, 0x5a, 0xc6, 0xc5, 0xec, 0x44, 0x15, 0x3d, 0x59,
		0x85, 0xdc, 0x23, 0x8a, 0xba, 0x24, 0x13, 0x77, 0x43, 0x62, 0x27, 0x18, 0x4f, 0x9b, 0x69, 0xbb,
		0xa8, 0xfc, 0xc8, 0x8b, 0x7e, 0x98, 0xa9, 0x6c, 0xa6, 0x27, 0x8e, 0x41, 0x20, 0xa0, 0x72, 0x34,
		0xfe, 0x2a, 0xef, 0xdd, 0x50, 0x50, 0x45, 0x72, 0xf0, 0xf1, 0xe8, 0xfa, 0x62, 0xf0, 0x1f, 0x97,
		0xff, 0x6e, 0xd4, 0x2b, 0x12, 0x15, 0xbc, 0x43, 0x91, 0x10, 0x9f, 0x50, 0x74, 0x7b, 0xf2, 0x9a,
		0xc7, 0xdb, 0x5f, 0x1a, 0xa7, 0xd7, 0x47, 0x8d, 0x2f, 0xbb, 0xd7, 0x9f, 0x4f, 0x8f, 0x0e, 0x0f,
		0x2e, 0x2e, 0x05, 0x62, 0xc6, 0xaf, 0x33, 0xf7, 0x96, 0x47, 0xa7, 0xff, 0xbc, 0xb8, 0x3c, 0xb8,
		0xac, 0x5f, 0x5f, 0x34, 0x3e, 0x16, 0xf2, 0x05, 0x27, 0xd3, 0x58, 0x2b, 0xf4, 0x34, 0x3e, 0x2e,
		0xd6, 0x93, 0xcf, 0xc7, 0x97, 0x85, 0x7d, 0xcf, 0xd2, 0x6c, 0xc7, 0xc2, 0x4e, 0xde, 0xf1, 0xc1,
		0xfb, 0xfa, 0x71, 0xfd, 0x43, 0x91, 0x27, 0xf1, 0xe2, 0xfc, 0xb2, 0x7e, 0xdd, 0x38, 0x3b, 0x3e,
		0x3a, 0xfc, 0xf7, 0x70, 0x4b, 0x16, 0x72, 0xa1, 0x56, 0x07, 0x80, 0xf3, 0xa5, 0x71, 0x7c, 0x51,
		0xd0, 0x95, 0x5a, 0x2b, 0xc3, 0x4a, 0x1d, 0xbe, 0xe7, 0xc7, 0xe3, 0xb3, 0x7f, 0x5d, 0x34, 0xea,
		0x87, 0x25, 0xd8, 0x8a, 0xb5, 0x62, 0x53, 0xb8, 0x2f, 0x8d, 0xd3, 0xc2, 0xae, 0xd2, 0x02, 0xef,
		0xc2, 0x2f, 0x8d, 0xd3, 0x82, 0x6f, 0xc3, 0xd1, 0x69, 0x51, 0x2f, 0xe8, 0xfa, 0x9c, 0x71, 0x31,
		0x24, 0xc9, 0xb7, 0x91, 0x85, 0xab, 0xcc, 0xf7, 0xad, 0xd2, 0x49, 0x1f, 0x56, 0xbe, 0x7b, 0xd3,
		0x56, 0x2d, 0xf3, 0x28, 0xe7, 0xc4, 0x90, 0x6e, 0x42, 0xa6, 0x8c, 0x88, 0x9b, 0x38, 0xe9, 0x9c,
		0x25, 0xe2, 0xa4, 0x09, 0xee, 0xd7, 0xd4, 0xe3, 0xa4, 0xe6, 0x22, 0x6b, 0x43, 0x71, 0x35, 0x02,
		0x94, 0x47, 0x01, 0x8a, 0x4e, 0xe5, 0x08, 0x3b, 0xf7, 0xbb, 0x77, 0x81, 0xdb, 0x54, 0xb7, 0xfd,
		0xb6, 0x13, 0xa8, 0x30, 0x72, 0x83, 0x48, 0xff, 0xa6, 0x77, 0xc1, 0x12, 0x77, 0xbe, 0xf6, 0xc0,
		0x97, 0x3b, 0x5f, 0x5a, 0x77, 0xc0, 0x5e, 0x60, 0x2f, 0xd9, 0x66, 0x2f, 0xe6, 0x85, 0x54, 0x0c,
		0x1d, 0x10, 0x61, 0x47, 0x44, 0xda, 0x21, 0x11, 0x72, 0x4c, 0xc4, 0xb6, 0xb8, 0xe4, 0x56, 0x97,
		0xdf, 0xf2, 0xd2, 0x5b, 0xdf, 0x1a, 0x04, 0x58, 0x83, 0x02, 0x2b, 0x90, 0x20, 0x13, 0x00, 0x21,
		0xab, 0xd4, 0xe2, 0x00, 0x97, 0x2f, 0xe5, 0xe1, 0xa9, 0x33, 0x41, 0xad, 0xbd, 0x44, 0x29, 0x22,
		0xb5, 0xf6, 0xa0, 0x88, 0x50, 0x44, 0x28, 0x22, 0x14, 0x11, 0x8a, 0x08, 0x45, 0x84, 0x22, 0xe6,
		0x82, 0x22, 0x92, 0x1c, 0x6b, 0x65, 0x5c, 0xad, 0xe4, 0xc8, 0x7e, 0x1a, 0x3f, 0xe4, 0x7c, 0xfc,
		0x8c, 0x0c, 0xdc, 0x84, 0x78, 0xbd, 0xfb, 0x9a, 0xd3, 0x76, 0x6f, 0x54, 0x5b, 0xb5, 0x9c, 0xbe,
		0xef, 0x35, 0xdd, 0xd0, 0xe0, 0x36, 0x64, 0xa9, 0x35, 0x6e, 0x44, 0xec, 0x1d, 0xd9, 0xdc, 0x88,
		0x24, 0x79, 0x23, 0x32, 0x2e, 0x3c, 0xdd, 0xf6, 0x3a, 0x5e, 0x64, 0xee, 0xf3, 0xce, 0x59, 0xe3,
		0x76, 0x04, 0xd7, 0x17, 0xd7, 0x77, 0x1d, 0x03, 0x86, 0xd7, 0x92, 0x0b, 0xcb, 0xce, 0xe8, 0x7a,
		0x52, 0x68, 0x23, 0xe2, 0xa8, 0xe2, 0xa8, 0xe6, 0xdd, 0x51, 0x35, 0xdd, 0xd8, 0x53, 0x43, 0x1d,
		0xf7, 0xfb, 0xb8, 0xc5, 0xc3, 0x30, 0x67, 0x53, 0x58, 0x47, 0x3b, 0x67, 0x5d, 0x68, 0x32, 0x65,
		0x0b, 0x75, 0x89, 0x81, 0x80, 0x0d, 0x30, 0xb0, 0x07, 0x0a, 0xb6, 0xc0, 0xc1, 0x3a, 0x48, 0x58,
		0x07, 0x0b, 0xab, 0xa0, 0x21, 0x03, 0x1e, 0x42, 0x20, 0x22, 0x1f, 0xf5, 0x5a, 0x58, 0xaf, 0x7d,
		0xcf, 0x8f, 0xb6, 0xab, 0x92, 0xeb, 0x75, 0xbc, 0xfb, 0xf7, 0x04, 0x4d, 0xca, 0x96, 0xa4, 0x9c,
		0xfc, 0x91, 0xdd, 0x4f, 0x1b, 0xb6, 0x4a, 0x54, 0x5a, 0x82, 0xd5, 0x05, 0xf3, 0x96, 0x4a, 0x56,
		0x4e, 0xed, 0x5b, 0xac, 0x86, 0x28, 0xbc, 0xdd, 0xe6, 0xa7, 0xd4, 0x42, 0x29, 0xcb, 0xa4, 0xa7,
		0xb4, 0x56, 0xdd, 0xaf, 0xed, 0xef, 0xee, 0x55, 0xf7, 0x77, 0x72, 0x3c, 0xb7, 0x2f, 0xb2, 0x69,
		0xed, 0x2a, 0x23, 0x95, 0x38, 0x05, 0xd6, 0xfe, 0x80, 0x07, 0xdc, 0x2b, 0x3f, 0x72, 0x22, 0xe5,
		0x06, 0xad, 0xee, 0x5f, 0xbe, 0x3c, 0xdd, 0x5c, 0x78, 0x82, 0xd0, 0x01, 0x29, 0x7c, 0xd1, 0x0a,
		0x95, 0x85, 0xca, 0x42, 0x65, 0x73, 0x46, 0x65, 0xe5, 0x2e, 0x72, 0x17, 0xc2, 0x58, 0x5b, 0x05,
		0x02, 0xf9, 0xf1, 0x8d, 0x9e, 0x13, 0x79, 0x1d, 0x15, 0xc8, 0x23, 0xfc, 0xbc, 0x79, 0x60, 0x18,
		0x18, 0x06, 0x86, 0x4b, 0x05, 0xc3, 0x2d, 0xd5, 0xf4, 0x3a, 0x6e, 0x7b, 0xb7, 0x66, 0x03, 0x88,
		0xab, 0x82, 0x36, 0x17, 0x9c, 0x96, 0x2a, 0x21, 0x0b, 0x3b, 0xfe, 0x6d, 0x95, 0x90, 0x45, 0xd1,
		0x42, 0x16, 0xdb, 0x4c, 0x29, 0x91, 0x8a, 0xf4, 0x48, 0xec, 0x5f, 0x6e, 0xe0, 0x7b, 0xfe, 0x9d,
		0x13, 0x7d, 0x0b, 0x54, 0xf8, 0xad, 0xdb, 0x6e, 0x39, 0xbd, 0x66, 0x24, 0x4f, 0x66, 0x97, 0x3f,
		0x06, 0x52, 0x0b, 0xa9, 0x85, 0xd4, 0x96, 0x8a, 0xd4, 0xf6, 0x54, 0xd0, 0x54, 0x7e, 0xe4, 0xde,
		0x29, 0x0b, 0xac, 0x76, 0x07, 0xde, 0x69, 0x87, 0xa4, 0x70, 0x55, 0x56, 0x38, 0xde, 0x69, 0x7b,
		0x4a, 0xb7, 0x36, 0x61, 0x9e, 0xc5, 0x65, 0x9e, 0xa9, 0x2a, 0xc2, 0x84, 0xf2, 0x65, 0xa6, 0xf6,
		0x4c, 0xf2, 0x3b, 0x96, 0x65, 0x26, 0xbc, 0x9d, 0x55, 0x60, 0x1b, 0xe5, 0x5a, 0x9b, 0x8f, 0xb7,
		0x51, 0x0b, 0x65, 0xa3, 0x1c, 0xec, 0x85, 0xa3, 0xdf, 0x24, 0x17, 0x7b, 0x21, 0x7e, 0x25, 0xa5,
		0x87, 0xad, 0xa2, 0x87, 0xcd, 0x00, 0x87, 0x47, 0x0f, 0xbb, 0xfe, 0x1b, 0xa1, 0x87, 0xc5, 0xd1,
		0xc7, 0xd1, 0xc7, 0xd1, 0xcf, 0xb8, 0xa3, 0x8f, 0x1e, 0x16, 0x27, 0x1f, 0x27, 0xbf, 0xe0, 0x4e,
		0x3e, 0x7a, 0xd8, 0x12, 0xf8, 0xfa, 0xe8, 0x61, 0xd1, 0xc3, 0x42, 0x65, 0xa1, 0xb2, 0xa5, 0xa5,
		0xb2, 0xe8, 0x61, 0xd7, 0x7a, 0x27, 0xf4, 0xb0, 0xc0, 0x30, 0x30, 0x0c, 0x0c, 0xa3, 0x87, 0x45,
		0x0f, 0x8b, 0x1e, 0x96, 0x90, 0x85, 0xde, 0x94, 0xa2, 0x87, 0x25, 0x52, 0x91, 0x22, 0x89, 0x45,
		0x0f, 0x0b, 0xa9, 0x85, 0xd4, 0x42, 0x6a, 0x93, 0x22, 0xb5, 0xe8, 0x61, 0xf3, 0xc8, 0x3b, 0xb9,
		0x2a, 0x2b, 0x1c, 0xef, 0x44, 0x0f, 0x0b, 0xf3, 0x4c, 0xc9, 0x42, 0xb9, 0xf4, 0xb0, 0x06, 0x85,
		0xe5, 0xcd, 0x87, 0xbb, 0x7c, 0x85, 0xfd, 0x9f, 0x9d, 0x90, 0x8a, 0x91, 0x42, 0xf8, 0x99, 0xca,
		0xf4, 0x47, 0xbd, 0xfb, 0xda, 0xf1, 0xe8, 0xe1, 0x9f, 0x47, 0xcf, 0xbe, 0x1e, 0xb1, 0xff, 0xe3,
		0xe1, 0xa3, 0x69, 0x2f, 0x60, 0x61, 0x76, 0xad, 0xb4, 0x18, 0x58, 0x9c, 0xc8, 0xcc, 0x74, 0x19,
		0x90, 0xe9, 0x2e, 0x40, 0x57, 0x01, 0xfb, 0xbe, 0x30, 0x5d, 0x05, 0xe8, 0xb3, 0x9c, 0x70, 0xf0,
		0x89, 0x4e, 0x02, 0xe9, 0x04, 0x8b, 0xca, 0xdc, 0x49, 0x20, 0x54, 0x7e, 0xcb, 0x69, 0x8d, 0x84,
		0x63, 0x4e, 0xd0, 0xed, 0x8b, 0x26, 0x51, 0x2d, 0xda, 0xa6, 0xb5, 0x9e, 0x6d, 0x00, 0x90, 0x07,
		0x02, 0x69, 0x40, 0xb0, 0x06, 0x0c, 0xd6, 0x00, 0xc2, 0x0a, 0x50, 0x64, 0xc3, 0x1f, 0xa7, 0xb5,
		0x1e, 0x1e, 0xf8, 0x53, 0x1f, 0x6d, 0xe2, 0x79, 0x67, 0xbf, 0xf3, 0x32, 0xcd, 0xa8, 0xa0, 0x90,
		0x50, 0xc8, 0x94, 0x29, 0x24, 0xcd, 0xa8, 0xa0, 0x76, 0x50, 0xbb, 0xec, 0x51, 0x3b, 0x92, 0xef,
		0x51, 0x15, 0x89, 0x58, 0x46, 0x55, 0x94, 0x24, 0x68, 0xc8, 0x80, 0x87, 0x10, 0x88, 0xc8, 0xfb,
		0x89, 0x0b, 0xeb, 0x95, 0xe4, 0x7b, 0xc9, 0x15, 0x89, 0xa2, 0x68, 0xb5, 0x7d, 0x14, 0x45, 0xa9,
		0x4d, 0x29, 0xc9, 0xf7, 0xf6, 0xac, 0x91, 0x7c, 0x1f, 0x33, 0xc8, 0x43, 0xf2, 0x3d, 0x54, 0x16,
		0x2a, 0x0b, 0x95, 0x15, 0x5f, 0xaf, 0x24, 0xdf, 0xaf, 0xf5, 0x4e, 0x24, 0xdf, 0x03, 0xc3, 0xc0,
		0x30, 0x30, 0x4c, 0xf2, 0x3d, 0xc9, 0xf7, 0x24, 0xdf, 0x13, 0xb2, 0xd0, 0x9b, 0x52, 0x92, 0xef,
		0x89, 0x54, 0xa4, 0x48, 0x62, 0x49, 0xbe, 0x87, 0xd4, 0x42, 0x6a, 0x21, 0xb5, 0x49, 0x91, 0x5a,
		0x92, 0xef, 0xf3, 0xc8, 0x3b, 0xb9, 0x2a, 0x2b, 0x1c, 0xef, 0x24, 0xf9, 0x1e, 0xe6, 0x99, 0x92,
		0x85, 0xc2, 0x25, 0xdf, 0xd3, 0x84, 0xea, 0x57, 0x47, 0x3e, 0x4d, 0xa8, 0x92, 0xe6, 0xf2, 0xe8,
		0x60, 0xd1, 0xc1, 0xae, 0x36, 0x84, 0x0e, 0x16, 0x07, 0x1f, 0x07, 0x1f, 0x07, 0x1f, 0x1d, 0x2c,
		0xce, 0x3d, 0xce, 0x3d, 0xce, 0xbd, 0xc6, 0x94, 0xa2, 0x83, 0x2d, 0x81, 0x8f, 0x8f, 0x0e, 0x16,
		0x1d, 0x2c, 0x54, 0x16, 0x2a, 0x5b, 0x5a, 0x2a, 0x8b, 0x0e, 0x76, 0xad, 0x77, 0x42, 0x07, 0x0b,
		0x0c, 0x03, 0xc3, 0xc0, 0x30, 0x3a, 0x58, 0x74, 0xb0, 0xe8, 0x60, 0x09, 0x59, 0xe8, 0x4d, 0x29,
		0x3a, 0x58, 0x22, 0x15, 0x29, 0x92, 0x58, 0x74, 0xb0, 0x90, 0x5a, 0x48, 0x2d, 0xa4, 0x36, 0x29,
		0x52, 0x8b, 0x0e, 0x36, 0x8f, 0xbc, 0x93, 0xab, 0xb2, 0xc2, 0xf1, 0x4e, 0x74, 0xb0, 0x30, 0xcf,
		0x94, 0x2c, 0x94, 0x43, 0x07, 0x4b, 0xf3, 0xa9, 0x6c, 0x4c, 0x84, 0xf5, 0xa6, 0x53, 0x69, 0x76,
		0x9b, 0xd2, 0xea, 0xbf, 0x64, 0xa2, 0x72, 0x16, 0x51, 0x37, 0x8b, 0x95, 0xd9, 0xae, 0x52, 0x66,
		0xdb, 0xa2, 0x87, 0x45, 0x99, 0xed, 0xc7, 0x6f, 0x4e, 0xa7, 0x96, 0x0c, 0x90, 0x4e, 0xca, 0x79,
		0x67, 0x2b, 0xf4, 0x42, 0x1a, 0x43, 0x0a, 0x21, 0x15, 0x3a, 0xb5, 0x14, 0x8e, 0xae, 0x1a, 0xb8,
		0x0a, 0x74, 0x28, 0x5d, 0x3e, 0xa6, 0xd6, 0x3a, 0x93, 0x66, 0xab, 0x25, 0xe9, 0xee, 0x42, 0x47,
		0x56, 0x93, 0xd6, 0xa4, 0xbb, 0x86, 0xfd, 0x5d, 0x69, 0x51, 0x9a, 0xca, 0xb1, 0x4c, 0x8b, 0xd2,
		0x35, 0x3e, 0x48, 0xaf, 0x29, 0x9c, 0x60, 0x9c, 0xe0, 0x94, 0x9d, 0x60, 0x7a, 0x4d, 0xe1, 0x9c,
		0xe2, 0x9c, 0x66, 0xcf, 0x39, 0x25, 0xc7, 0x1e, 0xf1, 0x90, 0x88, 0x65, 0xc4, 0x43, 0x49, 0x82,
		0x86, 0x0c, 0x78, 0x08, 0x81, 0x88, 0x7c, 0xa4, 0x6b, 0x61, 0xbd, 0x92, 0x63, 0x2f, 0xb9, 0x22,
		0x11, 0x0e, 0xad, 0xb6, 0x8f, 0x70, 0x28, 0xb5, 0x29, 0x25, 0xc7, 0xde, 0x9e, 0x35, 0x72, 0xec,
		0x63, 0x06, 0x79, 0xc8, 0xb1, 0x87, 0xca, 0x42, 0x65, 0xa1, 0xb2, 0xe2, 0xeb, 0x95, 0x1c, 0xfb,
		0xb5, 0xde, 0x89, 0x1c, 0x7b, 0x60, 0x18, 0x18, 0x06, 0x86, 0xc9, 0xb1, 0x27, 0xc7, 0x9e, 0x1c,
		0x7b, 0x42, 0x16, 0x7a, 0x53, 0x4a, 0x8e, 0x3d, 0x91, 0x8a, 0x14, 0x49, 0x2c, 0x39, 0xf6, 0x90,
		0x5a, 0x48, 0x2d, 0xa4, 0x36, 0x29, 0x52, 0x4b, 0x8e, 0x7d, 0x1e, 0x79, 0x27, 0x57, 0x65, 0x85,
		0xe3, 0x9d, 0xe4, 0xd8, 0xc3, 0x3c, 0x53, 0xb2, 0x50, 0xb0, 0x1c, 0xfb, 0x85, 0xcc, 0x04, 0x7a,
		0x4e, 0x2d, 0x3d, 0xfa, 0xe9, 0x39, 0x95, 0x34, 0xa7, 0x47, 0x0f, 0x8b, 0x1e, 0x76, 0xb5, 0x21,
		0xf4, 0xb0, 0x38, 0xfa, 0x38, 0xfa, 0x38, 0xfa, 0xe8, 0x61, 0x71, 0xf2, 0x71, 0xf2, 0x71, 0xf2,
		0x35, 0xa6, 0x14, 0x3d, 0x6c, 0x09, 0x7c, 0x7d, 0xf4, 0xb0, 0xe8, 0x61, 0xa1, 0xb2, 0x50, 0xd9,
		0xd2, 0x52, 0x59, 0xf4, 0xb0, 0x6b, 0xbd, 0x13, 0x7a, 0x58, 0x60, 0x18, 0x18, 0x06, 0x86, 0xd1,
		0xc3, 0xa2, 0x87, 0x45, 0x0f, 0x4b, 0xc8, 0x42, 0x6f, 0x4a, 0xd1, 0xc3, 0x12, 0xa9, 0x48, 0x91,
		0xc4, 0xa2, 0x87, 0x85, 0xd4, 0x42, 0x6a, 0x21, 0xb5, 0x49, 0x91, 0x5a, 0xf4, 0xb0, 0x79, 0xe4,
		0x9d, 0x5c, 0x95, 0x15, 0x8e, 0x77, 0xa2, 0x87, 0x85, 0x79, 0xa6, 0x64, 0xa1, 0x5c, 0x7a, 0x58,
		0x7a, 0x4f, 0x65, 0x6b, 0x42, 0x6c, 0xf7, 0xa0, 0xda, 0x3d, 0x1e, 0x3d, 0x3c, 0xcd, 0x56, 0x54,
		0x45, 0x6e, 0x2b, 0x60, 0x5a, 0x18, 0x5f, 0x77, 0x22, 0x33, 0xd3, 0x65, 0x40, 0xa6, 0xbb, 0x00,
		0x5d, 0x05, 0xec, 0xfb, 0xc2, 0x74, 0x15, 0x48, 0xb2, 0xab, 0x80, 0x61, 0x41, 0x73, 0x99, 0x42,
		0xe6, 0x74, 0x12, 0xb0, 0x11, 0x4c, 0xa2, 0x93, 0x80, 0x45, 0xd6, 0x46, 0x3b, 0xbd, 0x0c, 0xf8,
		0xd3, 0x74, 0x2c, 0xc8, 0x06, 0x30, 0x58, 0x03, 0x08, 0x2b, 0x40, 0x91, 0x0d, 0x7f, 0x9c, 0x76,
		0x7a, 0x78, 0xe0, 0x4f, 0x7d, 0xb4, 0x89, 0xe7, 0x6d, 0x92, 0x0d, 0x9c, 0x4c, 0x0f, 0x66, 0x9a,
		0x51, 0x41, 0x21, 0xa1, 0x90, 0x29, 0x53, 0x48, 0x9a, 0x51, 0x41, 0xed, 0xa0, 0x76, 0xd9, 0xa3,
		0x76, 0x24, 0xdf, 0xa3, 0x2a, 0x12, 0xb1, 0x8c, 0xaa, 0x28, 0x49, 0xd0, 0x90, 0x01, 0x0f, 0x21,
		0x10, 0x91, 0xf7, 0x13, 0x17, 0xd6, 0x2b, 0xc9, 0xf7, 0x92, 0x2b, 0x12, 0x45, 0xd1, 0x6a, 0xfb,
		0x28, 0x8a, 0x52, 0x9b, 0x52, 0x92, 0xef, 0xed, 0x59, 0x23, 0xf9, 0x3e, 0x66, 0x90, 0x87, 0xe4,
		0x7b, 0xa8, 0x2c, 0x54, 0x16, 0x2a, 0x2b, 0xbe, 0x5e, 0x49, 0xbe, 0x5f, 0xeb, 0x9d, 0x48, 0xbe,
		0x07, 0x86, 0x81, 0x61, 0x60, 0x98, 0xe4, 0x7b, 0x92, 0xef, 0x49, 0xbe, 0x27, 0x64, 0xa1, 0x37,
		0xa5, 0x24, 0xdf, 0x13, 0xa9, 0x48, 0x91, 0xc4, 0x92, 0x7c, 0x0f, 0xa9, 0x85, 0xd4, 0x42, 0x6a,
		0x93, 0x22, 0xb5, 0x24, 0xdf, 0xe7, 0x91, 0x77, 0x72, 0x55, 0x56, 0x38, 0xde, 0x49, 0xf2, 0x3d,
		0xcc, 0x33, 0x25, 0x0b, 0x85, 0x4b, 0xbe, 0xa7, 0x09, 0xd5, 0xaf, 0x8e, 0x7c, 0x9a, 0x50, 0x25,
		0xcd, 0xe5, 0xd1, 0xc1, 0xa2, 0x83, 0x5d, 0x6d, 0x08, 0x1d, 0x2c, 0x0e, 0x3e, 0x0e, 0x3e, 0x0e,
		0x3e, 0x3a, 0x58, 0x9c, 0x7b, 0x9c, 0x7b, 0x9c, 0x7b, 0x8d, 0x29, 0x45, 0x07, 0x5b, 0x02, 0x1f,
		0x1f, 0x1d, 0x2c, 0x3a, 0x58, 0xa8, 0x2c, 0x54, 0xb6, 0xb4, 0x54, 0x16, 0x1d, 0xec, 0x5a, 0xef,
		0x84, 0x0e, 0x16, 0x18, 0x06, 0x86, 0x81, 0x61, 0x74, 0xb0, 0xe8, 0x60, 0xd1, 0xc1, 0x12, 0xb2,
		0xd0, 0x9b, 0x52, 0x74, 0xb0, 0x44, 0x2a, 0x52, 0x24, 0xb1, 0xe8, 0x60, 0x21, 0xb5, 0x90, 0x5a,
		0x48, 0x6d, 0x52, 0xa4, 0x16, 0x1d, 0x6c, 0x1e, 0x79, 0x27, 0x57, 0x65, 0x85, 0xe3, 0x9d, 0xe8,
		0x60, 0x61, 0x9e, 0x29, 0x59, 0x28, 0x87, 0x0e, 0x96, 0xe6, 0x53, 0xd9, 0x98, 0x08, 0xeb, 0x4d,
		0xa7, 0xd2, 0xec, 0x36, 0xa5, 0xd5, 0x7f, 0xc9, 0x44, 0xe5, 0x2c, 0xa2, 0x6e, 0x16, 0x2b, 0xb3,
		0x5d, 0xa5, 0xcc, 0xb6, 0x45, 0x0f, 0x8b, 0x32, 0xdb, 0x8f, 0xdf, 0x9c, 0x4e, 0x2d, 0x19, 0x20,
		0x9d, 0x94, 0xf3, 0xce, 0x56, 0xe8, 0x85, 0x34, 0x86, 0x14, 0x42, 0x2a, 0x74, 0x6a, 0x29, 0x1c,
		0x5d, 0x35, 0x70, 0x15, 0xe8, 0x50, 0xba, 0x7c, 0x4c, 0xad, 0x75, 0x26, 0xcd, 0x50, 0x4b, 0xd2,
		0x76, 0xf5, 0xbe, 0xe7, 0x3b, 0xea, 0xbe, 0xe7, 0xeb, 0x37, 0x24, 0x9d, 0xb1, 0x41, 0x3b, 0x52,
		0x7b, 0x47, 0x32, 0xed, 0x48, 0x93, 0x6c, 0x47, 0x4a, 0x5f, 0x29, 0x1c, 0x5e, 0x1c, 0xde, 0x94,
		0x1d, 0x5e, 0xfa, 0x4a, 0xe1, 0x88, 0xe2, 0x88, 0x66, 0xcf, 0x11, 0x25, 0x9f, 0x1e, 0xa1, 0x90,
		0x88, 0x65, 0x84, 0x42, 0x49, 0x82, 0x86, 0x0c, 0x78, 0x08, 0x81, 0x88, 0x7c, 0x54, 0x6b, 0x61,
		0xbd, 0x92, 0x4f, 0x2f, 0xb9, 0x22, 0x11, 0x09, 0xad, 0xb6, 0x8f, 0x48, 0x28, 0xb5, 0x29, 0x25,
		0x9f, 0xde, 0x9e, 0x35, 0xf2, 0xe9, 0x63, 0x06, 0x79, 0xc8, 0xa7, 0x87, 0xca, 0x42, 0x65, 0xa1,
		0xb2, 0xe2, 0xeb, 0x95, 0x7c, 0xfa, 0xb5, 0xde, 0x89, 0x7c, 0x7a, 0x60, 0x18, 0x18, 0x06, 0x86,
		0xc9, 0xa7, 0x27, 0x9f, 0x9e, 0x7c, 0x7a, 0x42, 0x16, 0x7a, 0x53, 0x4a, 0x3e, 0x3d, 0x91, 0x8a,
		0x14, 0x49, 0x2c, 0xf9, 0xf4, 0x90, 0x5a, 0x48, 0x2d, 0xa4, 0x36, 0x29, 0x52, 0x4b, 0x3e, 0x7d,
		0x1e, 0x79, 0x27, 0x57, 0x65, 0x85, 0xe3, 0x9d, 0xe4, 0xd3, 0xc3, 0x3c, 0x53, 0xb2, 0x50, 0xa4,
		0x7c, 0xfa, 0xc7, 0x7c, 0x04, 0xba, 0x4a, 0x2d, 0x3d, 0xf0, 0xe9, 0x2a, 0x95, 0x34, 0x93, 0x47,
		0x05, 0x8b, 0x0a, 0x76, 0xb5, 0x21, 0x54, 0xb0, 0xb8, 0xf7, 0xb8, 0xf7, 0xb8, 0xf7, 0xa8, 0x60,
		0x71, 0xed, 0x71, 0xed, 0x71, 0xed, 0x35, 0xa6, 0x14, 0x15, 0x6c, 0x09, 0x3c, 0x7c, 0x54, 0xb0,
		0xa8, 0x60, 0xa1, 0xb2, 0x50, 0xd9, 0xd2, 0x52, 0x59, 0x54, 0xb0, 0x6b, 0xbd, 0x13, 0x2a, 0x58,
		0x60, 0x18, 0x18, 0x06, 0x86, 0x51, 0xc1, 0xa2, 0x82, 0x45, 0x05, 0x4b, 0xc8, 0x42, 0x6f, 0x4a,
		0x51, 0xc1, 0x12, 0xa9, 0x48, 0x91, 0xc4, 0xa2, 0x82, 0x85, 0xd4, 0x42, 0x6a, 0x21, 0xb5, 0x49,
		0x91, 0x5a, 0x54, 0xb0, 0x79, 0xe4, 0x9d, 0x5c, 0x95, 0x15, 0x8e, 0x77, 0xa2, 0x82, 0x85, 0x79,
		0xa6, 0x64, 0xa1, 0x0c, 0x2a, 0x58, 0x7a, 0x4a, 0x65, 0x61, 0x1a, 0xac, 0x76, 0x94, 0x3a, 0xae,
		0x7e, 0xe9, 0xf9, 0xf5, 0xfb, 0x9e, 0x9f, 0x4a, 0x3f, 0xa9, 0xc2, 0xf6, 0x06, 0xd0, 0xae, 0x73,
		0x1f, 0x73, 0xd6, 0xb2, 0xd3, 0x17, 0xe0, 0xbe, 0xd7, 0x0e, 0x4d, 0xfb, 0x02, 0x0c, 0x6d, 0xd0,
		0x17, 0xc0, 0x9e, 0x5f, 0x4b, 0x5f, 0x00, 0xfa, 0x02, 0xd0, 0x17, 0x40, 0x38, 0x48, 0x44, 0x5f,
		0x00, 0x8b, 0xbc, 0x8c, 0xbe, 0x00, 0x36, 0x37, 0xa4, 0xe4, 0xc6, 0x94, 0xdf, 0xa0, 0xd2, 0x1b,
		0xd5, 0xda, 0x86, 0xb5, 0xb6, 0x71, 0xad, 0x6c, 0xe0, 0x6c, 0xf8, 0xbf, 0x64, 0x44, 0x71, 0xd5,
		0x23, 0x62, 0x99, 0xab, 0x9e, 0x24, 0x41, 0x43, 0x36, 0x1c, 0x48, 0x46, 0x94, 0x88, 0x49, 0xae,
		0x79, 0xb8, 0xe6, 0x49, 0x70, 0xbb, 0xcd, 0x4f, 0x29, 0x19, 0x51, 0xd9, 0x98, 0x5b, 0x6e, 0x7b,
		0x6c, 0xaf, 0x7d, 0x32, 0xa2, 0xa0, 0xb2, 0x50, 0x59, 0xa8, 0x6c, 0x4e, 0xa9, 0x2c, 0x19, 0x51,
		0x6b, 0xbd, 0x13, 0x19, 0x51, 0xc0, 0x30, 0x30, 0x0c, 0x0c, 0x93, 0x11, 0x45, 0x46, 0x14, 0x19,
		0x51, 0x84, 0x2c, 0xf4, 0xa6, 0x94, 0x8c, 0x28, 0x22, 0x15, 0x29, 0x92, 0x58, 0x32, 0xa2, 0x20,
		0xb5, 0x90, 0x5a, 0x48, 0x6d, 0x52, 0xa4, 0x96, 0x8c, 0xa8, 0x3c, 0xf2, 0x4e, 0xae, 0xca, 0x0a,
		0xc7, 0x3b, 0xc9, 0x88, 0x82, 0x79, 0xa6, 0x64, 0xa1, 0x78, 0x19, 0x51, 0xf7, 0xbd, 0x76, 0x48,
		0x5f, 0x80, 0xa5, 0x07, 0x3e, 0x7d, 0x01, 0x92, 0x66, 0xf2, 0xa8, 0x60, 0x51, 0xc1, 0xae, 0x36,
		0x84, 0x0a, 0x16, 0xf7, 0x1e, 0xf7, 0x1e, 0xf7, 0x1e, 0x15, 0x2c, 0xae, 0x3d, 0xae, 0x3d, 0xae,
		0xbd, 0xc6, 0x94, 0xa2, 0x82, 0x2d, 0x81, 0x87, 0x8f, 0x0a, 0x16, 0x15, 0x2c, 0x54, 0x16, 0x2a,
		0x5b, 0x5a, 0x2a, 0x8b, 0x0a, 0x76, 0xad, 0x77, 0x42, 0x05, 0x0b, 0x0c, 0x03, 0xc3, 0xc0, 0x30,
		0x2a, 0x58, 0x54, 0xb0, 0xa8, 0x60, 0x09, 0x59, 0xe8, 0x4d, 0x29, 0x2a, 0x58, 0x22, 0x15, 0x29,
		0x92, 0x58, 0x54, 0xb0, 0x90, 0x5a, 0x48, 0x2d, 0xa4, 0x36, 0x29, 0x52, 0x8b, 0x0a, 0x36, 0x8f,
		0xbc, 0x93, 0xab, 0xb2, 0xc2, 0xf1, 0x4e, 0x54, 0xb0, 0x30, 0xcf, 0x94, 0x2c, 0x94, 0x41, 0x05,
		0x4b, 0x5f, 0x80, 0x2c, 0x4c, 0x83, 0xfd, 0xbe, 0x00, 0x5f, 0x7a, 0xed, 0x90, 0xbe, 0x00, 0x76,
		0xa6, 0xd2, 0x5e, 0x5f, 0x80, 0xc1, 0xac, 0x65, 0xa2, 0x2f, 0xc0, 0xf6, 0xe0, 0x5d, 0xbd, 0xde,
		0x7d, 0xcd, 0xe9, 0xf4, 0xdb, 0x91, 0xd7, 0x74, 0xc3, 0xc8, 0xa0, 0x43, 0xc0, 0x32, 0x6b, 0xf4,
		0x0a, 0xb0, 0xe7, 0xeb, 0xd2, 0x2b, 0x80, 0x5e, 0x01, 0xf4, 0x0a, 0x10, 0x0e, 0x1c, 0xd1, 0x2b,
		0xc0, 0x22, 0x57, 0xa3, 0x57, 0x80, 0xcd, 0x0d, 0x29, 0xb9, 0x31, 0xe5, 0x37, 0xa8, 0xf4, 0x46,
		0xb5, 0xb6, 0x61, 0xad, 0x6d, 0x5c, 0x2b, 0x1b, 0x38, 0x1b, 0x3e, 0x31, 0x59, 0x52, 0x5c, 0xff,
		0x88, 0x58, 0xe6, 0xfa, 0x27, 0x49, 0xd0, 0x90, 0x0d, 0x11, 0x92, 0x25, 0x25, 0x62, 0x92, 0xab,
		0x1f, 0xae, 0x7e, 0x12, 0xdc, 0x6e, 0xf3, 0x53, 0x4a, 0x96, 0x54, 0x36, 0xe6, 0x96, 0x1b, 0x20,
		0xdb, 0x6b, 0x9f, 0x2c, 0x29, 0xa8, 0x2c, 0x54, 0x16, 0x2a, 0x9b, 0x53, 0x2a, 0x4b, 0x96, 0xd4,
		0x5a, 0xef, 0x44, 0x96, 0x14, 0x30, 0x0c, 0x0c, 0x03, 0xc3, 0x64, 0x49, 0x91, 0x25, 0x45, 0x96,
		0x14, 0x21, 0x0b, 0xbd, 0x29, 0x25, 0x4b, 0x8a, 0x48, 0x45, 0x8a, 0x24, 0x96, 0x2c, 0x29, 0x48,
		0x2d, 0xa4, 0x16, 0x52, 0x9b, 0x14, 0xa9, 0x25, 0x4b, 0x2a, 0x8f, 0xbc, 0x93, 0xab, 0xb2, 0xc2,
		0xf1, 0x4e, 0xb2, 0xa4, 0x60, 0x9e, 0x29, 0x59, 0x28, 0x54, 0x96, 0xd4, 0x92, 0xcc, 0x04, 0xba,
		0x06, 0x2c, 0x3d, 0xfa, 0xe9, 0x1a, 0x90, 0x34, 0xa7, 0x47, 0x0f, 0x8b, 0x1e, 0x76, 0xb5, 0x21,
		0xf4, 0xb0, 0x38, 0xfa, 0x38, 0xfa, 0x38, 0xfa, 0xe8, 0x61, 0x71, 0xf2, 0x71, 0xf2, 0x71, 0xf2,
		0x35, 0xa6, 0x14, 0x3d, 0x6c, 0x09, 0x7c, 0x7d, 0xf4, 0xb0, 0xe8, 0x61, 0xa1, 0xb2, 0x50, 0xd9,
		0xd2, 0x52, 0x59, 0xf4, 0xb0, 0x6b, 0xbd, 0x13, 0x7a, 0x58, 0x60, 0x18, 0x18, 0x06, 0x86, 0xd1,
		0xc3, 0xa2, 0x87, 0x45, 0x0f, 0x4b, 0xc8, 0x42, 0x6f, 0x4a, 0xd1, 0xc3, 0x12, 0xa9, 0x48, 0x91,
		0xc4, 0xa2, 0x87, 0x85, 0xd4, 0x42, 0x6a, 0x21, 0xb5, 0x49, 0x91, 0x5a, 0xf4, 0xb0, 0x79, 0xe4,
		0x9d, 0x5c, 0x95, 0x15, 0x8e, 0x77, 0xa2, 0x87, 0x85, 0x79, 0xa6, 0x64, 0xa1, 0x5c, 0x7a, 0x58,
		0xfa, 0x07, 0x64, 0x6b, 0x42, 0xec, 0x76, 0x12, 0xd8, 0xfe, 0xd2, 0xf3, 0x8f, 0x7a, 0xf7, 0xb5,
		0x93, 0xc9, 0xb3, 0x69, 0x29, 0x60, 0x7b, 0x76, 0xed, 0x34, 0x17, 0x58, 0x98, 0xc8, 0x8c, 0x75,
		0x19, 0xe8, 0xfb, 0x72, 0x3d, 0x06, 0x26, 0xb6, 0xe8, 0x30, 0x60, 0xcf, 0x2f, 0xa6, 0xc3, 0x00,
		0x1d, 0x06, 0xe8, 0x30, 0x20, 0x1c, 0x64, 0xa2, 0xc3, 0x80, 0x45, 0x36, 0x47, 0x87, 0x01, 0x9b,
		0x1b, 0x52, 0x72, 0x63, 0xca, 0x6f, 0x50, 0xe9, 0x8d, 0x6a, 0x6d, 0xc3, 0x5a, 0xdb, 0xb8, 0x56,
		0x36, 0x70, 0x36, 0xfc, 0x67, 0x32, 0xaa, 0xb8, 0x2a, 0x12, 0xb1, 0xcc, 0x55, 0x51, 0x92, 0xa0,
		0x21, 0x1b, 0x4e, 0x24, 0xa3, 0x4a, 0xc4, 0x24, 0xd7, 0x44, 0x5c, 0x13, 0x25, 0xb8, 0xdd, 0xe6,
		0xa7, 0x94, 0x8c, 0xaa, 0x6c, 0xcc, 0x2d, 0xb7, 0x45, 0xb6, 0xd7, 0x3e, 0x19, 0x55, 0x50, 0x59,
		0xa8, 0x2c, 0x54, 0x36, 0xa7, 0x54, 0x96, 0x8c, 0xaa, 0xb5, 0xde, 0x89, 0x8c, 0x2a, 0x60, 0x18,
		0x18, 0x06, 0x86, 0xc9, 0xa8, 0x22, 0xa3, 0x8a, 0x8c, 0x2a, 0x42, 0x16, 0x7a, 0x53, 0x4a, 0x46,
		0x15, 0x91, 0x8a, 0x14, 0x49, 0x2c, 0x19, 0x55, 0x90, 0x5a, 0x48, 0x2d, 0xa4, 0x36, 0x29, 0x52,
		0x4b, 0x46, 0x55, 0x1e, 0x79, 0x27, 0x57, 0x65, 0x85, 0xe3, 0x9d, 0x64, 0x54, 0xc1, 0x3c, 0x53,
		0xb2, 0x50, 0xd0, 0x8c, 0xaa, 0x71, 0x5e, 0x02, 0xfd, 0x05, 0x96, 0x1e, 0xfc, 0xf4, 0x17, 0x48,
		0x9a, 0xd1, 0xa3, 0x86, 0x45, 0x0d, 0xbb, 0xda, 0x10, 0x6a, 0x58, 0xdc, 0x7c, 0xdc, 0x7c, 0xdc,
		0x7c, 0xd4, 0xb0, 0xb8, 0xf8, 0xb8, 0xf8, 0xb8, 0xf8, 0x1a, 0x53, 0x8a, 0x1a, 0xb6, 0x04, 0x9e,
		0x3e, 0x6a, 0x58, 0xd4, 0xb0, 0x50, 0x59, 0xa8, 0x6c, 0x69, 0xa9, 0x2c, 0x6a, 0xd8, 0xb5, 0xde,
		0x09, 0x35, 0x2c, 0x30, 0x0c, 0x0c, 0x03, 0xc3, 0xa8, 0x61, 0x51, 0xc3, 0xa2, 0x86, 0x25, 0x64,
		0xa1, 0x37, 0xa5, 0xa8, 0x61, 0x89, 0x54, 0xa4, 0x48, 0x62, 0x51, 0xc3, 0x42, 0x6a, 0x21, 0xb5,
		0x90, 0xda, 0xa4, 0x48, 0x2d, 0x6a, 0xd8, 0x3c, 0xf2, 0x4e, 0xae, 0xca, 0x0a, 0xc7, 0x3b, 0x51,
		0xc3, 0xc2, 0x3c, 0x53, 0xb2, 0x50, 0x26, 0x35, 0x2c, 0xdd, 0x05, 0xb2, 0x34, 0x1d, 0xc9, 0xf4,
		0x16, 0xf8, 0xec, 0xd3, 0x59, 0x20, 0x81, 0x99, 0xb5, 0xdb, 0x57, 0x60, 0x3c, 0x89, 0x99, 0xea,
		0x2a, 0xb0, 0x3b, 0xd3, 0x54, 0xc1, 0xbc, 0xaf, 0xc0, 0xae, 0x76, 0x8b, 0x06, 0x3a, 0x0b, 0xa4,
		0xe2, 0xf9, 0xd2, 0x59, 0x60, 0x8d, 0x0f, 0xd2, 0x59, 0xc0, 0x42, 0xf8, 0x89, 0xce, 0x02, 0x29,
		0x87, 0x8b, 0xe8, 0x2c, 0x40, 0x67, 0x81, 0x64, 0x36, 0xa8, 0xf4, 0x46, 0xb5, 0xb6, 0x61, 0xad,
		0x6d, 0x5c, 0x2b, 0x1b, 0x38, 0x1b, 0x9e, 0x33, 0xb9, 0x54, 0x5c, 0x12, 0x89, 0x58, 0xe6, 0x92,
		0x28, 0x49, 0xd0, 0x90, 0x0d, 0x24, 0x92, 0x4b, 0x25, 0x62, 0x92, 0x0b, 0x22, 0x2e, 0x88, 0x12,
		0xdc, 0x6e, 0xf3, 0x53, 0x4a, 0x2e, 0x55, 0x36, 0xe6, 0x96, 0x7b, 0x22, 0xdb, 0x6b, 0x9f, 0x5c,
		0x2a, 0xa8, 0x2c, 0x54, 0x16, 0x2a, 0x9b, 0x53, 0x2a, 0x4b, 0x2e, 0xd5, 0x5a, 0xef, 0x44, 0x2e,
		0x15, 0x30, 0x0c, 0x0c, 0x03, 0xc3, 0xe4, 0x52, 0x91, 0x4b, 0x45, 0x2e, 0x15, 0x21, 0x0b, 0xbd,
		0x29, 0x25, 0x97, 0x8a, 0x48, 0x45, 0x8a, 0x24, 0x96, 0x5c, 0x2a, 0x48, 0x2d, 0xa4, 0x16, 0x52,
		0x9b, 0x14, 0xa9, 0x25, 0x97, 0x2a, 0x8f, 0xbc, 0x93, 0xab, 0xb2, 0xc2, 0xf1, 0x4e, 0x72, 0xa9,
		0x60, 0x9e, 0x29, 0x59, 0x28, 0x64, 0x2e, 0xd5, 0x4c, 0x66, 0x02, 0xbd, 0x05, 0x96, 0x1e, 0xfd,
		0xf4, 0x16, 0x48, 0x9a, 0xd3, 0xa3, 0x87, 0x45, 0x0f, 0xbb, 0xda, 0x10, 0x7a, 0x58, 0x1c, 0x7d,
		0x1c, 0x7d, 0x1c, 0x7d, 0xf4, 0xb0, 0x38, 0xf9, 0x38, 0xf9, 0x38, 0xf9, 0x1a, 0x53, 0x8a, 0x1e,
		0xb6, 0x04, 0xbe, 0x3e, 0x7a, 0x58, 0xf4, 0xb0, 0x50, 0x59, 0xa8, 0x6c, 0x69, 0xa9, 0x2c, 0x7a,
		0xd8, 0xb5, 0xde, 0x09, 0x3d, 0x2c, 0x30, 0x0c, 0x0c, 0x03, 0xc3, 0xe8, 0x61, 0xd1, 0xc3, 0xa2,
		0x87, 0x25, 0x64, 0xa1, 0x37, 0xa5, 0xe8, 0x61, 0x89, 0x54, 0xa4, 0x48, 0x62, 0xd1, 0xc3, 0x42,
		0x6a, 0x21, 0xb5, 0x90, 0xda, 0xa4, 0x48, 0x2d, 0x7a, 0xd8, 0x3c, 0xf2, 0x4e, 0xae, 0xca, 0x0a,
		0xc7, 0x3b, 0xd1, 0xc3, 0xc2, 0x3c, 0x53, 0xb2, 0x50, 0x2e, 0x3d, 0x2c, 0xdd, 0x05, 0xb2, 0x35,
		0x21, 0x89, 0xf4, 0x17, 0xd8, 0x3d, 0x99, 0x3c, 0x9b, 0x0e, 0x03, 0xb6, 0x67, 0xd7, 0x6a, 0x8f,
		0x81, 0xc7, 0x89, 0xcc, 0x58, 0x97, 0x81, 0x49, 0x83, 0x05, 0x89, 0x1e, 0x03, 0x7a, 0xcd, 0x1a,
		0xe8, 0x30, 0x90, 0x8a, 0xff, 0x4b, 0x87, 0x81, 0x35, 0x3e, 0x48, 0x87, 0x01, 0x0b, 0x41, 0x28,
		0x3a, 0x0c, 0xa4, 0x1c, 0x34, 0xa2, 0xc3, 0x00, 0x1d, 0x06, 0x92, 0xd9, 0xa0, 0xd2, 0x1b, 0xd5,
		0xda, 0x86, 0xb5, 0xb6, 0x71, 0xad, 0x6c, 0xe0, 0x6c, 0xf8, 0xcf, 0x64, 0x54, 0x71, 0x55, 0x24,
		0x62, 0x99, 0xab, 0xa2, 0x24, 0x41, 0x43, 0x36, 0x9c, 0x48, 0x46, 0x95, 0x88, 0x49, 0xae, 0x89,
		0xb8, 0x26, 0x4a, 0x70, 0xbb, 0xcd, 0x4f, 0x29, 0x19, 0x55, 0xd9, 0x98, 0x5b, 0x6e, 0x8b, 0x6c,
		0xaf, 0x7d, 0x32, 0xaa, 0xa0, 0xb2, 0x50, 0x59, 0xa8, 0x6c, 0x4e, 0xa9, 0x2c, 0x19, 0x55, 0x6b,
		0xbd, 0x13, 0x19, 0x55, 0xc0, 0x30, 0x30, 0x0c, 0x0c, 0x93, 0x51, 0x45, 0x46, 0x15, 0x19, 0x55,
		0x84, 0x2c, 0xf4, 0xa6, 0x94, 0x8c, 0x2a, 0x22, 0x15, 0x29, 0x92, 0x58, 0x32, 0xaa, 0x20, 0xb5,
		0x90, 0x5a, 0x48, 0x6d, 0x52, 0xa4, 0x96, 0x8c, 0xaa, 0x3c, 0xf2, 0x4e, 0xae, 0xca, 0x0a, 0xc7,
		0x3b, 0xc9, 0xa8, 0x82, 0x79, 0xa6, 0x64, 0xa1, 0xa0, 0x19, 0x55, 0xe3, 0xbc, 0x04, 0xfa, 0x0b,
		0x2c, 0x3d, 0xf8, 0xe9, 0x2f, 0x90, 0x34, 0xa3, 0x47, 0x0d, 0x8b, 0x1a, 0x76, 0xb5, 0x21, 0xd4,
		0xb0, 0xb8, 0xf9, 0xb8, 0xf9, 0xb8, 0xf9, 0xa8, 0x61, 0x71, 0xf1, 0x71, 0xf1, 0x71, 0xf1, 0x35,
		0xa6, 0x14, 0x35, 0x6c, 0x09, 0x3c, 0x7d, 0xd4, 0xb0, 0xa8, 0x61, 0xa1, 0xb2, 0x50, 0xd9, 0xd2,
		0x52, 0x59, 0xd4, 0xb0, 0x6b, 0xbd, 0x13, 0x6a, 0x58, 0x60, 0x18, 0x18, 0x06, 0x86, 0x51, 0xc3,
		0xa2, 0x86, 0x45, 0x0d, 0x4b, 0xc8, 0x42, 0x6f, 0x4a, 0x51, 0xc3, 0x12, 0xa9, 0x48, 0x91, 0xc4,
		0xa2, 0x86, 0x85, 0xd4, 0x42, 0x6a, 0x21, 0xb5, 0x49, 0x91, 0x5a, 0xd4, 0xb0, 0x79, 0xe4, 0x9d,
		0x5c, 0x95, 0x15, 0x8e, 0x77, 0xa2, 0x86, 0x85, 0x79, 0xa6, 0x64, 0xa1, 0x4c, 0x6a, 0x58, 0xba,
		0x0b, 0x64, 0x69, 0x3a, 0x92, 0xe9, 0x2d, 0xf0, 0xd9, 0xa7, 0xb3, 0x40, 0x02, 0x33, 0x6b, 0xb7,
		0xaf, 0xc0, 0x78, 0x12, 0xb3, 0xd0, 0x55, 0x20, 0xe8, 0xf6, 0x23, 0xe5, 0x84, 0xaa, 0xad, 0x86,
		0xe7, 0x9e, 0xd3, 0xed, 0x0d, 0xfe, 0x2b, 0xd4, 0x6f, 0x2d, 0xb0, 0xca, 0x20, 0xfd, 0x05, 0xec,
		0xf9, 0xc5, 0xf4, 0x17, 0x48, 0xb2, 0xbf, 0x80, 0x61, 0x69, 0x73, 0x99, 0x92, 0xe6, 0xf4, 0x14,
		0xb0, 0x11, 0x58, 0xa2, 0xa7, 0x80, 0x45, 0x0e, 0x67, 0xdc, 0x53, 0xc0, 0x6d, 0xdd, 0xab, 0x20,
		0xf2, 0x42, 0xe5, 0x78, 0xfe, 0xc0, 0x4d, 0xbb, 0x57, 0xce, 0xf0, 0xb4, 0x09, 0xe5, 0xf2, 0xaa,
		0x56, 0x3f, 0xc2, 0x34, 0xd3, 0x44, 0x56, 0xfb, 0x26, 0xe4, 0x69, 0xd3, 0xc9, 0x20, 0x1b, 0x30,
		0x61, 0x0d, 0x2e, 0xac, 0xc0, 0x46, 0x36, 0x3c, 0x75, 0xb1, 0x38, 0xb2, 0x05, 0x6d, 0x9a, 0x90,
		0x26, 0x2d, 0x9d, 0x54, 0x55, 0xb7, 0xfd, 0x97, 0xfb, 0x23, 0x74, 0x9a, 0xdd, 0x4e, 0xcf, 0x0d,
		0x94, 0xd3, 0x51, 0x2d, 0x41, 0x7c, 0x5d, 0xb4, 0x0d, 0xb0, 0x02, 0xac, 0x00, 0x2b, 0xc0, 0x5a,
		0x7c, 0x60, 0x55, 0xbe, 0x7b, 0xd3, 0x56, 0x8e, 0xeb, 0xdd, 0xf5, 0xe4, 0x10, 0x75, 0xd6, 0x28,
		0x50, 0x0a, 0x94, 0x02, 0xa5, 0x40, 0x69, 0x09, 0xa0, 0xf4, 0x7b, 0xa4, 0x02, 0xdf, 0x6d, 0x4f,
		0x99, 0xe4, 0xd0, 0x4b, 0x0f, 0x1c, 0x4f, 0x90, 0xab, 0xfe, 0xe2, 0x19, 0x72, 0x40, 0x3b, 0xd8,
		0x3e, 0xe0, 0x2c, 0x38, 0x0b, 0xce, 0x82, 0xb3, 0x19, 0xc4, 0x59, 0xef, 0xce, 0xef, 0x06, 0xca,
		0x71, 0x43, 0xa7, 0xe7, 0x46, 0xdf, 0x9c, 0xb6, 0xf2, 0xef, 0x86, 0x17, 0xac, 0x42, 0x10, 0xbb,
		0xdc, 0x3c, 0x34, 0x16, 0x78, 0x05, 0x5e, 0x81, 0xd7, 0xd2, 0xc0, 0xab, 0xaf, 0xbe, 0x47, 0xce,
		0xb7, 0x6e, 0xcf, 0xf1, 0xee, 0x7a, 0x4e, 0x47, 0x45, 0x81, 0xd7, 0x14, 0xc7, 0xd8, 0x65, 0xcf,
		0x00, 0x68, 0x01, 0x5a, 0x80, 0x16, 0xa0, 0xcd, 0x09, 0xd0, 0x96, 0x4e, 0x71, 0xba, 0x42, 0x4b,
		0x67, 0x54, 0x06, 0x57, 0x43, 0xf7, 0xa9, 0xa5, 0x85, 0x34, 0x29, 0x77, 0x2b, 0x52, 0xe6, 0x56,
		0x4c, 0x21, 0x55, 0x45, 0x21, 0x65, 0xf1, 0x98, 0x40, 0x21, 0x35, 0x43, 0xa8, 0x50, 0x48, 0xc1,
		0x26, 0x61, 0x93, 0xb0, 0x49, 0xd8, 0x64, 0xa6, 0xdd, 0x76, 0x14, 0x52, 0x00, 0x2b, 0xc0, 0x0a,
		0xb0, 0x02, 0xac, 0xc2, 0xc0, 0x8a, 0x42, 0x0a, 0x28, 0x05, 0x4a, 0x81, 0x52, 0xa0, 0xd4, 0x1c,
		0x4a, 0x51, 0x48, 0x81, 0xb3, 0xe0, 0x2c, 0x38, 0x0b, 0xce, 0x5a, 0xc5, 0x59, 0x14, 0x52, 0xc0,
		0x2b, 0xf0, 0x0a, 0xbc, 0x02, 0xaf, 0x36, 0xe1, 0x15, 0x85, 0x14, 0x40, 0x0b, 0xd0, 0x02, 0xb4,
		0x00, 0xad, 0xfc, 0x27, 0x8b, 0xa8, 0x90, 0x32, 0x28, 0x8d, 0x48, 0x61, 0xbc, 0x67, 0x87, 0xd7,
		0x4a, 0x75, 0xbc, 0xf3, 0xc1, 0xb3, 0x2e, 0x26, 0x8f, 0x3a, 0x1b, 0x3f, 0x29, 0x03, 0x25, 0xf2,
		0xc2, 0x20, 0x52, 0x4e, 0xaf, 0xdb, 0xf6, 0x9a, 0x3f, 0x1c, 0xaf, 0x77, 0x5f, 0xd3, 0xaf, 0x8d,
		0xb7, 0x60, 0x89, 0xa2, 0x78, 0xf6, 0x8e, 0x6f, 0x8a, 0xe2, 0x25, 0x59, 0x14, 0x6f, 0xae, 0x12,
		0xaa, 0xb1, 0xee, 0x53, 0xa0, 0xae, 0x2a, 0x05, 0xf2, 0x6c, 0x70, 0x61, 0xe4, 0x9f, 0x16, 0x09,
		0x95, 0xb1, 0xfc, 0xd3, 0xb0, 0x32, 0xe5, 0xc2, 0xb2, 0x33, 0xaa, 0x50, 0x29, 0xb4, 0x11, 0x71,
		0x5a, 0x71, 0x5a, 0xf3, 0xee, 0xb4, 0x9a, 0x6e, 0xec, 0xa9, 0xa1, 0x8e, 0xfb, 0xdd, 0x19, 0xcd,
		0xa2, 0x80, 0xa4, 0x7b, 0x61, 0x11, 0xcf, 0x59, 0xa7, 0x7f, 0x52, 0x76, 0x40, 0xc1, 0x16, 0x38,
		0x58, 0x07, 0x09, 0xeb, 0x60, 0x61, 0x15, 0x34, 0x64, 0xc0, 0x43, 0x08, 0x44, 0xe4, 0x23, 0x60,
		0x0b, 0xeb, 0xb5, 0xef, 0xf9, 0xd1, 0x76, 0xd5, 0x42, 0xef, 0xa4, 0x3d, 0x7a, 0x27, 0x09, 0x1b,
		0xa7, 0x77, 0x52, 0x42, 0xdb, 0x6d, 0x7e, 0x4a, 0x0b, 0xd0, 0x3b, 0xa9, 0x56, 0xdd, 0xaf, 0xed,
		0xef, 0xee, 0x55, 0xf7, 0x77, 0x68, 0xa1, 0x24, 0x6d, 0xad, 0x48, 0xcd, 0x3b, 0x7b, 0x81, 0xba,
		0x57, 0x7e, 0xe4, 0x44, 0xca, 0x0d, 0x5a, 0xdd, 0xbf, 0x7c, 0x79, 0xba, 0xb9, 0xf0, 0x04, 0xa1,
		0x03, 0x52, 0xf8, 0xd2, 0x15, 0x2a, 0x0b, 0x95, 0x85, 0xca, 0xe6, 0x8c, 0xca, 0xca, 0x5d, 0xea,
		0x2e, 0x84, 0xb1, 0xb6, 0x0a, 0x04, 0xf2, 0x81, 0x0a, 0x23, 0x37, 0x88, 0x9c, 0xc8, 0xeb, 0xa8,
		0x40, 0x1e, 0xe1, 0xe7, 0xcd, 0x03, 0xc3, 0xc0, 0x30, 0x30, 0x5c, 0x2a, 0x18, 0x6e, 0xa9, 0xa6,
		0xd7, 0x71, 0xdb, 0xbb, 0x35, 0x1b, 0x40, 0x5c, 0x15, 0xb4, 0xb9, 0xe0, 0xb4, 0x54, 0x09, 0x59,
		0xd8, 0xf1, 0x6f, 0xab, 0x84, 0x2c, 0x8a, 0x16, 0xb2, 0xd8, 0x66, 0x4a, 0x89, 0x54, 0xa4, 0x47,
		0x62, 0xff, 0x72, 0x03, 0xdf, 0xf3, 0xef, 0x9c, 0xe8, 0x5b, 0xa0, 0xc2, 0x6f, 0xdd, 0x76, 0xcb,
		0xe9, 0x35, 0x23, 0x79, 0x32, 0xbb, 0xfc, 0x31, 0x90, 0x5a, 0x48, 0x2d, 0xa4, 0xb6, 0x54, 0xa4,
		0xb6, 0xa7, 0x82, 0xa6, 0xf2, 0x23, 0xf7, 0x4e, 0x59, 0x60, 0xb5, 0x3b, 0xf0, 0x4e, 0x3b, 0x24,
		0x85, 0xab, 0xb2, 0xc2, 0xf1, 0x4e, 0xdb, 0x53, 0xba, 0xb5, 0x09, 0xf3, 0x2c, 0x2e, 0xf3, 0x4c,
		0x55, 0x11, 0x26, 0x94, 0x3b, 0x33, 0xb5, 0x67, 0x92, 0xe4, 0xf1, 0x34, 0x2b, 0xe1, 0xed, 0xac,
		0xfa, 0xda, 0xa8, 0xd6, 0xb0, 0xf9, 0x58, 0x9b, 0xa4, 0x8e, 0x9a, 0xd5, 0x20, 0x5e, 0x38, 0xf6,
		0x4d, 0x6a, 0x11, 0x2f, 0xc4, 0xae, 0xa4, 0xb4, 0xb0, 0x55, 0xb4, 0xb0, 0x19, 0xe0, 0xef, 0x68,
		0x61, 0xd7, 0x7f, 0x23, 0xb4, 0xb0, 0x38, 0xf9, 0x38, 0xf9, 0x38, 0xf9, 0x19, 0x77, 0xf2, 0xd1,
		0xc2, 0xe2, 0xe0, 0xe3, 0xe0, 0x17, 0xdc, 0xc1, 0x47, 0x0b, 0x5b, 0x02, 0x3f, 0x1f, 0x2d, 0x2c,
		0x5a, 0x58, 0xa8, 0x2c, 0x54, 0xb6, 0xb4, 0x54, 0x16, 0x2d, 0xec, 0x5a, 0xef, 0x84, 0x16, 0x16,
		0x18, 0x06, 0x86, 0x81, 0x61, 0xb4, 0xb0, 0x68, 0x61, 0xd1, 0xc2, 0x12, 0xb2, 0xd0, 0x9b, 0x52,
		0xb4, 0xb0, 0x44, 0x2a, 0x52, 0x24, 0xb1, 0x68, 0x61, 0x21, 0xb5, 0x90, 0x5a, 0x48, 0x6d, 0x52,
		0xa4, 0x16, 0x2d, 0x6c, 0x1e, 0x79, 0x27, 0x57, 0x65, 0x85, 0xe3, 0x9d, 0x68, 0x61, 0x61, 0x9e,
		0x29, 0x59, 0x28, 0x8f, 0x16, 0xd6, 0xa0, 0xaa, 0xbc, 0xf9, 0x50, 0x97, 0xaf, 0xb8, 0xff, 0x2f,
		0x27, 0xa3, 0x62, 0xa4, 0x0c, 0x7e, 0xa6, 0x16, 0xfd, 0x45, 0x10, 0xa9, 0xc6, 0xf0, 0xc1, 0x47,
		0xbd, 0xfb, 0xda, 0xf5, 0x88, 0xf1, 0x1f, 0x0f, 0x1f, 0x4b, 0x4f, 0x01, 0xe1, 0x59, 0xb5, 0xd2,
		0x4c, 0x60, 0x7e, 0x02, 0x33, 0xd8, 0x45, 0x60, 0x57, 0xac, 0x8b, 0xc0, 0x2e, 0x5d, 0x04, 0x2c,
		0xfa, 0xbf, 0x74, 0x11, 0xa0, 0x8b, 0x00, 0x5d, 0x04, 0x84, 0x83, 0x49, 0x74, 0x11, 0xb0, 0xc8,
		0xdc, 0xe8, 0x22, 0x60, 0x73, 0x43, 0x4a, 0x6e, 0x4c, 0xf9, 0x0d, 0x2a, 0xbd, 0x51, 0xad, 0x6d,
		0x58, 0x6b, 0x1b, 0xd7, 0xca, 0x06, 0xce, 0x86, 0x9f, 0x4c, 0xe6, 0x14, 0x57, 0x42, 0x22, 0x96,
		0xb9, 0x12, 0x4a, 0x12, 0x34, 0x64, 0xc3, 0x86, 0x64, 0x4e, 0x89, 0x98, 0xe4, 0x3a, 0x88, 0xeb,
		0xa0, 0x04, 0xb7, 0xdb, 0xfc, 0x94, 0x92, 0x39, 0x95, 0x8d, 0xb9, 0xe5, 0x56, 0xc8, 0xf6, 0xda,
		0x27, 0x73, 0x0a, 0x2a, 0x0b, 0x95, 0x85, 0xca, 0xe6, 0x94, 0xca, 0x92, 0x39, 0xb5, 0xd6, 0x3b,
		0x91, 0x39, 0x05, 0x0c, 0x03, 0xc3, 0xc0, 0x30, 0x99, 0x53, 0x64, 0x4e, 0x91, 0x39, 0x45, 0xc8,
		0x42, 0x6f, 0x4a, 0xc9, 0x9c, 0x22, 0x52, 0x91, 0x22, 0x89, 0x25, 0x73, 0x0a, 0x52, 0x0b, 0xa9,
		0x85, 0xd4, 0x26, 0x45, 0x6a, 0xc9, 0x9c, 0xca, 0x23, 0xef, 0xe4, 0xaa, 0xac, 0x70, 0xbc, 0x93,
		0xcc, 0x29, 0x98, 0x67, 0x4a, 0x16, 0x0a, 0x9c, 0x39, 0xb5, 0x4b, 0x17, 0x81, 0xa5, 0xc7, 0x3e,
		0x5d, 0x04, 0x92, 0xe6, 0xf3, 0x68, 0x61, 0xd1, 0xc2, 0xae, 0x36, 0x84, 0x16, 0x16, 0x27, 0x1f,
		0x27, 0x1f, 0x27, 0x1f, 0x2d, 0x2c, 0x0e, 0x3e, 0x0e, 0x3e, 0x0e, 0xbe, 0xc6, 0x94, 0xa2, 0x85,
		0x2d, 0x81, 0x9f, 0x8f, 0x16, 0x16, 0x2d, 0x2c, 0x54, 0x16, 0x2a, 0x5b, 0x5a, 0x2a, 0x8b, 0x16,
		0x76, 0xad, 0x77, 0x42, 0x0b, 0x0b, 0x0c, 0x03, 0xc3, 0xc0, 0x30, 0x5a, 0x58, 0xb4, 0xb0, 0x68,
		0x61, 0x09, 0x59, 0xe8, 0x4d, 0x29, 0x5a, 0x58, 0x22, 0x15, 0x29, 0x92, 0x58, 0xb4, 0xb0, 0x90,
		0x5a, 0x48, 0x2d, 0xa4, 0x36, 0x29, 0x52, 0x8b, 0x16, 0x36, 0x8f, 0xbc, 0x93, 0xab, 0xb2, 0xc2,
		0xf1, 0x4e, 0xb4, 0xb0, 0x30, 0xcf, 0x94, 0x2c, 0x94, 0x47, 0x0b, 0x4b, 0x17, 0x81, 0xec, 0x4c,
		0x46, 0x72, 0x5d, 0x04, 0x76, 0xe9, 0x22, 0x60, 0x73, 0x56, 0xed, 0x77, 0x11, 0xd8, 0xcd, 0x44,
		0x17, 0x01, 0x2d, 0x35, 0xba, 0x91, 0xfa, 0xdc, 0xb8, 0x5f, 0x40, 0x95, 0x7e, 0x01, 0x69, 0x7a,
		0xae, 0x45, 0xee, 0x17, 0x30, 0x81, 0x03, 0x67, 0xbc, 0x89, 0x0d, 0x1b, 0x06, 0xcc, 0x9b, 0x33,
		0xeb, 0x18, 0xb0, 0x49, 0xc7, 0x00, 0x3a, 0x06, 0xe4, 0x83, 0xa5, 0x19, 0x07, 0x76, 0xa6, 0xeb,
		0xc5, 0x6b, 0x29, 0x3f, 0xf2, 0xa2, 0x1f, 0x81, 0xba, 0x35, 0x59, 0x34, 0x93, 0x13, 0xc7, 0x20,
		0x74, 0x53, 0x39, 0x1a, 0x7f, 0x95, 0xf7, 0x6e, 0x28, 0x98, 0xbe, 0x75, 0xf0, 0xf1, 0xe8, 0xfa,
		0x62, 0xf0, 0x1f, 0x97, 0xff, 0x6e, 0xd4, 0x4d, 0x97, 0xe0, 0xd0, 0x2b, 0x0e, 0x45, 0xc2, 0x49,
		0xc2, 0x91, 0xf9, 0xe3, 0xed, 0x2f, 0x8d, 0xd3, 0xeb, 0xa3, 0xc6, 0x97, 0xdd, 0xeb, 0xcf, 0xa7,
		0x47, 0x87, 0x07, 0x17, 0x97, 0x95, 0x2c, 0x5c, 0x4c, 0x48, 0xbf, 0xe5, 0xd1, 0xe9, 0x3f, 0x2f,
		0x2e, 0x0f, 0x2e, 0xeb, 0xd7, 0x17, 0x8d, 0x8f, 0x85, 0x7c, 0xc1, 0xc9, 0x34, 0xd6, 0x0a, 0x3d,
		0x8d, 0x8f, 0x8b, 0xf5, 0xe4, 0xf3, 0xf1, 0x65, 0x61, 0xdf, 0xb3, 0x34, 0xdb, 0xb1, 0xb0, 0x93,
		0x77, 0x7c, 0xf0, 0xbe, 0x7e, 0x5c, 0xff, 0x50, 0xe4, 0x49, 0xbc, 0x38, 0xbf, 0xac, 0x5f, 0x37,
		0xce, 0x8e, 0x8f, 0x0e, 0xff, 0x3d, 0xdc, 0x92, 0x85, 0x5c, 0xa8, 0xd5, 0x01, 0xe0, 0x7c, 0x69,
		0x1c, 0x5f, 0x14, 0x74, 0xa5, 0xd6, 0xca, 0xb0, 0x52, 0x87, 0xef, 0xf9, 0xf1, 0xf8, 0xec, 0x5f,
		0x17, 0x8d, 0xfa, 0x61, 0x09, 0xb6, 0x62, 0xad, 0xd8, 0x14, 0xee, 0x4b, 0xe3, 0xb4, 0xb0, 0xab,
		0xb4, 0xc0, 0xbb, 0xf0, 0x4b, 0xe3, 0xb4, 0xe0, 0xdb, 0x70, 0x74, 0x5a, 0xd4, 0x0b, 0xba, 0x3e,
		0x67, 0x5c, 0x0c, 0x49, 0xf2, 0x6d, 0x64, 0xe1, 0x2a, 0xe9, 0xb8, 0xcb, 0x8b, 0x04, 0xe6, 0xb1,
		0xa2, 0x7c, 0xf7, 0xa6, 0xad, 0x5a, 0xe6, 0x51, 0xce, 0x89, 0x21, 0xdd, 0xfe, 0x92, 0x32, 0xc9,
		0x80, 0xc4, 0x49, 0xe7, 0x2c, 0x11, 0x27, 0x4d, 0x70, 0xbf, 0xa6, 0x1e, 0x27, 0x35, 0x4f, 0xa6,
		0x33, 0x4c, 0x9e, 0x4b, 0x06, 0xb2, 0xa2, 0x6e, 0xe4, 0xb6, 0x9d, 0x9e, 0x1b, 0x7d, 0x0b, 0xcd,
		0x61, 0x6b, 0xd6, 0x18, 0x90, 0x03, 0xe4, 0x00, 0x39, 0xb1, 0xd6, 0x8b, 0x71, 0x29, 0x1a, 0x81,
		0xd2, 0x33, 0x42, 0xfa, 0x59, 0x01, 0x75, 0x97, 0xa4, 0x3e, 0x56, 0x3a, 0xd5, 0x40, 0x58, 0xff,
		0x6a, 0x43, 0x1a, 0x29, 0x91, 0x64, 0x22, 0xa9, 0x67, 0xb5, 0x35, 0x05, 0xd2, 0xa5, 0x5d, 0xac,
		0xcc, 0x45, 0x4a, 0x4a, 0xc2, 0xab, 0xec, 0x13, 0x0f, 0xd3, 0xba, 0x7e, 0x4f, 0xb9, 0x87, 0x59,
		0x25, 0x3f, 0xe8, 0x07, 0xf4, 0x03, 0xfa, 0x01, 0xfd, 0x80, 0x7e, 0x40, 0x3f, 0xa0, 0x1f, 0xb9,
		0xa1, 0x1f, 0xc5, 0x95, 0xd0, 0xc7, 0xcf, 0x43, 0xb1, 0x23, 0x6a, 0xef, 0x87, 0xca, 0xe9, 0xf4,
		0xdb, 0x91, 0xd7, 0x6b, 0x2b, 0xcd, 0x68, 0xd1, 0xe3, 0x39, 0xb3, 0x68, 0x2b, 0x61, 0xb9, 0xfb,
		0x26, 0x72, 0xf7, 0x34, 0x59, 0x57, 0x91, 0xe5, 0xee, 0xcd, 0xc9, 0x1a, 0x33, 0x74, 0x67, 0xc6,
		0x76, 0xcc, 0xdc, 0x98, 0x2d, 0xdc, 0x18, 0xdc, 0x98, 0x7c, 0xb8, 0x31, 0xa6, 0xdd, 0x02, 0x8c,
		0xef, 0x5e, 0x17, 0xd6, 0x9d, 0xd9, 0x1d, 0xec, 0xe3, 0x8b, 0xc9, 0x16, 0x66, 0x15, 0xe2, 0xb1,
		0x62, 0xc5, 0x52, 0x68, 0x2c, 0x42, 0x63, 0x91, 0x64, 0x5d, 0x43, 0xb9, 0x22, 0x27, 0x16, 0x0a,
		0xa7, 0x0a, 0x15, 0x4c, 0x25, 0x79, 0x7c, 0x7d, 0x1f, 0x69, 0xd1, 0x9d, 0x30, 0x6a, 0x65, 0x95,
		0x90, 0x52, 0x68, 0xb0, 0x0f, 0xcd, 0x65, 0x42, 0xfa, 0x28, 0x09, 0x45, 0x84, 0x22, 0x96, 0x8d,
		0x22, 0x1a, 0xfa, 0x66, 0xb2, 0x3e, 0x9a, 0xd0, 0x46, 0x84, 0xd0, 0x41, 0xe8, 0xe8, 0x14, 0x37,
		0x36, 0xe4, 0xb6, 0xdb, 0xdd, 0xbf, 0x1e, 0xc9, 0x80, 0x6b, 0xa1, 0x5d, 0xdc, 0xe2, 0x23, 0x68,
		0xe0, 0x91, 0x15, 0xb8, 0xb1, 0x07, 0x3b, 0xb6, 0xe0, 0xc7, 0x3a, 0x0c, 0x59, 0x87, 0x23, 0xab,
		0xb0, 0x24, 0x03, 0x4f, 0x42, 0x30, 0x25, 0xef, 0x7f, 0x5a, 0xf4, 0x43, 0x85, 0xfd, 0x51, 0xb9,
		0x89, 0x90, 0xb8, 0x17, 0xee, 0xb8, 0xdf, 0xbd, 0x4e, 0xbf, 0x63, 0xa8, 0x5a, 0x5e, 0x39, 0x0b,
		0xf3, 0xe6, 0xe5, 0xe1, 0x7d, 0x0b, 0x68, 0x07, 0xda, 0x81, 0xf6, 0x72, 0x41, 0x3b, 0x6d, 0x46,
		0x25, 0x57, 0x24, 0xb5, 0x93, 0x57, 0xdb, 0xa7, 0x76, 0x72, 0x6a, 0x53, 0x4a, 0x9b, 0x51, 0x7b,
		0xd6, 0x28, 0xa1, 0x9c, 0xb5, 0x12, 0xca, 0x4b, 0x2e, 0x5e, 0xd4, 0xe0, 0x13, 0x26, 0xb7, 0x2f,
		0xe6, 0xa3, 0xfc, 0x60, 0x54, 0x2e, 0x58, 0xa7, 0x74, 0xeb, 0xca, 0x33, 0x5f, 0xa7, 0x94, 0xeb,
		0x4a, 0x07, 0x4e, 0x2a, 0x3c, 0x5c, 0x25, 0x3c, 0x9c, 0x01, 0xf2, 0x4e, 0x78, 0x38, 0x86, 0xeb,
		0x4c, 0x78, 0x98, 0xf0, 0x30, 0x31, 0x04, 0x62, 0x08, 0x65, 0x8f, 0x21, 0x10, 0x1e, 0x5e, 0xeb,
		0x9d, 0x08, 0x0f, 0x03, 0xed, 0x40, 0x3b, 0xd0, 0x9e, 0x27, 0x68, 0x27, 0x3c, 0x2c, 0xb9, 0x22,
		0x09, 0x0f, 0xaf, 0xb6, 0x4f, 0x78, 0x38, 0xb5, 0x29, 0x25, 0x3c, 0x6c, 0xcf, 0x1a, 0xe1, 0xe1,
		0xbc, 0x84, 0x87, 0xe9, 0xad, 0x97, 0x85, 0x69, 0xb0, 0xda, 0x55, 0xef, 0x73, 0xa8, 0x4e, 0xc6,
		0x8f, 0x6c, 0x0c, 0x9e, 0x78, 0x5d, 0xd7, 0x26, 0x85, 0xc9, 0xa4, 0x63, 0x78, 0x22, 0xe9, 0x18,
		0x1e, 0xe9, 0x18, 0xa4, 0x63, 0xa4, 0xe8, 0x3c, 0x91, 0x8e, 0x41, 0x3a, 0x46, 0xb2, 0xd1, 0x11,
		0xee, 0xdb, 0xb8, 0x6f, 0x5b, 0x6d, 0x88, 0x40, 0xac, 0x0d, 0xf7, 0x92, 0x40, 0x2c, 0x81, 0xd8,
		0xe4, 0xa0, 0x48, 0xd6, 0x53, 0x27, 0x10, 0x2b, 0x62, 0x92, 0x40, 0x2c, 0x81, 0xd8, 0x04, 0xb7,
		0xdb, 0xfc, 0x94, 0x12, 0x88, 0xcd, 0xc6, 0xdc, 0x12, 0x88, 0xcd, 0x30, 0x87, 0xce, 0x78, 0x20,
		0xd6, 0x43, 0xa7, 0x8b, 0x4e, 0x97, 0xb8, 0x01, 0x71, 0x03, 0xe2, 0x06, 0xc4, 0x0d, 0x88, 0x1b,
		0x10, 0x37, 0x20, 0x6e, 0x40, 0xdc, 0x80, 0xb8, 0x01, 0x71, 0x03, 0xe2, 0x06, 0xc4, 0x0d, 0x88,
		0x1b, 0x10, 0x37, 0xf8, 0x55, 0xdc, 0x00, 0x01, 0x57, 0x16, 0xa6, 0x21, 0x59, 0x01, 0xd7, 0x51,
		0xc6, 0x05, 0x5c, 0x66, 0x11, 0x21, 0x91, 0x48, 0x90, 0x98, 0x84, 0xab, 0x8a, 0x84, 0xcb, 0xa2,
		0x7b, 0x85, 0x84, 0x4b, 0x2e, 0x62, 0x43, 0xd3, 0x85, 0x74, 0x22, 0x30, 0x04, 0x77, 0x09, 0xee,
		0x26, 0x4c, 0x4c, 0x69, 0xba, 0x00, 0x29, 0xfd, 0x35, 0x29, 0x35, 0x70, 0x0b, 0x68, 0xf9, 0xf7,
		0xab, 0x91, 0xad, 0x68, 0xf1, 0xe1, 0x98, 0x0c, 0xdf, 0x5a, 0x93, 0xc1, 0x17, 0x82, 0x13, 0x34,
		0x38, 0x09, 0x86, 0x55, 0x56, 0xc6, 0x83, 0xe5, 0x0c, 0x5f, 0x70, 0xcd, 0xcf, 0x1e, 0x7b, 0x61,
		0x74, 0x10, 0x45, 0xf1, 0x18, 0x4f, 0xe5, 0xc4, 0xf3, 0xeb, 0x6d, 0x35, 0xc0, 0xf2, 0x30, 0xde,
		0xb9, 0x5d, 0x39, 0x71, 0xbf, 0xcf, 0x7c, 0x72, 0xeb, 0xb7, 0x5a, 0x6d, 0x77, 0xaf, 0x56, 0xdb,
		0xdc, 0xdb, 0xde, 0xdb, 0xdc, 0xdf, 0xd9, 0xd9, 0xda, 0xdd, 0x8a, 0x11, 0x44, 0xaa, 0x9c, 0x05,
		0x2d, 0x15, 0xa8, 0xd6, 0xfb, 0xc1, 0xeb, 0xfb, 0xfd, 0x76, 0x5b, 0x74, 0x54, 0x35, 0x97, 0xbb,
		0xc9, 0x32, 0x8f, 0xb1, 0xa6, 0x9f, 0x5d, 0xcb, 0xeb, 0x2d, 0xdd, 0xe7, 0x17, 0xe2, 0xaf, 0x7f,
		0xe3, 0x99, 0xc1, 0x8c, 0x3b, 0x88, 0x1a, 0x83, 0xf7, 0xeb, 0xf7, 0x5c, 0xfd, 0xed, 0x7f, 0xf1,
		0xcd, 0x87, 0x39, 0x13, 0xaa, 0xa5, 0x82, 0xf5, 0xbe, 0xf8, 0x5c, 0xaa, 0xc5, 0xe3, 0xc7, 0x9e,
		0x19, 0x99, 0xf5, 0xfc, 0xe2, 0xb5, 0xc9, 0x71, 0x1c, 0xf2, 0x1b, 0x9f, 0xdc, 0xc6, 0x25, 0xaf,
		0xda, 0xe4, 0x54, 0x9b, 0x7c, 0x6a, 0x91, 0x4b, 0xb3, 0xb5, 0xbd, 0xae, 0x9f, 0x18, 0x37, 0xa5,
		0x47, 0x2f, 0x75, 0x27, 0x66, 0xa0, 0x25, 0xb6, 0xd7, 0xa5, 0xe3, 0x5d, 0xe9, 0x7b, 0x51, 0xba,
		0xde, 0x92, 0xb1, 0x57, 0x64, 0xec, 0xfd, 0x18, 0x79, 0x39, 0xb2, 0xbc, 0x20, 0x6e, 0x20, 0xa3,
		0xe2, 0xb5, 0x94, 0x1f, 0x79, 0xb7, 0x9e, 0x0a, 0xf4, 0xfb, 0x18, 0xcf, 0xd8, 0xd0, 0xeb, 0x5f,
		0xbc, 0x49, 0xff, 0xe2, 0x24, 0xdd, 0xff, 0x32, 0xf5, 0x2f, 0xd6, 0x76, 0xd7, 0x1f, 0x2b, 0x19,
		0x86, 0x8e, 0xdf, 0xef, 0xdc, 0xc4, 0x5e, 0xdc, 0x1b, 0x66, 0xda, 0x05, 0x43, 0x8d, 0x82, 0x81,
		0x3b, 0x2c, 0xa1, 0x39, 0x90, 0x0a, 0x14, 0x0a, 0x69, 0x08, 0x24, 0xef, 0x93, 0x4d, 0xf4, 0xba,
		0x12, 0x77, 0xff, 0xd2, 0x43, 0x2b, 0x75, 0x97, 0x2f, 0x3a, 0xc6, 0x09, 0x45, 0x4f, 0xae, 0x6c,
		0x39, 0xfb, 0x31, 0x68, 0x4f, 0x47, 0x0d, 0xc0, 0x45, 0xa7, 0x08, 0xeb, 0xa3, 0x90, 0x73, 0x6a,
		0x82, 0xf3, 0x97, 0xf3, 0x97, 0xf3, 0x97, 0xf3, 0x97, 0xf3, 0x97, 0xf3, 0xb7, 0x78, 0xe7, 0x6f,
		0x4c, 0xec, 0xd1, 0x0a, 0x74, 0xcf, 0x6e, 0x43, 0xbd, 0x80, 0xf7, 0xec, 0x6a, 0x13, 0x0b, 0x7c,
		0x4f, 0x8d, 0x6a, 0x05, 0xc0, 0x35, 0x18, 0x4c, 0xbe, 0x02, 0xeb, 0x73, 0x71, 0xd8, 0x58, 0x09,
		0x7d, 0x6b, 0x84, 0xc3, 0xd7, 0x08, 0x96, 0xc6, 0x93, 0x5d, 0x69, 0xc9, 0xac, 0xb4, 0xa3, 0x7d,
		0x55, 0xa2, 0x7d, 0x44, 0xfb, 0x88, 0xf6, 0xe1, 0x6d, 0xe0, 0x6d, 0xe0, 0x6d, 0xe0, 0x6d, 0xe0,
		0x6d, 0xe0, 0x6d, 0x10, 0xed, 0xe3, 0xfc, 0xe5, 0xfc, 0xe5, 0xfc, 0xe5, 0xfc, 0xe5, 0xfc, 0xe5,
		0xfc, 0x25, 0xda, 0x47, 0xb4, 0x2f, 0xc7, 0xd1, 0xbe, 0x18, 0x7a, 0xfb, 0xdc, 0x6a, 0x5f, 0xe3,
		0xe8, 0x4c, 0x37, 0x7e, 0xa9, 0x15, 0x3e, 0x9c, 0xb3, 0x64, 0x49, 0x49, 0xbb, 0x86, 0xf4, 0x31,
		0x9e, 0xe4, 0x11, 0xed, 0xac, 0x2c, 0xb7, 0xcc, 0xb2, 0x76, 0x36, 0x86, 0x6f, 0x34, 0x43, 0x1b,
		0x63, 0x46, 0xd1, 0x37, 0xd1, 0xcc, 0x12, 0x45, 0x9f, 0x1c, 0xdc, 0x7e, 0xcb, 0x8d, 0xba, 0xc1,
		0x8f, 0x18, 0x97, 0x2b, 0xb1, 0x1d, 0x1d, 0x23, 0x07, 0x47, 0xc3, 0xb1, 0xd1, 0x74, 0x68, 0xf4,
		0x98, 0x93, 0x81, 0x93, 0x6d, 0xc4, 0xae, 0x4d, 0x1d, 0x16, 0x09, 0x12, 0xfd, 0xa0, 0x47, 0x15,
		0x53, 0x1f, 0x32, 0x53, 0x47, 0x44, 0x64, 0xec, 0x2c, 0xd1, 0xd9, 0xab, 0x04, 0x6f, 0x7e, 0x83,
		0x6e, 0x3f, 0x52, 0x81, 0xe3, 0xb5, 0xe2, 0x1f, 0x5a, 0x8f, 0x1f, 0xe5, 0xec, 0xe2, 0xec, 0xd2,
		0x3a, 0xbb, 0xf4, 0xcf, 0xa1, 0x56, 0x37, 0x8a, 0x54, 0xcb, 0xf9, 0x5f, 0xdf, 0x6d, 0x69, 0x9c,
		0x44, 0x5b, 0xbf, 0xc5, 0xf8, 0x4c, 0xc3, 0x8d, 0x22, 0x15, 0xf8, 0xb1, 0x0f, 0xa3, 0xca, 0xcb,
		0x97, 0x5f, 0x37, 0x9d, 0xfd, 0xab, 0x9f, 0x5f, 0xb7, 0x9c, 0xfd, 0xab, 0xd1, 0x8f, 0x5b, 0xc3,
		0xff, 0x1a, 0xfd, 0x5c, 0xfd, 0xba, 0xe9, 0xd4, 0x26, 0x3f, 0xef, 0x7c, 0xdd, 0x74, 0x76, 0xae,
		0x5e, 0xfd, 0xf9, 0xe7, 0x9b, 0x57, 0x7f, 0x6f, 0x3f, 0xc4, 0xff, 0xe0, 0xfa, 0x33, 0x78, 0x15,
		0xe7, 0xd5, 0xcf, 0x2e, 0x8e, 0xfe, 0xd0, 0x7e, 0xff, 0xff, 0x24, 0x39, 0x00, 0xff, 0xa8, 0x24,
		0x8f, 0xaf, 0xd9, 0x75, 0xb6, 0x9f, 0x93, 0x0f, 0xe9, 0xf9, 0xc6, 0xad, 0x51, 0x39, 0x16, 0x67,
		0x88, 0xfc, 0x4e, 0xcb, 0x0b, 0x23, 0xd7, 0x5f, 0x03, 0x02, 0x1f, 0x37, 0xed, 0xf2, 0xcf, 0xe3,
		0x3b, 0xe3, 0x3b, 0xc7, 0x0a, 0xbe, 0xe8, 0x05, 0x61, 0x62, 0x2e, 0x28, 0x78, 0x48, 0x79, 0x78,
		0x48, 0x6c, 0x25, 0x9a, 0xfa, 0x3e, 0x38, 0x12, 0xdd, 0x76, 0x5c, 0x28, 0x5c, 0x39, 0xef, 0xab,
		0x0c, 0x72, 0x47, 0x2e, 0xbf, 0xf4, 0xc5, 0xb6, 0x80, 0xd8, 0x56, 0x10, 0xd9, 0x12, 0x9a, 0x6e,
		0x69, 0xe2, 0x77, 0xe4, 0x7d, 0xcf, 0x8f, 0x7e, 0x33, 0xb8, 0x1f, 0xdf, 0xe1, 0x7e, 0x7c, 0xc3,
		0x28, 0x76, 0xb2, 0xc5, 0xfd, 0xb8, 0xad, 0xa1, 0xad, 0xee, 0x70, 0x31, 0x2e, 0x66, 0x3f, 0x8e,
		0x30, 0xcd, 0xf3, 0x85, 0x0f, 0xe4, 0x55, 0x06, 0x39, 0x90, 0x39, 0x90, 0x39, 0x90, 0x39, 0x90,
		0x39, 0x90, 0x39, 0x90, 0x4b, 0x77, 0x20, 0xe7, 0x4b, 0x67, 0xb5, 0x3c, 0xdc, 0x48, 0x7a, 0x25,
		0xe9, 0x95, 0x04, 0xb5, 0x08, 0x6a, 0xc1, 0xa1, 0xe1, 0xd0, 0x70, 0x68, 0x38, 0x34, 0x1c, 0x1a,
		0x0e, 0x4d, 0x50, 0x8b, 0x03, 0x99, 0x03, 0x99, 0x03, 0x99, 0x03, 0x99, 0x03, 0x99, 0x03, 0x99,
		0xa0, 0x56, 0xfe, 0x82, 0x5a, 0x65, 0xc8, 0x22, 0xd4, 0x92, 0x0f, 0x6e, 0xfc, 0x32, 0x9d, 0x70,
		0xdc, 0x60, 0xee, 0x7c, 0x60, 0xf1, 0xc3, 0xc4, 0xa0, 0x0d, 0xe5, 0xe4, 0x0f, 0xdf, 0xed, 0x78,
		0x4d, 0xc7, 0x57, 0xde, 0xdd, 0xb7, 0x9b, 0x6e, 0xe0, 0x8c, 0x98, 0x80, 0x0a, 0x63, 0x88, 0x27,
		0x57, 0x9a, 0x40, 0x3f, 0x89, 0x7e, 0xf2, 0x97, 0xcb, 0x2c, 0x7e, 0xe8, 0x79, 0x95, 0x21, 0x14,
		0x96, 0x04, 0xa3, 0x93, 0x09, 0x46, 0xc7, 0x94, 0x02, 0x2f, 0x4c, 0x73, 0x2c, 0x49, 0xb0, 0xe6,
		0xc2, 0xc5, 0xb3, 0xc5, 0xb3, 0x8d, 0xeb, 0xd9, 0xea, 0xf6, 0xea, 0xad, 0xf4, 0x94, 0x0a, 0x9c,
		0xbb, 0xa0, 0xdb, 0xef, 0x99, 0xf7, 0xc7, 0x9e, 0xb1, 0xf5, 0x3a, 0x95, 0x34, 0x4e, 0xd3, 0x0e,
		0xba, 0x34, 0xc9, 0x4e, 0x76, 0x63, 0x89, 0x6e, 0x30, 0x43, 0xcf, 0x51, 0x73, 0xc5, 0x18, 0x77,
		0xbe, 0x9d, 0xae, 0x97, 0xb6, 0x72, 0x6f, 0x03, 0x75, 0x6b, 0xb2, 0x60, 0x26, 0xe7, 0xcc, 0x9e,
		0x81, 0x8d, 0xc6, 0xd8, 0x63, 0x7a, 0xf3, 0xe6, 0xed, 0xec, 0xff, 0x3d, 0xee, 0xed, 0x70, 0xe6,
		0xe7, 0x91, 0x83, 0x38, 0xf3, 0x17, 0xa3, 0x9e, 0x9b, 0x49, 0xb5, 0x79, 0xd5, 0x38, 0x9c, 0x7a,
		0x66, 0x3b, 0xfc, 0x11, 0xeb, 0x8c, 0x4e, 0x26, 0x70, 0x0e, 0x9c, 0x2b, 0x2b, 0xce, 0x79, 0x3d,
		0xc7, 0x78, 0x76, 0xa6, 0x48, 0xb7, 0x6f, 0x60, 0x63, 0xfc, 0x4a, 0x5f, 0x8d, 0xa6, 0x54, 0xb0,
		0xe5, 0xb9, 0xd7, 0xbb, 0xaf, 0x39, 0x62, 0x2d, 0xec, 0x75, 0x92, 0xd2, 0x7f, 0x75, 0x28, 0x68,
		0x25, 0x6b, 0xaf, 0x34, 0x98, 0x64, 0x0e, 0xf7, 0xdb, 0xf1, 0xc3, 0x5e, 0xfd, 0x7c, 0xf9, 0x75,
		0xcb, 0xa9, 0x5e, 0x4d, 0xfe, 0xc7, 0xf6, 0xd7, 0x4d, 0xa7, 0x7a, 0xf5, 0xea, 0x95, 0x79, 0xf3,
		0xfd, 0x2b, 0x89, 0x21, 0x36, 0x49, 0x8a, 0x5f, 0x69, 0xf5, 0x3f, 0x59, 0x1a, 0xe8, 0x7f, 0x08,
		0x8c, 0xb4, 0x59, 0x0f, 0xff, 0xd7, 0x19, 0xda, 0xeb, 0xbb, 0xe5, 0xda, 0xeb, 0xae, 0x73, 0x7b,
		0xe0, 0x7c, 0xbc, 0xfa, 0x7b, 0xeb, 0x75, 0xed, 0xe1, 0xdd, 0xab, 0xbf, 0xf7, 0x1e, 0x9e, 0xfe,
		0xe5, 0xcf, 0x65, 0xbf, 0xb6, 0xf5, 0x7a, 0xef, 0xe1, 0xdd, 0x8a, 0x7f, 0xd9, 0x7d, 0x78, 0xb7,
		0xa6, 0x8d, 0x9d, 0x87, 0x97, 0x0b, 0xbf, 0x3a, 0xf8, 0xfb, 0xea, 0xaa, 0x0f, 0xd4, 0x56, 0x7c,
		0x60, 0x7b, 0xd5, 0x07, 0xb6, 0x57, 0x7c, 0x60, 0xe5, 0x57, 0xaa, 0xae, 0xf8, 0xc0, 0xce, 0xc3,
		0xcf, 0x85, 0xdf, 0x7f, 0xb9, 0xfc, 0x57, 0x77, 0x1f, 0x5e, 0xfd, 0x5c, 0xf5, 0x6f, 0x7b, 0x0f,
		0x3f, 0xdf, 0xbd, 0x7a, 0xf5, 0xf6, 0xe5, 0xd6, 0x60, 0x9f, 0xfe, 0x36, 0xda, 0xba, 0x5b, 0x57,
		0x0b, 0x3b, 0x7a, 0xb4, 0x43, 0x4b, 0x00, 0x80, 0xac, 0xbe, 0xcc, 0xae, 0xbe, 0xf4, 0x4f, 0x85,
		0x17, 0xc9, 0x3e, 0xf7, 0x21, 0x63, 0xb1, 0x43, 0xcd, 0xcb, 0xe5, 0xe9, 0xe7, 0xd7, 0xbf, 0x69,
		0x5d, 0x75, 0xd7, 0xb8, 0xea, 0x5f, 0x62, 0x25, 0x55, 0xc4, 0x1f, 0xac, 0x38, 0xa2, 0x39, 0xcd,
		0xb8, 0x81, 0x59, 0xbc, 0x00, 0x49, 0x1c, 0x17, 0x07, 0x99, 0x97, 0xc4, 0xe9, 0xc7, 0x2d, 0x4d,
		0xe2, 0x95, 0xb3, 0x71, 0xca, 0x71, 0x10, 0x72, 0x34, 0xe5, 0x19, 0xc0, 0x8a, 0x78, 0x89, 0x59,
		0x0b, 0x03, 0x1a, 0x27, 0x41, 0x6b, 0x61, 0x28, 0x75, 0x91, 0xa2, 0x0a, 0x52, 0x80, 0x14, 0xbf,
		0xfc, 0x86, 0x5c, 0x31, 0x12, 0x7a, 0x27, 0xf4, 0x9e, 0xeb, 0xd0, 0x3b, 0x57, 0x8c, 0x09, 0xcc,
		0x19, 0x57, 0x8c, 0xe0, 0x1c, 0x38, 0x97, 0x2a, 0xce, 0x71, 0xc5, 0xb8, 0xfa, 0xda, 0x81, 0x2b,
		0x46, 0xae, 0x18, 0xb9, 0x62, 0xb4, 0x17, 0x4c, 0xe6, 0x8a, 0x31, 0xb5, 0xbd, 0xce, 0x25, 0x0f,
		0x57, 0x8c, 0xe9, 0x01, 0x20, 0xab, 0x8f, 0x2b, 0x46, 0x59, 0x22, 0xbd, 0xc1, 0x15, 0xe3, 0x24,
		0xa2, 0x6e, 0xef, 0x8a, 0x31, 0x46, 0x8a, 0xab, 0xc6, 0xad, 0x81, 0x68, 0xb6, 0xd3, 0x3f, 0xd5,
		0x8f, 0xf8, 0x09, 0x89, 0x5a, 0x1d, 0x60, 0xf5, 0x3b, 0xbf, 0x8a, 0x76, 0x7c, 0xd5, 0xeb, 0xf4,
		0x9a, 0x9d, 0xa4, 0xea, 0xb8, 0x8b, 0xb1, 0x12, 0xeb, 0x92, 0x69, 0x55, 0xf2, 0xf1, 0xc8, 0xf6,
		0xe9, 0xd8, 0x74, 0x23, 0xc6, 0xb5, 0x58, 0x7e, 0x73, 0xb8, 0x57, 0x66, 0x31, 0x5b, 0xc8, 0xba,
		0xbe, 0x0b, 0xdc, 0xa6, 0xba, 0xed, 0xb7, 0x9d, 0x40, 0x85, 0x91, 0x1b, 0x44, 0xeb, 0x27, 0x5b,
		0x2f, 0x7c, 0x92, 0x1c, 0x6b, 0x72, 0xac, 0x47, 0xbf, 0x48, 0x8f, 0x1a, 0x32, 0xa8, 0xd3, 0xe0,
		0x14, 0xf1, 0xcb, 0x79, 0xfa, 0xee, 0x4d, 0x5b, 0xb5, 0x0c, 0xca, 0x77, 0x8e, 0x0d, 0x20, 0x85,
		0xb2, 0x77, 0x5f, 0x81, 0xc0, 0x21, 0x15, 0x29, 0xd4, 0x4d, 0xb7, 0xdb, 0x56, 0xae, 0x6f, 0x22,
		0x85, 0xda, 0xca, 0x80, 0x7e, 0xe9, 0x9b, 0x6a, 0xf7, 0x54, 0xe0, 0x74, 0xfd, 0xf6, 0x0f, 0xfd,
		0x6d, 0x3e, 0x6b, 0x84, 0xad, 0xce, 0x56, 0x67, 0xab, 0x67, 0x71, 0xab, 0x8f, 0x1d, 0x11, 0x27,
		0xf2, 0x3a, 0x06, 0x8a, 0xc5, 0x39, 0x2b, 0x6c, 0x76, 0x36, 0x7b, 0xc1, 0x36, 0x7b, 0xdf, 0xf3,
		0xa3, 0xad, 0x5d, 0x83, 0xbd, 0xbe, 0x4b, 0xd9, 0x4f, 0x3d, 0x33, 0x93, 0xda, 0x94, 0x9b, 0x94,
		0xfd, 0xb4, 0x35, 0xb4, 0xb5, 0xcd, 0xfd, 0x5d, 0xea, 0x7e, 0xa6, 0x71, 0xf8, 0x86, 0x91, 0xdb,
		0x56, 0xa3, 0xba, 0x93, 0xa1, 0xe1, 0x09, 0xbc, 0x68, 0x8a, 0x63, 0x98, 0x63, 0xb8, 0x60, 0xc7,
		0x70, 0x4b, 0x35, 0xbd, 0x8e, 0xdb, 0xde, 0xad, 0x99, 0xb0, 0xee, 0xaa, 0xc6, 0x67, 0x17, 0xf0,
		0xad, 0x5a, 0xd6, 0xf3, 0xbc, 0xca, 0x79, 0x6e, 0xeb, 0x3c, 0xdf, 0x2e, 0xe0, 0xd0, 0x52, 0xc4,
		0x7b, 0x16, 0xa2, 0x6d, 0xdf, 0x37, 0x3f, 0xbd, 0x5e, 0xa4, 0x27, 0x1d, 0x3d, 0xe9, 0xec, 0x51,
		0x0f, 0x2e, 0xb1, 0xb8, 0xc4, 0x82, 0x65, 0x13, 0xd9, 0x5e, 0x82, 0xcc, 0x5c, 0x62, 0xb1, 0xd5,
		0xd9, 0xea, 0x6c, 0xf5, 0x84, 0xb6, 0x3a, 0x97, 0x58, 0x6c, 0x76, 0x36, 0xfb, 0x73, 0xf3, 0xcd,
		0x25, 0x96, 0xee, 0x8b, 0x73, 0x89, 0x65, 0x2d, 0xe8, 0xc5, 0x25, 0x56, 0x26, 0xe3, 0x5e, 0x5c,
		0x62, 0x71, 0x0c, 0x73, 0x0c, 0x5b, 0x39, 0x86, 0xb9, 0xc4, 0x4a, 0xfd, 0x3c, 0xe7, 0x12, 0xcb,
		0xda, 0x79, 0xce, 0x25, 0x56, 0xf6, 0x0e, 0xf3, 0x9c, 0x5f, 0x62, 0x95, 0xa1, 0x07, 0x6d, 0xcc,
		0xc4, 0xc0, 0x8d, 0x5f, 0x26, 0x80, 0x7e, 0x1a, 0x1b, 0x3b, 0x1f, 0xdb, 0xb2, 0x90, 0x02, 0x39,
		0xea, 0x95, 0x1b, 0xaa, 0xb6, 0x1a, 0xee, 0x32, 0xa7, 0xdb, 0x1b, 0xfc, 0x57, 0x8c, 0xb6, 0xb3,
		0xab, 0x0c, 0x90, 0x10, 0x49, 0x42, 0xe4, 0xe8, 0x17, 0x49, 0x88, 0xe4, 0x2e, 0x39, 0x8d, 0x03,
		0x2e, 0xf6, 0x5d, 0xb2, 0xdb, 0xba, 0x57, 0x41, 0xe4, 0x85, 0xca, 0xf1, 0xfc, 0x01, 0xe9, 0xb8,
		0x9f, 0xb8, 0xb0, 0xfa, 0x8e, 0xf0, 0x6a, 0x93, 0x71, 0x6b, 0xf6, 0x8e, 0x1a, 0x91, 0x0f, 0x6c,
		0xde, 0xba, 0xed, 0x10, 0x87, 0x1a, 0x87, 0x9a, 0x4b, 0xac, 0x45, 0xf4, 0xcf, 0xc2, 0x25, 0x96,
		0xdb, 0xfe, 0xcb, 0xfd, 0x11, 0x3a, 0xcd, 0x6e, 0xa7, 0xe7, 0x06, 0xca, 0xe9, 0x98, 0xa8, 0x53,
		0x96, 0xd8, 0x02, 0x38, 0x00, 0x0e, 0x80, 0xa3, 0x88, 0xc0, 0x31, 0x92, 0xa2, 0x39, 0xae, 0x77,
		0xd7, 0x33, 0xd5, 0xb3, 0x8d, 0x8c, 0x00, 0x15, 0x40, 0x05, 0x50, 0x51, 0x48, 0xa8, 0xf8, 0x1e,
		0xa9, 0xc0, 0x77, 0xdb, 0x53, 0x66, 0x30, 0xf4, 0x2a, 0x02, 0xc7, 0x33, 0x51, 0xc2, 0xae, 0xb6,
		0xa9, 0x0f, 0x24, 0x83, 0xe5, 0x08, 0x8e, 0x80, 0x23, 0xe0, 0x48, 0x26, 0x71, 0xc4, 0xbb, 0xf3,
		0xbb, 0x81, 0x72, 0xdc, 0xd0, 0xe9, 0xb9, 0xd1, 0x37, 0xa7, 0xad, 0xfc, 0xbb, 0x61, 0x88, 0x5b,
		0x13, 0x42, 0x96, 0x9b, 0x83, 0x86, 0x00, 0x1f, 0xc0, 0x47, 0x81, 0xe1, 0xc3, 0x57, 0xdf, 0x23,
		0xe7, 0x5b, 0xb7, 0xe7, 0x78, 0x77, 0x3d, 0xa7, 0xa3, 0xa2, 0xc0, 0x6b, 0x1a, 0x63, 0xc8, 0x32,
		0x9b, 0x00, 0x09, 0x40, 0x02, 0x90, 0xe4, 0x06, 0x48, 0xf2, 0x25, 0x57, 0x58, 0x71, 0x91, 0x4d,
		0xea, 0x2d, 0xa9, 0xb7, 0xf6, 0xb0, 0x8a, 0xeb, 0xd2, 0x0d, 0xae, 0x4b, 0x39, 0xfa, 0x39, 0xfa,
		0xcb, 0xeb, 0x43, 0x70, 0x5d, 0x0a, 0x70, 0x00, 0x1c, 0x00, 0x47, 0x6c, 0xe0, 0xe0, 0xba, 0x14,
		0xa8, 0x00, 0x2a, 0x80, 0x8a, 0x75, 0xa0, 0x82, 0xeb, 0x52, 0x70, 0x04, 0x1c, 0x01, 0x47, 0x0c,
		0x71, 0x84, 0xeb, 0x52, 0xe0, 0x03, 0xf8, 0x00, 0x3e, 0xcc, 0xe0, 0x83, 0xeb, 0x52, 0x80, 0x04,
		0x20, 0x01, 0x48, 0x74, 0x7e, 0x33, 0xf3, 0xd7, 0xa5, 0x65, 0x48, 0xf2, 0xd6, 0xcb, 0x79, 0xde,
		0xf8, 0x65, 0xae, 0xf7, 0xf9, 0xc0, 0xe6, 0xc5, 0xc4, 0xe4, 0xd9, 0xd8, 0xa2, 0x85, 0x8c, 0xef,
		0xf5, 0x6e, 0x97, 0x63, 0xdd, 0x2a, 0xc7, 0xce, 0xe6, 0xae, 0x92, 0xcd, 0x2d, 0x0e, 0xc5, 0x09,
		0x65, 0x73, 0xbb, 0x61, 0x7c, 0x65, 0x82, 0x1b, 0xc6, 0x94, 0x25, 0x6c, 0x92, 0xc5, 0x8d, 0x2c,
		0x61, 0xf4, 0x4d, 0x4e, 0x5c, 0xbf, 0xe5, 0x46, 0xdd, 0xe0, 0x47, 0x0c, 0xb5, 0x4a, 0x6c, 0x9e,
		0x30, 0xb3, 0x52, 0x1d, 0xbf, 0xdf, 0xb9, 0x51, 0x41, 0x9c, 0x69, 0x1e, 0x2f, 0xda, 0xbd, 0x18,
		0x1f, 0xd1, 0xab, 0xbe, 0xa4, 0x41, 0x7c, 0x4c, 0xaa, 0x2d, 0x19, 0x96, 0xf6, 0x33, 0x2d, 0x01,
		0x24, 0x51, 0xfa, 0x47, 0xa3, 0x9a, 0x92, 0x51, 0x15, 0x25, 0xa9, 0x21, 0xab, 0x55, 0xf7, 0x6b,
		0xfb, 0xbb, 0x7b, 0xd5, 0xfd, 0x9d, 0x14, 0xc7, 0xce, 0x12, 0xd1, 0xbd, 0x4a, 0x50, 0x4a, 0x17,
		0x3f, 0xce, 0x3f, 0x5f, 0xd8, 0x26, 0x46, 0x38, 0x9f, 0xb3, 0x8b, 0xb3, 0x4b, 0xec, 0x1c, 0x6a,
		0x75, 0xa3, 0x48, 0xb5, 0x9c, 0xff, 0xf5, 0xdd, 0x96, 0xc6, 0x49, 0xb4, 0xf5, 0x5b, 0x8c, 0xcf,
		0x34, 0xdc, 0x28, 0x52, 0x81, 0x1f, 0xfb, 0x30, 0xaa, 0xbc, 0x7c, 0xf9, 0x75, 0xd3, 0xd9, 0xbf,
		0xfa, 0xf9, 0x75, 0xcb, 0xd9, 0xbf, 0x1a, 0xfd, 0xb8, 0x35, 0xfc, 0xaf, 0xd1, 0xcf, 0xd5, 0xaf,
		0x9b, 0x4e, 0x6d, 0xf2, 0xf3, 0xce, 0xd7, 0x4d, 0x67, 0xe7, 0xea, 0xd5, 0x9f, 0x7f, 0xbe, 0x79,
		0xf5, 0xf7, 0xf6, 0x43, 0xfc, 0x0f, 0xae, 0x3f, 0x83, 0x57, 0x71, 0x5e, 0xfd, 0xec, 0xe2, 0xe8,
		0x0f, 0xed, 0xf7, 0xff, 0x4f, 0x92, 0x03, 0xf0, 0x8f, 0x4a, 0x26, 0xf1, 0x35, 0xea, 0x46, 0x6e,
		0x7b, 0x78, 0x7b, 0xa1, 0xe1, 0x16, 0xcc, 0x7e, 0x18, 0x8c, 0x05, 0x63, 0x13, 0xc6, 0xd8, 0xbe,
		0xe7, 0x47, 0xdb, 0x55, 0x88, 0x3e, 0x44, 0x1f, 0xa2, 0x9f, 0x7b, 0xa2, 0x3f, 0x3e, 0x4b, 0x86,
		0x68, 0xa8, 0xf4, 0xcf, 0xa2, 0xc9, 0xe7, 0x39, 0x8e, 0x38, 0x8e, 0x38, 0x8e, 0x38, 0x8e, 0x38,
		0x8e, 0x38, 0x8e, 0xe2, 0xfd, 0x46, 0x6a, 0x97, 0x92, 0x6b, 0x5c, 0xbc, 0xea, 0x5d, 0x18, 0xf6,
		0x43, 0xe5, 0x74, 0xfa, 0xed, 0xc8, 0xeb, 0xb5, 0xd5, 0x9a, 0xae, 0xde, 0x23, 0xa8, 0x2d, 0x7e,
		0x96, 0xc2, 0xd0, 0x5c, 0x25, 0x8e, 0x7e, 0x91, 0xc2, 0xd0, 0x70, 0xb4, 0x34, 0x38, 0x5a, 0x6e,
		0x9a, 0x0c, 0xa3, 0xc8, 0x8b, 0x63, 0x01, 0x45, 0x9e, 0x00, 0x9b, 0x42, 0x91, 0x67, 0x0b, 0x75,
		0xac, 0x2b, 0xf2, 0x16, 0xb9, 0x56, 0x0a, 0xb5, 0x4b, 0xd4, 0x4d, 0x8c, 0x6c, 0xcc, 0x47, 0x7c,
		0x5c, 0x7f, 0xcb, 0x73, 0x9e, 0x73, 0x9e, 0x9b, 0x9e, 0xe7, 0x31, 0x89, 0xa7, 0x19, 0x01, 0xd5,
		0x5c, 0xb8, 0x9c, 0xc6, 0x9c, 0xc6, 0x71, 0x4f, 0xe3, 0xb8, 0x1b, 0x61, 0xfa, 0x41, 0xb7, 0xdd,
		0xee, 0xfe, 0xf5, 0x78, 0x78, 0xb8, 0xa1, 0xfe, 0xbc, 0x3d, 0x96, 0xe2, 0x78, 0x6a, 0x52, 0x73,
		0xd8, 0x0d, 0x49, 0xb0, 0x54, 0x84, 0x4c, 0x77, 0x1b, 0x4a, 0x6c, 0x47, 0xb9, 0x6d, 0x29, 0xb5,
		0x3d, 0xc5, 0xb7, 0xa9, 0xf8, 0x76, 0x15, 0xdd, 0xb6, 0x7a, 0xdb, 0xd7, 0x20, 0x18, 0x6c, 0x46,
		0xae, 0x05, 0x49, 0xb6, 0x21, 0xd9, 0xd6, 0x1f, 0x38, 0x9d, 0x08, 0x7a, 0xc7, 0xfd, 0xee, 0x75,
		0xfa, 0x9d, 0x98, 0x7a, 0x94, 0x95, 0xa3, 0x36, 0x6f, 0xce, 0x1c, 0xbe, 0xb6, 0x80, 0x2e, 0xa0,
		0x0b, 0xe8, 0x8a, 0xb7, 0x5e, 0x62, 0x5f, 0x8b, 0xae, 0xda, 0x3d, 0x7b, 0x06, 0x26, 0xcc, 0x9a,
		0x25, 0x4f, 0xfe, 0x98, 0xad, 0xd7, 0x0d, 0xa9, 0xe6, 0xc9, 0x42, 0xb0, 0xb2, 0x60, 0x4e, 0xa8,
		0xe3, 0xef, 0xd4, 0x9e, 0x60, 0xe7, 0x5f, 0xc3, 0xe5, 0x3c, 0x3f, 0x05, 0x02, 0x4d, 0x96, 0x6d,
		0x4f, 0x81, 0xe9, 0x35, 0x6e, 0x22, 0x73, 0xf1, 0x22, 0x9d, 0x4f, 0x5f, 0x25, 0x45, 0x60, 0xac,
		0xba, 0x7a, 0x9a, 0xd1, 0x44, 0x91, 0xa8, 0xa2, 0x1a, 0xfc, 0x73, 0x9c, 0xd0, 0xa2, 0x46, 0xe8,
		0x35, 0x46, 0x08, 0x2d, 0x5e, 0xb9, 0xe4, 0x85, 0x03, 0x26, 0x4e, 0xd9, 0x64, 0xb1, 0x58, 0x4e,
		0x95, 0x58, 0x0e, 0xb1, 0x1c, 0x62, 0x39, 0x38, 0x44, 0x38, 0x44, 0x38, 0x44, 0xc4, 0x72, 0x88,
		0xe5, 0x00, 0x5d, 0x40, 0x17, 0xb1, 0x1c, 0x62, 0x39, 0xc4, 0x72, 0x88, 0xe5, 0x10, 0xcb, 0x21,
		0x96, 0x93, 0x68, 0x2c, 0x27, 0x46, 0xcd, 0x36, 0x8d, 0x50, 0x4e, 0xee, 0x55, 0x74, 0x2a, 0xa6,
		0xa6, 0x6b, 0x65, 0x8d, 0xb7, 0xcf, 0xa1, 0x3a, 0x19, 0x9b, 0x6e, 0x0c, 0x2c, 0x5f, 0xd7, 0xd7,
		0xa6, 0x01, 0x32, 0xea, 0x3c, 0x4f, 0x4b, 0x9d, 0xe7, 0xa1, 0xce, 0x43, 0x9d, 0xa7, 0xbd, 0x63,
		0x51, 0xe7, 0x49, 0xfb, 0x61, 0x44, 0x74, 0x2d, 0xf9, 0x57, 0x19, 0x8d, 0xe8, 0x12, 0x0a, 0x21,
		0x14, 0x42, 0x28, 0x84, 0x50, 0x08, 0xa1, 0x10, 0x42, 0x21, 0x84, 0x42, 0x08, 0x85, 0x10, 0x0a,
		0xb1, 0xe2, 0xe6, 0x7b, 0xc8, 0x5a, 0x90, 0xb5, 0xe0, 0x04, 0xe1, 0x04, 0xe1, 0x04, 0xe1, 0x04,
		0xe1, 0x04, 0xe1, 0x04, 0xe1, 0x04, 0xe1, 0x04, 0xe1, 0x04, 0xe1, 0x04, 0x95, 0xce, 0x09, 0xe2,
		0x3e, 0xf8, 0xd9, 0x31, 0xb2, 0x73, 0x1f, 0x7c, 0x94, 0xf0, 0x7d, 0x70, 0x3c, 0x1f, 0x53, 0xcb,
		0xb7, 0xd4, 0xbe, 0x11, 0xae, 0x72, 0x23, 0x2c, 0x49, 0x40, 0xa9, 0xbf, 0x46, 0xfd, 0x35, 0xc2,
		0x29, 0x45, 0x0b, 0xa7, 0x50, 0x7f, 0x2d, 0xd3, 0x4c, 0xa1, 0x0c, 0xcd, 0x50, 0x63, 0x97, 0xf8,
		0x8d, 0xc7, 0x89, 0xb4, 0x2b, 0x1a, 0xbf, 0x88, 0x31, 0x4a, 0xeb, 0x8e, 0xce, 0xda, 0xa3, 0x52,
		0xf9, 0x65, 0x03, 0xd6, 0xe5, 0xaf, 0xbe, 0xfc, 0x4d, 0x17, 0xdf, 0x63, 0xc9, 0x3b, 0x54, 0x7c,
		0xe5, 0xdd, 0x7d, 0xbb, 0xe9, 0x06, 0xab, 0x23, 0xa3, 0xd3, 0x0d, 0xff, 0xf8, 0xab, 0x2b, 0xc6,
		0xe2, 0xd7, 0x84, 0xed, 0xd9, 0xd3, 0x69, 0x9d, 0x53, 0x68, 0xfd, 0xd3, 0x66, 0xdd, 0x53, 0x25,
		0xf6, 0xe9, 0x11, 0xfb, 0x94, 0x88, 0x75, 0x1a, 0xc4, 0x5b, 0x7d, 0xcf, 0x11, 0xa2, 0xe9, 0x9c,
		0xad, 0x5f, 0x78, 0x7b, 0xfa, 0x09, 0xca, 0x6d, 0x53, 0x6e, 0x7b, 0xf4, 0x8b, 0xee, 0xad, 0xe7,
		0x84, 0xee, 0xad, 0xa7, 0xd3, 0xc0, 0x77, 0xfa, 0x51, 0x64, 0xc0, 0x38, 0x7d, 0xc9, 0x38, 0x7d,
		0x93, 0x35, 0xa7, 0xef, 0xf5, 0x4d, 0x2d, 0x20, 0x05, 0xc6, 0x6d, 0xcb, 0x94, 0xdb, 0xa6, 0x5f,
		0xdc, 0xa1, 0xd5, 0x92, 0xba, 0x01, 0x7f, 0x34, 0x65, 0x76, 0x73, 0xbd, 0xc5, 0xcd, 0x35, 0x37,
		0xd7, 0xba, 0xc6, 0x92, 0xbd, 0xb9, 0xd6, 0xdd, 0x76, 0x53, 0x03, 0x9a, 0xa9, 0x29, 0x2b, 0x97,
		0x9d, 0x56, 0xaa, 0x8a, 0xf0, 0x46, 0x14, 0xdb, 0x90, 0x92, 0x1b, 0x53, 0x7e, 0x83, 0x4a, 0x6f,
		0x54, 0x6b, 0x1b, 0xd6, 0xda, 0xc6, 0xb5, 0xb2, 0x81, 0xcd, 0x36, 0xb2, 0xe1, 0x86, 0x16, 0xdb,
		0xd8, 0x53, 0x43, 0xaa, 0xed, 0xdd, 0x79, 0x37, 0x6d, 0x35, 0xee, 0x04, 0xe9, 0xf4, 0xba, 0x6d,
		0xaf, 0xf9, 0x43, 0x6e, 0xb1, 0x4c, 0x2f, 0x24, 0x96, 0x3f, 0xe7, 0x75, 0x26, 0x95, 0x07, 0x52,
		0xc0, 0x60, 0x03, 0x20, 0xec, 0x01, 0x85, 0x2d, 0xc0, 0xb0, 0x0e, 0x1c, 0xd6, 0x01, 0xc4, 0x2a,
		0x90, 0xc8, 0x00, 0x8a, 0x10, 0xb0, 0x4c, 0xdf, 0xd4, 0x58, 0xf3, 0xb6, 0x72, 0xbd, 0xb6, 0x95,
		0x7b, 0x1b, 0xa8, 0x5b, 0xc9, 0x05, 0x3b, 0xe1, 0x03, 0x7b, 0x82, 0x36, 0x1b, 0xd3, 0x90, 0x77,
		0xd3, 0x09, 0x7a, 0xdd, 0xf6, 0xbb, 0xa0, 0xdb, 0x8f, 0x3c, 0xff, 0x6e, 0x8c, 0x5c, 0xd3, 0xbf,
		0x1e, 0xfd, 0x4f, 0xa7, 0xa5, 0x6e, 0x3d, 0xdf, 0x8b, 0xbc, 0xae, 0x1f, 0xae, 0xfe, 0xa7, 0xe9,
		0xbf, 0x0c, 0x63, 0xe1, 0x2f, 0xb2, 0xb1, 0x6a, 0x24, 0x64, 0x64, 0x81, 0x6a, 0x2a, 0xef, 0x5e,
		0xc9, 0x1f, 0x1b, 0x13, 0xc3, 0x42, 0xab, 0x5a, 0xa8, 0x1c, 0x1f, 0xe7, 0x0f, 0xe7, 0x0f, 0xe7,
		0x4f, 0x4e, 0xcf, 0x1f, 0xf3, 0x72, 0x82, 0x2b, 0xcf, 0x9f, 0xad, 0x02, 0x41, 0x7a, 0xa8, 0xfc,
		0x96, 0x3c, 0x9e, 0x0f, 0xad, 0x02, 0xe6, 0x80, 0x39, 0x60, 0x0e, 0x98, 0x03, 0xe6, 0x49, 0x82,
		0xb9, 0xd3, 0x91, 0xcc, 0xf5, 0x98, 0x05, 0xf4, 0xa1, 0x65, 0xc0, 0x17, 0xf0, 0x05, 0x7c, 0x4b,
		0x05, 0xbe, 0x7d, 0xcf, 0x8f, 0x7e, 0xb3, 0x00, 0xbd, 0x3b, 0x82, 0x26, 0x65, 0x92, 0x1d, 0x9f,
		0xfe, 0x91, 0xdd, 0x4e, 0x1b, 0xd2, 0xc9, 0x90, 0x96, 0x51, 0x75, 0xc1, 0xbc, 0x70, 0xb2, 0xe4,
		0x82, 0x7d, 0x0b, 0x09, 0x7b, 0x96, 0x76, 0xdb, 0xfc, 0x94, 0xba, 0xdf, 0x73, 0x3f, 0xa5, 0xd5,
		0x9d, 0x9d, 0x1c, 0x4f, 0xea, 0x8b, 0x6c, 0x5a, 0xbb, 0xca, 0x0a, 0xb5, 0x4c, 0xf5, 0x0e, 0xd3,
		0x30, 0xeb, 0x73, 0x91, 0xe4, 0x3e, 0x2b, 0x55, 0x9f, 0x2a, 0xc1, 0xa7, 0x3f, 0xbd, 0x9d, 0x0a,
		0x3d, 0xa7, 0x3f, 0xbd, 0x9d, 0xea, 0x84, 0xb4, 0x6a, 0xe3, 0xc8, 0x8d, 0xb1, 0xc1, 0xf8, 0x6a,
		0xd6, 0xd2, 0x59, 0xcd, 0xf2, 0x35, 0x6a, 0xeb, 0xac, 0x74, 0xac, 0xa4, 0x54, 0x1b, 0x55, 0x54,
		0x1b, 0x19, 0xa0, 0xec, 0xa8, 0x36, 0xd6, 0x7f, 0x23, 0x54, 0x1b, 0xf8, 0xfa, 0xf8, 0xfa, 0xf8,
		0xfa, 0x39, 0xf4, 0xf5, 0x51, 0x6d, 0xa0, 0xda, 0x58, 0x7b, 0xb1, 0xa0, 0xda, 0xe0, 0xfc, 0xe1,
		0xfc, 0xe1, 0xfc, 0x11, 0x5c, 0xaf, 0x5c, 0xf4, 0xad, 0xe7, 0xf7, 0xa3, 0xda, 0x00, 0xcc, 0x01,
		0x73, 0xc0, 0x1c, 0x30, 0x2f, 0x06, 0x98, 0xa3, 0xda, 0x00, 0x7c, 0x01, 0x5f, 0xc0, 0x57, 0x6e,
		0xbd, 0xa2, 0xda, 0x10, 0x5c, 0x90, 0xa8, 0x36, 0x56, 0xdb, 0x47, 0xb5, 0x91, 0xda, 0x94, 0xa2,
		0xda, 0xb0, 0x60, 0x0d, 0xd5, 0x46, 0x3e, 0x54, 0x1b, 0x1a, 0xc5, 0xbc, 0xe5, 0x86, 0x38, 0xd9,
		0xfa, 0x1e, 0x42, 0x93, 0x21, 0x3f, 0x09, 0x15, 0x23, 0xed, 0xca, 0xd3, 0x72, 0x91, 0xa7, 0xe3,
		0x47, 0x5e, 0x1f, 0xdc, 0x7a, 0x17, 0xee, 0xad, 0x77, 0x7d, 0xd0, 0x6a, 0xad, 0x51, 0x2b, 0x53,
		0x6e, 0x8e, 0x34, 0xe6, 0x67, 0x5a, 0x8c, 0xcb, 0x19, 0xbf, 0x89, 0x69, 0xf5, 0xa2, 0x39, 0x73,
		0xf4, 0xde, 0xa1, 0x82, 0x51, 0x4a, 0x7e, 0x53, 0x5e, 0x7b, 0xef, 0x98, 0xdf, 0x60, 0x4b, 0xdc,
		0x58, 0x4f, 0x6f, 0xa8, 0xdf, 0xbc, 0x19, 0x1d, 0x54, 0x6f, 0xe7, 0x37, 0x76, 0x96, 0x01, 0xad,
		0xd7, 0x6b, 0xff, 0x30, 0x95, 0x1a, 0x3d, 0xe2, 0xd9, 0xac, 0x35, 0x0a, 0xb2, 0x55, 0xc6, 0x22,
		0x03, 0xf0, 0x4c, 0x03, 0xcf, 0x86, 0x03, 0x47, 0x49, 0x36, 0xbd, 0x85, 0x47, 0x49, 0xb6, 0xe4,
		0xb6, 0xa8, 0xf4, 0x56, 0xb5, 0xb6, 0x65, 0xad, 0x6d, 0x5d, 0x3b, 0x5b, 0x38, 0x1b, 0xae, 0xb1,
		0x98, 0xbc, 0xb7, 0x35, 0xba, 0x23, 0x77, 0xd4, 0xf7, 0x5e, 0x37, 0x88, 0xac, 0xa9, 0x7b, 0x97,
		0x3f, 0x46, 0xfe, 0x9e, 0xff, 0xbc, 0xfe, 0x7f, 0xf5, 0xc3, 0xcb, 0xeb, 0xf3, 0xb3, 0xcf, 0x97,
		0x75, 0x6e, 0x9c, 0xb2, 0x84, 0x43, 0xb6, 0xf0, 0xc8, 0x3a, 0x2e, 0x59, 0xc7, 0x27, 0xbb, 0x38,
		0x25, 0x1b, 0x9c, 0xcc, 0xfe, 0x9d, 0xd3, 0x04, 0x69, 0xc6, 0xda, 0xda, 0x68, 0xf0, 0x20, 0x0b,
		0x97, 0xff, 0x35, 0x41, 0x9b, 0x75, 0xbf, 0xdf, 0x19, 0x0c, 0xc6, 0x43, 0x81, 0x04, 0x05, 0x93,
		0x69, 0xf0, 0x3a, 0x89, 0x9c, 0x2b, 0xf3, 0x8f, 0xe1, 0x5c, 0xe1, 0x5c, 0xe1, 0x5c, 0xe1, 0x5c,
		0xe1, 0x5c, 0x29, 0xdc, 0xb9, 0x62, 0xd9, 0x4f, 0xb1, 0xe2, 0x9f, 0x00, 0xf4, 0x00, 0x3d, 0x40,
		0x9f, 0x17, 0xa0, 0x27, 0xfd, 0x50, 0x34, 0xfd, 0x50, 0x68, 0xbe, 0x8f, 0xbd, 0x30, 0x3a, 0x88,
		0xa2, 0x40, 0x76, 0xce, 0x4f, 0x3c, 0xbf, 0xde, 0x56, 0x83, 0x2d, 0x13, 0xca, 0x4a, 0xa5, 0x2a,
		0x27, 0xee, 0xf7, 0x19, 0xcb, 0x5b, 0xbf, 0xd5, 0x6a, 0xbb, 0x7b, 0xb5, 0xda, 0xe6, 0xde, 0xf6,
		0xde, 0xe6, 0xfe, 0xce, 0xce, 0xd6, 0xee, 0x96, 0xa4, 0x86, 0xf1, 0x2c, 0x68, 0xa9, 0x40, 0xb5,
		0xde, 0xff, 0x90, 0x07, 0xc5, 0xa9, 0x94, 0x33, 0x54, 0x81, 0x34, 0x1e, 0x5a, 0x02, 0xf2, 0xa7,
		0x60, 0xde, 0x1d, 0x8d, 0x8e, 0x73, 0xf3, 0xa3, 0x62, 0x41, 0xc3, 0x67, 0x1b, 0xd4, 0x17, 0x80,
		0x7d, 0x38, 0x13, 0x19, 0xd5, 0xad, 0x15, 0x89, 0x69, 0x5a, 0x8e, 0x5c, 0x58, 0x89, 0x58, 0xc0,
		0x34, 0x61, 0x9a, 0x30, 0x4d, 0x98, 0x26, 0x4c, 0x13, 0xa6, 0x09, 0xd3, 0x84, 0x69, 0xc2, 0x34,
		0xad, 0x33, 0x4d, 0x32, 0x24, 0x96, 0x89, 0xf3, 0x67, 0x14, 0x97, 0x94, 0xb6, 0xa4, 0xb4, 0x65,
		0x6a, 0x54, 0x1e, 0xf5, 0x1b, 0xea, 0xb7, 0x5f, 0x18, 0x42, 0xfd, 0x46, 0x48, 0x81, 0x90, 0x02,
		0x21, 0x85, 0xc2, 0x84, 0x14, 0x50, 0x29, 0xa0, 0x7e, 0xe3, 0x5c, 0xe1, 0x5c, 0xe1, 0x5c, 0xe1,
		0x5c, 0xe1, 0x5c, 0x41, 0xfd, 0x16, 0x6f, 0x96, 0x51, 0xbf, 0x01, 0xf4, 0x00, 0x7d, 0xa9, 0x81,
		0x9e, 0x3b, 0x49, 0xee, 0x24, 0x05, 0x2c, 0x73, 0x27, 0x99, 0x16, 0x90, 0x6f, 0x70, 0x27, 0x99,
		0x06, 0xb2, 0x6f, 0xa0, 0x7e, 0x8b, 0xb3, 0xa1, 0x50, 0xbf, 0xc1, 0x34, 0x61, 0x9a, 0x30, 0x4d,
		0x98, 0x26, 0x4c, 0x13, 0xa6, 0x09, 0xd3, 0x84, 0x69, 0xe6, 0x93, 0x69, 0xa2, 0x7e, 0x7b, 0x4e,
		0xfd, 0x46, 0x89, 0xe0, 0x4c, 0xcc, 0x83, 0xed, 0x2a, 0xc1, 0x83, 0x47, 0x35, 0x46, 0x4f, 0xca,
		0x70, 0x5d, 0x4d, 0xc3, 0x82, 0x7e, 0x32, 0x85, 0xfc, 0x8a, 0x56, 0x4b, 0x93, 0xd2, 0xc0, 0x7a,
		0x6e, 0x53, 0x8e, 0x4a, 0x03, 0x1b, 0x57, 0xd2, 0x94, 0xa9, 0xd0, 0xbd, 0xb0, 0xfa, 0x24, 0x2a,
		0x75, 0x0b, 0x87, 0x4f, 0x32, 0x5f, 0x57, 0x93, 0xa6, 0xf9, 0x34, 0xcd, 0xb7, 0x1d, 0xec, 0x78,
		0x8c, 0x73, 0xb6, 0x94, 0x1f, 0x79, 0xd1, 0x0f, 0x99, 0x40, 0xc7, 0xf4, 0xe4, 0x14, 0x70, 0x6a,
		0x2b, 0x47, 0xe3, 0xaf, 0xf6, 0xde, 0x0d, 0x2d, 0xf4, 0x65, 0x3e, 0xf8, 0x78, 0x74, 0x7d, 0x31,
		0xf8, 0x8f, 0xcb, 0x7f, 0x37, 0xc4, 0x34, 0x63, 0xc3, 0x9e, 0x33, 0xa1, 0x68, 0xb3, 0x26, 0x4b,
		0x6e, 0xfc, 0xf1, 0xf6, 0x97, 0xc6, 0xe9, 0xf5, 0x51, 0xe3, 0xcb, 0xee, 0xf5, 0xe7, 0xd3, 0xa3,
		0xc3, 0x83, 0x8b, 0x4b, 0xc1, 0x00, 0xe1, 0xeb, 0xcc, 0xbf, 0xfd, 0xd1, 0xe9, 0x3f, 0x2f, 0x2e,
		0x0f, 0x2e, 0xeb, 0xd7, 0x17, 0x8d, 0x8f, 0xa5, 0x7a, 0xf1, 0xc9, 0xb4, 0xd7, 0x4a, 0x39, 0xed,
		0x8f, 0x8b, 0xfe, 0xe4, 0xf3, 0xf1, 0x65, 0xe9, 0xde, 0xbf, 0xf4, 0xdb, 0xbd, 0x74, 0x93, 0x7d,
		0x7c, 0xf0, 0xbe, 0x7e, 0x5c, 0xff, 0x50, 0xc6, 0x49, 0xbf, 0x38, 0xbf, 0xac, 0x5f, 0x37, 0xce,
		0x8e, 0x8f, 0x0e, 0xff, 0x3d, 0xdc, 0xf2, 0xa5, 0x5a, 0xf0, 0xd5, 0x01, 0xd0, 0x7d, 0x69, 0x1c,
		0x5f, 0x94, 0x6c, 0xc5, 0xd7, 0xca, 0xbc, 0xe2, 0x87, 0xef, 0xff, 0xf1, 0xf8, 0xec, 0x5f, 0x17,
		0x8d, 0xfa, 0x61, 0x89, 0xb7, 0x7a, 0xad, 0x9c, 0x54, 0xf6, 0x4b, 0xe3, 0xb4, 0x74, 0xab, 0xbd,
		0x84, 0xbb, 0xfc, 0x4b, 0xe3, 0xb4, 0xa4, 0xdb, 0x7c, 0x74, 0xaa, 0xd5, 0x4b, 0xb6, 0xce, 0x67,
		0x5c, 0x36, 0x1b, 0x4e, 0x8b, 0x88, 0xa5, 0xab, 0xb4, 0xe3, 0x6a, 0xa9, 0x54, 0xdf, 0x50, 0xbe,
		0x7b, 0xd3, 0x56, 0x2d, 0xb9, 0x68, 0xf9, 0xc4, 0xa0, 0x69, 0xf5, 0x81, 0xc7, 0xc4, 0xc8, 0x5b,
		0xb7, 0x1d, 0x12, 0x77, 0x5f, 0x63, 0xe8, 0x89, 0xbb, 0x13, 0x77, 0x5f, 0xfd, 0x46, 0xf2, 0x71,
		0xf7, 0x9b, 0x6e, 0xb7, 0xad, 0x5c, 0x5f, 0x32, 0xe6, 0xbe, 0x85, 0x86, 0x23, 0x86, 0x1d, 0x29,
		0x0d, 0x87, 0x49, 0xf1, 0xa8, 0x64, 0x34, 0x15, 0x77, 0x81, 0xdb, 0x54, 0xb7, 0xfd, 0xb6, 0x13,
		0xa8, 0x30, 0x72, 0x83, 0xc8, 0x5c, 0x5d, 0xb1, 0x60, 0x11, 0x9d, 0x05, 0x3a, 0x8b, 0x94, 0x0e,
		0x08, 0x3a, 0x96, 0xd2, 0xb1, 0x14, 0x86, 0x07, 0xc3, 0xcb, 0x4a, 0xc5, 0x36, 0x29, 0xa7, 0xd0,
		0x92, 0x73, 0x68, 0xcb, 0x49, 0x14, 0x76, 0x16, 0xc5, 0x21, 0xc5, 0x06, 0xb4, 0xd8, 0x83, 0x18,
		0x5b, 0x50, 0x63, 0x1d, 0x72, 0xac, 0x43, 0x8f, 0x55, 0x08, 0x92, 0x0d, 0x8a, 0x65, 0x3f, 0xc3,
		0x4d, 0xce, 0x09, 0x15, 0x76, 0x46, 0xe5, 0x26, 0x82, 0x04, 0x90, 0x65, 0x4e, 0xeb, 0x53, 0x07,
		0x8e, 0x12, 0xc8, 0x94, 0x40, 0x86, 0x4e, 0x43, 0xa7, 0xb3, 0x47, 0xa7, 0xdd, 0xd6, 0xbd, 0x0a,
		0x22, 0x2f, 0xb4, 0xc1, 0xa8, 0x67, 0x6c, 0x43, 0x7e, 0x21, 0xbf, 0x90, 0x5f, 0xc8, 0x6f, 0xc1,
		0xc8, 0xef, 0x6b, 0xe2, 0x19, 0x40, 0x3a, 0x90, 0x0e, 0xa4, 0x03, 0xe9, 0x40, 0xfa, 0xf4, 0x9d,
		0x02, 0xd5, 0x54, 0xde, 0xbd, 0x0d, 0x4c, 0x9f, 0x5a, 0x06, 0x7c, 0x01, 0x5f, 0xc0, 0x17, 0xf0,
		0x2d, 0x18, 0xf8, 0x12, 0x4c, 0x5e, 0x27, 0x98, 0x4c, 0x45, 0xa1, 0xcc, 0xcc, 0x85, 0xe5, 0xaa,
		0x42, 0x9f, 0xc6, 0x8f, 0x3b, 0x1f, 0x3f, 0x2d, 0xc3, 0x2a, 0x38, 0xaf, 0x77, 0x5f, 0x73, 0xda,
		0xee, 0x8d, 0x6a, 0xab, 0x96, 0xd3, 0xf7, 0xbd, 0xa6, 0x1b, 0x0a, 0x28, 0xe1, 0x96, 0x5a, 0x45,
		0x0d, 0x87, 0x1a, 0x2e, 0x25, 0xf2, 0x91, 0x33, 0x35, 0xdc, 0x68, 0x46, 0x9c, 0xb6, 0xd7, 0xf1,
		0x22, 0xb9, 0x3b, 0xbc, 0x39, 0xab, 0x28, 0xe3, 0x92, 0xf3, 0x34, 0xb8, 0xca, 0xe3, 0x2a, 0x6f,
		0xb5, 0x21, 0x21, 0xe9, 0xeb, 0xc2, 0xf2, 0x15, 0x91, 0xc0, 0x0a, 0x6f, 0x78, 0x42, 0x0e, 0x84,
		0x1c, 0x08, 0x39, 0xc8, 0x02, 0xc8, 0xd4, 0x60, 0xc7, 0xfd, 0xee, 0x8c, 0x66, 0x7d, 0x58, 0x6b,
		0xcb, 0x52, 0xde, 0xed, 0xdc, 0x53, 0x84, 0x27, 0x5f, 0x36, 0xae, 0x69, 0x0d, 0x6c, 0x6c, 0x82,
		0x8e, 0x7d, 0xf0, 0xb1, 0x0d, 0x42, 0x89, 0x81, 0x51, 0x62, 0xa0, 0x94, 0x08, 0x38, 0xc9, 0x82,
		0x94, 0x30, 0x58, 0x4d, 0x47, 0x40, 0x3c, 0x4e, 0xba, 0xb0, 0xde, 0xfb, 0x9e, 0x1f, 0x6d, 0x57,
		0x6d, 0xac, 0xf7, 0x31, 0xba, 0xec, 0x59, 0x30, 0x7d, 0xee, 0xfa, 0x77, 0x4a, 0xb4, 0xbe, 0xe1,
		0xec, 0x1f, 0x3b, 0xfb, 0x73, 0x63, 0xdc, 0xe0, 0xc1, 0x1a, 0x00, 0x58, 0x86, 0xf5, 0x85, 0xc7,
		0x0c, 0xab, 0x4c, 0x26, 0xf0, 0x9c, 0x8f, 0x81, 0xdb, 0x8c, 0xbc, 0xae, 0xff, 0xc1, 0xbb, 0xf3,
		0x46, 0x7d, 0x31, 0xac, 0x3d, 0xef, 0xe1, 0xb5, 0xc5, 0xa9, 0x77, 0xbf, 0x17, 0x6e, 0xea, 0x6b,
		0xd5, 0xfd, 0xda, 0xfe, 0xee, 0x5e, 0x75, 0x7f, 0xa7, 0x40, 0x6b, 0xe0, 0x45, 0x3e, 0xac, 0x5e,
		0x65, 0xb5, 0xe7, 0x86, 0xa0, 0xdf, 0xd6, 0x0b, 0xd4, 0xbd, 0xf2, 0x23, 0x27, 0x52, 0x6e, 0xd0,
		0xea, 0xfe, 0xe5, 0xdb, 0xa3, 0xd9, 0x0b, 0x4f, 0x12, 0x3e, 0xc8, 0x2d, 0xe9, 0xc2, 0xa0, 0xf2,
		0x50, 0x79, 0xa8, 0x3c, 0x54, 0xde, 0x92, 0xf4, 0xe1, 0x29, 0xbc, 0x08, 0x49, 0x20, 0xb2, 0x7d,
		0xe8, 0x8c, 0xef, 0xac, 0x9d, 0xc8, 0xeb, 0xa8, 0xc0, 0xde, 0x89, 0x33, 0xff, 0x18, 0x8e, 0x03,
		0x8e, 0x03, 0x8e, 0x03, 0x8e, 0x03, 0xc1, 0xf5, 0xde, 0x52, 0x4d, 0xaf, 0xe3, 0xb6, 0x77, 0x6b,
		0x36, 0x0f, 0x84, 0xaa, 0x05, 0xdb, 0x0b, 0xce, 0x5e, 0x95, 0x10, 0x52, 0x3a, 0x21, 0xa4, 0x2a,
		0x21, 0xa4, 0xb2, 0x86, 0x90, 0xb6, 0x99, 0x7a, 0x22, 0x47, 0xf9, 0x25, 0xf1, 0x7f, 0xb9, 0x81,
		0xef, 0xf9, 0x77, 0x4e, 0xf4, 0x2d, 0x50, 0xe1, 0xb7, 0x6e, 0xbb, 0xe5, 0xf4, 0x9a, 0x91, 0x3d,
		0x32, 0xbf, 0xfc, 0x71, 0x90, 0x7a, 0x48, 0x3d, 0xa4, 0x1e, 0x52, 0x2f, 0xb8, 0xde, 0x7b, 0x2a,
		0x68, 0x2a, 0x3f, 0x72, 0xef, 0x94, 0x45, 0x56, 0xbf, 0x03, 0xdf, 0x4e, 0x87, 0x6f, 0x73, 0x65,
		0x5b, 0x5a, 0xbe, 0x9d, 0xd4, 0xd4, 0x6f, 0x6d, 0xc2, 0xb8, 0x61, 0xdc, 0xa2, 0x96, 0xa4, 0x14,
		0x9a, 0xc2, 0x99, 0x85, 0x53, 0xbb, 0x52, 0x59, 0x6d, 0xcb, 0xb2, 0xac, 0xde, 0xce, 0x66, 0x79,
		0x88, 0xd4, 0xaf, 0x93, 0x9b, 0x1b, 0x89, 0x24, 0x7d, 0x99, 0xba, 0x76, 0x0b, 0x34, 0x46, 0xa2,
		0xbe, 0xdd, 0x53, 0x04, 0x15, 0xd7, 0xca, 0x57, 0xd1, 0xca, 0xe7, 0xc8, 0xdf, 0x41, 0x2b, 0x8f,
		0x56, 0x1e, 0xad, 0x3c, 0xc1, 0x17, 0x82, 0x2f, 0x04, 0x5f, 0x2c, 0xad, 0x77, 0xb4, 0xf2, 0x04,
		0x5e, 0x08, 0xbc, 0x10, 0x78, 0xd1, 0x9a, 0x7a, 0xb4, 0xf2, 0xc4, 0x5f, 0x2c, 0xee, 0x21, 0xb4,
		0xf2, 0x50, 0x79, 0xa8, 0x3c, 0x54, 0x1e, 0x2a, 0xbf, 0xd6, 0x7a, 0x47, 0x2b, 0x2f, 0xf2, 0xae,
		0x68, 0xe5, 0x39, 0x0e, 0x38, 0x0e, 0x38, 0x0e, 0xf2, 0x7e, 0x1c, 0xa0, 0x95, 0x27, 0x84, 0x64,
		0x38, 0xbd, 0x68, 0xe5, 0x4b, 0x1b, 0x42, 0x42, 0x2b, 0x4f, 0xe4, 0x28, 0xc7, 0x24, 0x1e, 0xad,
		0x3c, 0xa4, 0x1e, 0x52, 0x0f, 0xa9, 0x2f, 0x1a, 0xa9, 0x47, 0x2b, 0x5f, 0x64, 0xbe, 0xcd, 0x95,
		0x6d, 0x69, 0xf9, 0x36, 0x5a, 0x79, 0x18, 0x77, 0xf2, 0x8c, 0x1b, 0xad, 0xbc, 0xa8, 0x56, 0x5e,
		0xa0, 0x3d, 0x8f, 0xdc, 0xd4, 0xd0, 0x52, 0x49, 0x6b, 0x12, 0x2b, 0x22, 0x19, 0x06, 0xcf, 0xf6,
		0xf7, 0x39, 0xea, 0xdd, 0xd7, 0x8e, 0x47, 0x5f, 0xe3, 0xf3, 0xe8, 0x5b, 0x5c, 0x8f, 0xfc, 0xa5,
		0xe3, 0xe1, 0x97, 0xa0, 0xc5, 0x53, 0x46, 0xd6, 0x86, 0xe5, 0x36, 0x4f, 0x8b, 0xcb, 0x20, 0xf3,
		0x9d, 0x9e, 0x64, 0x3b, 0x3c, 0xd1, 0xd9, 0x89, 0xce, 0x4e, 0x29, 0xc7, 0x1a, 0x72, 0xd6, 0xd9,
		0x49, 0xa8, 0xd9, 0x8b, 0x6c, 0x93, 0x17, 0xba, 0x39, 0xa5, 0x19, 0x5c, 0xa4, 0x9b, 0x53, 0x06,
		0x18, 0xaf, 0x58, 0x37, 0xa7, 0x50, 0xf9, 0x2d, 0xa7, 0x35, 0x12, 0x8c, 0x3a, 0x41, 0xb7, 0x6f,
		0x25, 0x59, 0x75, 0xf1, 0x19, 0x52, 0x79, 0x76, 0x76, 0x94, 0xae, 0x34, 0xac, 0x26, 0x23, 0x96,
		0x8c, 0x58, 0xd1, 0x78, 0x0b, 0x0d, 0xab, 0x89, 0xae, 0xd8, 0xf0, 0xa0, 0x27, 0x51, 0x15, 0x89,
		0xca, 0x11, 0x06, 0xa1, 0x8c, 0xd7, 0x34, 0x4f, 0x85, 0x6e, 0x43, 0xb7, 0xa1, 0xdb, 0xc9, 0xf8,
		0xd3, 0x76, 0xfc, 0x6a, 0xe1, 0x0d, 0x0f, 0xfd, 0x85, 0xfe, 0x42, 0x7f, 0x65, 0x01, 0x64, 0x6a,
		0x90, 0x82, 0x30, 0x09, 0x81, 0x8d, 0x4d, 0xd0, 0xb1, 0x0f, 0x3e, 0xb6, 0x41, 0x28, 0x31, 0x30,
		0x4a, 0x0c, 0x94, 0x12, 0x01, 0x27, 0x59, 0x90, 0x12, 0x06, 0x2b, 0x7b, 0x3e, 0xfb, 0xc2, 0x7a,
		0xa7, 0x20, 0xcc, 0xc2, 0x1f, 0xd4, 0x85, 0x6b, 0x3d, 0x06, 0x75, 0x61, 0xbc, 0xa9, 0xa7, 0x20,
		0x4c, 0x3e, 0xd6, 0x00, 0x22, 0xc3, 0xac, 0xec, 0x21, 0x0a, 0xc2, 0x40, 0xe5, 0xa1, 0xf2, 0x50,
		0x79, 0xa8, 0xfc, 0x5a, 0xeb, 0x9d, 0x82, 0x30, 0x22, 0xef, 0x4a, 0x41, 0x18, 0x8e, 0x03, 0x8e,
		0x03, 0x8e, 0x83, 0xbc, 0x1f, 0x07, 0x14, 0x84, 0x21, 0x84, 0x64, 0x38, 0xbd, 0x14, 0x84, 0x29,
		0x6d, 0x08, 0x89, 0x82, 0x30, 0x44, 0x8e, 0x72, 0x4c, 0xe2, 0x29, 0x08, 0x03, 0xa9, 0x87, 0xd4,
		0x43, 0xea, 0x8b, 0x46, 0xea, 0x29, 0x08, 0x53, 0x64, 0xbe, 0xcd, 0x95, 0x6d, 0x69, 0xf9, 0x36,
		0x05, 0x61, 0x60, 0xdc, 0xc9, 0x33, 0x6e, 0x0a, 0xc2, 0xe8, 0x66, 0xbb, 0xd0, 0x34, 0x55, 0x87,
		0xbe, 0xd0, 0x34, 0x35, 0xab, 0x7e, 0x0f, 0x1a, 0xf9, 0x54, 0xfc, 0x1a, 0x34, 0xf2, 0x02, 0x9b,
		0x01, 0x8d, 0x3c, 0x41, 0x17, 0x82, 0x2e, 0x04, 0x5d, 0x6c, 0xad, 0x77, 0x34, 0xf2, 0x04, 0x5c,
		0x08, 0xb8, 0x10, 0x70, 0xd1, 0x9a, 0x7a, 0x34, 0xf2, 0xc4, 0x5d, 0x2c, 0xee, 0x21, 0x34, 0xf2,
		0x50, 0x79, 0xa8, 0x3c, 0x54, 0x1e, 0x2a, 0xbf, 0xd6, 0x7a, 0x47, 0x23, 0x2f, 0xf2, 0xae, 0x68,
		0xe4, 0x39, 0x0e, 0x38, 0x0e, 0x38, 0x0e, 0xf2, 0x7e, 0x1c, 0xa0, 0x91, 0x27, 0x84, 0x64, 0x38,
		0xbd, 0x68, 0xe4, 0x4b, 0x1b, 0x42, 0x42, 0x23, 0x4f, 0xe4, 0x28, 0xc7, 0x24, 0x1e, 0x8d, 0x3c,
		0xa4, 0x1e, 0x52, 0x0f, 0xa9, 0x2f, 0x1a, 0xa9, 0x47, 0x23, 0x5f, 0x64, 0xbe, 0xcd, 0x95, 0x6d,
		0x69, 0xf9, 0x36, 0x1a, 0x79, 0x18, 0x77, 0xf2, 0x8c, 0x1b, 0x8d, 0xbc, 0x88, 0x46, 0x9e, 0x66,
		0xa9, 0xb6, 0x26, 0xd1, 0xfe, 0xe4, 0x25, 0xd8, 0x24, 0x35, 0x4b, 0xdd, 0x51, 0x8d, 0x7a, 0x81,
		0x4a, 0xe4, 0x4f, 0x88, 0xe6, 0x4d, 0x88, 0x37, 0x11, 0xa9, 0xd2, 0x44, 0x24, 0x03, 0xbe, 0x2c,
		0x4d, 0x44, 0xd6, 0x7f, 0x23, 0x7a, 0xf6, 0x6d, 0xd0, 0xb3, 0x8f, 0x84, 0x2c, 0x12, 0xb2, 0xf2,
		0x42, 0xf7, 0xe9, 0xd9, 0x07, 0xc9, 0xb7, 0x49, 0xf2, 0x05, 0x9c, 0xb2, 0x87, 0x9c, 0x34, 0xe2,
		0x16, 0x9a, 0x0f, 0x2b, 0xf3, 0x50, 0x31, 0xf2, 0x34, 0xe2, 0xf8, 0x55, 0x7a, 0x73, 0x1d, 0x7f,
		0xa6, 0x34, 0x66, 0xa9, 0xe2, 0xf5, 0xee, 0x77, 0x9d, 0xb6, 0x7b, 0xa3, 0xda, 0xaa, 0x35, 0x1d,
		0x19, 0xdd, 0xb9, 0x9a, 0x02, 0xdd, 0x52, 0xab, 0x9a, 0x6b, 0xc8, 0xcc, 0x83, 0x32, 0x26, 0x34,
		0x12, 0x04, 0x46, 0x8e, 0xb0, 0x48, 0x11, 0x14, 0x71, 0x42, 0x22, 0x4e, 0x40, 0x44, 0x09, 0x47,
		0xb2, 0xa8, 0x67, 0xea, 0xf1, 0xd0, 0x1b, 0x95, 0xb0, 0x06, 0x61, 0x8d, 0xb2, 0x84, 0x35, 0xe8,
		0x8d, 0x4a, 0x98, 0x81, 0x30, 0x43, 0xf9, 0xc2, 0x0c, 0xd4, 0x7d, 0xb1, 0x1c, 0xcb, 0xb4, 0x06,
		0x36, 0x36, 0x41, 0xc7, 0x3e, 0xf8, 0xd8, 0x06, 0xa1, 0xc4, 0xc0, 0x28, 0x31, 0x50, 0x4a, 0x04,
		0x9c, 0x64, 0x41, 0x4a, 0x18, 0xac, 0xa6, 0x23, 0x40, 0xdd, 0x97, 0xa5, 0xa6, 0x11, 0x11, 0x26,
		0x0f, 0xeb, 0x0b, 0x8f, 0x41, 0x44, 0x18, 0x6f, 0xea, 0xa9, 0xfb, 0x92, 0x8f, 0x35, 0x80, 0x96,
		0x30, 0x2b, 0x7b, 0x88, 0xba, 0x2f, 0x50, 0x79, 0xa8, 0x3c, 0x54, 0x1e, 0x2a, 0xbf, 0xd6, 0x7a,
		0xa7, 0xee, 0x8b, 0xc8, 0xbb, 0x52, 0xf7, 0x85, 0xe3, 0x80, 0xe3, 0x80, 0xe3, 0x20, 0xef, 0xc7,
		0x01, 0x75, 0x5f, 0x08, 0x21, 0x19, 0x4e, 0x2f, 0x75, 0x5f, 0x4a, 0x1b, 0x42, 0xa2, 0xee, 0x0b,
		0x91, 0xa3, 0x1c, 0x93, 0x78, 0xea, 0xbe, 0x40, 0xea, 0x21, 0xf5, 0x90, 0xfa, 0xa2, 0x91, 0x7a,
		0xea, 0xbe, 0x14, 0x99, 0x6f, 0x73, 0x65, 0x5b, 0x5a, 0xbe, 0x4d, 0xdd, 0x17, 0x18, 0x77, 0xf2,
		0x8c, 0x9b, 0xba, 0x2f, 0xf1, 0xb2, 0xd9, 0x16, 0xb2, 0xac, 0xe8, 0x91, 0xaa, 0x45, 0x63, 0xe8,
		0x91, 0x9a, 0x55, 0xff, 0x07, 0xad, 0x7c, 0x2a, 0xfe, 0x0d, 0x5a, 0x79, 0x81, 0xcd, 0x80, 0x56,
		0x9e, 0xe0, 0x0b, 0xc1, 0x17, 0x82, 0x2f, 0xb6, 0xd6, 0x3b, 0x5a, 0x79, 0x02, 0x2f, 0x04, 0x5e,
		0x08, 0xbc, 0x68, 0x4d, 0x3d, 0x5a, 0x79, 0xe2, 0x2f, 0x16, 0xf7, 0x10, 0x5a, 0x79, 0xa8, 0x3c,
		0x54, 0x1e, 0x2a, 0x0f, 0x95, 0x5f, 0x6b, 0xbd, 0xa3, 0x95, 0x17, 0x79, 0x57, 0xb4, 0xf2, 0x1c,
		0x07, 0x1c, 0x07, 0x1c, 0x07, 0x79, 0x3f, 0x0e, 0xd0, 0xca, 0x13, 0x42, 0x32, 0x9c, 0x5e, 0xb4,
		0xf2, 0xa5, 0x0d, 0x21, 0xa1, 0x95, 0x27, 0x72, 0x94, 0x63, 0x12, 0x8f, 0x56, 0x1e, 0x52, 0x0f,
		0xa9, 0x87, 0xd4, 0x17, 0x8d, 0xd4, 0xa3, 0x95, 0x2f, 0x32, 0xdf, 0xe6, 0xca, 0xb6, 0xb4, 0x7c,
		0x1b, 0xad, 0x3c, 0x8c, 0x3b, 0x79, 0xc6, 0x8d, 0x56, 0x5e, 0x54, 0x2b, 0x4f, 0xaf, 0x54, 0x5b,
		0x93, 0x99, 0xdc, 0x24, 0x26, 0xd7, 0x33, 0x75, 0xf7, 0x78, 0xf4, 0x35, 0xb2, 0xd4, 0x3a, 0xb5,
		0xec, 0xad, 0x9d, 0xa4, 0x5a, 0x0e, 0xe9, 0x2f, 0x83, 0xcc, 0x77, 0x7a, 0x92, 0xed, 0xf0, 0x44,
		0x67, 0x27, 0x3a, 0x3b, 0xa5, 0x1c, 0x6b, 0xc8, 0x59, 0x67, 0x27, 0xa1, 0x66, 0x2f, 0xb2, 0x4d,
		0x5e, 0xe8, 0xe6, 0x94, 0x66, 0x70, 0x91, 0x6e, 0x4e, 0x19, 0x60, 0xbc, 0x34, 0xa9, 0xde, 0xa0,
		0x49, 0x35, 0x19, 0xb1, 0x64, 0xc4, 0xe6, 0x25, 0xde, 0x42, 0x93, 0x6a, 0xa2, 0x2b, 0x36, 0x3c,
		0xe8, 0x49, 0x54, 0x45, 0xa2, 0x72, 0x84, 0x41, 0x28, 0xe3, 0x35, 0xcd, 0x53, 0xa1, 0xdb, 0xd0,
		0x6d, 0xe8, 0x76, 0x32, 0xfe, 0xb4, 0x1d, 0xbf, 0x5a, 0x78, 0xc3, 0x43, 0x7f, 0xa1, 0xbf, 0xd0,
		0x5f, 0x59, 0x00, 0x99, 0x1a, 0xa4, 0x20, 0x4c, 0x42, 0x60, 0x63, 0x13, 0x74, 0xec, 0x83, 0x8f,
		0x6d, 0x10, 0x4a, 0x0c, 0x8c, 0x12, 0x03, 0xa5, 0x44, 0xc0, 0x49, 0x16, 0xa4, 0x84, 0xc1, 0xca,
		0x9e, 0xcf, 0xbe, 0xb0, 0xde, 0x29, 0x08, 0xb3, 0xf0, 0x07, 0x75, 0xe1, 0x5a, 0x8f, 0x41, 0x5d,
		0x18, 0x6f, 0xea, 0x29, 0x08, 0x93, 0x8f, 0x35, 0x80, 0xc8, 0x30, 0x2b, 0x7b, 0x88, 0x82, 0x30,
		0x50, 0x79, 0xa8, 0x3c, 0x54, 0x1e, 0x2a, 0xbf, 0xd6, 0x7a, 0xa7, 0x20, 0x8c, 0xc8, 0xbb, 0x52,
		0x10, 0x86, 0xe3, 0x80, 0xe3, 0x80, 0xe3, 0x20, 0xef, 0xc7, 0x01, 0x05, 0x61, 0x08, 0x21, 0x19,
		0x4e, 0x2f, 0x05, 0x61, 0x4a, 0x1b, 0x42, 0xa2, 0x20, 0x0c, 0x91, 0xa3, 0x1c, 0x93, 0x78, 0x0a,
		0xc2, 0x40, 0xea, 0x21, 0xf5, 0x90, 0xfa, 0xa2, 0x91, 0x7a, 0x0a, 0xc2, 0x14, 0x99, 0x6f, 0x73,
		0x65, 0x5b, 0x5a, 0xbe, 0x4d, 0x41, 0x18, 0x18, 0x77, 0xf2, 0x8c, 0x9b, 0x82, 0x30, 0xba, 0xd9,
		0x2e, 0x34, 0x4d, 0xd5, 0xa1, 0x2f, 0x34, 0x4d, 0xcd, 0xaa, 0xdf, 0x83, 0x46, 0x3e, 0x15, 0xbf,
		0x06, 0x8d, 0xbc, 0xc0, 0x66, 0x40, 0x23, 0x4f, 0xd0, 0x85, 0xa0, 0x0b, 0x41, 0x17, 0x5b, 0xeb,
		0x1d, 0x8d, 0x3c, 0x01, 0x17, 0x02, 0x2e, 0x04, 0x5c, 0xb4, 0xa6, 0x1e, 0x8d, 0x3c, 0x71, 0x17,
		0x8b, 0x7b, 0x08, 0x8d, 0x3c, 0x54, 0x1e, 0x2a, 0x0f, 0x95, 0x87, 0xca, 0xaf, 0xb5, 0xde, 0xd1,
		0xc8, 0x8b, 0xbc, 0x2b, 0x1a, 0x79, 0x8e, 0x03, 0x8e, 0x03, 0x8e, 0x83, 0xbc, 0x1f, 0x07, 0x68,
		0xe4, 0x09, 0x21, 0x19, 0x4e, 0x2f, 0x1a, 0xf9, 0xd2, 0x86, 0x90, 0xd0, 0xc8, 0x13, 0x39, 0xca,
		0x31, 0x89, 0x47, 0x23, 0x0f, 0xa9, 0x87, 0xd4, 0x43, 0xea, 0x8b, 0x46, 0xea, 0xd1, 0xc8, 0x17,
		0x99, 0x6f, 0x73, 0x65, 0x5b, 0x5a, 0xbe, 0x8d, 0x46, 0x1e, 0xc6, 0x9d, 0x3c, 0xe3, 0x46, 0x23,
		0x2f, 0xa2, 0x91, 0xa7, 0x59, 0xaa, 0xad, 0x49, 0xb4, 0x3f, 0x79, 0x09, 0x36, 0x49, 0xcd, 0x52,
		0x77, 0x54, 0xa3, 0x5e, 0xa0, 0x12, 0xf9, 0x13, 0xa2, 0x79, 0x13, 0xe2, 0x4d, 0x44, 0xaa, 0x34,
		0x11, 0xc9, 0x80, 0x2f, 0x4b, 0x13, 0x91, 0xf5, 0xdf, 0x88, 0x9e, 0x7d, 0x1b, 0xf4, 0xec, 0x23,
		0x21, 0x8b, 0x84, 0xac, 0xbc, 0xd0, 0x7d, 0x7a, 0xf6, 0x41, 0xf2, 0x6d, 0x92, 0x7c, 0x01, 0xa7,
		0xec, 0x21, 0x27, 0x8d, 0xb8, 0x85, 0xe6, 0xc3, 0xca, 0x3c, 0x54, 0x8c, 0x3c, 0x8d, 0x38, 0x7e,
		0x95, 0xde, 0x5c, 0xc7, 0x9f, 0x29, 0x8d, 0x59, 0xaa, 0xb4, 0xab, 0xf7, 0x3d, 0xdf, 0x51, 0xf7,
		0x3d, 0xfd, 0x19, 0x9a, 0xc2, 0xdb, 0x8c, 0x2d, 0xcd, 0xf5, 0x62, 0xe6, 0x2d, 0x19, 0x93, 0x17,
		0x09, 0xb2, 0x22, 0x47, 0x4e, 0xa4, 0xc8, 0x88, 0x38, 0xf9, 0x10, 0x27, 0x1b, 0xa2, 0xe4, 0x22,
		0x59, 0x84, 0x33, 0xf5, 0x6e, 0xe8, 0x83, 0x4a, 0x08, 0x83, 0x10, 0x46, 0x59, 0x42, 0x18, 0xf4,
		0x41, 0x25, 0xa4, 0x40, 0x48, 0xa1, 0x7c, 0x21, 0x05, 0x6a, 0xbc, 0x58, 0x8e, 0x5b, 0x5a, 0x03,
		0x1b, 0x9b, 0xa0, 0x63, 0x1f, 0x7c, 0x6c, 0x83, 0x50, 0x62, 0x60, 0x94, 0x18, 0x28, 0x25, 0x02,
		0x4e, 0xb2, 0x20, 0x25, 0x0c, 0x56, 0xd3, 0x11, 0xa0, 0xc6, 0xcb, 0x52, 0xd3, 0x08, 0x06, 0x93,
		0x87, 0xf5, 0x85, 0xc7, 0x20, 0x18, 0x8c, 0x37, 0xf5, 0xd4, 0x78, 0xc9, 0xc7, 0x1a, 0x40, 0x37,
		0x98, 0x95, 0x3d, 0x44, 0x8d, 0x17, 0xa8, 0x3c, 0x54, 0x1e, 0x2a, 0x0f, 0x95, 0x5f, 0x6b, 0xbd,
		0x53, 0xe3, 0x45, 0xe4, 0x5d, 0xa9, 0xf1, 0xc2, 0x71, 0xc0, 0x71, 0xc0, 0x71, 0x90, 0xf7, 0xe3,
		0x80, 0x1a, 0x2f, 0x84, 0x90, 0x0c, 0xa7, 0x97, 0x1a, 0x2f, 0xa5, 0x0d, 0x21, 0x51, 0xe3, 0x85,
		0xc8, 0x51, 0x8e, 0x49, 0x3c, 0x35, 0x5e, 0x20, 0xf5, 0x90, 0x7a, 0x48, 0x7d, 0xd1, 0x48, 0x3d,
		0x35, 0x5e, 0x8a, 0xcc, 0xb7, 0xb9, 0xb2, 0x2d, 0x2d, 0xdf, 0xa6, 0xc6, 0x0b, 0x8c, 0x3b, 0x79,
		0xc6, 0x4d, 0x8d, 0x97, 0x18, 0x99, 0x6b, 0x8f, 0xb9, 0x55, 0x74, 0x41, 0xd5, 0x22, 0x2f, 0x74,
		0x41, 0xcd, 0xaa, 0xd7, 0x83, 0x42, 0x3e, 0x15, 0xaf, 0x06, 0x85, 0xbc, 0xc0, 0x66, 0x40, 0x21,
		0x4f, 0xc8, 0x85, 0x90, 0x0b, 0x21, 0x17, 0x5b, 0xeb, 0x1d, 0x85, 0x3c, 0xe1, 0x16, 0xc2, 0x2d,
		0x84, 0x5b, 0xb4, 0xa6, 0x1e, 0x85, 0x3c, 0x51, 0x17, 0x8b, 0x7b, 0x08, 0x85, 0x3c, 0x54, 0x1e,
		0x2a, 0x0f, 0x95, 0x87, 0xca, 0xaf, 0xb5, 0xde, 0x51, 0xc8, 0x8b, 0xbc, 0x2b, 0x0a, 0x79, 0x8e,
		0x03, 0x8e, 0x03, 0x8e, 0x83, 0xbc, 0x1f, 0x07, 0x28, 0xe4, 0x09, 0x21, 0x19, 0x4e, 0x2f, 0x0a,
		0xf9, 0xd2, 0x86, 0x90, 0x50, 0xc8, 0x13, 0x39, 0xca, 0x31, 0x89, 0x47, 0x21, 0x0f, 0xa9, 0x87,
		0xd4, 0x43, 0xea, 0x8b, 0x46, 0xea, 0x51, 0xc8, 0x17, 0x99, 0x6f, 0x73, 0x65, 0x5b, 0x5a, 0xbe,
		0x8d, 0x42, 0x1e, 0xc6, 0x9d, 0x3c, 0xe3, 0x46, 0x21, 0x2f, 0xa0, 0x90, 0xa7, 0x07, 0xaa, 0xad,
		0x29, 0xb4, 0x3d, 0x75, 0x09, 0x75, 0x40, 0x3d, 0xae, 0x7e, 0xe9, 0xf9, 0xf5, 0xfb, 0x9e, 0x9f,
		0x89, 0xfe, 0xa7, 0xa5, 0xee, 0xcf, 0x64, 0xdc, 0x41, 0x28, 0xf6, 0x9c, 0x67, 0xbf, 0x37, 0xd3,
		0x7d, 0xaf, 0x1d, 0x4a, 0xf5, 0x66, 0x1a, 0xda, 0xa2, 0x37, 0x13, 0xbd, 0x99, 0x52, 0x8a, 0x1b,
		0xd0, 0x9b, 0x89, 0xde, 0x4c, 0xe9, 0x05, 0x11, 0xe9, 0xcd, 0x44, 0x6f, 0xa6, 0xd5, 0x86, 0xe8,
		0xcd, 0x24, 0x61, 0x90, 0xcc, 0x53, 0x32, 0x4f, 0xf3, 0x15, 0xd7, 0x20, 0xf3, 0x34, 0xa1, 0xa0,
		0x27, 0x57, 0x99, 0x89, 0x82, 0x50, 0x62, 0x60, 0x94, 0x18, 0x28, 0x25, 0x02, 0x4e, 0xb2, 0x20,
		0x25, 0x0c, 0x56, 0xd3, 0x11, 0x20, 0xf3, 0x74, 0xa9, 0x69, 0xae, 0x31, 0x93, 0x87, 0xf5, 0x85,
		0xc7, 0x70, 0x8d, 0x19, 0x6f, 0xea, 0xc9, 0x3c, 0xcd, 0xc7, 0x1a, 0xe0, 0x36, 0x33, 0x2b, 0x7b,
		0x88, 0xcc, 0x53, 0xa8, 0x3c, 0x54, 0x1e, 0x2a, 0x0f, 0x95, 0x5f, 0x6b, 0xbd, 0x93, 0x79, 0x2a,
		0xf2, 0xae, 0x64, 0x9e, 0x72, 0x1c, 0x70, 0x1c, 0x70, 0x1c, 0xe4, 0xfd, 0x38, 0x20, 0xf3, 0x94,
		0x10, 0x92, 0xe1, 0xf4, 0x92, 0x79, 0x5a, 0xda, 0x10, 0x12, 0x99, 0xa7, 0x44, 0x8e, 0x72, 0x4c,
		0xe2, 0xc9, 0x3c, 0x85, 0xd4, 0x43, 0xea, 0x21, 0xf5, 0x45, 0x23, 0xf5, 0x64, 0x9e, 0x16, 0x99,
		0x6f, 0x73, 0x65, 0x5b, 0x5a, 0xbe, 0x4d, 0xe6, 0x29, 0x8c, 0x3b, 0x79, 0xc6, 0x4d, 0xe6, 0x69,
		0xec, 0xac, 0xb5, 0xfb, 0x5e, 0x3b, 0xa4, 0x37, 0x93, 0x16, 0x79, 0xa1, 0x37, 0x53, 0x56, 0xbd,
		0x1e, 0x14, 0xf2, 0xa9, 0x78, 0x35, 0x28, 0xe4, 0x05, 0x36, 0x03, 0x0a, 0x79, 0x42, 0x2e, 0x84,
		0x5c, 0x08, 0xb9, 0xd8, 0x5a, 0xef, 0x28, 0xe4, 0x09, 0xb7, 0x10, 0x6e, 0x21, 0xdc, 0xa2, 0x35,
		0xf5, 0x28, 0xe4, 0x89, 0xba, 0x58, 0xdc, 0x43, 0x28, 0xe4, 0xa1, 0xf2, 0x50, 0x79, 0xa8, 0x3c,
		0x54, 0x7e, 0xad, 0xf5, 0x8e, 0x42, 0x5e, 0xe4, 0x5d, 0x51, 0xc8, 0x73, 0x1c, 0x70, 0x1c, 0x70,
		0x1c, 0xe4, 0xfd, 0x38, 0x40, 0x21, 0x4f, 0x08, 0xc9, 0x70, 0x7a, 0x51, 0xc8, 0x97, 0x36, 0x84,
		0x84, 0x42, 0x9e, 0xc8, 0x51, 0x8e, 0x49, 0x3c, 0x0a, 0x79, 0x48, 0x3d, 0xa4, 0x1e, 0x52, 0x5f,
		0x34, 0x52, 0x8f, 0x42, 0xbe, 0xc8, 0x7c, 0x9b, 0x2b, 0xdb, 0xd2, 0xf2, 0x6d, 0x14, 0xf2, 0x30,
		0xee, 0xe4, 0x19, 0x37, 0x0a, 0x79, 0x01, 0x85, 0x3c, 0xbd, 0x99, 0x6c, 0x4d, 0xa1, 0xed, 0xa9,
		0x4b, 0xb2, 0x37, 0xd3, 0x97, 0x5e, 0x3b, 0xa4, 0x37, 0x53, 0x76, 0x16, 0x42, 0x12, 0xbd, 0x99,
		0x06, 0x73, 0x9e, 0xe9, 0xde, 0x4c, 0xdb, 0x83, 0xd1, 0xf0, 0x7a, 0xf7, 0x35, 0xa7, 0xd3, 0x6f,
		0x47, 0x5e, 0xd3, 0x0d, 0x23, 0x81, 0x2e, 0x4d, 0xcb, 0xac, 0xd2, 0xaf, 0x89, 0x7e, 0x4d, 0x29,
		0xc5, 0x12, 0xe8, 0xd7, 0x44, 0xbf, 0xa6, 0xf4, 0x02, 0x8b, 0xf4, 0x6b, 0xa2, 0x5f, 0xd3, 0x6a,
		0x43, 0xf4, 0x6b, 0x92, 0x30, 0x48, 0x36, 0x2a, 0xd9, 0xa8, 0xf9, 0x8a, 0x75, 0x90, 0x8d, 0x9a,
		0x50, 0x20, 0x94, 0xeb, 0xcd, 0x44, 0x41, 0x28, 0x31, 0x30, 0x4a, 0x0c, 0x94, 0x12, 0x01, 0x27,
		0x59, 0x90, 0x12, 0x06, 0xab, 0xe9, 0x08, 0x90, 0x8d, 0xba, 0xd4, 0x34, 0x57, 0x9b, 0xc9, 0xc3,
		0xfa, 0xc2, 0x63, 0xb8, 0xda, 0x8c, 0x37, 0xf5, 0x64, 0xa3, 0xe6, 0x63, 0x0d, 0x70, 0xc3, 0x99,
		0x95, 0x3d, 0x44, 0x36, 0x2a, 0x54, 0x1e, 0x2a, 0x0f, 0x95, 0x87, 0xca, 0xaf, 0xb5, 0xde, 0xc9,
		0x46, 0x15, 0x79, 0x57, 0xb2, 0x51, 0x39, 0x0e, 0x38, 0x0e, 0x38, 0x0e, 0xf2, 0x7e, 0x1c, 0x90,
		0x8d, 0x4a, 0x08, 0xc9, 0x70, 0x7a, 0xc9, 0x46, 0x2d, 0x6d, 0x08, 0x89, 0x6c, 0x54, 0x22, 0x47,
		0x39, 0x26, 0xf1, 0x64, 0xa3, 0x42, 0xea, 0x21, 0xf5, 0x90, 0xfa, 0xa2, 0x91, 0x7a, 0xb2, 0x51,
		0x8b, 0xcc, 0xb7, 0xb9, 0xb2, 0x2d, 0x2d, 0xdf, 0x26, 0x1b, 0x15, 0xc6, 0x9d, 0x3c, 0xe3, 0x26,
		0x1b, 0x35, 0x4e, 0x26, 0xdb, 0x92, 0x2c, 0x2b, 0x3a, 0x37, 0x69, 0xd1, 0x18, 0x3a, 0x37, 0x65,
		0xd5, 0xff, 0x41, 0x2b, 0x9f, 0x8a, 0x7f, 0x83, 0x56, 0x5e, 0x60, 0x33, 0xa0, 0x95, 0x27, 0xf8,
		0x42, 0xf0, 0x85, 0xe0, 0x8b, 0xad, 0xf5, 0x8e, 0x56, 0x9e, 0xc0, 0x0b, 0x81, 0x17, 0x02, 0x2f,
		0x5a, 0x53, 0x8f, 0x56, 0x9e, 0xf8, 0x8b, 0xc5, 0x3d, 0x84, 0x56, 0x1e, 0x2a, 0x0f, 0x95, 0x87,
		0xca, 0x43, 0xe5, 0xd7, 0x5a, 0xef, 0x68, 0xe5, 0x45, 0xde, 0x15, 0xad, 0x3c, 0xc7, 0x01, 0xc7,
		0x01, 0xc7, 0x41, 0xde, 0x8f, 0x03, 0xb4, 0xf2, 0x84, 0x90, 0x0c, 0xa7, 0x17, 0xad, 0x7c, 0x69,
		0x43, 0x48, 0x68, 0xe5, 0x89, 0x1c, 0xe5, 0x98, 0xc4, 0xa3, 0x95, 0x87, 0xd4, 0x43, 0xea, 0x21,
		0xf5, 0x45, 0x23, 0xf5, 0x68, 0xe5, 0x8b, 0xcc, 0xb7, 0xb9, 0xb2, 0x2d, 0x2d, 0xdf, 0x46, 0x2b,
		0x0f, 0xe3, 0x4e, 0x9e, 0x71, 0xa3, 0x95, 0x17, 0xd5, 0xca, 0xd3, 0xc3, 0xc9, 0xd6, 0x64, 0x26,
		0x37, 0x89, 0x49, 0x75, 0x73, 0xda, 0xfe, 0xd2, 0xf3, 0x8f, 0x7a, 0xf7, 0xb5, 0x93, 0xc9, 0xb7,
		0xa0, 0xad, 0x53, 0x16, 0xd7, 0x86, 0xed, 0x06, 0x4f, 0x0b, 0xcb, 0x20, 0x27, 0x9d, 0x9e, 0xfa,
		0xbe, 0x7c, 0x9f, 0xa7, 0x89, 0x4d, 0xba, 0x3c, 0xd1, 0xe5, 0x29, 0xa5, 0xb8, 0x03, 0x5d, 0x9e,
		0xe8, 0xf2, 0x94, 0x5e, 0x10, 0x92, 0x2e, 0x4f, 0x74, 0x79, 0x5a, 0x6d, 0x88, 0x2e, 0x4f, 0x12,
		0x06, 0xc9, 0x5c, 0x25, 0x73, 0x35, 0x5f, 0x71, 0x11, 0x32, 0x57, 0x13, 0x0a, 0x9a, 0x72, 0x15,
		0x9a, 0x28, 0x08, 0x25, 0x06, 0x46, 0x89, 0x81, 0x52, 0x22, 0xe0, 0x24, 0x0b, 0x52, 0xc2, 0x60,
		0x35, 0x1d, 0x01, 0x32, 0x57, 0x97, 0x9a, 0xe6, 0x1a, 0x34, 0x79, 0x58, 0x5f, 0x78, 0x0c, 0xd7,
		0xa0, 0xf1, 0xa6, 0x9e, 0xcc, 0xd5, 0x7c, 0xac, 0x01, 0x6e, 0x43, 0xb3, 0xb2, 0x87, 0xc8, 0x5c,
		0x85, 0xca, 0x43, 0xe5, 0xa1, 0xf2, 0x50, 0xf9, 0xb5, 0xd6, 0x3b, 0x99, 0xab, 0x22, 0xef, 0x4a,
		0xe6, 0x2a, 0xc7, 0x01, 0xc7, 0x01, 0xc7, 0x41, 0xde, 0x8f, 0x03, 0x32, 0x57, 0x09, 0x21, 0x19,
		0x4e, 0x2f, 0x99, 0xab, 0xa5, 0x0d, 0x21, 0x91, 0xb9, 0x4a, 0xe4, 0x28, 0xc7, 0x24, 0x9e, 0xcc,
		0x55, 0x48, 0x3d, 0xa4, 0x1e, 0x52, 0x5f, 0x34, 0x52, 0x4f, 0xe6, 0x6a, 0x91, 0xf9, 0x36, 0x57,
		0xb6, 0xa5, 0xe5, 0xdb, 0x64, 0xae, 0xc2, 0xb8, 0x93, 0x67, 0xdc, 0x64, 0xae, 0xea, 0x25, 0xb6,
		0x8d, 0x73, 0xac, 0xe8, 0xf1, 0xa4, 0x45, 0x62, 0xe8, 0xf1, 0x94, 0x55, 0xef, 0x07, 0xa5, 0x7c,
		0x2a, 0xde, 0x0d, 0x4a, 0x79, 0x81, 0xcd, 0x80, 0x52, 0x9e, 0xd0, 0x0b, 0xa1, 0x17, 0x42, 0x2f,
		0xb6, 0xd6, 0x3b, 0x4a, 0x79, 0xc2, 0x2e, 0x84, 0x5d, 0x08, 0xbb, 0x68, 0x4d, 0x3d, 0x4a, 0x79,
		0xa2, 0x2f, 0x16, 0xf7, 0x10, 0x4a, 0x79, 0xa8, 0x3c, 0x54, 0x1e, 0x2a, 0x0f, 0x95, 0x5f, 0x6b,
		0xbd, 0xa3, 0x94, 0x17, 0x79, 0x57, 0x94, 0xf2, 0x1c, 0x07, 0x1c, 0x07, 0x1c, 0x07, 0x79, 0x3f,
		0x0e, 0x50, 0xca, 0x13, 0x42, 0x32, 0x9c, 0x5e, 0x94, 0xf2, 0xa5, 0x0d, 0x21, 0xa1, 0x94, 0x27,
		0x72, 0x94, 0x63, 0x12, 0x8f, 0x52, 0x1e, 0x52, 0x0f, 0xa9, 0x87, 0xd4, 0x17, 0x8d, 0xd4, 0xa3,
		0x94, 0x2f, 0x32, 0xdf, 0xe6, 0xca, 0xb6, 0xb4, 0x7c, 0x1b, 0xa5, 0x3c, 0x8c, 0x3b, 0x79, 0xc6,
		0x8d, 0x52, 0x5e, 0x50, 0x29, 0x4f, 0x87, 0x27, 0x5b, 0x53, 0x99, 0xd4, 0x14, 0x26, 0xdd, 0xdf,
		0xe9, 0xb3, 0x4f, 0x77, 0xa7, 0xac, 0x75, 0x77, 0x32, 0x6b, 0x34, 0xa4, 0xbb, 0x04, 0x72, 0xd1,
		0xd9, 0x69, 0x77, 0xa6, 0xf5, 0x95, 0x5c, 0x6f, 0xa7, 0x5d, 0xe3, 0x86, 0x5a, 0x74, 0x77, 0xb2,
		0x11, 0xb9, 0xa0, 0xbb, 0x93, 0x45, 0x00, 0xa4, 0xbb, 0x53, 0xd2, 0xe1, 0x49, 0xba, 0x3b, 0xd1,
		0xdd, 0x29, 0x61, 0x16, 0x4c, 0x77, 0xa7, 0x2c, 0x6c, 0x7c, 0x1b, 0x00, 0x60, 0x0f, 0x08, 0x6c,
		0x01, 0x82, 0x75, 0x60, 0xb0, 0x0e, 0x10, 0x56, 0x81, 0x22, 0x9b, 0x11, 0x11, 0x72, 0x56, 0x13,
		0x0a, 0x97, 0x72, 0x09, 0x9a, 0x28, 0x08, 0x25, 0x06, 0x46, 0x89, 0x81, 0x52, 0x22, 0xe0, 0x24,
		0x0b, 0x52, 0xc2, 0x60, 0x35, 0x1d, 0x01, 0x72, 0x56, 0x97, 0x9a, 0xe6, 0x02, 0x34, 0x79, 0x58,
		0x5f, 0x78, 0x0c, 0x17, 0xa0, 0xf1, 0xa6, 0x9e, 0x9c, 0xd5, 0x7c, 0xac, 0x01, 0xee, 0x41, 0xb3,
		0xb2, 0x87, 0xc8, 0x59, 0x85, 0xca, 0x43, 0xe5, 0xa1, 0xf2, 0x50, 0xf9, 0xb5, 0xd6, 0x3b, 0x39,
		0xab, 0x22, 0xef, 0x4a, 0xce, 0x2a, 0xc7, 0x01, 0xc7, 0x01, 0xc7, 0x41, 0xde, 0x8f, 0x03, 0x72,
		0x56, 0x09, 0x21, 0x19, 0x4e, 0x2f, 0x39, 0xab, 0xa5, 0x0d, 0x21, 0x91, 0xb3, 0x4a, 0xe4, 0x28,
		0xc7, 0x24, 0x9e, 0x9c, 0x55, 0x48, 0x3d, 0xa4, 0x1e, 0x52, 0x5f, 0x34, 0x52, 0x4f, 0xce, 0x6a,
		0x91, 0xf9, 0x36, 0x57, 0xb6, 0xa5, 0xe5, 0xdb, 0xe4, 0xac, 0xc2, 0xb8, 0x93, 0x67, 0xdc, 0xe4,
		0xac, 0xea, 0x24, 0xb6, 0xcd, 0x64, 0x59, 0xd1, 0xdf, 0x49, 0x8b, 0xc6, 0xd0, 0xdf, 0x29, 0xab,
		0xfe, 0x0f, 0x5a, 0xf9, 0x54, 0xfc, 0x1b, 0xb4, 0xf2, 0x02, 0x9b, 0x01, 0xad, 0x3c, 0xc1, 0x17,
		0x82, 0x2f, 0x04, 0x5f, 0x6c, 0xad, 0x77, 0xb4, 0xf2, 0x04, 0x5e, 0x08, 0xbc, 0x10, 0x78, 0xd1,
		0x9a, 0x7a, 0xb4, 0xf2, 0xc4, 0x5f, 0x2c, 0xee, 0x21, 0xb4, 0xf2, 0x50, 0x79, 0xa8, 0x3c, 0x54,
		0x1e, 0x2a, 0xbf, 0xd6, 0x7a, 0x47, 0x2b, 0x2f, 0xf2, 0xae, 0x68, 0xe5, 0x39, 0x0e, 0x38, 0x0e,
		0x38, 0x0e, 0xf2, 0x7e, 0x1c, 0xa0, 0x95, 0x27, 0x84, 0x64, 0x38, 0xbd, 0x68, 0xe5, 0x4b, 0x1b,
		0x42, 0x42, 0x2b, 0x4f, 0xe4, 0x28, 0xc7, 0x24, 0x1e, 0xad, 0x3c, 0xa4, 0x1e, 0x52, 0x0f, 0xa9,
		0x2f, 0x1a, 0xa9, 0x47, 0x2b, 0x5f, 0x64, 0xbe, 0xcd, 0x95, 0x6d, 0x69, 0xf9, 0x36, 0x5a, 0x79,
		0x18, 0x77, 0xf2, 0x8c, 0x1b, 0xad, 0xbc, 0xa8, 0x56, 0x9e, 0x0e, 0x4f, 0xb6, 0x26, 0x33, 0xb9,
		0x49, 0x4c, 0xb8, 0xc7, 0xd3, 0xee, 0xc9, 0xe4, 0x5b, 0xd0, 0xe5, 0x29, 0x8b, 0x6b, 0x23, 0xa1,
		0x3e, 0x4f, 0x8f, 0xcb, 0x20, 0x27, 0x9d, 0x9e, 0x26, 0x6d, 0xb0, 0x24, 0xfb, 0x3c, 0x99, 0xb5,
		0xd6, 0xa2, 0xcb, 0x93, 0x8d, 0xf8, 0x05, 0x5d, 0x9e, 0x2c, 0x02, 0x20, 0x5d, 0x9e, 0x92, 0x0e,
		0x52, 0xd2, 0xe5, 0x89, 0x2e, 0x4f, 0x09, 0x33, 0x61, 0xba, 0x3c, 0x65, 0x61, 0xe3, 0xdb, 0x00,
		0x00, 0x7b, 0x40, 0x60, 0x0b, 0x10, 0xac, 0x03, 0x83, 0x75, 0x80, 0xb0, 0x0a, 0x14, 0xd9, 0x8c,
		0x8b, 0x90, 0xb9, 0x9a, 0x50, 0xd0, 0x94, 0xab, 0xd0, 0x44, 0x41, 0x28, 0x31, 0x30, 0x4a, 0x0c,
		0x94, 0x12, 0x01, 0x27, 0x59, 0x90, 0x12, 0x06, 0xab, 0xe9, 0x08, 0x90, 0xb9, 0xba, 0xd4, 0x34,
		0xd7, 0xa0, 0xc9, 0xc3, 0xfa, 0xc2, 0x63, 0xb8, 0x06, 0x8d, 0x37, 0xf5, 0x64, 0xae, 0xe6, 0x63,
		0x0d, 0x70, 0x1b, 0x9a, 0x95, 0x3d, 0x44, 0xe6, 0x2a, 0x54, 0x1e, 0x2a, 0x0f, 0x95, 0x87, 0xca,
		0xaf, 0xb5, 0xde, 0xc9, 0x5c, 0x15, 0x79, 0x57, 0x32, 0x57, 0x39, 0x0e, 0x38, 0x0e, 0x38, 0x0e,
		0xf2, 0x7e, 0x1c, 0x90, 0xb9, 0x4a, 0x08, 0xc9, 0x70, 0x7a, 0xc9, 0x5c, 0x2d, 0x6d, 0x08, 0x89,
		0xcc, 0x55, 0x22, 0x47, 0x39, 0x26, 0xf1, 0x64, 0xae, 0x42, 0xea, 0x21, 0xf5, 0x90, 0xfa, 0xa2,
		0x91, 0x7a, 0x32, 0x57, 0x8b, 0xcc, 0xb7, 0xb9, 0xb2, 0x2d, 0x2d, 0xdf, 0x26, 0x73, 0x15, 0xc6,
		0x9d, 0x3c, 0xe3, 0x26, 0x73, 0x55, 0x2f, 0xb1, 0x6d, 0x9c, 0x63, 0x45, 0x8f, 0x27, 0x2d, 0x12,
		0x43, 0x8f, 0xa7, 0xac, 0x7a, 0x3f, 0x28, 0xe5, 0x53, 0xf1, 0x6e, 0x50, 0xca, 0x0b, 0x6c, 0x06,
		0x94, 0xf2, 0x84, 0x5e, 0x08, 0xbd, 0x10, 0x7a, 0xb1, 0xb5, 0xde, 0x51, 0xca, 0x13, 0x76, 0x21,
		0xec, 0x42, 0xd8, 0x45, 0x6b, 0xea, 0x51, 0xca, 0x13, 0x7d, 0xb1, 0xb8, 0x87, 0x50, 0xca, 0x43,
		0xe5, 0xa1, 0xf2, 0x50, 0x79, 0xa8, 0xfc, 0x5a, 0xeb, 0x1d, 0xa5, 0xbc, 0xc8, 0xbb, 0xa2, 0x94,
		0xe7, 0x38, 0xe0, 0x38, 0xe0, 0x38, 0xc8, 0xfb, 0x71, 0x80, 0x52, 0x9e, 0x10, 0x92, 0xe1, 0xf4,
		0xa2, 0x94, 0x2f, 0x6d, 0x08, 0x09, 0xa5, 0x3c, 0x91, 0xa3, 0x1c, 0x93, 0x78, 0x94, 0xf2, 0x90,
		0x7a, 0x48, 0x3d, 0xa4, 0xbe, 0x68, 0xa4, 0x1e, 0xa5, 0x7c, 0x91, 0xf9, 0x36, 0x57, 0xb6, 0xa5,
		0xe5, 0xdb, 0x28, 0xe5, 0x61, 0xdc, 0xc9, 0x33, 0x6e, 0x94, 0xf2, 0x82, 0x4a, 0x79, 0x3a, 0x3c,
		0xd9, 0x9a, 0xca, 0xa4, 0xa6, 0x30, 0xe9, 0xfe, 0x4e, 0x9f, 0x7d, 0xba, 0x3b, 0x65, 0xad, 0xbb,
		0x93, 0x59, 0xa3, 0x21, 0xdd, 0x25, 0x90, 0xe5, 0xce, 0x4e, 0x61, 0x10, 0x29, 0xa7, 0xd7, 0x6d,
		0x7b, 0xcd, 0x1f, 0x83, 0x21, 0xaa, 0x99, 0xf7, 0x75, 0x5a, 0xb0, 0x48, 0x57, 0x27, 0xba, 0x3a,
		0xa5, 0x14, 0x69, 0xa0, 0xab, 0x13, 0x5d, 0x9d, 0xd2, 0x0b, 0x3b, 0xd2, 0xd5, 0x89, 0xae, 0x4e,
		0xab, 0x0d, 0xd1, 0xd5, 0x49, 0xc2, 0x20, 0xb9, 0xaa, 0xe4, 0xaa, 0xe6, 0x2b, 0x12, 0x42, 0xae,
		0x6a, 0x42, 0x61, 0x52, 0x2e, 0x3f, 0x13, 0x05, 0xa1, 0xc4, 0xc0, 0x28, 0x31, 0x50, 0x4a, 0x04,
		0x9c, 0x64, 0x41, 0x4a, 0x18, 0xac, 0xa6, 0x23, 0x40, 0xae, 0xea, 0x52, 0xd3, 0x5c, 0x7c, 0x26,
		0x0f, 0xeb, 0x0b, 0x8f, 0xe1, 0xe2, 0x33, 0xde, 0xd4, 0x93, 0xab, 0x9a, 0x8f, 0x35, 0xc0, 0xfd,
		0x67, 0x56, 0xf6, 0x10, 0xb9, 0xaa, 0x50, 0x79, 0xa8, 0x3c, 0x54, 0x1e, 0x2a, 0xbf, 0xd6, 0x7a,
		0x27, 0x57, 0x55, 0xe4, 0x5d, 0xc9, 0x55, 0xe5, 0x38, 0xe0, 0x38, 0xe0, 0x38, 0xc8, 0xfb, 0x71,
		0x40, 0xae, 0x2a, 0x21, 0x24, 0xc3, 0xe9, 0x25, 0x57, 0xb5, 0xb4, 0x21, 0x24, 0x72, 0x55, 0x89,
		0x1c, 0xe5, 0x98, 0xc4, 0x93, 0xab, 0x0a, 0xa9, 0x87, 0xd4, 0x43, 0xea, 0x8b, 0x46, 0xea, 0xc9,
		0x55, 0x2d, 0x32, 0xdf, 0xe6, 0xca, 0xb6, 0xb4, 0x7c, 0x9b, 0x5c, 0x55, 0x18, 0x77, 0xf2, 0x8c,
		0x9b, 0x5c, 0xd5, 0x18, 0x09, 0x6d, 0x4f, 0x33, 0xac, 0xe8, 0xe9, 0xa4, 0x45, 0x61, 0xe8, 0xe9,
		0x94, 0x55, 0xdf, 0x07, 0x9d, 0x7c, 0x2a, 0xbe, 0x0d, 0x3a, 0x79, 0x81, 0xcd, 0x80, 0x4e, 0x9e,
		0xc0, 0x0b, 0x81, 0x17, 0x02, 0x2f, 0xb6, 0xd6, 0x3b, 0x3a, 0x79, 0x82, 0x2e, 0x04, 0x5d, 0x08,
		0xba, 0x68, 0x4d, 0x3d, 0x3a, 0x79, 0x62, 0x2f, 0x16, 0xf7, 0x10, 0x3a, 0x79, 0xa8, 0x3c, 0x54,
		0x1e, 0x2a, 0x0f, 0x95, 0x5f, 0x6b, 0xbd, 0xa3, 0x93, 0x17, 0x79, 0x57, 0x74, 0xf2, 0x1c, 0x07,
		0x1c, 0x07, 0x1c, 0x07, 0x79, 0x3f, 0x0e, 0xd0, 0xc9, 0x13, 0x42, 0x32, 0x9c, 0x5e, 0x74, 0xf2,
		0xa5, 0x0d, 0x21, 0xa1, 0x93, 0x27, 0x72, 0x94, 0x63, 0x12, 0x8f, 0x4e, 0x1e, 0x52, 0x0f, 0xa9,
		0x87, 0xd4, 0x17, 0x8d, 0xd4, 0xa3, 0x93, 0x2f, 0x32, 0xdf, 0xe6, 0xca, 0xb6, 0xb4, 0x7c, 0x1b,
		0x9d, 0x3c, 0x8c, 0x3b, 0x79, 0xc6, 0x8d, 0x4e, 0x5e, 0x4c, 0x27, 0x4f, 0x47, 0x27, 0x5b, 0x13,
		0x99, 0xcc, 0x04, 0x26, 0xd4, 0xcf, 0xe9, 0x22, 0x88, 0x54, 0x63, 0xf8, 0x15, 0x8e, 0x7a, 0xf7,
		0x35, 0xba, 0x39, 0x65, 0x6d, 0x4d, 0x58, 0xee, 0xe5, 0x34, 0x3f, 0xfd, 0x39, 0xea, 0xe4, 0xb4,
		0x2b, 0xde, 0xc9, 0x69, 0x97, 0x4e, 0x4e, 0x74, 0x72, 0x4a, 0x2b, 0xbe, 0x40, 0x27, 0x27, 0x3a,
		0x39, 0xa5, 0x17, 0x6c, 0xa4, 0x93, 0x13, 0x9d, 0x9c, 0x56, 0x1b, 0xa2, 0x93, 0x93, 0x84, 0x41,
		0x32, 0x54, 0xc9, 0x50, 0xcd, 0x57, 0xfc, 0x83, 0x0c, 0xd5, 0x84, 0x82, 0xa3, 0x5c, 0x79, 0x26,
		0x0a, 0x42, 0x89, 0x81, 0x51, 0x62, 0xa0, 0x94, 0x08, 0x38, 0xc9, 0x82, 0x94, 0x30, 0x58, 0x4d,
		0x47, 0x80, 0x0c, 0xd5, 0xa5, 0xa6, 0xb9, 0xee, 0x4c, 0x1e, 0xd6, 0x17, 0x1e, 0xc3, 0x75, 0x67,
		0xbc, 0xa9, 0x27, 0x43, 0x35, 0x1f, 0x6b, 0x80, 0x5b, 0xcf, 0xac, 0xec, 0x21, 0x32, 0x54, 0xa1,
		0xf2, 0x50, 0x79, 0xa8, 0x3c, 0x54, 0x7e, 0xad, 0xf5, 0x4e, 0x86, 0xaa, 0xc8, 0xbb, 0x92, 0xa1,
		0xca, 0x71, 0xc0, 0x71, 0xc0, 0x71, 0x90, 0xf7, 0xe3, 0x80, 0x0c, 0x55, 0x42, 0x48, 0x86, 0xd3,
		0x4b, 0x86, 0x6a, 0x69, 0x43, 0x48, 0x64, 0xa8, 0x12, 0x39, 0xca, 0x31, 0x89, 0x27, 0x43, 0x15,
		0x52, 0x0f, 0xa9, 0x87, 0xd4, 0x17, 0x8d, 0xd4, 0x93, 0xa1, 0x5a, 0x64, 0xbe, 0xcd, 0x95, 0x6d,
		0x69, 0xf9, 0x36, 0x19, 0xaa, 0x30, 0xee, 0xe4, 0x19, 0x37, 0x19, 0xaa, 0xfa, 0xc9, 0x6c, 0xbb,
		0x74, 0x72, 0xd2, 0xa2, 0x30, 0x74, 0x72, 0xca, 0xaa, 0xef, 0x83, 0x4e, 0x3e, 0x15, 0xdf, 0x06,
		0x9d, 0xbc, 0xc0, 0x66, 0x40, 0x27, 0x4f, 0xe0, 0x85, 0xc0, 0x0b, 0x81, 0x17, 0x5b, 0xeb, 0x1d,
		0x9d, 0x3c, 0x41, 0x17, 0x82, 0x2e, 0x04, 0x5d, 0xb4, 0xa6, 0x1e, 0x9d, 0x3c, 0xb1, 0x17, 0x8b,
		0x7b, 0x08, 0x9d, 0x3c, 0x54, 0x1e, 0x2a, 0x0f, 0x95, 0x87, 0xca, 0xaf, 0xb5, 0xde, 0xd1, 0xc9,
		0x8b, 0xbc, 0x2b, 0x3a, 0x79, 0x8e, 0x03, 0x8e, 0x03, 0x8e, 0x83, 0xbc, 0x1f, 0x07, 0xe8, 0xe4,
		0x09, 0x21, 0x19, 0x4e, 0x2f, 0x3a, 0xf9, 0xd2, 0x86, 0x90, 0xd0, 0xc9, 0x13, 0x39, 0xca, 0x31,
		0x89, 0x47, 0x27, 0x0f, 0xa9, 0x87, 0xd4, 0x43, 0xea, 0x8b, 0x46, 0xea, 0xd1, 0xc9, 0x17, 0x99,
		0x6f, 0x73, 0x65, 0x5b, 0x5a, 0xbe, 0x8d, 0x4e, 0x1e, 0xc6, 0x9d, 0x3c, 0xe3, 0x46, 0x27, 0x2f,
		0xa6, 0x93, 0xa7, 0x93, 0x93, 0xad, 0x89, 0x4c, 0x66, 0x02, 0xd3, 0xe8, 0xe4, 0xb4, 0x4b, 0x27,
		0xa7, 0xac, 0xad, 0x89, 0x24, 0x3b, 0x39, 0xed, 0x66, 0xba, 0x93, 0x93, 0x51, 0x96, 0x8c, 0x48,
		0x56, 0x8c, 0x58, 0xcf, 0xa6, 0x2a, 0x3d, 0x9b, 0x2c, 0x46, 0x1e, 0xe8, 0xd9, 0xf4, 0xf8, 0xcd,
		0x8d, 0x7b, 0x36, 0x0d, 0xb8, 0xf3, 0xbd, 0x92, 0xeb, 0xd6, 0x34, 0xb6, 0x27, 0xd3, 0xa7, 0x69,
		0x93, 0x3e, 0x4d, 0x29, 0x84, 0x0e, 0xe9, 0xd3, 0x94, 0x01, 0x4e, 0x2b, 0x16, 0xda, 0xb3, 0x20,
		0xd7, 0x12, 0x92, 0x67, 0x19, 0x50, 0x48, 0x83, 0x53, 0x6d, 0xc2, 0xc4, 0x9c, 0x31, 0x6f, 0x92,
		0xc2, 0xbd, 0x39, 0xb3, 0xc0, 0x1f, 0xf0, 0x07, 0xfc, 0x65, 0x0a, 0xfe, 0xbc, 0x96, 0xf2, 0x23,
		0x2f, 0xfa, 0x11, 0xa8, 0x5b, 0x49, 0x08, 0x14, 0xb8, 0xbb, 0xa8, 0x1c, 0x8d, 0xbf, 0xda, 0x7b,
		0x37, 0xb4, 0x50, 0x27, 0xe0, 0xe0, 0xe3, 0xd1, 0xf5, 0xc5, 0xe0, 0x3f, 0x2e, 0xff, 0xdd, 0xa8,
		0x4b, 0x2d, 0xe5, 0x61, 0x78, 0x37, 0x14, 0xbd, 0x5f, 0xb1, 0x74, 0x55, 0x7e, 0xbc, 0xfd, 0xa5,
		0x71, 0x7a, 0x7d, 0xd4, 0xf8, 0xb2, 0x7b, 0xfd, 0xf9, 0xf4, 0xe8, 0xf0, 0xe0, 0xe2, 0xb2, 0x92,
		0x45, 0x05, 0x81, 0xad, 0xb7, 0x3f, 0x3a, 0xfd, 0xe7, 0xc5, 0xe5, 0xc1, 0x65, 0xfd, 0xfa, 0xa2,
		0xf1, 0xb1, 0x54, 0x2f, 0x3e, 0x99, 0xf6, 0x5a, 0x29, 0xa7, 0xfd, 0x71, 0xd1, 0x9f, 0x7c, 0x3e,
		0xbe, 0x2c, 0xdd, 0xfb, 0x97, 0x7e, 0xbb, 0x97, 0x6e, 0xb2, 0x8f, 0x0f, 0xde, 0xd7, 0x8f, 0xeb,
		0x1f, 0xca, 0x38, 0xe9, 0x17, 0xe7, 0x97, 0xf5, 0xeb, 0xc6, 0xd9, 0xf1, 0xd1, 0xe1, 0xbf, 0x87,
		0x5b, 0xbe, 0x54, 0x0b, 0xbe, 0x3a, 0x00, 0xba, 0x2f, 0x8d, 0xe3, 0x8b, 0x92, 0xad, 0xf8, 0x5a,
		0x99, 0x57, 0xfc, 0xf0, 0xfd, 0x3f, 0x1e, 0x9f, 0xfd, 0xeb, 0xa2, 0x51, 0x3f, 0x2c, 0xf1, 0x56,
		0xaf, 0x95, 0x93, 0xca, 0x7e, 0x69, 0x9c, 0x96, 0x6e, 0xb5, 0x97, 0x70, 0x97, 0x7f, 0x69, 0x9c,
		0x96, 0x74, 0x9b, 0x8f, 0x4e, 0xb5, 0x7a, 0xc9, 0xd6, 0xf9, 0x8c, 0xcb, 0x66, 0xc3, 0x69, 0x11,
		0xb1, 0x74, 0x95, 0x76, 0x5c, 0x2d, 0x95, 0x98, 0xb9, 0xf2, 0xdd, 0x9b, 0xb6, 0x6a, 0xc9, 0x45,
		0xcb, 0x27, 0x06, 0x0d, 0xa3, 0x84, 0xc2, 0x55, 0x2e, 0x88, 0xbb, 0xc7, 0xb2, 0x48, 0xdc, 0x9d,
		0xb8, 0xfb, 0xf3, 0xeb, 0x8d, 0x6b, 0xc7, 0x8d, 0x71, 0x69, 0x21, 0x99, 0xca, 0x9d, 0xb3, 0x25,
		0x84, 0x24, 0xaa, 0x74, 0x0a, 0x95, 0xfe, 0x05, 0xf4, 0x00, 0xbd, 0xbc, 0x82, 0x9e, 0x54, 0xa9,
		0xde, 0x8a, 0xe7, 0x87, 0x91, 0xdb, 0x96, 0x60, 0x4a, 0x0b, 0x2b, 0xf8, 0xd1, 0xb4, 0x6c, 0xc5,
		0xef, 0x4d, 0xe9, 0x8a, 0xdf, 0x9b, 0x54, 0xfc, 0x16, 0xf4, 0x8d, 0xa8, 0xf8, 0x6d, 0xdf, 0xa7,
		0x93, 0xca, 0x27, 0x11, 0xcf, 0xc6, 0xb4, 0x57, 0x34, 0xd7, 0x42, 0xb1, 0x5c, 0x4b, 0x19, 0x97,
		0x16, 0x72, 0x5b, 0x6d, 0x66, 0x58, 0x5a, 0x4e, 0xaf, 0xb3, 0x9d, 0x51, 0x99, 0x44, 0x32, 0x9d,
		0x85, 0x0c, 0x4a, 0xab, 0x99, 0x93, 0x49, 0x4d, 0xa9, 0xed, 0xe2, 0xb6, 0x89, 0xcc, 0x6d, 0x46,
		0x13, 0x0f, 0xaf, 0x0a, 0xd4, 0x4e, 0x26, 0x50, 0x4d, 0xe5, 0xdd, 0xdb, 0xe0, 0x98, 0x53, 0xcb,
		0x50, 0x4c, 0x28, 0x26, 0x14, 0x13, 0x8a, 0x09, 0xc5, 0x84, 0x62, 0x42, 0x31, 0xa1, 0x98, 0x50,
		0xcc, 0x72, 0x52, 0x4c, 0xa7, 0x17, 0x4c, 0x92, 0xd5, 0xed, 0xb1, 0xcd, 0xd9, 0x87, 0x40, 0x3c,
		0x21, 0x9e, 0x10, 0x4f, 0x88, 0x27, 0xc4, 0x13, 0xe2, 0x09, 0xf1, 0x84, 0x78, 0x42, 0x3c, 0xcb,
		0x45, 0x3c, 0xc3, 0xd1, 0x61, 0x2a, 0xdd, 0x29, 0x7b, 0x60, 0x15, 0x6a, 0x09, 0xb5, 0x84, 0x5a,
		0x42, 0x2d, 0xa1, 0x96, 0x50, 0x4b, 0xa8, 0x25, 0xd4, 0x12, 0x6a, 0x99, 0x23, 0x6a, 0x49, 0x79,
		0xd9, 0x65, 0xa5, 0x44, 0x23, 0x37, 0x52, 0x6f, 0x85, 0x64, 0xe0, 0x1b, 0x6b, 0x16, 0x14, 0x6d,
		0x4c, 0x1e, 0x47, 0xf5, 0xd8, 0xb4, 0xa6, 0x3c, 0xcb, 0x55, 0x5c, 0xfb, 0xa1, 0x72, 0x3a, 0xfd,
		0x76, 0xe4, 0xf5, 0xda, 0xca, 0x19, 0xbc, 0x6f, 0x68, 0x5e, 0xd2, 0x75, 0x89, 0xcd, 0x94, 0xeb,
		0xbb, 0x6e, 0x52, 0xdf, 0xd5, 0xa2, 0xb3, 0x45, 0x7d, 0xd7, 0xc7, 0x6f, 0x6e, 0x5c, 0xdf, 0xb5,
		0x39, 0x59, 0xb3, 0x42, 0x59, 0x47, 0x63, 0x7b, 0xe4, 0x1c, 0x25, 0x17, 0x2d, 0x21, 0xe7, 0x88,
		0x9c, 0xa3, 0xd5, 0x86, 0xa4, 0x72, 0xb3, 0x17, 0xd6, 0xaf, 0x4c, 0x8e, 0xf6, 0xe3, 0x0b, 0xcb,
		0xe6, 0x6a, 0x5b, 0x72, 0x33, 0x09, 0xc8, 0x12, 0x90, 0x4d, 0x0e, 0x82, 0x64, 0x3d, 0xf6, 0xec,
		0x07, 0x64, 0xe5, 0x72, 0xc1, 0x17, 0x98, 0xc4, 0x16, 0xa1, 0x8a, 0x0c, 0x87, 0x2a, 0x16, 0x5d,
		0xb8, 0xb7, 0x63, 0x22, 0x99, 0xc7, 0x6a, 0x28, 0x83, 0xbd, 0x2f, 0x57, 0x0a, 0xc5, 0x1c, 0xc1,
		0xa1, 0xd3, 0xd0, 0x69, 0xe8, 0xb4, 0xcc, 0x72, 0x13, 0xf2, 0x97, 0xed, 0xf8, 0xcd, 0xc2, 0x1b,
		0x1e, 0xd2, 0x0b, 0xe9, 0x85, 0xf4, 0xca, 0x02, 0xc8, 0xd4, 0xa0, 0xdb, 0x6e, 0x77, 0xff, 0x7a,
		0x24, 0x3d, 0x6e, 0x68, 0xaf, 0x1b, 0xfc, 0xe2, 0xa3, 0x84, 0x97, 0x81, 0x25, 0xdf, 0xdd, 0x92,
		0x0f, 0x6f, 0x0d, 0xd6, 0x6c, 0xc2, 0x9b, 0x7d, 0x98, 0xb3, 0x0d, 0x77, 0x89, 0xc1, 0x5e, 0x62,
		0xf0, 0x97, 0x08, 0x0c, 0xca, 0xc2, 0xa1, 0x30, 0x2c, 0xda, 0x8b, 0x09, 0x24, 0x10, 0x1b, 0xb0,
		0x14, 0x23, 0x90, 0x9f, 0x30, 0xda, 0x22, 0x1b, 0xc6, 0x12, 0x06, 0x3e, 0xb4, 0x48, 0x40, 0x41,
		0x30, 0x0e, 0x24, 0x22, 0xc7, 0x30, 0x69, 0x89, 0xba, 0x72, 0xa7, 0x99, 0xb4, 0x48, 0x4d, 0xcc,
		0x13, 0xa9, 0xe2, 0x89, 0xe0, 0x89, 0xe0, 0x89, 0xe0, 0x89, 0xe0, 0x89, 0xe0, 0x89, 0xe0, 0x89,
		0xe0, 0x89, 0xe0, 0x89, 0xe0, 0x89, 0xe4, 0xc4, 0x13, 0x31, 0x50, 0xe9, 0x5a, 0x70, 0x44, 0xb8,
		0x90, 0x5e, 0x7f, 0xea, 0x12, 0x12, 0xd1, 0x7f, 0x0e, 0xd5, 0xc9, 0xf8, 0xe1, 0x8d, 0xc1, 0xb3,
		0xaf, 0xeb, 0xc6, 0x40, 0x9e, 0xce, 0x55, 0xb8, 0x8c, 0x87, 0x2a, 0xea, 0x99, 0x8a, 0x5f, 0x86,
		0x57, 0xb9, 0x0c, 0xcf, 0x00, 0xe5, 0xe2, 0x32, 0x3c, 0x79, 0x0f, 0x12, 0x6d, 0x29, 0xda, 0x52,
		0x82, 0x5b, 0x04, 0xb7, 0xd0, 0x96, 0x42, 0xe5, 0x73, 0x45, 0xe5, 0x05, 0x1c, 0x30, 0x32, 0x54,
		0xa5, 0x66, 0xa3, 0x62, 0xe4, 0x5f, 0xc4, 0xf6, 0xa5, 0x12, 0xcb, 0x8e, 0x7d, 0x61, 0x71, 0x7a,
		0x07, 0x67, 0xda, 0x30, 0x9e, 0x3e, 0x1e, 0x56, 0x67, 0x38, 0x04, 0x31, 0x6d, 0x1c, 0x7b, 0x61,
		0x74, 0x10, 0x45, 0x7a, 0x5c, 0xb0, 0x72, 0xe2, 0xf9, 0xf5, 0xb6, 0x1a, 0x9c, 0x4a, 0xa1, 0x1e,
		0x63, 0xa9, 0x9c, 0xb8, 0xdf, 0x67, 0x2c, 0x6c, 0xfd, 0x56, 0xab, 0xed, 0xee, 0xd5, 0x6a, 0x9b,
		0x7b, 0xdb, 0x7b, 0x9b, 0xfb, 0x3b, 0x3b, 0x5b, 0xbb, 0x5b, 0x1a, 0x15, 0x1b, 0x2a, 0x67, 0x41,
		0x4b, 0x05, 0xaa, 0xf5, 0x7e, 0x30, 0x3c, 0x7e, 0xbf, 0xdd, 0xb6, 0x3a, 0x0b, 0x86, 0x9b, 0x4b,
		0x6a, 0x53, 0x69, 0xec, 0xa0, 0x35, 0x76, 0x4e, 0xbc, 0x8d, 0xb2, 0xfe, 0x72, 0x5f, 0xef, 0x37,
		0xd7, 0x9c, 0x0a, 0xdd, 0x29, 0x30, 0x1c, 0xfa, 0xf5, 0xc6, 0xe6, 0xf9, 0x37, 0x5d, 0xe3, 0x2d,
		0x2b, 0x6e, 0xaf, 0xd7, 0xfe, 0x11, 0xb7, 0xca, 0xee, 0xe3, 0x8d, 0xdb, 0xec, 0xa7, 0xd7, 0x1c,
		0xd3, 0x78, 0x11, 0x92, 0xd8, 0x6e, 0x8b, 0x8e, 0x5b, 0x32, 0xeb, 0x76, 0x04, 0xbd, 0x6e, 0x3b,
		0xc6, 0x92, 0xd7, 0xf5, 0x2b, 0x8c, 0xfd, 0x06, 0x63, 0xbf, 0xe0, 0x29, 0xef, 0x1f, 0xbe, 0x78,
		0x4a, 0xfb, 0x2c, 0x6e, 0xcc, 0x40, 0x57, 0x28, 0x6f, 0x26, 0x88, 0xd7, 0x0c, 0xee, 0x69, 0x7b,
		0xde, 0x26, 0x1e, 0xb6, 0xc1, 0x92, 0x96, 0x72, 0x99, 0xc5, 0x5c, 0x63, 0x31, 0x17, 0xd8, 0x6c,
		0xc9, 0x27, 0xc3, 0xbd, 0x74, 0xc3, 0x67, 0x95, 0xd6, 0x28, 0x0c, 0xe5, 0xa8, 0xef, 0xbd, 0x6e,
		0x10, 0x99, 0x16, 0x4e, 0x9f, 0xae, 0x9f, 0xe5, 0x66, 0x75, 0x0b, 0x4a, 0x3c, 0x86, 0xca, 0xce,
		0xeb, 0xff, 0x57, 0x3f, 0xbc, 0xbc, 0x3e, 0x3f, 0xfb, 0x7c, 0x59, 0x37, 0xac, 0xa8, 0xb2, 0x59,
		0x90, 0x8a, 0x2a, 0x9a, 0xfb, 0x54, 0x3a, 0xc4, 0x95, 0xbf, 0x92, 0x2a, 0x7a, 0xfb, 0x38, 0x1d,
		0x97, 0xd9, 0x38, 0x06, 0xb5, 0xb0, 0x33, 0x47, 0x5b, 0xd2, 0x89, 0x06, 0x86, 0x0d, 0x56, 0xcf,
		0xe4, 0x70, 0xab, 0x19, 0xd8, 0xa8, 0xfb, 0xfd, 0xce, 0xe0, 0xe5, 0x1e, 0x32, 0x5c, 0x24, 0x6a,
		0x32, 0x6c, 0x5e, 0xc7, 0x0a, 0x4e, 0xce, 0x9b, 0x05, 0x27, 0xc1, 0x49, 0x70, 0x12, 0x9c, 0xcc,
		0x21, 0x4e, 0x0a, 0xf3, 0x48, 0x11, 0xfe, 0x08, 0x90, 0x01, 0x64, 0xe5, 0x05, 0xb2, 0xb6, 0x72,
		0x6f, 0x03, 0x75, 0x2b, 0x01, 0x5e, 0x06, 0x35, 0xc4, 0x2b, 0x8d, 0x69, 0x58, 0x73, 0x34, 0x11,
		0xef, 0x82, 0x6e, 0x3f, 0xf2, 0xfc, 0xbb, 0xf1, 0xde, 0x9e, 0xfe, 0xf5, 0x18, 0x6f, 0x5b, 0xea,
		0xd6, 0xf3, 0xbd, 0xc8, 0xeb, 0xfa, 0xe1, 0xea, 0x7f, 0x9a, 0xfe, 0xcb, 0x30, 0x66, 0x9c, 0xe8,
		0xfc, 0x18, 0x5d, 0x54, 0x4c, 0xad, 0x18, 0x5f, 0x58, 0x3c, 0x5a, 0xb2, 0x70, 0x71, 0x31, 0x35,
		0x3e, 0x7b, 0x81, 0x21, 0x24, 0x9b, 0xeb, 0x87, 0x2a, 0x30, 0xc5, 0x0b, 0x41, 0x71, 0xc6, 0x2c,
		0x98, 0x75, 0x47, 0x6f, 0xeb, 0xdc, 0x48, 0xf4, 0x76, 0xb3, 0x22, 0xc4, 0x98, 0x03, 0xb6, 0xe1,
		0x48, 0xe6, 0xeb, 0xde, 0x38, 0x11, 0x26, 0x22, 0xec, 0xa9, 0x89, 0x78, 0x68, 0x30, 0x11, 0x98,
		0x08, 0x4c, 0x04, 0x26, 0x02, 0x13, 0x81, 0x89, 0xc0, 0x44, 0x72, 0xc9, 0x44, 0x0a, 0x28, 0xde,
		0x99, 0x91, 0x63, 0x68, 0x55, 0xa4, 0x88, 0xa1, 0xb3, 0x89, 0x21, 0x91, 0xd0, 0xcb, 0xd3, 0x31,
		0xca, 0xcb, 0x31, 0xbe, 0xaa, 0xaf, 0x72, 0x55, 0x9f, 0x2a, 0x34, 0x71, 0x55, 0x1f, 0x7f, 0xfd,
		0x70, 0x55, 0x8f, 0xbf, 0x84, 0xbf, 0x94, 0x45, 0x7f, 0x89, 0x2b, 0x28, 0xae, 0xea, 0xc1, 0x49,
		0x70, 0x12, 0x9c, 0x04, 0x27, 0x2d, 0xe0, 0x24, 0x57, 0xf5, 0x00, 0x19, 0x40, 0x96, 0x25, 0x20,
		0x23, 0x40, 0x6e, 0x63, 0x7e, 0x08, 0x90, 0x9b, 0xad, 0x4a, 0x02, 0xe4, 0x52, 0xc0, 0xc6, 0x55,
		0xfd, 0xf2, 0x31, 0xe2, 0xaa, 0x1e, 0x26, 0x02, 0x13, 0x81, 0x89, 0xc0, 0x44, 0x60, 0x22, 0x30,
		0x11, 0x98, 0x88, 0x10, 0x13, 0x29, 0xf8, 0x55, 0xbd, 0x46, 0xc5, 0xa0, 0x72, 0x54, 0xc4, 0x88,
		0x5f, 0x5e, 0x62, 0xe3, 0xb9, 0xf2, 0x23, 0x03, 0x93, 0x8d, 0x91, 0xc5, 0x24, 0xcb, 0x6c, 0x84,
		0xc3, 0x72, 0x44, 0x4e, 0xb7, 0x37, 0x3c, 0xd3, 0x34, 0x2a, 0x6d, 0x3c, 0x31, 0x50, 0x8c, 0x62,
		0x1b, 0xf1, 0x6a, 0xfc, 0x15, 0xa7, 0xd6, 0x46, 0xac, 0x1a, 0x7b, 0x94, 0xda, 0xb0, 0xef, 0xac,
		0x49, 0xe9, 0x77, 0xf4, 0x8a, 0x56, 0x16, 0x5f, 0xbe, 0xa3, 0x55, 0x54, 0x32, 0xa3, 0xea, 0x9d,
		0x51, 0x9b, 0x91, 0xee, 0x5f, 0xbe, 0x49, 0x33, 0x93, 0x27, 0x4d, 0x4b, 0xc6, 0xd6, 0xcc, 0xef,
		0xa0, 0x37, 0x89, 0x92, 0x08, 0x54, 0x8f, 0x2d, 0x6f, 0x90, 0xc4, 0xa8, 0xfa, 0x6b, 0x5e, 0x63,
		0x24, 0x7d, 0xcf, 0x8f, 0x7e, 0x13, 0x88, 0x90, 0x98, 0x38, 0xd9, 0xe7, 0xae, 0x7f, 0x37, 0xf8,
		0x32, 0x5f, 0x8d, 0xa6, 0x53, 0xc0, 0x15, 0x3e, 0xf1, 0x7c, 0xc1, 0x82, 0xec, 0xb2, 0x35, 0xac,
		0xbf, 0xb8, 0xed, 0xbe, 0x12, 0xb4, 0xf7, 0x31, 0x70, 0x9b, 0x03, 0x3e, 0xfd, 0xc1, 0xbb, 0xf3,
		0x46, 0x31, 0x98, 0x4c, 0xb4, 0xde, 0x3b, 0x71, 0xbf, 0x67, 0x7e, 0x0a, 0xaa, 0x3b, 0x3b, 0x19,
		0x9e, 0x84, 0x94, 0x02, 0x22, 0x57, 0x59, 0x16, 0xd3, 0x79, 0xa1, 0x7b, 0xd3, 0x56, 0x4e, 0x4f,
		0xa9, 0xc0, 0x71, 0x43, 0xe7, 0xd6, 0x6b, 0x47, 0x2a, 0x10, 0x50, 0xd3, 0x2d, 0xb7, 0x6b, 0x4e,
		0x65, 0x4c, 0x8a, 0xe9, 0x43, 0x67, 0xa0, 0x33, 0xa5, 0xa5, 0x33, 0xe6, 0xc5, 0xe8, 0x0d, 0x8b,
		0xcf, 0x27, 0x03, 0x68, 0x81, 0xea, 0xb5, 0xdd, 0xe6, 0x14, 0x78, 0xcc, 0x91, 0xec, 0xa9, 0x41,
		0x20, 0x0c, 0x08, 0x03, 0xc2, 0x80, 0xb0, 0x2c, 0x44, 0xab, 0xd2, 0xb9, 0xa4, 0x9a, 0xbf, 0x74,
		0x20, 0xa5, 0x34, 0x8f, 0x29, 0xa5, 0x84, 0xa4, 0x05, 0x71, 0x95, 0x90, 0x74, 0x7c, 0x12, 0x44,
		0x48, 0x1a, 0x02, 0x04, 0x01, 0x8a, 0xb9, 0x5e, 0x08, 0x49, 0xcf, 0xc6, 0x43, 0x09, 0x49, 0x1b,
		0xc5, 0x33, 0x09, 0x49, 0x67, 0x60, 0x12, 0x08, 0x49, 0x2f, 0x0c, 0x33, 0x21, 0x69, 0xe8, 0x0c,
		0x74, 0x86, 0x78, 0x4e, 0x36, 0xe3, 0x39, 0x84, 0xa4, 0x81, 0x30, 0x20, 0x0c, 0x08, 0x23, 0x24,
		0xbd, 0x62, 0x51, 0x64, 0x21, 0x24, 0x4d, 0xea, 0xc4, 0x5a, 0xe3, 0x24, 0x95, 0x3d, 0x11, 0x36,
		0xdc, 0xe8, 0xdb, 0xd9, 0xd8, 0x66, 0x82, 0xf9, 0x13, 0x31, 0x45, 0xe8, 0x7a, 0xe2, 0x73, 0xb2,
		0x25, 0x36, 0xc8, 0x96, 0x78, 0x42, 0x9c, 0xe2, 0x66, 0x4b, 0xb8, 0xfd, 0xe8, 0x9b, 0xd3, 0x73,
		0xc3, 0x70, 0x3c, 0x84, 0x9a, 0x17, 0x54, 0xf3, 0x66, 0xf4, 0x2e, 0xaa, 0x36, 0xc9, 0x9d, 0x48,
		0x92, 0x7d, 0x95, 0xe9, 0xa2, 0x4a, 0x9b, 0x55, 0x3d, 0x3a, 0x36, 0x93, 0xf4, 0x6f, 0xbd, 0x35,
		0x3e, 0x07, 0xd7, 0xbf, 0x65, 0xe0, 0x42, 0xba, 0xa5, 0xc2, 0x66, 0xe0, 0xf5, 0xb4, 0xd8, 0xd0,
		0x4c, 0xf9, 0xb3, 0x47, 0x23, 0xec, 0x79, 0xf6, 0x7c, 0xc1, 0xf6, 0x7c, 0x18, 0x05, 0x9e, 0x7f,
		0x97, 0xf7, 0x9d, 0xae, 0x7c, 0xf7, 0xa6, 0xad, 0x0c, 0xce, 0xf6, 0x89, 0x81, 0xb8, 0xe2, 0x80,
		0xc7, 0x18, 0xce, 0x60, 0x9d, 0x01, 0x10, 0x00, 0x44, 0xd1, 0x00, 0x42, 0x3f, 0xc4, 0xa2, 0x19,
		0x5a, 0xb1, 0x83, 0x10, 0xed, 0x6e, 0xd3, 0x6d, 0xeb, 0x84, 0x7f, 0x1f, 0x8b, 0xf6, 0x4c, 0x2c,
		0xb0, 0xc9, 0xd9, 0xe4, 0x05, 0xdb, 0xe4, 0x6e, 0xe8, 0xf8, 0xfd, 0xce, 0x8d, 0xd6, 0x7d, 0xec,
		0x64, 0x81, 0x6b, 0x54, 0xa2, 0x32, 0x54, 0xb3, 0x98, 0x55, 0x79, 0x12, 0xb8, 0x23, 0x10, 0x91,
		0x4c, 0x48, 0xa9, 0x55, 0x24, 0x05, 0x12, 0x0f, 0x66, 0x65, 0xaf, 0x32, 0x37, 0xb4, 0xb5, 0xea,
		0x7e, 0x6d, 0x7f, 0x77, 0xaf, 0xba, 0xbf, 0x93, 0xa1, 0x31, 0x4e, 0xe8, 0xc2, 0xe1, 0x2a, 0x03,
		0xa7, 0xef, 0x24, 0x04, 0xee, 0xb8, 0xad, 0x56, 0xa0, 0x42, 0x83, 0x53, 0x78, 0xc1, 0x12, 0xa7,
		0x31, 0xa7, 0x71, 0xc1, 0x4e, 0x63, 0xaf, 0xa7, 0xb9, 0xba, 0xe7, 0x58, 0xf7, 0xbe, 0xc6, 0x67,
		0xc7, 0xdf, 0x3d, 0xf1, 0xe3, 0xf8, 0xf1, 0xcd, 0xef, 0x6b, 0x06, 0xef, 0xbe, 0x18, 0x9b, 0x30,
		0xab, 0x8e, 0x19, 0xa9, 0xc0, 0x37, 0xd6, 0xda, 0x56, 0x5e, 0xbe, 0xfc, 0xba, 0xe9, 0xec, 0x5f,
		0xfd, 0xfc, 0xba, 0xe5, 0xec, 0x5f, 0x8d, 0x7e, 0xdc, 0x1a, 0xfe, 0xd7, 0xe8, 0xe7, 0xea, 0xd7,
		0x4d, 0xa7, 0x36, 0xf9, 0x79, 0xe7, 0xeb, 0xa6, 0xb3, 0x73, 0xf5, 0xea, 0xcf, 0x3f, 0xdf, 0xbc,
		0xfa, 0x7b, 0xfb, 0x21, 0xfe, 0x07, 0xf5, 0x25, 0x00, 0x57, 0x26, 0x43, 0x75, 0x76, 0x71, 0xf4,
		0x87, 0xd8, 0x78, 0xfd, 0x27, 0xc9, 0x01, 0xfb, 0x47, 0x25, 0x69, 0x15, 0xe7, 0xeb, 0x14, 0x37,
		0xd7, 0x6e, 0x41, 0x37, 0x97, 0xeb, 0xdc, 0x1e, 0x38, 0x1f, 0xaf, 0xfe, 0xde, 0x7a, 0x5d, 0x7b,
		0x78, 0xf7, 0xea, 0xef, 0xbd, 0x87, 0xa7, 0x7f, 0xf9, 0x73, 0xd9, 0xaf, 0x6d, 0xbd, 0xde, 0x7b,
		0x78, 0xb7, 0xe2, 0x5f, 0x76, 0x1f, 0xde, 0xad, 0x69, 0x63, 0xe7, 0xe1, 0xe5, 0xc2, 0xaf, 0x0e,
		0xfe, 0xbe, 0xba, 0xea, 0x03, 0xb5, 0x15, 0x1f, 0xd8, 0x5e, 0xf5, 0x81, 0xed, 0x15, 0x1f, 0x58,
		0xf9, 0x95, 0xaa, 0x2b, 0x3e, 0xb0, 0xf3, 0xf0, 0x73, 0xe1, 0xf7, 0x5f, 0x2e, 0xff, 0xd5, 0xdd,
		0x87, 0x57, 0x3f, 0x57, 0xfd, 0xdb, 0xde, 0xc3, 0xcf, 0x77, 0xaf, 0x8a, 0x04, 0x35, 0x2c, 0x9f,
		0xe4, 0x97, 0x4f, 0xf2, 0xc0, 0x9b, 0x4b, 0xcf, 0x49, 0x57, 0xb5, 0x3a, 0x45, 0x7d, 0x3d, 0x95,
		0x2a, 0x7e, 0x12, 0x7e, 0x12, 0x51, 0x4b, 0xa2, 0x96, 0x44, 0x2d, 0x89, 0x5a, 0x96, 0x36, 0x6a,
		0x39, 0x3c, 0x3a, 0xef, 0x82, 0x6e, 0xbf, 0x67, 0x78, 0xfc, 0x8e, 0x6c, 0x70, 0x02, 0x73, 0x02,
		0x17, 0xec, 0x04, 0xd6, 0x6f, 0x64, 0x63, 0xd2, 0xc0, 0x66, 0xda, 0xb8, 0xe6, 0xcd, 0x9b, 0xb7,
		0xd3, 0xff, 0x7b, 0xdc, 0x68, 0xe1, 0xcc, 0xcf, 0x33, 0x3f, 0x3a, 0xf1, 0x3b, 0xd2, 0x58, 0x84,
		0x95, 0x48, 0x67, 0xec, 0xe7, 0x51, 0x45, 0xa3, 0x13, 0x2b, 0xa0, 0x02, 0xa8, 0x64, 0x1e, 0x54,
		0x74, 0x17, 0xf7, 0x86, 0x61, 0x7b, 0x61, 0xcd, 0xb6, 0xc2, 0x76, 0x40, 0x22, 0x50, 0x9d, 0xee,
		0xbd, 0x72, 0x7a, 0x81, 0x77, 0xef, 0x46, 0xca, 0x28, 0x02, 0xb0, 0x68, 0x0a, 0xd0, 0x00, 0x34,
		0x0a, 0x06, 0x1a, 0x0b, 0x8b, 0x7c, 0x9c, 0x65, 0x67, 0x82, 0x21, 0x1a, 0x6e, 0x57, 0xe5, 0xa8,
		0xa5, 0xfc, 0xc8, 0x8b, 0x7e, 0xbc, 0x77, 0x43, 0x65, 0x9e, 0x6a, 0x7e, 0x5e, 0x3f, 0x39, 0xfb,
		0x52, 0xbf, 0x6e, 0x9c, 0x1f, 0x7d, 0x39, 0xb8, 0xac, 0x5f, 0x1f, 0x5c, 0x5c, 0x9f, 0x35, 0x2e,
		0x8f, 0xce, 0x4e, 0x75, 0x97, 0xd4, 0xd0, 0xb3, 0x0c, 0x8d, 0xe2, 0xe6, 0x42, 0xcd, 0xe6, 0x66,
		0x5e, 0xe9, 0xbc, 0xde, 0x38, 0x3e, 0x38, 0xac, 0x5f, 0x1f, 0x1c, 0x1f, 0x57, 0xd2, 0xf0, 0xfd,
		0x6d, 0xbc, 0xd1, 0x70, 0xda, 0xcc, 0x5e, 0x48, 0xeb, 0x93, 0x57, 0xb6, 0x37, 0xb6, 0x9d, 0xc3,
		0xae, 0xdb, 0x8f, 0x94, 0x73, 0xdb, 0x76, 0x7b, 0x4e, 0xcb, 0xed, 0xf4, 0x3c, 0xdf, 0xa0, 0xb5,
		0xd1, 0x12, 0x5b, 0xfa, 0xa2, 0x7e, 0x9d, 0xc2, 0x0c, 0x1c, 0x97, 0x1c, 0x97, 0xa8, 0xfa, 0x93,
		0x01, 0x8e, 0x50, 0xf9, 0x2d, 0xa7, 0xd9, 0xed, 0x74, 0xfa, 0xbe, 0x17, 0xfd, 0x30, 0xa8, 0x3d,
		0x3b, 0x6f, 0x47, 0x1f, 0x30, 0x4e, 0xcf, 0x4e, 0xeb, 0xe0, 0x05, 0x78, 0x51, 0x34, 0xbc, 0x98,
		0xee, 0x8d, 0x62, 0x3a, 0xe6, 0xf9, 0xad, 0x29, 0x12, 0xa7, 0xfc, 0xb7, 0x4c, 0xd9, 0x0f, 0x75,
		0x73, 0xd7, 0x73, 0x3a, 0xfd, 0x76, 0xe4, 0x7d, 0xeb, 0xf6, 0xe2, 0x57, 0xff, 0x98, 0xff, 0x38,
		0x45, 0x40, 0x12, 0x84, 0x3e, 0x5a, 0xa6, 0xd2, 0x32, 0x95, 0xb3, 0xbd, 0x60, 0x67, 0xbb, 0x76,
		0x7d, 0x7a, 0xdd, 0x9c, 0xf9, 0x45, 0x44, 0xd7, 0xca, 0x9d, 0x97, 0x72, 0xb7, 0x0d, 0x69, 0xb4,
		0xf1, 0x96, 0x93, 0xd8, 0x7a, 0x72, 0x5b, 0x50, 0x6a, 0x2b, 0x8a, 0x6f, 0x49, 0xf1, 0xad, 0x29,
		0xba, 0x45, 0xcd, 0x82, 0x6e, 0xd4, 0x41, 0x4c, 0xa8, 0x94, 0xeb, 0x84, 0x36, 0x3a, 0x51, 0xd4,
		0x36, 0xc7, 0xad, 0x39, 0x6b, 0x80, 0x0e, 0xa0, 0x03, 0xe8, 0xc4, 0x5a, 0x2f, 0xb4, 0xc3, 0x98,
		0xf9, 0x22, 0xb4, 0xc3, 0x30, 0xfa, 0x43, 0x3b, 0x8c, 0x2c, 0x4c, 0x42, 0xd1, 0xdb, 0x61, 0x14,
		0xaf, 0xf4, 0xf2, 0x5c, 0x34, 0x8d, 0x5e, 0x80, 0xf4, 0x02, 0x24, 0xd6, 0x42, 0xac, 0x85, 0x58,
		0x0b, 0x6e, 0x0f, 0x6e, 0x0f, 0xb1, 0x16, 0x62, 0x2d, 0x80, 0x0e, 0xa0, 0x43, 0xac, 0x85, 0x58,
		0x0b, 0xb1, 0x16, 0x62, 0x2d, 0xc4, 0x5a, 0x88, 0xb5, 0x08, 0xc6, 0x5a, 0x68, 0x72, 0xb5, 0xc6,
		0x28, 0x09, 0xb5, 0xb8, 0xaa, 0xdf, 0xdc, 0xf5, 0x4e, 0x26, 0x26, 0x93, 0x94, 0xba, 0x0d, 0xbd,
		0x6d, 0xe7, 0xe6, 0xb6, 0xa5, 0xa1, 0x73, 0x7b, 0xfc, 0x6c, 0x41, 0x44, 0x6e, 0xb7, 0xad, 0x72,
		0x8a, 0xdc, 0x6e, 0x5b, 0x88, 0xdc, 0xac, 0x06, 0x5e, 0xd3, 0x12, 0xb9, 0xdd, 0xb6, 0x08, 0xbc,
		0x9a, 0x2e, 0x78, 0x02, 0xaf, 0xa5, 0x8c, 0x5d, 0xdc, 0xb6, 0x88, 0x5d, 0x24, 0xb5, 0xb5, 0x08,
		0x98, 0xd2, 0xa4, 0x57, 0x80, 0x97, 0x4f, 0xf9, 0x28, 0xd7, 0xc4, 0xb9, 0xbc, 0x26, 0x86, 0xad,
		0xc0, 0x56, 0x60, 0x2b, 0xb0, 0x15, 0xd8, 0x0a, 0x6c, 0xa5, 0x4c, 0x6c, 0x85, 0x40, 0xeb, 0x73,
		0x43, 0x24, 0x15, 0x65, 0x1d, 0x1a, 0x7c, 0xbf, 0xee, 0xa6, 0x17, 0x0a, 0xb1, 0x06, 0x41, 0x37,
		0x70, 0xbe, 0xb9, 0x7e, 0xab, 0x1d, 0xa7, 0xec, 0xcb, 0xe3, 0x49, 0x37, 0xff, 0x79, 0xf2, 0x89,
		0x73, 0x1d, 0x6a, 0x25, 0x9f, 0xb8, 0xa0, 0xa1, 0x56, 0x34, 0xae, 0xe6, 0x0b, 0x3e, 0xe3, 0xce,
		0x4b, 0x14, 0x28, 0x37, 0x72, 0xdc, 0xd0, 0xf9, 0xcb, 0x8b, 0xbe, 0xb5, 0x02, 0xf7, 0x2f, 0x73,
		0x37, 0x66, 0xd1, 0x24, 0xba, 0x57, 0x24, 0x68, 0x19, 0x70, 0x8c, 0xd0, 0xbd, 0xe2, 0x18, 0xa5,
		0xe4, 0x18, 0xcd, 0xf1, 0x5d, 0x42, 0xb9, 0x64, 0xfc, 0xc0, 0x86, 0x32, 0x19, 0xca, 0x0d, 0x82,
		0xae, 0xaf, 0xba, 0xfd, 0xd0, 0xe9, 0xf7, 0x5a, 0x6e, 0xa4, 0x9c, 0x8e, 0x0a, 0x43, 0xf7, 0x4e,
		0x85, 0x02, 0xc1, 0xdd, 0x95, 0xa6, 0x61, 0x35, 0xb0, 0x1a, 0x58, 0x4d, 0xac, 0xf5, 0xd2, 0xf7,
		0xfc, 0x68, 0xbb, 0x2a, 0x40, 0x6a, 0xf6, 0x50, 0xd6, 0x8b, 0xc2, 0xca, 0x82, 0x39, 0x94, 0xf5,
		0x99, 0x99, 0x02, 0xa9, 0xc6, 0x64, 0x56, 0xe7, 0xa2, 0xe8, 0x02, 0xfb, 0xd7, 0x84, 0x68, 0x20,
		0x33, 0x90, 0x19, 0xc8, 0x0c, 0x21, 0x9a, 0x4c, 0x87, 0x68, 0xb8, 0xbf, 0x5e, 0x67, 0x98, 0xa4,
		0xee, 0xb0, 0x07, 0x46, 0x7f, 0x9f, 0xd8, 0x4c, 0xf0, 0x1e, 0xfb, 0x2e, 0x70, 0x9b, 0xea, 0xb6,
		0xdf, 0x76, 0x02, 0x15, 0x46, 0x6e, 0x10, 0xc5, 0xbf, 0xc9, 0x5e, 0xb0, 0xc0, 0x5d, 0x76, 0x82,
		0x07, 0x14, 0x77, 0xd9, 0xdc, 0x65, 0x13, 0xbd, 0x25, 0x7a, 0x3b, 0x8e, 0xde, 0x22, 0xc4, 0xc5,
		0x99, 0xc1, 0x99, 0xc1, 0x99, 0xb1, 0x1f, 0x93, 0xf9, 0xa6, 0xda, 0x3d, 0x15, 0x38, 0x5d, 0xbf,
		0xfd, 0xc3, 0x1c, 0x6e, 0x66, 0x8d, 0x01, 0x39, 0x40, 0x0e, 0x90, 0x03, 0xe4, 0x2c, 0x7e, 0xc7,
		0xb1, 0x83, 0xe9, 0x44, 0x5e, 0x47, 0xa0, 0x47, 0xed, 0x9c, 0x35, 0x40, 0x07, 0xd0, 0x01, 0x74,
		0x62, 0xad, 0x97, 0xbe, 0xe7, 0x47, 0x5b, 0xbb, 0x02, 0x98, 0xb3, 0xcb, 0x0d, 0xb4, 0x28, 0xac,
		0x2c, 0x98, 0xe3, 0x06, 0x3a, 0x33, 0x53, 0x50, 0xdb, 0xdc, 0xdf, 0xe5, 0xee, 0xf9, 0xe9, 0x9f,
		0x2c, 0xdf, 0x3d, 0x87, 0x91, 0xdb, 0x56, 0xce, 0xb0, 0x3b, 0x77, 0x28, 0xc4, 0x3c, 0x16, 0x4d,
		0x42, 0x3f, 0xa0, 0x1f, 0xd0, 0x8f, 0x58, 0xeb, 0xa5, 0xa5, 0x9a, 0x5e, 0xc7, 0x6d, 0xef, 0xd6,
		0x24, 0xbc, 0x9e, 0xaa, 0x81, 0x8d, 0x05, 0x1c, 0xae, 0xc2, 0x67, 0x96, 0x0f, 0x73, 0x15, 0x3e,
		0x93, 0x36, 0x9f, 0xd9, 0x2e, 0xd1, 0x14, 0x50, 0xa9, 0x56, 0x7f, 0x41, 0xa6, 0xa3, 0x40, 0x79,
		0x2a, 0x25, 0x20, 0x4d, 0x88, 0x34, 0xa1, 0xc4, 0x69, 0x1b, 0x17, 0xcd, 0x6b, 0x7c, 0x90, 0x8b,
		0x66, 0x3c, 0x20, 0x3c, 0xa0, 0x74, 0x3d, 0x20, 0x2e, 0x9a, 0xe3, 0x8f, 0x19, 0x17, 0xcd, 0x40,
		0x0e, 0x90, 0x03, 0xe4, 0xfc, 0xfa, 0x3b, 0xb6, 0xbb, 0x4d, 0x77, 0xea, 0x84, 0xc4, 0x29, 0xef,
		0xb5, 0x72, 0xe0, 0x16, 0x2c, 0x02, 0x3e, 0x80, 0x0f, 0xe0, 0x03, 0xf8, 0x2c, 0x7e, 0xc7, 0x4e,
		0xb7, 0x25, 0x70, 0xc7, 0x34, 0xb4, 0x02, 0xc8, 0x00, 0x32, 0x80, 0x4c, 0xcc, 0x78, 0x44, 0xbf,
		0xa3, 0x82, 0x51, 0xe0, 0x53, 0x00, 0x68, 0x6a, 0x06, 0x36, 0xea, 0x7e, 0xbf, 0x33, 0x78, 0xa9,
		0x87, 0x0c, 0x83, 0x55, 0x4f, 0xa9, 0xc0, 0x91, 0xd5, 0xe5, 0x2d, 0x9a, 0x04, 0xc6, 0x80, 0x31,
		0x60, 0x2c, 0xd6, 0x7a, 0x41, 0x9c, 0x37, 0xfb, 0x45, 0x10, 0xe7, 0x19, 0xfd, 0x41, 0x9c, 0x97,
		0x89, 0x59, 0x40, 0x9c, 0xf7, 0x4b, 0xfa, 0x21, 0x12, 0xa7, 0x79, 0x6a, 0x10, 0xea, 0x01, 0xf5,
		0x80, 0x7a, 0x10, 0xa6, 0x59, 0xfc, 0x8e, 0x24, 0x23, 0x01, 0x3a, 0x80, 0x0e, 0xfe, 0x0e, 0xfe,
		0x0e, 0xfe, 0x0e, 0xfe, 0x0e, 0xfe, 0x0e, 0xc9, 0x48, 0xd0, 0x0f, 0xe8, 0x07, 0xc9, 0x48, 0x24,
		0x23, 0xe5, 0x83, 0xcf, 0x90, 0x8c, 0x94, 0x3a, 0x9f, 0x21, 0x19, 0xa9, 0x38, 0x64, 0xa6, 0x04,
		0xc9, 0x48, 0x14, 0xc4, 0x5d, 0x6f, 0xa0, 0x84, 0x4a, 0xe2, 0x7e, 0x1a, 0x9b, 0x3d, 0x1f, 0x5b,
		0x4d, 0xb0, 0x28, 0x6e, 0xbb, 0x7b, 0x77, 0xe7, 0xf9, 0x77, 0x4e, 0xb7, 0x37, 0x18, 0xc2, 0x30,
		0x7e, 0x4d, 0xdc, 0xa7, 0x06, 0x28, 0x89, 0x9b, 0x20, 0xe5, 0xa5, 0x24, 0x2e, 0x25, 0x71, 0x6d,
		0xfa, 0x78, 0x64, 0x2a, 0xa6, 0x40, 0x01, 0xb4, 0x33, 0x15, 0xdb, 0xdd, 0x3b, 0x67, 0x72, 0x54,
		0x39, 0xc3, 0x23, 0xdc, 0x69, 0x7e, 0x1b, 0x38, 0x36, 0xa1, 0x84, 0xaa, 0x7f, 0xa5, 0x6d, 0xf3,
		0x6e, 0x22, 0x83, 0xe9, 0x24, 0x16, 0x43, 0x2c, 0x86, 0x58, 0x4c, 0xbc, 0xf5, 0x42, 0x33, 0x91,
		0x2c, 0x78, 0x4f, 0x4f, 0x18, 0x30, 0x95, 0x1c, 0xa8, 0xe4, 0x00, 0x3f, 0x82, 0x1f, 0xc1, 0x8f,
		0xe0, 0x47, 0xf0, 0x23, 0xf8, 0x11, 0xfc, 0xe8, 0x09, 0x3f, 0x22, 0xb8, 0xbc, 0xd6, 0x38, 0x09,
		0xc5, 0x96, 0x8f, 0x47, 0x56, 0xcf, 0xc6, 0x46, 0x13, 0x0c, 0x2d, 0x4f, 0x8f, 0x43, 0xb7, 0xd5,
		0x0a, 0x54, 0xa8, 0x11, 0x5b, 0x5e, 0xb0, 0x10, 0x2f, 0xb8, 0xbc, 0x49, 0x70, 0x99, 0xe0, 0xb2,
		0xe6, 0x99, 0xf2, 0x48, 0xec, 0x94, 0x7b, 0x1b, 0xa8, 0xdb, 0x38, 0x13, 0x36, 0x39, 0x33, 0x62,
		0xf4, 0x1b, 0xaf, 0x34, 0xc6, 0x58, 0xf1, 0xe6, 0xcd, 0x08, 0x1f, 0xdf, 0x2e, 0xac, 0xfd, 0x04,
		0x77, 0xee, 0x50, 0x22, 0xe5, 0x04, 0xea, 0xb6, 0xad, 0x9a, 0x51, 0x37, 0x88, 0xbf, 0x71, 0x9f,
		0x1a, 0xe0, 0x52, 0x88, 0x7d, 0xab, 0xb5, 0x6f, 0xb9, 0x14, 0x22, 0xe8, 0x41, 0xd0, 0xc3, 0x24,
		0xe8, 0xf1, 0x04, 0x8a, 0x9d, 0x66, 0xdb, 0x1b, 0xbd, 0xa8, 0x69, 0x1a, 0xcf, 0x72, 0xbb, 0xb4,
		0x96, 0x27, 0xda, 0x41, 0xb4, 0x83, 0x68, 0x87, 0xb5, 0x41, 0x5b, 0x02, 0x3c, 0xfd, 0x30, 0x52,
		0x81, 0xe3, 0xb5, 0x6c, 0x80, 0xda, 0xd4, 0x36, 0x80, 0x04, 0x20, 0x01, 0x48, 0xf1, 0x76, 0xd3,
		0xec, 0x06, 0x72, 0xa2, 0x81, 0x5d, 0x01, 0x6c, 0xda, 0x37, 0xb0, 0x31, 0x7e, 0xb7, 0xd4, 0x55,
		0xfe, 0xb3, 0xb9, 0x9c, 0xdb, 0xd5, 0x8a, 0x80, 0x68, 0x7d, 0x3c, 0x3a, 0x7b, 0x02, 0xa6, 0x64,
		0x72, 0x21, 0xe4, 0x46, 0x6b, 0xfa, 0xc5, 0x24, 0x73, 0x23, 0x84, 0x00, 0x7a, 0xa5, 0x59, 0x61,
		0xa1, 0xfe, 0xd4, 0xae, 0x05, 0xc1, 0xbe, 0x21, 0x60, 0x2c, 0x9f, 0x2a, 0xc1, 0x1c, 0x8a, 0xa4,
		0xa6, 0xaa, 0x56, 0xdd, 0xaf, 0xed, 0xef, 0xee, 0x55, 0xf7, 0x77, 0x72, 0x34, 0x67, 0x2f, 0xb2,
		0x61, 0xe5, 0xea, 0x45, 0x8a, 0x2b, 0x4f, 0x10, 0x90, 0xbd, 0xde, 0x7d, 0x2d, 0xe6, 0x6d, 0xc3,
		0x5a, 0x87, 0xd6, 0x6f, 0x02, 0xb6, 0x1a, 0x6e, 0x14, 0xa9, 0xc0, 0x17, 0x43, 0xe6, 0xca, 0xcb,
		0x97, 0x5f, 0x37, 0x9d, 0xfd, 0xab, 0x9f, 0x5f, 0xb7, 0x9c, 0xfd, 0xab, 0xd1, 0x8f, 0x5b, 0xc3,
		0xff, 0x1a, 0xfd, 0x5c, 0xfd, 0xba, 0xe9, 0xd4, 0x26, 0x3f, 0xef, 0x7c, 0xdd, 0x74, 0x76, 0xae,
		0x5e, 0xfd, 0xf9, 0xe7, 0x9b, 0x57, 0x7f, 0x6f, 0x3f, 0xc4, 0xff, 0x60, 0xc5, 0x7c, 0x89, 0x49,
		0x0c, 0xe1, 0xd9, 0xc5, 0xd1, 0x1f, 0xe2, 0xe3, 0xf8, 0x9f, 0x24, 0x07, 0xf2, 0x1f, 0x95, 0xb4,
		0x37, 0x2b, 0x19, 0x5a, 0xc9, 0xdf, 0xa1, 0x3f, 0x71, 0x4c, 0xd1, 0x18, 0xa2, 0x31, 0x4c, 0xdc,
		0x59, 0x26, 0xdc, 0xae, 0x15, 0x9d, 0x22, 0xdc, 0x4e, 0x74, 0x8b, 0xe8, 0x56, 0xf1, 0xa2, 0x5b,
		0x84, 0xdb, 0x09, 0xb7, 0x03, 0x48, 0x00, 0x52, 0x66, 0x00, 0x89, 0x70, 0xfb, 0x73, 0x23, 0x44,
		0xb8, 0x3d, 0xce, 0x17, 0x23, 0xdc, 0x4e, 0xb8, 0x9d, 0x70, 0xbb, 0x50, 0xec, 0x4b, 0xd6, 0x0a,
		0xe1, 0xf6, 0x5f, 0x1f, 0x5a, 0x84, 0xdb, 0x09, 0xb7, 0x13, 0x6e, 0x27, 0xdc, 0x2e, 0x15, 0x6e,
		0x27, 0x65, 0x6d, 0xad, 0x71, 0x12, 0x4a, 0x59, 0x3b, 0x1f, 0x58, 0x3d, 0x9f, 0x1a, 0x4d, 0x30,
		0xf1, 0x25, 0xde, 0x65, 0x86, 0xd6, 0x25, 0x86, 0x76, 0x92, 0x4b, 0x95, 0x24, 0x17, 0xc9, 0x10,
		0x42, 0x9e, 0x93, 0x5c, 0xdc, 0x7e, 0xf4, 0xcd, 0xe9, 0xb9, 0x61, 0x38, 0x1e, 0x42, 0xcd, 0xbb,
		0xb7, 0x79, 0x33, 0x7a, 0x77, 0x70, 0x9b, 0xa4, 0xbc, 0x24, 0x19, 0x41, 0x2b, 0xd3, 0x1d, 0x9c,
		0x76, 0x64, 0x6c, 0x2e, 0xbe, 0xec, 0xf9, 0x77, 0xba, 0x6b, 0x7c, 0xde, 0xa5, 0xc8, 0xc0, 0x5d,
		0x7b, 0x4b, 0x85, 0xcd, 0xc0, 0xeb, 0x69, 0x91, 0xa1, 0x99, 0x02, 0xde, 0x8f, 0x46, 0xd8, 0xf3,
		0xec, 0xf9, 0x82, 0xed, 0xf9, 0x30, 0x0a, 0xf4, 0xba, 0xd9, 0x65, 0x6b, 0xa7, 0xff, 0xf0, 0xdd,
		0x8e, 0xd7, 0x74, 0xdb, 0xed, 0x1f, 0xce, 0x88, 0x86, 0xf7, 0x03, 0x65, 0x70, 0xd4, 0xaf, 0xb0,
		0x17, 0x57, 0x15, 0x61, 0x26, 0x1b, 0x00, 0x3f, 0xc0, 0x8f, 0xcc, 0xe3, 0x87, 0xfe, 0xb5, 0xbe,
		0xe6, 0x75, 0xbe, 0x1d, 0x00, 0x51, 0xbe, 0x7b, 0xd3, 0x36, 0x41, 0x8c, 0x89, 0x01, 0x7d, 0x88,
		0xd0, 0xa8, 0x5a, 0x06, 0x42, 0x80, 0x10, 0x20, 0x44, 0x42, 0x08, 0x11, 0x46, 0xee, 0x4d, 0xdb,
		0x0b, 0xbf, 0xa9, 0x96, 0x13, 0x05, 0xae, 0x1f, 0x7a, 0xf1, 0x3a, 0x00, 0x2c, 0x22, 0xc6, 0x0a,
		0x83, 0x40, 0x00, 0x10, 0x50, 0x30, 0x08, 0x68, 0x76, 0xfb, 0x7e, 0xa4, 0x02, 0xad, 0x26, 0x58,
		0x93, 0x05, 0xae, 0x71, 0x47, 0x69, 0xa8, 0x15, 0x31, 0xd0, 0x18, 0x49, 0x68, 0x41, 0x84, 0x04,
		0x05, 0x52, 0x5a, 0x0f, 0x49, 0x9d, 0x80, 0xc1, 0x8d, 0xba, 0x88, 0x76, 0x43, 0x7a, 0x68, 0xb7,
		0x7e, 0xab, 0xd5, 0x76, 0xf7, 0x6a, 0xb5, 0xcd, 0xbd, 0xed, 0xbd, 0xcd, 0xfd, 0x9d, 0x9d, 0xad,
		0xdd, 0xad, 0x9d, 0x0c, 0x8d, 0x76, 0x42, 0x17, 0x9b, 0x57, 0x19, 0x38, 0xa5, 0xdb, 0x6e, 0x18,
		0x39, 0x33, 0x27, 0xab, 0xfe, 0xf1, 0xbc, 0x60, 0x89, 0x73, 0x99, 0x73, 0xb9, 0x60, 0xe7, 0x72,
		0xe4, 0x75, 0x54, 0xe4, 0x35, 0xff, 0x1b, 0x26, 0x7e, 0x32, 0x7f, 0xf6, 0x47, 0xa8, 0x56, 0xf1,
		0x5d, 0xbf, 0x1b, 0xaa, 0x66, 0xd7, 0x6f, 0xe9, 0x28, 0x9a, 0x38, 0xe1, 0x39, 0xe1, 0x39, 0xe1,
		0xcb, 0x75, 0xc2, 0x77, 0x9b, 0x6e, 0xdb, 0x71, 0x0d, 0x1c, 0xef, 0xa9, 0x05, 0x4e, 0x74, 0x4e,
		0xf4, 0x82, 0x9d, 0xe8, 0x6e, 0xe8, 0xf8, 0xfd, 0xce, 0x8d, 0x0a, 0x0c, 0xce, 0xf3, 0x3d, 0xce,
		0x61, 0xce, 0xe1, 0x8c, 0x9e, 0xc3, 0x52, 0x59, 0x10, 0x9c, 0xbe, 0x7a, 0xa7, 0x6f, 0x47, 0x85,
		0xa1, 0xab, 0xd3, 0x01, 0x68, 0x8a, 0x50, 0x53, 0x0b, 0xd4, 0x8c, 0xe6, 0xf4, 0xcd, 0xd4, 0xe9,
		0xab, 0x5f, 0xc4, 0x42, 0x35, 0x95, 0x77, 0xaf, 0x24, 0x32, 0xbc, 0x27, 0x96, 0xcc, 0xf2, 0xb9,
		0xb7, 0xc8, 0xe7, 0x26, 0x9f, 0x3b, 0xe1, 0xe3, 0x4c, 0xb7, 0xb4, 0x8a, 0xe6, 0xa6, 0x7b, 0x5c,
		0x2e, 0x67, 0x97, 0x47, 0x1f, 0x8f, 0x0e, 0x0f, 0x2e, 0x8f, 0xce, 0x4e, 0xcd, 0xa7, 0x7a, 0xb2,
		0xf8, 0xe6, 0xac, 0xbe, 0xce, 0x04, 0x05, 0x32, 0xdd, 0x9c, 0x92, 0x9b, 0x54, 0x7e, 0xb3, 0x4a,
		0x6f, 0x5a, 0x6b, 0x9b, 0xd7, 0xda, 0x26, 0xb6, 0xb2, 0x99, 0xcd, 0x36, 0xb5, 0x80, 0x17, 0xb1,
		0x21, 0x52, 0xb4, 0x61, 0x61, 0xbd, 0xf5, 0x3d, 0x3f, 0xd2, 0x0a, 0x5a, 0xaf, 0xda, 0x9d, 0xbf,
		0x51, 0x9a, 0x20, 0x15, 0x58, 0xb3, 0xe5, 0x44, 0xdb, 0x74, 0xf8, 0x84, 0xb7, 0x87, 0xb8, 0xd3,
		0x9d, 0xf4, 0x54, 0xc9, 0x07, 0xc7, 0x13, 0x9d, 0xbd, 0x62, 0x14, 0x29, 0x48, 0x25, 0x44, 0xf4,
		0xb9, 0xf1, 0xe1, 0xe0, 0xb2, 0x2e, 0x47, 0xbb, 0xc6, 0xf6, 0x20, 0x5c, 0x10, 0x2e, 0x08, 0x17,
		0x84, 0x0b, 0xc2, 0x05, 0xe1, 0x82, 0x70, 0x41, 0xb8, 0x20, 0x5c, 0x93, 0x69, 0x19, 0xaa, 0x12,
		0xfd, 0x6e, 0xe4, 0xdd, 0x7a, 0xcd, 0x61, 0xd5, 0x12, 0x47, 0x05, 0x41, 0x37, 0x70, 0x9a, 0xdd,
		0x96, 0x92, 0xa3, 0x61, 0xbf, 0x7c, 0x0a, 0xe4, 0x0c, 0x72, 0x06, 0x39, 0xcb, 0x14, 0x39, 0xf3,
		0x5a, 0xca, 0x8f, 0xbc, 0xe8, 0x47, 0xbc, 0xc6, 0xdb, 0xcf, 0x6d, 0x51, 0x89, 0x33, 0xa5, 0x72,
		0x34, 0xfe, 0x6a, 0xef, 0xdd, 0x50, 0x70, 0x19, 0x4f, 0x5e, 0xfc, 0xfd, 0xa7, 0xc6, 0x75, 0xfd,
		0xfc, 0xfc, 0xec, 0xfc, 0xfa, 0xf0, 0xec, 0x43, 0x5d, 0x6a, 0x2d, 0x0f, 0x8f, 0xd9, 0x50, 0x8c,
		0x57, 0xca, 0x72, 0xcb, 0xb9, 0xf7, 0xff, 0xfd, 0xec, 0xf8, 0xc3, 0xf5, 0xe5, 0xd1, 0x49, 0xfd,
		0xfc, 0xba, 0xfe, 0x47, 0xe3, 0xe8, 0xbc, 0xfe, 0xa1, 0x92, 0x45, 0x92, 0x65, 0xe9, 0xed, 0xcf,
		0x1a, 0xf5, 0xd3, 0xeb, 0x93, 0xfa, 0xc5, 0xc5, 0xc1, 0xa7, 0xfa, 0x68, 0x19, 0x94, 0xe9, 0xed,
		0x3f, 0x1e, 0x9d, 0x1e, 0x5d, 0xd6, 0xaf, 0x2f, 0x2e, 0x0f, 0x2e, 0xeb, 0xd7, 0x27, 0x07, 0x87,
		0xbf, 0x1f, 0x9d, 0x96, 0x70, 0x14, 0x0e, 0xeb, 0x07, 0x17, 0xf5, 0x32, 0xbd, 0xf0, 0xf9, 0xd9,
		0xe7, 0xcb, 0xfa, 0xf5, 0x79, 0xfd, 0xe3, 0x79, 0xfd, 0xe2, 0xf7, 0xf2, 0xae, 0xfe, 0x51, 0xa4,
		0xb0, 0xbc, 0xef, 0x3f, 0x79, 0xf1, 0xdf, 0xeb, 0x07, 0x1f, 0x06, 0xe8, 0x2f, 0xfc, 0xfe, 0x22,
		0x96, 0xae, 0xd2, 0x26, 0x6a, 0x99, 0x72, 0xd1, 0xc2, 0xfe, 0x4d, 0x32, 0x5e, 0xda, 0xe4, 0x41,
		0x38, 0x6a, 0x38, 0x6a, 0x38, 0x6a, 0x38, 0x6a, 0xd9, 0x72, 0xd4, 0x2e, 0x3e, 0xbf, 0x2f, 0xa7,
		0xaf, 0xf6, 0x84, 0xb1, 0xc8, 0x8e, 0x83, 0xcd, 0xf1, 0xb0, 0x33, 0x2e, 0x0b, 0xe3, 0x73, 0x70,
		0x79, 0x79, 0x7e, 0xf4, 0x7e, 0x40, 0x6e, 0x3f, 0x1e, 0x1f, 0x7c, 0xba, 0x90, 0xa6, 0x34, 0x16,
		0xa8, 0x5d, 0x42, 0x03, 0x73, 0x72, 0x74, 0x71, 0x71, 0x74, 0xfa, 0xe9, 0xfa, 0x5f, 0xf5, 0xe3,
		0xe3, 0xeb, 0x7f, 0x9e, 0x9e, 0xfd, 0xeb, 0xf4, 0x7a, 0x3a, 0x56, 0x8c, 0xcf, 0x46, 0xe5, 0xe4,
		0xe0, 0xf8, 0xe3, 0xd9, 0xf9, 0x49, 0xfd, 0xc3, 0xe3, 0xb0, 0x5c, 0x1f, 0x1f, 0x5d, 0x5c, 0x32,
		0x36, 0xb3, 0x9b, 0xea, 0xb8, 0x7e, 0xfa, 0xe9, 0xf2, 0x77, 0x76, 0xd5, 0x14, 0x8e, 0x4f, 0xcf,
		0xeb, 0x87, 0x67, 0x9f, 0x4e, 0x8f, 0xfe, 0xbf, 0xfa, 0x07, 0xb6, 0xd6, 0xca, 0x08, 0xdb, 0xe5,
		0xd1, 0xd9, 0xe9, 0xc1, 0xf1, 0xcc, 0xce, 0x62, 0x01, 0x8d, 0xc7, 0xe6, 0xe8, 0xf4, 0xcb, 0xc1,
		0xf1, 0xd1, 0x87, 0xeb, 0xb3, 0xf3, 0xa3, 0x4f, 0x47, 0xac, 0x9b, 0xa5, 0x63, 0x73, 0x5a, 0xbf,
		0xfc, 0xd7, 0xd9, 0xf9, 0x3f, 0xaf, 0x3f, 0x1e, 0xd5, 0x8f, 0x3f, 0x30, 0x30, 0x73, 0x67, 0xd5,
		0xc5, 0x75, 0xe3, 0xe0, 0xf2, 0x77, 0x06, 0x65, 0x76, 0xb5, 0xfc, 0x71, 0x79, 0xfd, 0xfb, 0x59,
		0xc3, 0xea, 0x5e, 0x12, 0xb5, 0x78, 0x55, 0xa2, 0x88, 0xa3, 0x65, 0x7e, 0x9e, 0x83, 0x90, 0x6b,
		0x22, 0x3c, 0x3c, 0x07, 0xe3, 0x60, 0x9d, 0x6f, 0xe7, 0x69, 0x33, 0xd8, 0xe1, 0xd5, 0x39, 0xb8,
		0x80, 0x49, 0x8e, 0x3f, 0xe7, 0xe1, 0x26, 0xda, 0x36, 0x4f, 0xce, 0xfe, 0x18, 0xd8, 0xe7, 0xc3,
		0xf9, 0x19, 0x03, 0x4b, 0xbc, 0x37, 0x57, 0x67, 0x83, 0x34, 0xbf, 0xcd, 0xd3, 0xec, 0xdb, 0xe3,
		0xb1, 0x39, 0xd5, 0xa5, 0x10, 0xed, 0x7e, 0x32, 0x4a, 0xe7, 0xf5, 0xc3, 0xfa, 0xd1, 0x97, 0xfa,
		0xf5, 0xe7, 0xd3, 0xfa, 0x1f, 0x8d, 0xfa, 0xe1, 0x65, 0xfd, 0xc3, 0xf4, 0x66, 0xe0, 0xac, 0x51,
		0x3f, 0xbd, 0xa8, 0x9f, 0x12, 0xbf, 0x7c, 0x7e, 0x98, 0x0e, 0xcf, 0x4e, 0x3f, 0x1e, 0x9d, 0x9f,
		0x30, 0x52, 0xbf, 0x1c, 0xa9, 0xfa, 0xc5, 0xe5, 0xc1, 0xfb, 0xe3, 0xa3, 0x8b, 0xdf, 0xeb, 0x1f,
		0x70, 0xa8, 0xb3, 0x03, 0x94, 0x89, 0x42, 0x40, 0xee, 0x87, 0x43, 0x7c, 0xab, 0xe7, 0x7a, 0x44,
		0xac, 0x6c, 0xe9, 0xdc, 0xa9, 0xde, 0x60, 0x15, 0x4f, 0xc6, 0xe7, 0xf0, 0xec, 0xf4, 0xb4, 0x7e,
		0x38, 0xf0, 0x45, 0xaf, 0x4f, 0xcf, 0x2e, 0xaf, 0x2f, 0xfe, 0x7d, 0x7a, 0xf8, 0xfb, 0xf9, 0xd9,
		0xd0, 0x47, 0xe7, 0x8c, 0xdc, 0xa8, 0xbc, 0x3f, 0x78, 0xdc, 0x41, 0x97, 0xff, 0x6e, 0x70, 0x55,
		0xf3, 0x64, 0x4c, 0x46, 0xb1, 0x2c, 0x38, 0x42, 0x76, 0x00, 0x2f, 0x91, 0x0d, 0x9d, 0xfd, 0x61,
		0xb0, 0xb7, 0x71, 0xf3, 0xf5, 0xee, 0xd2, 0x1b, 0x34, 0x6f, 0xe9, 0x0e, 0x1c, 0xf8, 0x2b, 0x42,
		0x4e, 0x20, 0x78, 0x56, 0x17, 0xb0, 0xed, 0x19, 0xca, 0x49, 0x8a, 0x16, 0x5b, 0xf7, 0xe9, 0xb0,
		0x1c, 0x7c, 0x38, 0x39, 0x3a, 0x3d, 0xba, 0xb8, 0x3c, 0x3f, 0xb8, 0x1c, 0x38, 0x79, 0x17, 0xbf,
		0x7f, 0xbe, 0xfc, 0x70, 0xf6, 0xaf, 0x53, 0x38, 0xe9, 0x88, 0xf5, 0x5c, 0x1f, 0x9e, 0x1d, 0x1f,
		0x1f, 0x5d, 0x0c, 0x98, 0xcf, 0x79, 0xfd, 0xe2, 0xec, 0xf8, 0xf3, 0xb0, 0x14, 0x27, 0x83, 0x53,
		0x39, 0xfb, 0x7c, 0x79, 0x7d, 0xf6, 0x71, 0x38, 0x28, 0x9f, 0xcf, 0x0f, 0xeb, 0x17, 0x8c, 0xc9,
		0x46, 0xa5, 0x51, 0xaf, 0x9f, 0x5f, 0x7f, 0xa8, 0x5f, 0x0f, 0x83, 0x44, 0x9f, 0x3e, 0x9f, 0xe3,
		0xee, 0x8e, 0x2e, 0xe3, 0xfe, 0xb8, 0x3e, 0xfd, 0x7c, 0x72, 0xdd, 0x38, 0xaf, 0x7f, 0x3c, 0xfa,
		0xa3, 0x7e, 0x71, 0x7d, 0x5e, 0x3f, 0x38, 0xfc, 0x9d, 0xb1, 0x19, 0xee, 0xa2, 0xcb, 0xdf, 0xeb,
		0xe7, 0xe3, 0xf5, 0x72, 0x7d, 0xf8, 0xfb, 0xc1, 0xe9, 0x27, 0xa2, 0x01, 0x8b, 0x87, 0xd2, 0x79,
		0xfd, 0xa2, 0xce, 0x3d, 0xd4, 0xbc, 0x1f, 0x7e, 0x5e, 0xff, 0xbf, 0x61, 0x2c, 0x16, 0x92, 0x9d,
		0x1d, 0x8a, 0x69, 0x9d, 0x4b, 0xe5, 0x23, 0x52, 0x64, 0x99, 0x33, 0xe5, 0x40, 0x87, 0x65, 0x8d,
		0x1b, 0x65, 0xff, 0xdd, 0x6d, 0x72, 0xa0, 0x3c, 0x08, 0x8f, 0x6c, 0x73, 0x9d, 0x1c, 0xac, 0x7e,
		0x9b, 0x9c, 0x26, 0x77, 0x87, 0x80, 0x30, 0x77, 0xc9, 0xd5, 0x5d, 0x81, 0x3c, 0x47, 0xc9, 0x59,
		0x35, 0x28, 0xa2, 0x4d, 0x4f, 0x46, 0xe7, 0xfd, 0xc1, 0x87, 0xeb, 0xe1, 0x09, 0x71, 0x40, 0xc0,
		0x60, 0xa8, 0x5e, 0x3f, 0x38, 0x3c, 0xac, 0x37, 0x2e, 0x0f, 0xde, 0x1f, 0xd7, 0xaf, 0xa7, 0x55,
		0xd4, 0x18, 0x99, 0xc1, 0xc8, 0x5c, 0x7c, 0x6e, 0x34, 0xce, 0xce, 0x2f, 0xeb, 0x1f, 0xae, 0xbf,
		0xd4, 0xcf, 0x87, 0x64, 0xf2, 0xf4, 0xf3, 0xc9, 0xfb, 0x3a, 0x49, 0x9f, 0x4f, 0x46, 0x67, 0x2a,
		0xfa, 0x6f, 0x1c, 0x9c, 0x1f, 0x9c, 0xd4, 0x2f, 0x19, 0xa1, 0xa7, 0x23, 0x74, 0x78, 0xd0, 0x38,
		0x78, 0x7f, 0x74, 0x7c, 0x74, 0xf9, 0x6f, 0x46, 0x66, 0x04, 0xc1, 0xef, 0x3f, 0x35, 0xae, 0x8f,
		0x3e, 0xd4, 0x4f, 0x2f, 0x8f, 0x3e, 0x1e, 0x59, 0x59, 0x2f, 0x84, 0x10, 0xb2, 0x74, 0x40, 0xe6,
		0x21, 0x8d, 0xcb, 0xee, 0x41, 0x98, 0x87, 0x11, 0xb0, 0x7f, 0xe0, 0xe5, 0x6b, 0x14, 0x6c, 0x1e,
		0x6c, 0xf9, 0x1a, 0x09, 0x1b, 0x07, 0x58, 0x3e, 0xa0, 0xd0, 0xd6, 0x41, 0x95, 0x8b, 0xf9, 0x6f,
		0xd4, 0x0f, 0x8f, 0x3e, 0x1e, 0x1d, 0x52, 0x4f, 0x53, 0xea, 0xd3, 0xb2, 0xf5, 0x34, 0x23, 0xaf,
		0x63, 0xb5, 0x8c, 0xe6, 0xd0, 0x3e, 0xd5, 0x33, 0x9f, 0x1d, 0x39, 0xaa, 0x67, 0x52, 0x3d, 0x73,
		0xf5, 0x1b, 0xc9, 0x57, 0xcf, 0x1c, 0xec, 0xcb, 0xc8, 0x6b, 0xfe, 0x37, 0xcc, 0x5c, 0x23, 0xaa,
		0xcf, 0xfe, 0xa8, 0x49, 0x4e, 0xc5, 0x77, 0xfd, 0x6e, 0xa8, 0x9a, 0x5d, 0xbf, 0x15, 0x56, 0x68,
		0x70, 0x95, 0x0a, 0x66, 0x2e, 0x98, 0xa5, 0xc1, 0x15, 0x0d, 0xae, 0x92, 0x9d, 0xbd, 0xb2, 0x37,
		0xb8, 0x4a, 0xb4, 0x83, 0xfc, 0x81, 0xef, 0x77, 0xa3, 0x21, 0x71, 0x33, 0x6b, 0x24, 0x1f, 0x36,
		0xbf, 0xa9, 0x8e, 0xdb, 0x73, 0xa3, 0x6f, 0x03, 0x20, 0x7f, 0xdb, 0xed, 0x29, 0xbf, 0x39, 0x64,
		0x5f, 0x83, 0xc3, 0xf8, 0xed, 0xe0, 0xff, 0x7d, 0xe5, 0xdd, 0x7d, 0xbb, 0xe9, 0x06, 0xe1, 0xf4,
		0xa7, 0xb7, 0x61, 0xe4, 0x46, 0xea, 0x6d, 0x47, 0x85, 0xa1, 0x7b, 0xa7, 0xc2, 0xb7, 0x81, 0x6a,
		0x2a, 0xef, 0x5e, 0xb5, 0x0c, 0xb0, 0xbf, 0x12, 0x46, 0x41, 0xbf, 0x19, 0xf9, 0x13, 0x5f, 0xec,
		0xae, 0x77, 0x7d, 0x3a, 0x7e, 0xda, 0xf5, 0xc9, 0xf8, 0x39, 0xd7, 0xe7, 0x93, 0xe7, 0xbc, 0x48,
		0x66, 0x7e, 0x34, 0xe6, 0xa6, 0x12, 0x8e, 0xd8, 0x8c, 0xde, 0x8c, 0x4c, 0xcf, 0xfc, 0xa1, 0x15,
		0xcd, 0x95, 0x31, 0x29, 0x8f, 0xad, 0xf9, 0x71, 0x53, 0xee, 0x2d, 0xc1, 0xb9, 0xe5, 0xb8, 0xb6,
		0x14, 0xc7, 0x16, 0xe7, 0xd6, 0xe2, 0x9c, 0x5a, 0x94, 0x4b, 0x27, 0x8b, 0x65, 0x1f, 0xbc, 0xc0,
		0x70, 0xb9, 0x9c, 0x5d, 0x1e, 0x7d, 0x3c, 0x3a, 0x3c, 0x18, 0x0a, 0xbf, 0xc4, 0x5c, 0xe4, 0x39,
		0xab, 0x38, 0xc6, 0x38, 0xc6, 0x38, 0xc6, 0x99, 0x72, 0x8c, 0x69, 0xce, 0x8c, 0xef, 0x8a, 0xef,
		0x8a, 0xef, 0x8a, 0xef, 0x6a, 0xee, 0xbb, 0x1a, 0x30, 0xec, 0x51, 0x87, 0x17, 0x39, 0xda, 0x35,
		0xb6, 0x07, 0xe1, 0x82, 0x70, 0x41, 0xb8, 0x20, 0x5c, 0x10, 0x2e, 0x08, 0x17, 0x84, 0x0b, 0xc2,
		0x05, 0xe1, 0x9a, 0x4c, 0xcb, 0xaa, 0x0e, 0xa8, 0xc9, 0xf4, 0x59, 0xa5, 0xc9, 0x2a, 0xe4, 0x0c,
		0x72, 0x46, 0x93, 0xd5, 0x18, 0xb6, 0x92, 0x6a, 0xb2, 0x5a, 0xce, 0x0e, 0xab, 0x53, 0xf9, 0xfa,
		0xf9, 0x75, 0xfd, 0x8f, 0xc6, 0xd1, 0x79, 0x89, 0xf3, 0x1f, 0x4b, 0xd7, 0x7d, 0x64, 0x69, 0xd7,
		0x81, 0xd2, 0x8d, 0xc2, 0xb0, 0xd4, 0x5a, 0x79, 0xcb, 0x43, 0x96, 0x76, 0xf5, 0x3f, 0xe9, 0x2d,
		0x5d, 0xbe, 0xd6, 0x6c, 0xf3, 0x75, 0xc1, 0xa5, 0xdf, 0x1f, 0xf5, 0xbe, 0xb8, 0x8b, 0x16, 0xf6,
		0x6f, 0x92, 0xf1, 0xd2, 0x26, 0x0f, 0xc2, 0x51, 0xc3, 0x51, 0xc3, 0x51, 0xc3, 0x51, 0xcb, 0x96,
		0xa3, 0x26, 0x5b, 0xa7, 0x24, 0x47, 0xbe, 0xda, 0x13, 0xc6, 0x42, 0xbd, 0x96, 0x27, 0xe3, 0x63,
		0xb9, 0xdb, 0xae, 0x05, 0x6a, 0x97, 0xd0, 0xc0, 0x24, 0xd3, 0x85, 0x37, 0xc7, 0xe3, 0x63, 0xbd,
		0x3b, 0x6f, 0x7e, 0xc7, 0xc6, 0x76, 0xd7, 0xde, 0xfc, 0x8e, 0x4c, 0x82, 0xdd, 0x7c, 0xf3, 0x3b,
		0x48, 0xf6, 0xbb, 0xfc, 0xe6, 0x77, 0x6c, 0xec, 0x77, 0xff, 0xcd, 0xff, 0xd8, 0x58, 0xea, 0x0a,
		0x5c, 0x88, 0xb3, 0x4a, 0xba, 0x5b, 0x70, 0x11, 0x56, 0x8b, 0xbd, 0x2e, 0xc2, 0xb2, 0x91, 0x2d,
		0xb9, 0x08, 0x97, 0x85, 0x59, 0xb3, 0x55, 0x6c, 0xd4, 0x2e, 0x3f, 0xcf, 0x41, 0xc8, 0x35, 0x11,
		0x1e, 0x9e, 0xab, 0x8e, 0xe7, 0x96, 0xf8, 0x76, 0x9e, 0x36, 0x83, 0x1d, 0x5e, 0x9d, 0x87, 0xa2,
		0x41, 0x89, 0xf1, 0xe7, 0x3c, 0xdc, 0x44, 0xdb, 0xe6, 0xc9, 0xf9, 0x69, 0xfb, 0x65, 0x8f, 0x0f,
		0xe7, 0x67, 0x0c, 0x2c, 0xf1, 0xde, 0x5c, 0x9d, 0x0d, 0xd2, 0xfc, 0x36, 0x4f, 0xb3, 0x6f, 0x8f,
		0xc7, 0xe6, 0x54, 0x97, 0x42, 0xb4, 0xfb, 0xc9, 0x28, 0x25, 0xda, 0x0a, 0x3f, 0xbf, 0xae, 0x61,
		0xd2, 0x2d, 0xf2, 0x0b, 0x39, 0x52, 0x56, 0x5a, 0xe7, 0xe3, 0x50, 0xe7, 0x0a, 0x02, 0x72, 0x3f,
		0x1c, 0xe2, 0x5b, 0x3d, 0xd7, 0x23, 0x62, 0x65, 0x4b, 0xe7, 0x4e, 0xf5, 0x06, 0xab, 0x78, 0x32,
		0x3e, 0x89, 0x34, 0xcf, 0xcf, 0xef, 0x19, 0x69, 0xaf, 0xa9, 0x7e, 0x31, 0xc6, 0x84, 0x5e, 0xea,
		0x59, 0x03, 0xbc, 0x44, 0x36, 0x74, 0x3e, 0xea, 0xb3, 0xdb, 0xd9, 0xb8, 0xf9, 0x7a, 0xf7, 0xf2,
		0xb5, 0xd2, 0x9f, 0x4f, 0x77, 0xe0, 0xc0, 0x5f, 0x11, 0x72, 0x02, 0xc1, 0xb3, 0xba, 0x80, 0x6d,
		0xcf, 0x50, 0x4e, 0x52, 0xb4, 0xd8, 0xba, 0x4f, 0x87, 0xc5, 0x7a, 0x07, 0xe7, 0xfc, 0x72, 0xd2,
		0x04, 0x3a, 0x3b, 0xe7, 0x77, 0x70, 0xec, 0x75, 0x7c, 0xce, 0xef, 0x98, 0xd8, 0xec, 0x04, 0x9d,
		0xdf, 0x51, 0xb1, 0xdf, 0x21, 0x3a, 0xc7, 0xbb, 0xc8, 0x66, 0xe7, 0xe8, 0xfc, 0x0e, 0x8b, 0xdd,
		0x8e, 0xd2, 0xf9, 0x3e, 0x91, 0xac, 0x75, 0x9a, 0x86, 0x64, 0x67, 0x9e, 0x4b, 0xe5, 0x23, 0x52,
		0x64, 0x99, 0x33, 0xe5, 0x40, 0x87, 0x65, 0x8d, 0x1b, 0x65, 0xff, 0xdd, 0x6d, 0x72, 0xa0, 0x3c,
		0x08, 0x8f, 0x6c, 0x73, 0x9d, 0x1c, 0xac, 0x7e, 0x9b, 0x9c, 0x26, 0x77, 0x87, 0x80, 0x30, 0x77,
		0xc9, 0xd5, 0x5d, 0x81, 0x3c, 0x47, 0xc9, 0x59, 0x35, 0x28, 0xa2, 0x4d, 0x4f, 0x46, 0xc7, 0x4a,
		0xb3, 0xef, 0xfc, 0xf2, 0x79, 0xdb, 0x4d, 0xc0, 0xf3, 0x3c, 0x32, 0xf6, 0x9b, 0x83, 0x17, 0x63,
		0x74, 0x6c, 0x36, 0x0d, 0x2f, 0xc6, 0x08, 0xd9, 0x68, 0x26, 0x9e, 0xdf, 0x91, 0xb1, 0xd9, 0x64,
		0x9c, 0x10, 0x42, 0x26, 0x0f, 0xc8, 0x3c, 0xa4, 0x71, 0xd9, 0x3d, 0x08, 0x73, 0xd1, 0xfd, 0xde,
		0xfa, 0x81, 0x97, 0xaf, 0x51, 0xb0, 0x79, 0xb0, 0xe5, 0x6b, 0x24, 0x6c, 0x1c, 0x60, 0xf9, 0x80,
		0x42, 0x5b, 0x07, 0x55, 0x2e, 0xe6, 0xbf, 0x51, 0x3f, 0x3c, 0xfa, 0x78, 0x74, 0x48, 0x3d, 0x4d,
		0xa9, 0x4f, 0xcb, 0xd6, 0xd3, 0x8c, 0xbc, 0x8e, 0xd5, 0x32, 0x9a, 0x43, 0xfb, 0x54, 0xcf, 0x7c,
		0x76, 0xe4, 0xa8, 0x9e, 0x49, 0xf5, 0xcc, 0xd5, 0x6f, 0x24, 0x5f, 0x3d, 0x73, 0xb0, 0x2f, 0x23,
		0xaf, 0xf9, 0xdf, 0x30, 0x73, 0x8d, 0xa8, 0x3e, 0xfb, 0xa3, 0x26, 0x39, 0x15, 0xdf, 0xf5, 0xbb,
		0xa1, 0x6a, 0x76, 0xfd, 0x56, 0x58, 0xa1, 0xc1, 0x55, 0x2a, 0x98, 0xb9, 0x60, 0x96, 0x06, 0x57,
		0x34, 0xb8, 0x4a, 0x76, 0xf6, 0xca, 0xde, 0xe0, 0x2a, 0xd1, 0x0e, 0xf2, 0x07, 0xbe, 0xdf, 0x8d,
		0x86, 0xc4, 0xcd, 0xac, 0x91, 0x7c, 0xd8, 0xfc, 0xa6, 0x3a, 0x6e, 0xcf, 0x8d, 0xbe, 0x0d, 0x80,
		0xfc, 0x6d, 0xb7, 0xa7, 0xfc, 0xe6, 0x90, 0x7d, 0x0d, 0x0e, 0xe3, 0xb7, 0x83, 0xff, 0xf7, 0x95,
		0x77, 0xf7, 0xed, 0xa6, 0x1b, 0x84, 0xd3, 0x9f, 0xde, 0x86, 0x91, 0x1b, 0xa9, 0xb7, 0x1d, 0x15,
		0x86, 0xee, 0x9d, 0x0a, 0xdf, 0x86, 0x83, 0x13, 0xdc, 0x80, 0xeb, 0x86, 0x51, 0xd0, 0x6f, 0x46,
		0xfe, 0xc4, 0x0f, 0xbb, 0xeb, 0x5d, 0x9f, 0x8e, 0x9f, 0x74, 0x7d, 0x32, 0x7e, 0xc6, 0xf5, 0xc5,
		0xe0, 0x19, 0x2f, 0x92, 0x99, 0x97, 0x78, 0x9f, 0x88, 0x39, 0x83, 0xa6, 0x33, 0x27, 0x31, 0x63,
		0x1a, 0x93, 0xb5, 0xce, 0x24, 0xc5, 0x9b, 0x9f, 0xf5, 0x47, 0x39, 0xc6, 0x08, 0x57, 0x26, 0x6f,
		0xec, 0xb8, 0xad, 0x56, 0xa0, 0xc2, 0x30, 0xf6, 0x18, 0x4f, 0x79, 0xd7, 0x82, 0xa5, 0x98, 0xf3,
		0xac, 0x77, 0x58, 0x68, 0xfb, 0x3e, 0x26, 0xbe, 0x8e, 0xb9, 0x6f, 0x63, 0xea, 0xcb, 0x88, 0xf9,
		0x2e, 0x62, 0xbe, 0x8a, 0x88, 0x6f, 0x62, 0x17, 0x49, 0xb4, 0x7d, 0x8d, 0xc7, 0xca, 0xfc, 0x3d,
		0xcd, 0xd5, 0x3d, 0xbb, 0xc2, 0xb7, 0xf6, 0x35, 0x3e, 0x3b, 0xfe, 0xee, 0x7a, 0x14, 0xdf, 0xe0,
		0xbc, 0x7b, 0x7c, 0xf3, 0xfb, 0x9a, 0xc1, 0xbb, 0x2f, 0x8c, 0x81, 0x81, 0x3f, 0x55, 0x69, 0xb8,
		0x51, 0xa4, 0x02, 0xdf, 0xd8, 0xe3, 0xa9, 0xbc, 0x7c, 0xf9, 0x75, 0xd3, 0xd9, 0xbf, 0xfa, 0xf9,
		0x75, 0xcb, 0xd9, 0xbf, 0x1a, 0xfd, 0xb8, 0x35, 0xfc, 0xaf, 0xd1, 0xcf, 0xd5, 0xaf, 0x9b, 0x4e,
		0x6d, 0xf2, 0xf3, 0xce, 0xd7, 0x4d, 0x67, 0xe7, 0xea, 0xd5, 0x9f, 0x7f, 0xbe, 0x79, 0xf5, 0xf7,
		0xf6, 0x43, 0xfc, 0x0f, 0xea, 0x3b, 0xea, 0x57, 0x26, 0x43, 0x75, 0x76, 0x71, 0xf4, 0x87, 0xd8,
		0x78, 0xfd, 0x27, 0xc9, 0x01, 0xfb, 0x87, 0xc1, 0x88, 0x25, 0x49, 0x2d, 0x65, 0x36, 0xd7, 0x6e,
		0x41, 0x37, 0x97, 0xeb, 0xdc, 0x1e, 0x38, 0x1f, 0xaf, 0xfe, 0xde, 0x7a, 0x5d, 0x7b, 0x78, 0xf7,
		0xea, 0xef, 0xbd, 0x87, 0xa7, 0x7f, 0xf9, 0x73, 0xd9, 0xaf, 0x6d, 0xbd, 0xde, 0x7b, 0x78, 0xb7,
		0xe2, 0x5f, 0x76, 0x1f, 0xde, 0xad, 0x69, 0x63, 0xe7, 0xe1, 0xe5, 0xc2, 0xaf, 0x0e, 0xfe, 0xbe,
		0xba, 0xea, 0x03, 0xb5, 0x15, 0x1f, 0xd8, 0x5e, 0xf5, 0x81, 0xed, 0x15, 0x1f, 0x58, 0xf9, 0x95,
		0xaa, 0x2b, 0x3e, 0xb0, 0xf3, 0xf0, 0x73, 0xe1, 0xf7, 0x5f, 0x2e, 0xff, 0xd5, 0xdd, 0x87, 0x57,
		0x3f, 0x57, 0xfd, 0xdb, 0xde, 0xc3, 0xcf, 0x77, 0xaf, 0x8a, 0x04, 0x35, 0x2c, 0x9f, 0xe4, 0x97,
		0x4f, 0xf2, 0xc0, 0xfb, 0xc2, 0xee, 0x73, 0xec, 0x78, 0x4e, 0x3d, 0xa5, 0x02, 0xc7, 0x35, 0x70,
		0x98, 0x26, 0x06, 0xf0, 0x93, 0xf0, 0x93, 0x0a, 0xe6, 0x27, 0xb9, 0xa1, 0xe3, 0xf7, 0x3b, 0x37,
		0x2a, 0x30, 0x70, 0x93, 0xf6, 0x34, 0x3e, 0x6a, 0x76, 0x13, 0x62, 0xc0, 0xe4, 0x24, 0x6e, 0x3a,
		0xa4, 0x6e, 0x83, 0x85, 0x6e, 0x32, 0x24, 0x63, 0xdf, 0x26, 0x37, 0xfb, 0x12, 0x37, 0x13, 0xd2,
		0x43, 0x5b, 0xab, 0xee, 0xd7, 0xf6, 0x77, 0xf7, 0xaa, 0xfb, 0x3b, 0x19, 0x1a, 0xe3, 0xb2, 0x9d,
		0xbd, 0x77, 0x41, 0xb7, 0xdf, 0x33, 0x3c, 0x7e, 0x47, 0x36, 0x38, 0x81, 0x39, 0x81, 0x0b, 0x76,
		0x02, 0xb7, 0x95, 0x7b, 0xab, 0xd7, 0x3f, 0x74, 0x1a, 0x45, 0xd0, 0x39, 0x80, 0x1b, 0xe3, 0x6b,
		0x96, 0x37, 0x6f, 0xde, 0x4e, 0xff, 0xef, 0x71, 0xa3, 0x85, 0x33, 0x3f, 0xcf, 0xfc, 0xe8, 0x0c,
		0x6f, 0x49, 0xb2, 0x02, 0x2b, 0x91, 0xce, 0xd8, 0xcf, 0xa3, 0xca, 0xd0, 0x04, 0xa0, 0x02, 0xa8,
		0x14, 0x0c, 0x54, 0x74, 0x17, 0xf7, 0x1c, 0xac, 0xd4, 0x34, 0x3e, 0x5b, 0xf7, 0xfb, 0x9d, 0xc1,
		0x57, 0x7f, 0xc8, 0x00, 0x48, 0xfc, 0xaf, 0xaf, 0x46, 0xd9, 0x9d, 0x9a, 0x08, 0x31, 0xfe, 0xbc,
		0x1e, 0x3c, 0x6c, 0x01, 0x0f, 0xc0, 0x83, 0x1d, 0x78, 0xf8, 0xe0, 0x05, 0x7a, 0xd3, 0xed, 0xf9,
		0xbd, 0x7e, 0xa4, 0x3f, 0x57, 0xd3, 0x4b, 0x90, 0xa1, 0x19, 0xcd, 0xe1, 0x35, 0xf3, 0xef, 0x8c,
		0x05, 0xd4, 0x12, 0xc2, 0x69, 0x39, 0xc1, 0xb4, 0x94, 0x50, 0x5a, 0x5c, 0x20, 0x2d, 0x2e, 0x8c,
		0x16, 0x15, 0x44, 0x27, 0x2b, 0x48, 0x33, 0x16, 0x3e, 0x4f, 0xd7, 0x4b, 0xdf, 0xf3, 0xa3, 0xed,
		0xaa, 0xc0, 0xbd, 0xe1, 0x9e, 0x81, 0x09, 0x19, 0x0d, 0xb2, 0x80, 0x0c, 0x5c, 0x52, 0x73, 0x2c,
		0x2c, 0x60, 0x95, 0xd6, 0x18, 0xdb, 0x50, 0xa7, 0x0a, 0x68, 0x8a, 0x45, 0xb5, 0xc4, 0xb6, 0xa6,
		0x40, 0x2a, 0x82, 0x67, 0x75, 0x2e, 0x52, 0x52, 0xe6, 0x26, 0x75, 0x8b, 0xa7, 0xb1, 0xd6, 0x2a,
		0xdd, 0x7e, 0x24, 0xc2, 0x36, 0xc6, 0x76, 0xa0, 0x1b, 0xd0, 0x0d, 0xe8, 0x06, 0x74, 0x03, 0xba,
		0x01, 0xdd, 0x80, 0x6e, 0x14, 0x9c, 0x6e, 0x14, 0x35, 0x4d, 0x45, 0x2b, 0xa2, 0xb8, 0xf1, 0x4c,
		0x92, 0xca, 0xff, 0x3b, 0x32, 0x9a, 0x81, 0x80, 0x6b, 0xa0, 0x3a, 0xdd, 0x7b, 0xe5, 0xf4, 0x02,
		0xef, 0xde, 0x8d, 0x94, 0x91, 0xe4, 0x6a, 0xd1, 0x14, 0xb7, 0x34, 0xf6, 0x88, 0x1d, 0x61, 0xd8,
		0x54, 0x6e, 0x69, 0x16, 0x16, 0xb9, 0xd3, 0xed, 0x0d, 0x71, 0xc9, 0xe0, 0xd2, 0x46, 0xe3, 0xd8,
		0xaa, 0x1c, 0xb5, 0x94, 0x1f, 0x79, 0xd1, 0x8f, 0xf7, 0x6e, 0xa8, 0xcc, 0x1d, 0xb6, 0xf3, 0xfa,
		0xc9, 0xd9, 0x97, 0xfa, 0x75, 0xe3, 0xfc, 0xe8, 0xcb, 0xc1, 0x65, 0xfd, 0xfa, 0xe0, 0x62, 0x5c,
		0x80, 0x48, 0x77, 0x49, 0x09, 0x14, 0xe9, 0x14, 0x2a, 0x2d, 0x32, 0xf3, 0x4a, 0xe7, 0xf5, 0xc6,
		0xf1, 0xc1, 0x61, 0xfd, 0xfa, 0xe0, 0xf8, 0xb8, 0x92, 0x86, 0xd8, 0xca, 0xc6, 0x1b, 0x0d, 0xa7,
		0xcd, 0xec, 0x85, 0x5e, 0x24, 0x43, 0x2b, 0xb2, 0x70, 0xbb, 0x18, 0x74, 0xfb, 0x91, 0x72, 0x6e,
		0xdb, 0x6e, 0xcf, 0x69, 0xb9, 0x9d, 0x9e, 0xe7, 0xdf, 0x19, 0x9c, 0x76, 0x8b, 0xb6, 0xe2, 0xde,
		0x09, 0xa9, 0x5b, 0xb7, 0xdf, 0x1e, 0xa2, 0xe5, 0xad, 0xdb, 0x0e, 0x11, 0x35, 0x70, 0x5c, 0x16,
		0xee, 0xb8, 0xbc, 0xe9, 0x76, 0xdb, 0xca, 0x35, 0x3a, 0x1d, 0xb7, 0x32, 0x00, 0x1c, 0xa1, 0xf2,
		0x5b, 0x4e, 0xb3, 0xdb, 0xe9, 0xf4, 0x7d, 0x2f, 0xfa, 0xa1, 0x0f, 0x1a, 0x4f, 0xec, 0xe8, 0x03,
		0xc6, 0xe9, 0xd9, 0x69, 0x1d, 0xbc, 0x00, 0x2f, 0x8a, 0x86, 0x17, 0xd3, 0xbd, 0x51, 0x7a, 0x25,
		0x54, 0xa8, 0xc2, 0xd0, 0xeb, 0xfa, 0xce, 0x30, 0x0a, 0x61, 0x82, 0x38, 0xb3, 0x66, 0x40, 0x0c,
		0x10, 0xa3, 0x60, 0x88, 0xa1, 0xfc, 0x7e, 0x47, 0x05, 0xae, 0xa9, 0x0f, 0x9e, 0x7b, 0xb8, 0xe8,
		0xf7, 0x7a, 0xdd, 0x20, 0x52, 0x2d, 0xa7, 0xe9, 0xf6, 0xdc, 0x1b, 0xaf, 0xed, 0x45, 0x9e, 0x89,
		0x90, 0x72, 0x85, 0x3d, 0x00, 0x04, 0x00, 0x29, 0x18, 0x80, 0x78, 0xe3, 0x48, 0x9a, 0x61, 0x42,
		0x47, 0xfa, 0x41, 0xbc, 0xf7, 0x9f, 0x1a, 0xb3, 0xd5, 0xb2, 0x73, 0x1f, 0xba, 0x3b, 0xf8, 0xf0,
		0xe1, 0xba, 0x71, 0x70, 0xf9, 0xfb, 0x45, 0x9e, 0xa3, 0x75, 0x73, 0xcd, 0xf3, 0xf3, 0xfc, 0x22,
		0x27, 0x8d, 0xf7, 0x9f, 0x1a, 0x79, 0x7e, 0x81, 0x4f, 0xe7, 0x07, 0x87, 0xf5, 0x8f, 0x9f, 0x8f,
		0xaf, 0xcf, 0xeb, 0x17, 0x97, 0x07, 0xe7, 0x97, 0x79, 0x7e, 0x97, 0xfa, 0x1f, 0x97, 0xf5, 0xd3,
		0x0f, 0xf5, 0x0f, 0xd7, 0xa7, 0xf5, 0x3f, 0x2e, 0x7f, 0x3f, 0x6b, 0x5c, 0xd7, 0x4f, 0x0f, 0xcf,
		0x3e, 0x1c, 0x9d, 0x7e, 0xca, 0xf3, 0x4b, 0x1d, 0x5c, 0x9c, 0x6e, 0x57, 0x0b, 0x17, 0xc8, 0x8e,
		0x79, 0x9e, 0x1d, 0x7b, 0x61, 0x74, 0x10, 0x45, 0x9a, 0xd9, 0x02, 0x27, 0x9e, 0x5f, 0x6f, 0xab,
		0xc1, 0x89, 0x1d, 0xea, 0xe9, 0x2c, 0x2a, 0x27, 0xee, 0xf7, 0x19, 0x0b, 0x32, 0x45, 0x60, 0x2b,
		0x67, 0x41, 0x4b, 0x05, 0xaa, 0xf5, 0xfe, 0x47, 0xe5, 0xdd, 0x86, 0xdf, 0x6f, 0xb7, 0x6d, 0xf1,
		0xe5, 0x17, 0x82, 0x33, 0xa2, 0xab, 0x39, 0x30, 0xd0, 0x1a, 0xac, 0xb7, 0xf6, 0x9f, 0x7f, 0xcb,
		0x35, 0xde, 0x70, 0x58, 0xc8, 0x3b, 0x58, 0xdf, 0x3f, 0x98, 0x2b, 0x00, 0x1e, 0xac, 0xeb, 0x07,
		0xc4, 0x4c, 0xac, 0x8a, 0xcd, 0xfb, 0x75, 0xf8, 0xbe, 0x3e, 0xcf, 0xd7, 0xe5, 0xf7, 0xc6, 0xbc,
		0xde, 0x98, 0xcf, 0x1b, 0xf1, 0x78, 0xd9, 0x5d, 0x15, 0x37, 0x11, 0xaa, 0xd2, 0x9c, 0xac, 0x09,
		0x4d, 0x47, 0x76, 0xfc, 0x79, 0x32, 0x02, 0x71, 0x5c, 0x33, 0x75, 0xd0, 0x6b, 0x67, 0x04, 0x36,
		0xbb, 0xbe, 0xaf, 0x9a, 0x91, 0x13, 0xa8, 0x28, 0xf8, 0x61, 0xee, 0x35, 0xce, 0x9b, 0xd3, 0x1c,
		0xee, 0x99, 0x9b, 0xa9, 0xed, 0x4d, 0x74, 0xff, 0xe8, 0xfe, 0x93, 0xde, 0xab, 0x66, 0x4e, 0x40,
		0xfa, 0xba, 0xff, 0x96, 0x6a, 0x7a, 0x1d, 0xb7, 0x6d, 0xd4, 0x55, 0x65, 0x7a, 0x68, 0x55, 0x0d,
		0x6c, 0x2c, 0x48, 0x9f, 0xab, 0x24, 0x12, 0x2c, 0x1f, 0xe6, 0x2a, 0x89, 0x04, 0x31, 0x1d, 0x4b,
		0xf1, 0x29, 0xd8, 0x2e, 0xd1, 0x14, 0x90, 0xae, 0xb8, 0x30, 0xcc, 0xdf, 0xba, 0xed, 0x96, 0x59,
		0x27, 0xba, 0x29, 0xfe, 0x3e, 0x9a, 0x32, 0x67, 0x40, 0xfb, 0x30, 0x20, 0x18, 0x10, 0x0c, 0x08,
		0x06, 0x04, 0x03, 0x82, 0x01, 0xc1, 0x80, 0x60, 0x40, 0xf6, 0x18, 0xd0, 0x7f, 0x95, 0xea, 0xb9,
		0x6d, 0xef, 0x5e, 0x39, 0x9e, 0x1f, 0xa9, 0xe0, 0xde, 0x6d, 0x9b, 0x53, 0xa1, 0x25, 0x36, 0x89,
		0x0a, 0xc1, 0x89, 0xe0, 0x44, 0x70, 0x22, 0x38, 0x11, 0x9c, 0x08, 0x4e, 0x04, 0x27, 0xca, 0x34,
		0x27, 0xea, 0x78, 0xbe, 0xd7, 0xe9, 0x77, 0x1c, 0xb7, 0x75, 0xaf, 0x82, 0xc8, 0x0b, 0x87, 0x62,
		0x16, 0x41, 0x7e, 0xf4, 0x8c, 0x7d, 0xb8, 0x12, 0x5c, 0x09, 0xae, 0x04, 0x57, 0x82, 0x2b, 0xc1,
		0x95, 0xe0, 0x4a, 0x70, 0x25, 0x2a, 0x70, 0x6d, 0x68, 0xab, 0x62, 0x47, 0x62, 0xd3, 0xb7, 0x63,
		0x09, 0x5f, 0x16, 0xb2, 0xec, 0x0c, 0x93, 0x71, 0x0d, 0x92, 0x70, 0xb5, 0xa5, 0x88, 0x55, 0xa4,
		0x88, 0x69, 0x92, 0x34, 0xa4, 0x88, 0x6b, 0xaf, 0x1a, 0xa4, 0x88, 0x38, 0x52, 0x38, 0x52, 0x38,
		0x52, 0x38, 0x52, 0x38, 0x52, 0x38, 0x52, 0x38, 0x52, 0x69, 0x39, 0x52, 0x48, 0x11, 0x61, 0x40,
		0x30, 0x20, 0x18, 0x10, 0x0c, 0x08, 0x06, 0x04, 0x03, 0x82, 0x01, 0xc1, 0x80, 0xd6, 0x18, 0x66,
		0xa4, 0x88, 0x70, 0x22, 0x38, 0x11, 0x9c, 0x08, 0x4e, 0x04, 0x27, 0x82, 0x13, 0xc1, 0x89, 0xe0,
		0x44, 0x48, 0x11, 0xe1, 0x4a, 0x70, 0x25, 0xb8, 0x12, 0x5c, 0x09, 0xae, 0x04, 0x57, 0x82, 0x2b,
		0xc1, 0x95, 0x7e, 0x35, 0xcc, 0xbe, 0xba, 0xeb, 0x46, 0x9e, 0x1b, 0xa9, 0x96, 0x23, 0x78, 0x99,
		0xb6, 0xd4, 0x2a, 0x94, 0x06, 0x4a, 0x03, 0xa5, 0x81, 0xd2, 0x40, 0x69, 0xa0, 0x34, 0x50, 0x1a,
		0x28, 0x8d, 0xfc, 0x27, 0xf2, 0x94, 0x5d, 0x11, 0xa3, 0xf4, 0x78, 0xfc, 0xc1, 0xc8, 0x71, 0x49,
		0xf6, 0x58, 0x95, 0xce, 0x37, 0x9e, 0x69, 0xf8, 0x7e, 0x39, 0x32, 0x96, 0x64, 0x81, 0xf7, 0xc0,
		0xf5, 0xc3, 0x5e, 0x37, 0x88, 0x34, 0x6a, 0xbc, 0x4f, 0x3f, 0x4a, 0x99, 0xf7, 0x04, 0x99, 0x2c,
		0x65, 0xde, 0x29, 0xf3, 0x6e, 0xd3, 0x75, 0x23, 0xb7, 0x2a, 0x85, 0x93, 0x5d, 0x3b, 0xb7, 0xaa,
		0xdd, 0x6d, 0xba, 0x6d, 0xc7, 0x6d, 0xb5, 0x02, 0x15, 0x86, 0xe6, 0x81, 0x90, 0x79, 0x73, 0x44,
		0x40, 0x88, 0x80, 0x10, 0x01, 0x89, 0xb5, 0x5e, 0xfa, 0xbe, 0x5e, 0x87, 0xd1, 0x85, 0xb3, 0x66,
		0xdf, 0xc0, 0xc6, 0xf8, 0x75, 0x52, 0x8f, 0x57, 0x4c, 0x7b, 0x27, 0xf6, 0x0c, 0x21, 0x45, 0x7a,
		0x84, 0x64, 0x47, 0x4a, 0x6e, 0xc4, 0x96, 0x8c, 0xdc, 0x7d, 0x4d, 0x70, 0xec, 0x16, 0xc6, 0xf0,
		0x37, 0x41, 0x9b, 0x0d, 0x37, 0x8a, 0x54, 0xe0, 0x8b, 0x0d, 0xe7, 0xd4, 0xf0, 0xcb, 0x97, 0x5f,
		0x37, 0x9d, 0xfd, 0xab, 0x9f, 0x5f, 0xb7, 0x9c, 0xfd, 0xab, 0xd1, 0x8f, 0x5b, 0xc3, 0xff, 0x1a,
		0xfd, 0x5c, 0xfd, 0xba, 0xe9, 0xd4, 0x26, 0x3f, 0xef, 0x7c, 0xdd, 0x74, 0x76, 0xae, 0x5e, 0xfd,
		0xf9, 0xe7, 0x9b, 0x57, 0x7f, 0x6f, 0x3f, 0xc4, 0xff, 0x60, 0x45, 0xec, 0xab, 0x5f, 0x49, 0x0e,
		0xed, 0xd9, 0xc5, 0xd1, 0x1f, 0xd6, 0xc6, 0xf7, 0x3f, 0x49, 0x0e, 0xf0, 0x3f, 0x04, 0x47, 0x58,
		0xc4, 0xd2, 0xc3, 0xeb, 0x0c, 0x6f, 0xfe, 0x5d, 0x36, 0xff, 0x70, 0x89, 0xb9, 0xce, 0xed, 0x81,
		0xf3, 0xf1, 0xea, 0xef, 0xad, 0xd7, 0xb5, 0x87, 0x77, 0xaf, 0xfe, 0xde, 0x7b, 0x78, 0xfa, 0x97,
		0x3f, 0x97, 0xfd, 0xda, 0xd6, 0xeb, 0xbd, 0x87, 0x77, 0x2b, 0xfe, 0x65, 0xf7, 0xe1, 0xdd, 0x9a,
		0x36, 0x76, 0x1e, 0x5e, 0x2e, 0xfc, 0xea, 0xe0, 0xef, 0xab, 0xab, 0x3e, 0x50, 0x5b, 0xf1, 0x81,
		0xed, 0x55, 0x1f, 0xd8, 0x5e, 0xf1, 0x81, 0x95, 0x5f, 0xa9, 0xba, 0xe2, 0x03, 0x3b, 0x0f, 0x3f,
		0x17, 0x7e, 0xff, 0xe5, 0xf2, 0x5f, 0xdd, 0x7d, 0x78, 0xf5, 0x73, 0xd5, 0xbf, 0xed, 0x3d, 0xfc,
		0x7c, 0xf7, 0xaa, 0xcc, 0x50, 0xc8, 0x72, 0x4b, 0x7e, 0xb9, 0x65, 0xef, 0x60, 0x78, 0x91, 0xee,
		0xf7, 0x30, 0x3c, 0x98, 0x04, 0xf9, 0x7b, 0x18, 0x05, 0x9e, 0x7f, 0x27, 0xc9, 0xdd, 0x7f, 0x43,
		0xda, 0xb2, 0x30, 0x36, 0x9d, 0xa8, 0xef, 0xb4, 0xbc, 0xb0, 0xd9, 0xbd, 0x57, 0x12, 0x65, 0x72,
		0xe6, 0xcd, 0x99, 0x8b, 0x7c, 0x6f, 0xdd, 0x76, 0x88, 0x28, 0x86, 0x90, 0x10, 0x21, 0xa1, 0x98,
		0xeb, 0xe5, 0xa6, 0xdb, 0x6d, 0x2b, 0x57, 0x24, 0x28, 0xb4, 0x95, 0x61, 0xf8, 0xea, 0xb9, 0x61,
		0xe8, 0xdd, 0x2b, 0xa7, 0xd3, 0x6d, 0x09, 0x28, 0xf2, 0xe6, 0xac, 0x01, 0x5e, 0x80, 0x17, 0xe0,
		0x05, 0x78, 0xd9, 0x03, 0xaf, 0xa8, 0xd9, 0x73, 0x3a, 0x12, 0x17, 0x68, 0x13, 0x43, 0x40, 0x0d,
		0x50, 0x03, 0xd4, 0xc4, 0x5a, 0x2f, 0x7d, 0xcf, 0x8f, 0xb6, 0x76, 0x05, 0x90, 0x66, 0x17, 0xad,
		0xaf, 0x28, 0xac, 0x2c, 0x98, 0x43, 0xeb, 0x9b, 0x99, 0x29, 0xd8, 0xdd, 0xd9, 0xd9, 0xde, 0x41,
		0xef, 0x9b, 0x5a, 0x9c, 0xa7, 0x80, 0x7a, 0xdf, 0x89, 0xac, 0x93, 0x82, 0xea, 0x14, 0x54, 0x4f,
		0x9c, 0x62, 0x21, 0xfa, 0x5b, 0xe3, 0x83, 0x88, 0xfe, 0xf0, 0x5c, 0xf0, 0x5c, 0x32, 0xe4, 0xb9,
		0x20, 0xfa, 0x5b, 0x1c, 0x14, 0x44, 0x7f, 0xfa, 0x23, 0x87, 0xe8, 0x0f, 0xd1, 0x1f, 0xa2, 0x3f,
		0x41, 0xcf, 0xce, 0x42, 0x78, 0x60, 0x03, 0xd1, 0x1f, 0xa2, 0x3f, 0x44, 0x7f, 0xc5, 0x81, 0x42,
		0x96, 0x1b, 0xa2, 0x3f, 0x44, 0x7f, 0x88, 0xfe, 0xf4, 0x83, 0xc1, 0xaf, 0x75, 0x43, 0x39, 0xb1,
		0x12, 0xf0, 0x9f, 0x89, 0xe3, 0xc4, 0xc8, 0xc8, 0x27, 0x88, 0x43, 0x10, 0x87, 0x20, 0xce, 0x44,
		0x71, 0xd6, 0x0d, 0x22, 0xc7, 0xef, 0x77, 0x6e, 0x54, 0xc0, 0x1d, 0xf4, 0xe8, 0x8b, 0x70, 0x07,
		0x9d, 0xb6, 0x93, 0xc9, 0x1d, 0x34, 0x77, 0xd0, 0x36, 0x68, 0x07, 0xb9, 0x06, 0x90, 0x18, 0x48,
		0x4c, 0xf1, 0x48, 0x0c, 0xb9, 0x06, 0x3a, 0xcc, 0x8f, 0x5c, 0x03, 0xc0, 0x0b, 0xf0, 0x02, 0xbc,
		0x92, 0x01, 0xaf, 0x40, 0x75, 0xba, 0x91, 0x92, 0x93, 0xef, 0x3c, 0xb1, 0x07, 0xf0, 0x00, 0x3c,
		0x00, 0x4f, 0xac, 0xf5, 0x22, 0x22, 0x55, 0x29, 0xa8, 0x88, 0x47, 0x54, 0x8a, 0x22, 0x79, 0x0b,
		0x2d, 0x7e, 0xfb, 0x9c, 0x33, 0xc9, 0xc9, 0x95, 0xc4, 0x10, 0xda, 0xb8, 0x57, 0xcd, 0x9d, 0xb4,
		0xa4, 0x28, 0x37, 0x76, 0xc2, 0xd2, 0x91, 0x3c, 0x6c, 0x56, 0xee, 0xec, 0xf3, 0x28, 0x11, 0xc9,
		0x3c, 0x74, 0xb1, 0xac, 0x72, 0x29, 0x05, 0xb9, 0x22, 0xd2, 0xbf, 0xca, 0xdb, 0x94, 0x51, 0x18,
		0xcc, 0x1a, 0xc3, 0xcf, 0xc4, 0xcf, 0xc4, 0xcf, 0x8c, 0x17, 0x68, 0x46, 0x62, 0xf0, 0xf4, 0x8b,
		0x20, 0x31, 0xd8, 0x48, 0xd1, 0xf9, 0xd8, 0x40, 0x62, 0x80, 0xc4, 0xc0, 0x12, 0xf1, 0xa0, 0xa4,
		0x0e, 0x84, 0x03, 0xc2, 0x91, 0x2e, 0xe1, 0xa0, 0xa4, 0x0e, 0x5c, 0x03, 0xae, 0x01, 0xd7, 0xc8,
		0x15, 0xd7, 0x28, 0x72, 0x49, 0x1d, 0xba, 0x68, 0x3e, 0x33, 0x42, 0x52, 0x8d, 0x34, 0xa7, 0xf6,
		0x12, 0xec, 0xa5, 0xd9, 0x0f, 0x95, 0xd3, 0xe9, 0xb7, 0x23, 0xaf, 0xd7, 0x56, 0xce, 0x60, 0x00,
		0xc2, 0xf8, 0x4d, 0x35, 0x97, 0xd8, 0xa0, 0xbb, 0x66, 0x82, 0xbc, 0x94, 0xee, 0x9a, 0x74, 0xd7,
		0xb4, 0xe9, 0x88, 0x51, 0x68, 0x2b, 0x85, 0x43, 0x5f, 0xbb, 0xd0, 0x96, 0xf2, 0xdd, 0x9b, 0xb6,
		0x6a, 0x99, 0xc7, 0x30, 0x26, 0x86, 0x50, 0x17, 0x13, 0x0b, 0x21, 0x16, 0x92, 0x4a, 0x2c, 0x24,
		0x8f, 0xea, 0xe2, 0xe2, 0xb9, 0x42, 0x8b, 0xfc, 0x36, 0x43, 0x65, 0x46, 0xd5, 0x60, 0x63, 0x68,
		0xb3, 0x1f, 0x15, 0x1f, 0x8e, 0xe0, 0x3e, 0x70, 0x9f, 0xac, 0x72, 0x1f, 0x4d, 0x67, 0x40, 0xc6,
		0x29, 0x30, 0xdc, 0x20, 0x30, 0x16, 0x18, 0x4b, 0x5a, 0x8c, 0x45, 0x77, 0xc3, 0x4d, 0x0d, 0xb8,
		0xed, 0x76, 0xf7, 0xaf, 0xc7, 0x43, 0xd2, 0x0d, 0xcd, 0xe7, 0x7b, 0xb2, 0x02, 0x17, 0x4d, 0x1b,
		0x4e, 0x93, 0x90, 0x63, 0x22, 0xe4, 0xa0, 0x88, 0x6d, 0x7b, 0xc9, 0xed, 0x2f, 0x0f, 0x03, 0xd2,
		0x70, 0x60, 0x0d, 0x16, 0xac, 0xc1, 0x83, 0x15, 0x98, 0x30, 0x83, 0x0b, 0x43, 0xd8, 0x90, 0x73,
		0x78, 0x2c, 0x38, 0x3e, 0x42, 0x0e, 0x90, 0xf9, 0x00, 0x27, 0x8b, 0xe4, 0x86, 0x0e, 0x92, 0xb8,
		0xa3, 0x34, 0x70, 0x30, 0xb4, 0xbc, 0x25, 0x03, 0x0f, 0x54, 0x83, 0xe5, 0xeb, 0x35, 0x6b, 0x58,
		0x58, 0xb6, 0x3a, 0x4d, 0x1b, 0xc4, 0x69, 0x63, 0x15, 0xda, 0x08, 0x6d, 0x84, 0x36, 0x42, 0x1b,
		0xa1, 0x8d, 0xd0, 0x46, 0x68, 0x23, 0xb4, 0x31, 0xaf, 0xb4, 0x51, 0x43, 0x78, 0x64, 0xc0, 0x1a,
		0x4b, 0x71, 0x6f, 0xa1, 0x34, 0xa3, 0xe0, 0xbf, 0x90, 0x2d, 0x7d, 0x0e, 0xd5, 0xc9, 0xf8, 0x21,
		0x8d, 0xc1, 0x33, 0xae, 0xeb, 0xb1, 0xa1, 0x89, 0x06, 0x6c, 0x34, 0x60, 0xe3, 0x6e, 0xc4, 0x2e,
		0xe7, 0x46, 0x17, 0x22, 0xcb, 0x9b, 0x71, 0x97, 0x71, 0x97, 0x93, 0xe6, 0xbb, 0xe8, 0x42, 0xb2,
		0xce, 0xaf, 0xd0, 0xca, 0xaf, 0x3b, 0x54, 0x42, 0xa2, 0xf9, 0xa7, 0xec, 0x53, 0x4c, 0x3b, 0xff,
		0xc2, 0x60, 0x8c, 0x07, 0x28, 0x3a, 0xf8, 0xa6, 0x93, 0xd7, 0x5f, 0xb3, 0xc0, 0x51, 0xe5, 0xd8,
		0x0b, 0xa3, 0x83, 0x28, 0x5a, 0xef, 0x80, 0xaf, 0x9c, 0x78, 0x7e, 0xbd, 0xad, 0x06, 0x50, 0x18,
		0xae, 0x77, 0x8c, 0x55, 0x4e, 0xdc, 0xef, 0x33, 0x9f, 0xd8, 0xfa, 0xad, 0x56, 0xdb, 0xdd, 0xab,
		0xd5, 0x36, 0xf7, 0xb6, 0xf7, 0x36, 0xf7, 0x77, 0x76, 0xb6, 0x76, 0xb7, 0xd6, 0x48, 0x21, 0xaa,
		0x9c, 0x05, 0x2d, 0x15, 0xa8, 0xd6, 0xfb, 0xc1, 0x1b, 0xfa, 0xfd, 0x76, 0xdb, 0x68, 0xa0, 0x62,
		0x2e, 0x42, 0xad, 0xc5, 0xb7, 0xc6, 0x4a, 0xfb, 0xc5, 0x0a, 0xfb, 0xf5, 0x82, 0x5a, 0xbd, 0x4c,
		0x96, 0xff, 0xcb, 0x8a, 0xf1, 0x58, 0x77, 0x1c, 0xe2, 0xbc, 0xff, 0xf2, 0x2f, 0xbe, 0xf8, 0xb5,
		0x96, 0x7c, 0xa5, 0x4a, 0x4f, 0xa9, 0xc0, 0xb9, 0x0b, 0xba, 0xfd, 0xde, 0xea, 0x88, 0xec, 0x63,
		0x85, 0x88, 0x99, 0x5f, 0x5e, 0xf1, 0x7a, 0xbf, 0x76, 0x8b, 0x9e, 0xe5, 0x62, 0xeb, 0x70, 0xad,
		0xf5, 0xb9, 0xd4, 0xba, 0x5c, 0x29, 0x36, 0x17, 0x8a, 0xcd, 0x75, 0x62, 0x71, 0x99, 0x78, 0x0b,
		0xea, 0x39, 0x37, 0x61, 0x66, 0xd6, 0x9e, 0x1f, 0x88, 0xc5, 0x99, 0x7e, 0x6e, 0x24, 0xd6, 0xf3,
		0x83, 0xd7, 0x26, 0xe1, 0x71, 0xc8, 0x76, 0x7c, 0x52, 0x1d, 0x97, 0x3c, 0x6b, 0x93, 0x64, 0x6d,
		0x32, 0xac, 0x45, 0x7a, 0xcd, 0x8e, 0xb0, 0x75, 0xfd, 0xcc, 0x8a, 0x7b, 0xeb, 0x39, 0xa1, 0x7b,
		0xeb, 0x69, 0x24, 0x8e, 0x3d, 0x7e, 0x94, 0x7c, 0xb1, 0x04, 0x7d, 0xb4, 0x52, 0xe7, 0x8b, 0x4d,
		0xd6, 0x9c, 0x7e, 0x60, 0x70, 0x6a, 0x01, 0xdd, 0x34, 0xb1, 0xc1, 0x62, 0xc4, 0x06, 0xdd, 0x56,
		0x2b, 0x66, 0xf2, 0xef, 0xea, 0xdd, 0x31, 0x35, 0x85, 0x7a, 0x9a, 0xb8, 0x5e, 0x29, 0xe2, 0x7a,
		0xc6, 0x32, 0x18, 0xc3, 0xb4, 0x85, 0x85, 0x65, 0x67, 0x94, 0xbe, 0x20, 0xb4, 0x11, 0xc5, 0x36,
		0xa4, 0xe4, 0xc6, 0x94, 0xdf, 0xa0, 0xd2, 0x1b, 0xd5, 0xda, 0x86, 0xb5, 0xb6, 0x71, 0xad, 0x6c,
		0x60, 0xb3, 0x8d, 0x6c, 0xb8, 0xa1, 0xc5, 0x36, 0xf6, 0xd4, 0x90, 0x6a, 0x7b, 0x77, 0xde, 0x4d,
		0x5b, 0x39, 0xa3, 0xa9, 0x74, 0x7a, 0xdd, 0xb6, 0xd7, 0xfc, 0x21, 0xb7, 0x58, 0xa6, 0x57, 0x73,
		0xcb, 0x9f, 0xf3, 0x3a, 0x93, 0xb5, 0x8b, 0xa4, 0x80, 0xc1, 0x06, 0x40, 0xd8, 0x03, 0x0a, 0x5b,
		0x80, 0x61, 0x1d, 0x38, 0xac, 0x03, 0x88, 0x55, 0x20, 0x91, 0x01, 0x14, 0x21, 0x60, 0x99, 0xbe,
		0xa9, 0x98, 0x02, 0x6e, 0x61, 0xbd, 0xb6, 0x95, 0x7b, 0x1b, 0xa8, 0x5b, 0xc9, 0x05, 0x3b, 0xe1,
		0x03, 0x7b, 0x82, 0x36, 0x1b, 0xd3, 0x48, 0x76, 0xd3, 0x09, 0x7a, 0xdd, 0xf6, 0xbb, 0xa0, 0xdb,
		0x8f, 0x3c, 0xff, 0x6e, 0x8c, 0x5c, 0xd3, 0xbf, 0x1e, 0xfd, 0x4f, 0xa7, 0xa5, 0x6e, 0x3d, 0xdf,
		0x8b, 0xbc, 0xae, 0x1f, 0xae, 0xfe, 0xa7, 0xe9, 0xbf, 0x0c, 0xc3, 0xf9, 0x19, 0xe9, 0xb0, 0x2f,
		0x51, 0x88, 0x2e, 0x50, 0x4d, 0xe5, 0xdd, 0x2b, 0xf9, 0x63, 0x63, 0x62, 0x58, 0x68, 0x55, 0x0b,
		0x2b, 0xa5, 0x39, 0x7f, 0x38, 0x7f, 0x38, 0x7f, 0x72, 0x76, 0xfe, 0xc8, 0x29, 0xb1, 0x17, 0xce,
		0x9f, 0xad, 0x02, 0x41, 0x7a, 0xa8, 0xfc, 0x96, 0x3c, 0x9e, 0x0f, 0xad, 0x02, 0xe6, 0x80, 0x39,
		0x60, 0x0e, 0x98, 0x03, 0xe6, 0x49, 0x82, 0xb9, 0xd3, 0x91, 0xac, 0x16, 0x3d, 0x0b, 0xe8, 0x43,
		0xcb, 0x80, 0x2f, 0xe0, 0x0b, 0xf8, 0x96, 0x0a, 0x7c, 0xfb, 0x9e, 0x1f, 0xfd, 0x66, 0x01, 0x7a,
		0x77, 0x04, 0x4d, 0xca, 0xb4, 0x4b, 0x78, 0xfa, 0x47, 0x76, 0x3b, 0x6d, 0x48, 0xb7, 0x53, 0xb0,
		0x8c, 0xaa, 0x0b, 0xe6, 0x85, 0xdb, 0x2d, 0x2c, 0xd8, 0xb7, 0x50, 0xf7, 0xdf, 0xd2, 0x6e, 0x9b,
		0x9f, 0x52, 0xf7, 0x7b, 0xee, 0xa7, 0xb4, 0xba, 0xb3, 0x93, 0xe3, 0x49, 0x7d, 0x91, 0x4d, 0x6b,
		0x57, 0x59, 0xa1, 0x96, 0xa9, 0xde, 0x61, 0x0a, 0x65, 0x76, 0x3f, 0x92, 0xdc, 0x67, 0x15, 0xe8,
		0x33, 0x7a, 0xf0, 0x99, 0x9f, 0xdf, 0x4e, 0xc5, 0x9e, 0xd3, 0x9f, 0xde, 0x4e, 0xb5, 0x42, 0x46,
		0x15, 0x82, 0xcc, 0xc7, 0xd9, 0x60, 0x8c, 0x0d, 0x2b, 0x07, 0x2d, 0x32, 0x7d, 0x83, 0x0a, 0x42,
		0x0b, 0xce, 0x95, 0x94, 0x72, 0xa3, 0x8a, 0x72, 0x23, 0x03, 0xb4, 0x1d, 0xe5, 0xc6, 0xfa, 0x6f,
		0x84, 0x72, 0x03, 0x7f, 0x1f, 0x7f, 0x1f, 0x7f, 0x3f, 0x87, 0xfe, 0x3e, 0xca, 0x0d, 0x94, 0x1b,
		0x6b, 0x2f, 0x16, 0x94, 0x1b, 0x9c, 0x3f, 0x9c, 0x3f, 0x9c, 0x3f, 0x82, 0xeb, 0x95, 0xcb, 0xbe,
		0xf5, 0xfc, 0x7e, 0x94, 0x1b, 0x80, 0x39, 0x60, 0x0e, 0x98, 0x03, 0xe6, 0xc5, 0x00, 0x73, 0x94,
		0x1b, 0x80, 0x2f, 0xe0, 0x0b, 0xf8, 0xca, 0xad, 0x57, 0x94, 0x1b, 0x82, 0x0b, 0x12, 0xe5, 0xc6,
		0x6a, 0xfb, 0x28, 0x37, 0x52, 0x9b, 0x52, 0x94, 0x1b, 0x16, 0xac, 0xa1, 0xdc, 0xc8, 0x8f, 0x72,
		0xc3, 0xa0, 0x48, 0xbf, 0xf9, 0x30, 0x17, 0xb5, 0x49, 0x82, 0xc6, 0x44, 0x54, 0x8c, 0x34, 0x2c,
		0x4f, 0xab, 0x5f, 0x36, 0x94, 0x0a, 0x3e, 0x0d, 0x9e, 0x79, 0x7d, 0x70, 0xeb, 0x5d, 0xb8, 0xb7,
		0xde, 0xf5, 0x41, 0xab, 0x15, 0xa3, 0xc0, 0xaa, 0xf9, 0x44, 0xe9, 0x74, 0xf1, 0x9a, 0x8c, 0x8a,
		0x33, 0x7e, 0x15, 0xd3, 0x52, 0x46, 0x73, 0xe6, 0x28, 0x53, 0x4e, 0x39, 0xa3, 0x94, 0x1c, 0xa8,
		0xbc, 0x96, 0x29, 0x37, 0xbf, 0xca, 0x96, 0xb8, 0xba, 0x9e, 0x5e, 0x55, 0xbf, 0x79, 0x33, 0x3a,
		0xad, 0xde, 0xce, 0x6f, 0xec, 0x2c, 0x03, 0x5a, 0xaf, 0xd7, 0xfe, 0x61, 0xaa, 0x39, 0x7a, 0xc4,
		0xb3, 0x59, 0x6b, 0x54, 0x67, 0xab, 0x8c, 0xd5, 0x06, 0xe0, 0x99, 0x06, 0x9e, 0x0d, 0x07, 0x8e,
		0xfa, 0x6c, 0x7a, 0x0b, 0x8f, 0xfa, 0x6c, 0xc9, 0x6d, 0x51, 0xe9, 0xad, 0x6a, 0x6d, 0xcb, 0x5a,
		0xdb, 0xba, 0x76, 0xb6, 0x70, 0x36, 0x7c, 0x64, 0x31, 0x9d, 0x6f, 0x6b, 0x74, 0x59, 0xee, 0xa8,
		0xef, 0xbd, 0x6e, 0x10, 0x59, 0x93, 0xf9, 0x2e, 0x7f, 0x8c, 0xfc, 0x85, 0xff, 0x79, 0xfd, 0xff,
		0xea, 0x87, 0x97, 0xd7, 0xe7, 0x67, 0x9f, 0x2f, 0xeb, 0x5c, 0x3d, 0x65, 0x09, 0x87, 0x6c, 0xe1,
		0x91, 0x75, 0x5c, 0xb2, 0x8e, 0x4f, 0x76, 0x71, 0x4a, 0x36, 0x4a, 0x99, 0xfd, 0xcb, 0xa7, 0x09,
		0xd2, 0x8c, 0x45, 0xb6, 0xd1, 0xe0, 0x41, 0x16, 0x54, 0x00, 0x35, 0x41, 0x9b, 0x75, 0xbf, 0xdf,
		0x19, 0x0c, 0xc6, 0x43, 0x81, 0x94, 0x05, 0x93, 0x69, 0xf0, 0x3a, 0x89, 0x9c, 0x2b, 0xf3, 0x8f,
		0xe1, 0x5c, 0xe1, 0x5c, 0xe1, 0x5c, 0xe1, 0x5c, 0xe1, 0x5c, 0x29, 0xdc, 0xb9, 0x62, 0xd9, 0x4f,
		0xb1, 0xe2, 0x9f, 0x00, 0xf4, 0x00, 0x3d, 0x40, 0x9f, 0x17, 0xa0, 0x27, 0x0f, 0x51, 0x34, 0x0f,
		0x51, 0x68, 0xbe, 0x63, 0xb5, 0x08, 0x5d, 0xdb, 0x6a, 0xec, 0x56, 0xa2, 0xeb, 0x5b, 0x16, 0x68,
		0x39, 0xba, 0xf6, 0xc3, 0x66, 0x5b, 0x93, 0x0a, 0x83, 0xe2, 0x54, 0xd3, 0x19, 0xaa, 0x40, 0x1a,
		0x0f, 0x2d, 0x01, 0xf9, 0x53, 0x30, 0xef, 0x8e, 0x46, 0xc7, 0xb9, 0xf9, 0x51, 0xb1, 0x20, 0xe6,
		0xb3, 0x0d, 0xea, 0x0b, 0xc0, 0x3e, 0x9c, 0x89, 0x8c, 0x0a, 0xd8, 0x8a, 0xc4, 0x34, 0x2d, 0x47,
		0x2e, 0xac, 0x44, 0x2c, 0x60, 0x9a, 0x30, 0x4d, 0x98, 0x26, 0x4c, 0x13, 0xa6, 0x09, 0xd3, 0x84,
		0x69, 0xc2, 0x34, 0x61, 0x9a, 0xd6, 0x99, 0x26, 0xa9, 0x12, 0xab, 0x14, 0xfa, 0x33, 0xaa, 0x4b,
		0xea, 0x5c, 0x52, 0xe7, 0x32, 0x35, 0x3a, 0x8f, 0x02, 0x0e, 0x05, 0xdc, 0x2f, 0x0c, 0xa1, 0x80,
		0x23, 0xac, 0x40, 0x58, 0x81, 0xb0, 0x42, 0x61, 0xc2, 0x0a, 0x28, 0x15, 0x50, 0xc0, 0x71, 0xae,
		0x70, 0xae, 0x70, 0xae, 0x70, 0xae, 0x70, 0xae, 0xa0, 0x80, 0x8b, 0x37, 0xcb, 0x28, 0xe0, 0x00,
		0x7a, 0x80, 0xbe, 0xd4, 0x40, 0xcf, 0xbd, 0x24, 0xf7, 0x92, 0x02, 0x96, 0xb9, 0x97, 0x4c, 0x0b,
		0xc8, 0x37, 0xb8, 0x97, 0x4c, 0x03, 0xd9, 0x37, 0x50, 0xc0, 0xc5, 0xd9, 0x50, 0x28, 0xe0, 0x60,
		0x9a, 0x30, 0x4d, 0x98, 0x26, 0x4c, 0x13, 0xa6, 0x09, 0xd3, 0x84, 0x69, 0xc2, 0x34, 0xf3, 0xc9,
		0x34, 0x51, 0xc0, 0xad, 0xa3, 0x80, 0xa3, 0x5e, 0x70, 0x66, 0xe6, 0xc2, 0x7a, 0xc9, 0xe0, 0xc1,
		0xb3, 0x1a, 0xa3, 0x47, 0x65, 0xb8, 0xc8, 0xa6, 0x61, 0x75, 0x3f, 0x99, 0xaa, 0x7e, 0x45, 0x2b,
		0xac, 0x49, 0x9d, 0x60, 0x3d, 0xff, 0x29, 0x47, 0x75, 0x82, 0x8d, 0xcb, 0x6a, 0xca, 0x94, 0xeb,
		0x5e, 0x58, 0x7d, 0x12, 0x65, 0xbb, 0x85, 0xe3, 0x28, 0x99, 0x2f, 0xb2, 0x49, 0x2b, 0x7d, 0x5a,
		0xe9, 0xdb, 0x8e, 0x7a, 0x3c, 0x06, 0x3c, 0x5b, 0xca, 0x8f, 0xbc, 0xe8, 0x87, 0x4c, 0xc4, 0x63,
		0x7a, 0x72, 0x0a, 0x78, 0xb7, 0x95, 0xa3, 0xf1, 0x57, 0x7b, 0xef, 0x86, 0x16, 0xba, 0x35, 0x1f,
		0x7c, 0x3c, 0xba, 0xbe, 0x18, 0xfc, 0xc7, 0xe5, 0xbf, 0x1b, 0x62, 0xe2, 0xb1, 0x61, 0x27, 0x9a,
		0x50, 0xb4, 0x85, 0x93, 0x25, 0x7f, 0xfe, 0x78, 0xfb, 0x4b, 0xe3, 0xf4, 0xfa, 0xa8, 0xf1, 0x65,
		0xf7, 0xfa, 0xf3, 0xe9, 0xd1, 0xe1, 0xc1, 0xc5, 0xa5, 0x60, 0xa4, 0xf0, 0x75, 0xe6, 0xdf, 0xfe,
		0xe8, 0xf4, 0x9f, 0x17, 0x97, 0x07, 0x97, 0xf5, 0xeb, 0x8b, 0xc6, 0xc7, 0x52, 0xbd, 0xf8, 0x64,
		0xda, 0x6b, 0xa5, 0x9c, 0xf6, 0xc7, 0x45, 0xff, 0xff, 0xb3, 0xf7, 0xb7, 0xcd, 0x69, 0xeb, 0xda,
		0xfb, 0x38, 0xfe, 0xbc, 0xaf, 0x22, 0xc3, 0x9c, 0x07, 0xcd, 0x4c, 0xdd, 0x00, 0xe1, 0xa6, 0xf4,
		0x19, 0x6d, 0xe9, 0xfe, 0xf3, 0x3f, 0x69, 0xc8, 0x90, 0xa4, 0xdf, 0xf3, 0x99, 0x94, 0xcd, 0x38,
		0x20, 0x52, 0xed, 0xed, 0xd8, 0x8c, 0x2d, 0xb2, 0x93, 0x69, 0xf2, 0xde, 0x7f, 0x03, 0x06, 0x27,
		0xc4, 0xb0, 0x0b, 0xb6, 0xb4, 0x24, 0xdb, 0x57, 0xa7, 0xe7, 0x94, 0xdd, 0x06, 0xc9, 0x96, 0x96,
		0xd6, 0xba, 0xd6, 0xa5, 0x75, 0xf3, 0xed, 0xf2, 0xe4, 0xa2, 0x70, 0xef, 0x5f, 0xf8, 0xe3, 0x5e,
		0xb8, 0xcd, 0x3e, 0x69, 0x7f, 0xea, 0x9c, 0x74, 0xbe, 0x14, 0x71, 0xd3, 0xcf, 0xfb, 0x17, 0x9d,
		0xe1, 0x59, 0xef, 0xa4, 0xfb, 0xf9, 0xff, 0x16, 0x47, 0xbe, 0x50, 0x02, 0x5f, 0x9d, 0x2b, 0xba,
		0xef, 0x67, 0x27, 0xe7, 0x05, 0x93, 0xf8, 0x5a, 0x91, 0x25, 0x7e, 0xf1, 0xfe, 0x5f, 0x4f, 0x7a,
		0xff, 0xef, 0xfc, 0xac, 0xf3, 0xb9, 0xc0, 0x47, 0xbd, 0x56, 0x4c, 0x28, 0xfb, 0xfd, 0xec, 0xb4,
		0x70, 0xd2, 0x5e, 0xc0, 0x53, 0xfe, 0xfd, 0xec, 0xb4, 0xa0, 0xc7, 0x3c, 0xb4, 0x6a, 0x9d, 0x82,
		0xc9, 0xf9, 0x0b, 0x97, 0x4d, 0x85, 0xd3, 0x22, 0x65, 0xa4, 0x81, 0x6e, 0x5e, 0x4d, 0x4b, 0x19,
		0x0e, 0xe6, 0xda, 0xd7, 0x0e, 0x1b, 0xcb, 0x63, 0xcb, 0x57, 0x03, 0xa6, 0x2d, 0x43, 0xf0, 0x9c,
		0x21, 0x39, 0xb1, 0x9d, 0x00, 0xbc, 0xfb, 0x0e, 0x4b, 0x0f, 0xde, 0x1d, 0xbc, 0xfb, 0xf6, 0x37,
		0x92, 0xcf, 0xbb, 0x5f, 0x7b, 0x9e, 0xc3, 0x6c, 0x57, 0x26, 0xe7, 0x5e, 0x41, 0x20, 0xc7, 0x1e,
		0xe3, 0xc8, 0x0c, 0xe4, 0x48, 0x53, 0x49, 0x8a, 0x26, 0xae, 0xe2, 0xc6, 0xb7, 0x47, 0x6c, 0x32,
		0x73, 0x2c, 0x9f, 0x05, 0xc2, 0xf6, 0x45, 0xfa, 0x08, 0x8b, 0xd8, 0x88, 0x88, 0xb5, 0x40, 0xac,
		0x85, 0x26, 0x23, 0x81, 0x16, 0xa6, 0x68, 0x61, 0x0a, 0x94, 0x07, 0x94, 0x67, 0x4a, 0xf9, 0x36,
		0x59, 0x8e, 0xa1, 0x22, 0x07, 0x51, 0x95, 0xa3, 0x28, 0xd9, 0x61, 0x94, 0xae, 0x52, 0x54, 0xa8,
		0x16, 0x75, 0x2a, 0x46, 0x95, 0xaa, 0x51, 0xae, 0x72, 0x94, 0xab, 0x1e, 0xa5, 0x2a, 0x48, 0x2e,
		0x31, 0x66, 0x7e, 0xba, 0x9b, 0x3c, 0x47, 0x54, 0xb2, 0x43, 0x2a, 0x6f, 0x23, 0x90, 0x0d, 0xb2,
		0xcd, 0x71, 0x7d, 0xed, 0xc4, 0xa1, 0x26, 0x32, 0x6a, 0x22, 0x03, 0x52, 0x03, 0x52, 0x03, 0x52,
		0x03, 0x52, 0x03, 0x52, 0x03, 0x52, 0x03, 0x52, 0x03, 0x52, 0x03, 0x52, 0xa7, 0x83, 0xd4, 0x48,
		0xb2, 0x36, 0x6a, 0x3f, 0x54, 0x27, 0x5a, 0xff, 0xb1, 0x9c, 0xaf, 0xbf, 0x9c, 0xce, 0xe0, 0x4b,
		0x41, 0x3e, 0xbd, 0xab, 0x59, 0x8e, 0x7d, 0xcd, 0x1c, 0x36, 0xb6, 0x66, 0x2e, 0x1f, 0xd9, 0x81,
		0x84, 0x8b, 0xc1, 0x8d, 0xa3, 0xe2, 0x72, 0x10, 0x97, 0x83, 0x9a, 0x50, 0x48, 0xc6, 0x2e, 0x07,
		0xc3, 0x1d, 0xb1, 0x1c, 0x7e, 0xcb, 0x85, 0x3c, 0x3a, 0x63, 0x6d, 0x54, 0x5c, 0x14, 0x82, 0xd5,
		0x00, 0xab, 0x61, 0x02, 0xab, 0x21, 0x29, 0x12, 0x20, 0x26, 0xbe, 0x52, 0x22, 0x02, 0x24, 0x1f,
		0x78, 0x70, 0x0f, 0xe0, 0x1e, 0xc0, 0x3d, 0xc8, 0x55, 0x20, 0xd1, 0x80, 0xb7, 0xf6, 0xbd, 0x15,
		0xee, 0xfa, 0xa2, 0xfc, 0x80, 0xa2, 0x54, 0x84, 0xb5, 0x59, 0x24, 0x6f, 0xbe, 0x5c, 0x82, 0x53,
		0x99, 0xb2, 0x51, 0xa9, 0x74, 0xd4, 0x2b, 0x1f, 0xd5, 0x4a, 0x88, 0x4c, 0x19, 0x91, 0x29, 0x25,
		0x12, 0xe5, 0x24, 0x57, 0x49, 0x49, 0x56, 0x56, 0xd1, 0x0a, 0x48, 0x27, 0x4c, 0x63, 0xf2, 0x3e,
		0xe3, 0xae, 0x38, 0xae, 0xaa, 0x90, 0xf7, 0xa5, 0x76, 0x69, 0x2a, 0x18, 0xba, 0x6f, 0xbb, 0x37,
		0x4c, 0x6a, 0xc9, 0x97, 0x97, 0xbf, 0xd4, 0x9c, 0xcf, 0x83, 0x65, 0xf1, 0x5b, 0x65, 0x0a, 0x40,
		0xb1, 0x5a, 0x8f, 0x4d, 0xb3, 0x28, 0xbc, 0x43, 0x30, 0xcf, 0x57, 0xdf, 0x1e, 0x09, 0xee, 0xb9,
		0x5f, 0xf8, 0x0d, 0x0f, 0x6b, 0x06, 0x2b, 0x9b, 0xef, 0xe9, 0x9d, 0xc2, 0xad, 0xb7, 0xef, 0x73,
		0xb7, 0xf5, 0xb5, 0x6a, 0xab, 0xd6, 0x6a, 0x34, 0xab, 0xad, 0x7a, 0x8e, 0x64, 0xe0, 0x4d, 0x36,
		0x46, 0x1d, 0x98, 0x5a, 0x8f, 0x58, 0xa2, 0xdf, 0x36, 0xf5, 0xd9, 0x1d, 0x73, 0x85, 0x25, 0x98,
		0xed, 0x8f, 0xbd, 0x7f, 0x5c, 0x75, 0x30, 0x3b, 0x36, 0x93, 0x64, 0x43, 0xae, 0x28, 0x46, 0x01,
		0x50, 0x1e, 0x50, 0x1e, 0x50, 0x1e, 0x50, 0x5e, 0x51, 0x0c, 0xc4, 0x6b, 0xf5, 0x22, 0x29, 0x16,
		0xc2, 0x6c, 0xa3, 0xb3, 0xbc, 0xb4, 0xb6, 0x04, 0xbf, 0x65, 0xbe, 0x3a, 0x8b, 0xb3, 0x3e, 0x0d,
		0xcc, 0x01, 0xcc, 0x01, 0xcc, 0x01, 0xcc, 0x81, 0x44, 0x79, 0x1f, 0xb3, 0x11, 0xbf, 0xb5, 0x9d,
		0x46, 0x4d, 0xa5, 0x41, 0xa8, 0x2a, 0x18, 0x3b, 0xe6, 0xec, 0x55, 0x41, 0x21, 0xe9, 0xa1, 0x90,
		0xaa, 0xa0, 0x90, 0x8a, 0x4a, 0x21, 0x1d, 0x63, 0xeb, 0xc1, 0x1c, 0x65, 0x17, 0xc4, 0xff, 0x63,
		0xfb, 0x2e, 0x77, 0x6f, 0x2c, 0xf1, 0xd3, 0x67, 0xc1, 0x4f, 0xcf, 0x19, 0x5b, 0xd3, 0x91, 0x50,
		0x07, 0xe6, 0x37, 0x4f, 0x07, 0x50, 0x0f, 0x50, 0x0f, 0x50, 0x0f, 0x50, 0x2f, 0x51, 0xde, 0xa7,
		0xcc, 0x1f, 0x31, 0x57, 0xd8, 0x37, 0x4c, 0x21, 0xaa, 0xaf, 0x03, 0x6f, 0xeb, 0xc1, 0xdb, 0xb8,
		0xb2, 0x2d, 0x2c, 0xde, 0xa6, 0xda, 0xfa, 0x4a, 0x19, 0x88, 0x1b, 0x88, 0x5b, 0xea, 0x48, 0xb2,
		0x22, 0x34, 0x25, 0xa7, 0x18, 0x46, 0xe3, 0xca, 0x4c, 0x6d, 0xdb, 0x94, 0x69, 0x75, 0xf4, 0x32,
		0xd3, 0x43, 0x4a, 0x39, 0x0f, 0x79, 0xfb, 0x23, 0x61, 0x6f, 0x24, 0x95, 0xf9, 0x88, 0x41, 0x19,
		0x19, 0xe5, 0x3e, 0x5e, 0x6b, 0x51, 0xe9, 0xf1, 0xf2, 0x55, 0xc4, 0xcb, 0x67, 0xc8, 0xe7, 0x41,
		0xbc, 0x3c, 0xe2, 0xe5, 0x11, 0x2f, 0x0f, 0x02, 0x06, 0x04, 0x0c, 0x08, 0x18, 0x45, 0xf2, 0x8e,
		0x78, 0x79, 0x90, 0x2f, 0x20, 0x5f, 0x40, 0xbe, 0x24, 0xda, 0x7a, 0xc4, 0xcb, 0x83, 0x83, 0x51,
		0x78, 0x86, 0x10, 0x2f, 0x0f, 0x28, 0x0f, 0x28, 0x0f, 0x28, 0x0f, 0x28, 0xbf, 0x93, 0xbc, 0x23,
		0x5e, 0x5e, 0xca, 0xbb, 0x22, 0x5e, 0x1e, 0xe6, 0x00, 0xe6, 0x00, 0xe6, 0x20, 0xeb, 0xe6, 0x00,
		0xf1, 0xf2, 0xa0, 0x90, 0x52, 0x6e, 0x2f, 0xe2, 0xe5, 0x0b, 0x4b, 0x21, 0x21, 0x5e, 0x1e, 0xcc,
		0x51, 0x86, 0x41, 0x3c, 0xe2, 0xe5, 0x01, 0xea, 0x01, 0xea, 0x01, 0xea, 0xf3, 0x06, 0xea, 0x11,
		0x2f, 0x9f, 0x67, 0xbc, 0x8d, 0x2b, 0xdb, 0xc2, 0xe2, 0x6d, 0xc4, 0xcb, 0x03, 0x71, 0xd3, 0x23,
		0x6e, 0xc4, 0xcb, 0x4b, 0x8f, 0x97, 0x97, 0xd0, 0xab, 0x47, 0xde, 0xf6, 0xa0, 0xc7, 0x52, 0xe2,
		0x8d, 0x2c, 0x49, 0xc9, 0x34, 0xf8, 0x7d, 0xb3, 0x9f, 0xee, 0xf4, 0xae, 0x76, 0x12, 0x3e, 0xc7,
		0x65, 0xf8, 0x18, 0xc3, 0xd0, 0x71, 0x3a, 0x59, 0x3c, 0x05, 0x9a, 0x3e, 0x19, 0x24, 0x20, 0xaa,
		0x1b, 0x3f, 0xc5, 0x65, 0xc1, 0xf8, 0xde, 0x4f, 0x72, 0x7b, 0x3e, 0xa1, 0xd7, 0x13, 0x7a, 0x3d,
		0x69, 0x66, 0x1e, 0x32, 0xd6, 0xeb, 0x49, 0x52, 0xfb, 0x17, 0xb9, 0x6d, 0x5f, 0xd0, 0xdf, 0x49,
		0x27, 0xd5, 0x88, 0xfe, 0x4e, 0x06, 0x60, 0x5f, 0x69, 0xfd, 0x9d, 0x02, 0xe6, 0x8e, 0xad, 0x71,
		0x18, 0x3e, 0x6a, 0xf9, 0xde, 0x4c, 0x49, 0xea, 0x6a, 0x7c, 0x0e, 0xf4, 0xb2, 0x36, 0x45, 0xe1,
		0xa8, 0x53, 0x3c, 0xaa, 0x14, 0x90, 0x72, 0x45, 0xa4, 0x5c, 0x21, 0x29, 0x55, 0x4c, 0x66, 0xb2,
		0x2f, 0xe8, 0x65, 0x0d, 0x9e, 0x45, 0x95, 0x1b, 0xbd, 0xe2, 0x57, 0x64, 0xd4, 0x92, 0x48, 0xc1,
		0x69, 0xbc, 0x43, 0x4b, 0x55, 0x40, 0x6e, 0x40, 0x6e, 0x40, 0x6e, 0x1a, 0x9f, 0x5a, 0x8d, 0x6f,
		0x2d, 0xf9, 0xc0, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0xcb, 0x55, 0x20, 0xd1, 0x80, 0x28, 0x11,
		0x43, 0xa4, 0x6c, 0x54, 0x2a, 0x1d, 0xf5, 0xca, 0x47, 0xb5, 0x12, 0x22, 0x53, 0x46, 0x64, 0x4a,
		0x89, 0x44, 0x39, 0xc9, 0x55, 0x52, 0x92, 0x95, 0x95, 0x3a, 0xbf, 0x3d, 0x26, 0xef, 0x28, 0x11,
		0x13, 0xfb, 0x85, 0x78, 0xc3, 0x9d, 0xa6, 0x41, 0xbc, 0xe1, 0x7e, 0x5b, 0x8f, 0x12, 0x31, 0xd9,
		0x90, 0x01, 0x84, 0x1d, 0x9a, 0x72, 0x86, 0x50, 0x22, 0x06, 0x50, 0x1e, 0x50, 0x1e, 0x50, 0x1e,
		0x50, 0x7e, 0x27, 0x79, 0x47, 0x89, 0x18, 0x29, 0xef, 0x8a, 0x12, 0x31, 0x30, 0x07, 0x30, 0x07,
		0x30, 0x07, 0x59, 0x37, 0x07, 0x28, 0x11, 0x03, 0x0a, 0x29, 0xe5, 0xf6, 0xa2, 0x44, 0x4c, 0x61,
		0x29, 0x24, 0x94, 0x88, 0x01, 0x73, 0x94, 0x61, 0x10, 0x8f, 0x12, 0x31, 0x00, 0xf5, 0x00, 0xf5,
		0x00, 0xf5, 0x79, 0x03, 0xf5, 0x28, 0x11, 0x93, 0x67, 0xbc, 0x8d, 0x2b, 0xdb, 0xc2, 0xe2, 0x6d,
		0x94, 0x88, 0x01, 0xe2, 0xa6, 0x47, 0xdc, 0x28, 0x11, 0x93, 0x26, 0xe3, 0x05, 0xad, 0x54, 0x93,
		0x40, 0x18, 0xb4, 0x52, 0x35, 0xd5, 0xf7, 0x41, 0x9c, 0xbc, 0x16, 0xdf, 0x06, 0x71, 0xf2, 0x12,
		0x0e, 0x03, 0xe2, 0xe4, 0x41, 0xbc, 0x80, 0x78, 0x01, 0xf1, 0xa2, 0x4a, 0xde, 0x11, 0x27, 0x0f,
		0xd2, 0x05, 0xa4, 0x0b, 0x48, 0x97, 0x44, 0x5b, 0x8f, 0x38, 0x79, 0x70, 0x2f, 0x0a, 0xcf, 0x10,
		0xe2, 0xe4, 0x01, 0xe5, 0x01, 0xe5, 0x01, 0xe5, 0x01, 0xe5, 0x77, 0x92, 0x77, 0xc4, 0xc9, 0x4b,
		0x79, 0x57, 0xc4, 0xc9, 0xc3, 0x1c, 0xc0, 0x1c, 0xc0, 0x1c, 0x64, 0xdd, 0x1c, 0x20, 0x4e, 0x1e,
		0x14, 0x52, 0xca, 0xed, 0x45, 0x9c, 0x7c, 0x61, 0x29, 0x24, 0xc4, 0xc9, 0x83, 0x39, 0xca, 0x30,
		0x88, 0x47, 0x9c, 0x3c, 0x40, 0x3d, 0x40, 0x3d, 0x40, 0x7d, 0xde, 0x40, 0x3d, 0xe2, 0xe4, 0xf3,
		0x8c, 0xb7, 0x71, 0x65, 0x5b, 0x58, 0xbc, 0x8d, 0x38, 0x79, 0x20, 0x6e, 0x7a, 0xc4, 0x8d, 0x38,
		0x79, 0x69, 0x71, 0xf2, 0x68, 0xa1, 0xaa, 0x6a, 0x23, 0x69, 0x36, 0x90, 0xb2, 0x75, 0xaa, 0x49,
		0x3d, 0x53, 0x53, 0x75, 0x07, 0x95, 0x91, 0x48, 0x21, 0x35, 0x81, 0x42, 0x7a, 0x47, 0x91, 0x2a,
		0x3a, 0x8a, 0x18, 0xe0, 0xd4, 0xa2, 0xa3, 0xc8, 0xee, 0x6f, 0x84, 0x26, 0x7e, 0x07, 0x68, 0xe2,
		0x87, 0xcc, 0x2c, 0x64, 0x66, 0x65, 0x05, 0xf7, 0xa3, 0x89, 0x1f, 0x90, 0xbe, 0x6a, 0xa4, 0x2f,
		0xc1, 0x3b, 0x7b, 0xca, 0x48, 0x77, 0x6e, 0x49, 0x7b, 0xa2, 0x6c, 0x2f, 0x4a, 0xa9, 0x3c, 0x8e,
		0xbd, 0x1c, 0xac, 0x64, 0x1b, 0xbe, 0xff, 0x76, 0x25, 0xd8, 0xaa, 0x12, 0x9f, 0xde, 0x35, 0x2c,
		0xc7, 0xbe, 0x66, 0x0e, 0x1b, 0x47, 0x4b, 0x93, 0x74, 0xc3, 0x22, 0x8d, 0xb7, 0x71, 0xd4, 0x84,
		0x82, 0x94, 0xce, 0x95, 0x4a, 0x8d, 0x6c, 0x64, 0x20, 0x19, 0x79, 0xc8, 0x45, 0x16, 0x52, 0x91,
		0x8e, 0x4c, 0xa4, 0x23, 0x11, 0xa9, 0xc8, 0x83, 0x56, 0xf5, 0xa5, 0x75, 0x7d, 0xd0, 0x31, 0x15,
		0xfc, 0x06, 0xf8, 0x8d, 0xa2, 0xf0, 0x1b, 0xe8, 0x98, 0x0a, 0xbe, 0x01, 0x7c, 0x43, 0xf1, 0xf8,
		0x06, 0x54, 0x82, 0x51, 0x4c, 0x6a, 0x2a, 0x53, 0x36, 0x2a, 0x95, 0x8e, 0x7a, 0xe5, 0xa3, 0x5a,
		0x09, 0x91, 0x29, 0x23, 0x32, 0xa5, 0x44, 0xa2, 0x9c, 0xe4, 0x2a, 0x29, 0xc9, 0xca, 0x2a, 0x5a,
		0x01, 0x54, 0x82, 0xd9, 0x38, 0x34, 0xc2, 0x0a, 0xe9, 0xd5, 0x7a, 0x6c, 0x1a, 0x84, 0x15, 0xee,
		0xb7, 0xf5, 0xa8, 0x04, 0x93, 0x0d, 0x19, 0x40, 0x74, 0xa1, 0x29, 0x67, 0x08, 0x95, 0x60, 0x00,
		0xe5, 0x01, 0xe5, 0x01, 0xe5, 0x01, 0xe5, 0x77, 0x92, 0x77, 0x54, 0x82, 0x91, 0xf2, 0xae, 0xa8,
		0x04, 0x03, 0x73, 0x00, 0x73, 0x00, 0x73, 0x90, 0x75, 0x73, 0x80, 0x4a, 0x30, 0xa0, 0x90, 0x52,
		0x6e, 0x2f, 0x2a, 0xc1, 0x14, 0x96, 0x42, 0x42, 0x25, 0x18, 0x30, 0x47, 0x19, 0x06, 0xf1, 0xa8,
		0x04, 0x03, 0x50, 0x0f, 0x50, 0x0f, 0x50, 0x9f, 0x37, 0x50, 0x8f, 0x4a, 0x30, 0x79, 0xc6, 0xdb,
		0xb8, 0xb2, 0x2d, 0x2c, 0xde, 0x46, 0x25, 0x18, 0x20, 0x6e, 0x7a, 0xc4, 0x8d, 0x4a, 0x30, 0xfb,
		0xa7, 0xb4, 0xc5, 0x32, 0xad, 0xd0, 0x39, 0x35, 0x11, 0x94, 0x41, 0xe7, 0x54, 0x53, 0x7d, 0x20,
		0xc4, 0xcb, 0x6b, 0xf1, 0x71, 0x10, 0x2f, 0x2f, 0xe1, 0x30, 0x20, 0x5e, 0x1e, 0x04, 0x0c, 0x08,
		0x18, 0x10, 0x30, 0xaa, 0xe4, 0x1d, 0xf1, 0xf2, 0x20, 0x5f, 0x40, 0xbe, 0x80, 0x7c, 0x49, 0xb4,
		0xf5, 0x88, 0x97, 0x07, 0x07, 0xa3, 0xf0, 0x0c, 0x21, 0x5e, 0x1e, 0x50, 0x1e, 0x50, 0x1e, 0x50,
		0x1e, 0x50, 0x7e, 0x27, 0x79, 0x47, 0xbc, 0xbc, 0x94, 0x77, 0x45, 0xbc, 0x3c, 0xcc, 0x01, 0xcc,
		0x01, 0xcc, 0x41, 0xd6, 0xcd, 0x01, 0xe2, 0xe5, 0x41, 0x21, 0xa5, 0xdc, 0x5e, 0xc4, 0xcb, 0x17,
		0x96, 0x42, 0x42, 0xbc, 0x3c, 0x98, 0xa3, 0x0c, 0x83, 0x78, 0xc4, 0xcb, 0x03, 0xd4, 0x03, 0xd4,
		0x03, 0xd4, 0xe7, 0x0d, 0xd4, 0x23, 0x5e, 0x3e, 0xcf, 0x78, 0x1b, 0x57, 0xb6, 0x85, 0xc5, 0xdb,
		0x88, 0x97, 0x07, 0xe2, 0xa6, 0x47, 0xdc, 0x88, 0x97, 0x97, 0x1e, 0x2f, 0x8f, 0x0e, 0xaa, 0xaa,
		0x36, 0x94, 0x76, 0x23, 0x09, 0x3b, 0xa9, 0x36, 0x4e, 0xc2, 0xe7, 0x30, 0xa9, 0xa1, 0x2a, 0x9a,
		0x3d, 0xc9, 0xeb, 0x41, 0x94, 0x42, 0x16, 0x8c, 0xef, 0xfd, 0x24, 0xb7, 0xe7, 0x13, 0x7a, 0x3d,
		0xa1, 0xd7, 0x93, 0x66, 0xe6, 0x21, 0x63, 0xbd, 0x9e, 0x24, 0xb5, 0x7f, 0x91, 0xdb, 0xf6, 0x05,
		0xfd, 0x9d, 0x74, 0x52, 0x8d, 0xe8, 0xef, 0x64, 0x00, 0xf6, 0x45, 0xff, 0xea, 0x03, 0xf4, 0xaf,
		0x46, 0x7e, 0x2c, 0xf2, 0x63, 0xb3, 0xc2, 0xbe, 0xa0, 0x7f, 0x35, 0x78, 0x16, 0x55, 0x6e, 0xf4,
		0x8a, 0x5f, 0x91, 0x51, 0x4b, 0x22, 0x05, 0xa7, 0xf1, 0x0e, 0x2d, 0x55, 0x01, 0xb9, 0x01, 0xb9,
		0x01, 0xb9, 0x69, 0x7c, 0x6a, 0x35, 0xbe, 0xb5, 0xe4, 0x03, 0x0f, 0x08, 0x0c, 0x08, 0x0c, 0x08,
		0x2c, 0x57, 0x81, 0x44, 0x03, 0xa2, 0x44, 0x0c, 0x91, 0xb2, 0x51, 0xa9, 0x74, 0xd4, 0x2b, 0x1f,
		0xd5, 0x4a, 0x88, 0x4c, 0x19, 0x91, 0x29, 0x25, 0x12, 0xe5, 0x24, 0x57, 0x49, 0x49, 0x56, 0x56,
		0xea, 0xfc, 0xf6, 0x98, 0xbc, 0xa3, 0x44, 0x4c, 0xec, 0x17, 0xe2, 0x0d, 0x77, 0x9a, 0x06, 0xf1,
		0x86, 0xfb, 0x6d, 0x3d, 0x4a, 0xc4, 0x64, 0x43, 0x06, 0x10, 0x76, 0x68, 0xca, 0x19, 0x42, 0x89,
		0x18, 0x40, 0x79, 0x40, 0x79, 0x40, 0x79, 0x40, 0xf9, 0x9d, 0xe4, 0x1d, 0x25, 0x62, 0xa4, 0xbc,
		0x2b, 0x4a, 0xc4, 0xc0, 0x1c, 0xc0, 0x1c, 0xc0, 0x1c, 0x64, 0xdd, 0x1c, 0xa0, 0x44, 0x0c, 0x28,
		0xa4, 0x94, 0xdb, 0x8b, 0x12, 0x31, 0x85, 0xa5, 0x90, 0x50, 0x22, 0x06, 0xcc, 0x51, 0x86, 0x41,
		0x3c, 0x4a, 0xc4, 0x00, 0xd4, 0x03, 0xd4, 0x03, 0xd4, 0xe7, 0x0d, 0xd4, 0xa3, 0x44, 0x4c, 0x9e,
		0xf1, 0x36, 0xae, 0x6c, 0x0b, 0x8b, 0xb7, 0x51, 0x22, 0x06, 0x88, 0x9b, 0x1e, 0x71, 0xa3, 0x44,
		0x4c, 0x9a, 0x8c, 0x17, 0xb4, 0x52, 0x4d, 0x02, 0x61, 0xd0, 0x4a, 0xd5, 0x54, 0xdf, 0x07, 0x71,
		0xf2, 0x5a, 0x7c, 0x1b, 0xc4, 0xc9, 0x4b, 0x38, 0x0c, 0x88, 0x93, 0x07, 0xf1, 0x02, 0xe2, 0x05,
		0xc4, 0x8b, 0x2a, 0x79, 0x47, 0x9c, 0x3c, 0x48, 0x17, 0x90, 0x2e, 0x20, 0x5d, 0x12, 0x6d, 0x3d,
		0xe2, 0xe4, 0xc1, 0xbd, 0x28, 0x3c, 0x43, 0x88, 0x93, 0x07, 0x94, 0x07, 0x94, 0x07, 0x94, 0x07,
		0x94, 0xdf, 0x49, 0xde, 0x11, 0x27, 0x2f, 0xe5, 0x5d, 0x11, 0x27, 0x0f, 0x73, 0x00, 0x73, 0x00,
		0x73, 0x90, 0x75, 0x73, 0x80, 0x38, 0x79, 0x50, 0x48, 0x29, 0xb7, 0x17, 0x71, 0xf2, 0x85, 0xa5,
		0x90, 0x10, 0x27, 0x0f, 0xe6, 0x28, 0xc3, 0x20, 0x1e, 0x71, 0xf2, 0x00, 0xf5, 0x00, 0xf5, 0x00,
		0xf5, 0x79, 0x03, 0xf5, 0x88, 0x93, 0xcf, 0x33, 0xde, 0xc6, 0x95, 0x6d, 0x61, 0xf1, 0x36, 0xe2,
		0xe4, 0x81, 0xb8, 0xe9, 0x11, 0x37, 0xe2, 0xe4, 0xa5, 0xc5, 0xc9, 0xa3, 0x85, 0xaa, 0xaa, 0x8d,
		0xa4, 0xd9, 0x40, 0xca, 0xd6, 0xa9, 0x26, 0xf5, 0x4c, 0x4d, 0xd5, 0x1d, 0x54, 0x46, 0x22, 0x85,
		0xd4, 0x04, 0x0a, 0xe9, 0x1d, 0x45, 0xaa, 0xe8, 0x28, 0x62, 0x80, 0x53, 0x8b, 0x8e, 0x22, 0xbb,
		0xbf, 0x11, 0x9a, 0xf8, 0x1d, 0xa0, 0x89, 0x1f, 0x32, 0xb3, 0x90, 0x99, 0x95, 0x15, 0xdc, 0x8f,
		0x26, 0x7e, 0x40, 0xfa, 0xaa, 0x91, 0xbe, 0x04, 0xef, 0xec, 0x29, 0x23, 0xdd, 0xb9, 0x25, 0xed,
		0x89, 0xb2, 0xbd, 0x28, 0xa5, 0xf2, 0x38, 0xf6, 0x72, 0xb0, 0x92, 0x6d, 0xf8, 0xfe, 0xdb, 0x95,
		0x60, 0xab, 0x4a, 0x4e, 0xf5, 0x6e, 0xea, 0x5a, 0xec, 0x6e, 0x9a, 0x7c, 0x9b, 0x22, 0x3d, 0xf7,
		0x62, 0xac, 0x84, 0x42, 0x93, 0xce, 0x6d, 0x4a, 0x8d, 0x62, 0x64, 0xa0, 0x16, 0x79, 0x28, 0x45,
		0x16, 0x2a, 0x91, 0x8e, 0x42, 0xa4, 0xa3, 0x0e, 0xa9, 0x28, 0x83, 0x56, 0xcd, 0xa5, 0x75, 0x73,
		0xd0, 0x1d, 0x15, 0x5c, 0x06, 0xb8, 0x8c, 0xa2, 0x70, 0x19, 0xe8, 0x8e, 0x0a, 0x6e, 0x01, 0xdc,
		0x42, 0xf1, 0xb8, 0x05, 0x54, 0x7d, 0x51, 0x4c, 0x60, 0x2a, 0x53, 0x36, 0x2a, 0x95, 0x8e, 0x7a,
		0xe5, 0xa3, 0x5a, 0x09, 0x91, 0x29, 0x23, 0x32, 0xa5, 0x44, 0xa2, 0x9c, 0xe4, 0x2a, 0x29, 0xc9,
		0xca, 0x2a, 0x5a, 0x01, 0x54, 0x7d, 0xd9, 0x38, 0x34, 0x42, 0x08, 0xe9, 0xd5, 0x7a, 0x6c, 0x1a,
		0x84, 0x10, 0xee, 0xb7, 0xf5, 0xa8, 0xfa, 0x92, 0x0d, 0x19, 0x40, 0x24, 0xa1, 0x29, 0x67, 0x08,
		0x55, 0x5f, 0x00, 0xe5, 0x01, 0xe5, 0x01, 0xe5, 0x01, 0xe5, 0x77, 0x92, 0x77, 0x54, 0x7d, 0x91,
		0xf2, 0xae, 0xa8, 0xfa, 0x02, 0x73, 0x00, 0x73, 0x00, 0x73, 0x90, 0x75, 0x73, 0x80, 0xaa, 0x2f,
		0xa0, 0x90, 0x52, 0x6e, 0x2f, 0xaa, 0xbe, 0x14, 0x96, 0x42, 0x42, 0xd5, 0x17, 0x30, 0x47, 0x19,
		0x06, 0xf1, 0xa8, 0xfa, 0x02, 0x50, 0x0f, 0x50, 0x0f, 0x50, 0x9f, 0x37, 0x50, 0x8f, 0xaa, 0x2f,
		0x79, 0xc6, 0xdb, 0xb8, 0xb2, 0x2d, 0x2c, 0xde, 0x46, 0xd5, 0x17, 0x20, 0x6e, 0x7a, 0xc4, 0x8d,
		0xaa, 0x2f, 0x7b, 0xa6, 0xaf, 0x3d, 0xe7, 0x57, 0xa1, 0x37, 0x6a, 0x22, 0x00, 0x83, 0xde, 0xa8,
		0xa6, 0x7a, 0x3e, 0x88, 0x92, 0xd7, 0xe2, 0xd9, 0x20, 0x4a, 0x5e, 0xc2, 0x61, 0x40, 0x94, 0x3c,
		0x68, 0x17, 0xd0, 0x2e, 0xa0, 0x5d, 0x54, 0xc9, 0x3b, 0xa2, 0xe4, 0x41, 0xb9, 0x80, 0x72, 0x01,
		0xe5, 0x92, 0x68, 0xeb, 0x11, 0x25, 0x0f, 0xe6, 0x45, 0xe1, 0x19, 0x42, 0x94, 0x3c, 0xa0, 0x3c,
		0xa0, 0x3c, 0xa0, 0x3c, 0xa0, 0xfc, 0x4e, 0xf2, 0x8e, 0x28, 0x79, 0x29, 0xef, 0x8a, 0x28, 0x79,
		0x98, 0x03, 0x98, 0x03, 0x98, 0x83, 0xac, 0x9b, 0x03, 0x44, 0xc9, 0x83, 0x42, 0x4a, 0xb9, 0xbd,
		0x88, 0x92, 0x2f, 0x2c, 0x85, 0x84, 0x28, 0x79, 0x30, 0x47, 0x19, 0x06, 0xf1, 0x88, 0x92, 0x07,
		0xa8, 0x07, 0xa8, 0x07, 0xa8, 0xcf, 0x1b, 0xa8, 0x47, 0x94, 0x7c, 0x9e, 0xf1, 0x36, 0xae, 0x6c,
		0x0b, 0x8b, 0xb7, 0x11, 0x25, 0x0f, 0xc4, 0x4d, 0x8f, 0xb8, 0x11, 0x25, 0x2f, 0x29, 0x4a, 0x1e,
		0x9d, 0x51, 0x55, 0x6d, 0x23, 0xc5, 0xf6, 0x51, 0xf5, 0x45, 0x3d, 0xa9, 0x7e, 0x9f, 0xba, 0x9d,
		0xbb, 0xa9, 0x6b, 0x44, 0x57, 0xd4, 0xc2, 0x77, 0x6c, 0x4a, 0xdd, 0x52, 0x68, 0xff, 0x8d, 0x37,
		0xbf, 0x5b, 0xd3, 0xdd, 0xd4, 0x09, 0x64, 0x75, 0x6b, 0x5a, 0x8c, 0x85, 0x6e, 0x4d, 0xe8, 0xd6,
		0xa4, 0x89, 0x45, 0x40, 0xb7, 0x26, 0x74, 0x6b, 0xd2, 0x47, 0x29, 0xa2, 0x5b, 0x13, 0xba, 0x35,
		0x6d, 0x1f, 0x08, 0xdd, 0x9a, 0x64, 0x0c, 0x88, 0x3c, 0x54, 0xe4, 0xa1, 0x66, 0x8b, 0xe5, 0x40,
		0x1e, 0x2a, 0x11, 0x05, 0x8a, 0x8b, 0x4d, 0x52, 0x25, 0x44, 0xa6, 0x8c, 0xc8, 0x94, 0x12, 0x89,
		0x72, 0x92, 0xab, 0xa4, 0x24, 0x2b, 0xab, 0x68, 0x05, 0x90, 0x87, 0xba, 0x71, 0x68, 0x5c, 0x6a,
		0xd2, 0xab, 0xf5, 0xd8, 0x34, 0xb8, 0xd4, 0xdc, 0x6f, 0xeb, 0x91, 0x87, 0x9a, 0x0d, 0x19, 0xc0,
		0xdd, 0xa6, 0x29, 0x67, 0x08, 0x79, 0xa8, 0x80, 0xf2, 0x80, 0xf2, 0x80, 0xf2, 0x80, 0xf2, 0x3b,
		0xc9, 0x3b, 0xf2, 0x50, 0xa5, 0xbc, 0x2b, 0xf2, 0x50, 0x61, 0x0e, 0x60, 0x0e, 0x60, 0x0e, 0xb2,
		0x6e, 0x0e, 0x90, 0x87, 0x0a, 0x0a, 0x29, 0xe5, 0xf6, 0x22, 0x0f, 0xb5, 0xb0, 0x14, 0x12, 0xf2,
		0x50, 0xc1, 0x1c, 0x65, 0x18, 0xc4, 0x23, 0x0f, 0x15, 0xa0, 0x1e, 0xa0, 0x1e, 0xa0, 0x3e, 0x6f,
		0xa0, 0x1e, 0x79, 0xa8, 0x79, 0xc6, 0xdb, 0xb8, 0xb2, 0x2d, 0x2c, 0xde, 0x46, 0x1e, 0x2a, 0x10,
		0x37, 0x3d, 0xe2, 0x46, 0x1e, 0x6a, 0xa2, 0xd4, 0xb5, 0xbb, 0xa9, 0x13, 0xa0, 0x5b, 0x53, 0x22,
		0x00, 0x83, 0x6e, 0x4d, 0xa6, 0x7a, 0x3e, 0x88, 0x92, 0xd7, 0xe2, 0xd9, 0x20, 0x4a, 0x5e, 0xc2,
		0x61, 0x40, 0x94, 0x3c, 0x68, 0x17, 0xd0, 0x2e, 0xa0, 0x5d, 0x54, 0xc9, 0x3b, 0xa2, 0xe4, 0x41,
		0xb9, 0x80, 0x72, 0x01, 0xe5, 0x92, 0x68, 0xeb, 0x11, 0x25, 0x0f, 0xe6, 0x45, 0xe1, 0x19, 0x42,
		0x94, 0x3c, 0xa0, 0x3c, 0xa0, 0x3c, 0xa0, 0x3c, 0xa0, 0xfc, 0x4e, 0xf2, 0x8e, 0x28, 0x79, 0x29,
		0xef, 0x8a, 0x28, 0x79, 0x98, 0x03, 0x98, 0x03, 0x98, 0x83, 0xac, 0x9b, 0x03, 0x44, 0xc9, 0x83,
		0x42, 0x4a, 0xb9, 0xbd, 0x88, 0x92, 0x2f, 0x2c, 0x85, 0x84, 0x28, 0x79, 0x30, 0x47, 0x19, 0x06,
		0xf1, 0x88, 0x92, 0x07, 0xa8, 0x07, 0xa8, 0x07, 0xa8, 0xcf, 0x1b, 0xa8, 0x47, 0x94, 0x7c, 0x9e,
		0xf1, 0x36, 0xae, 0x6c, 0x0b, 0x8b, 0xb7, 0x11, 0x25, 0x0f, 0xc4, 0x4d, 0x8f, 0xb8, 0x11, 0x25,
		0x2f, 0x29, 0x4a, 0x1e, 0xdd, 0x9a, 0x54, 0x6d, 0x23, 0xc5, 0xf6, 0x91, 0x76, 0x6b, 0xfa, 0x3e,
		0x75, 0x02, 0x74, 0x6b, 0x32, 0x4b, 0x1a, 0x48, 0xba, 0x35, 0xcd, 0x37, 0xde, 0xe8, 0x6e, 0x4d,
		0xc7, 0xf3, 0xe5, 0xe0, 0xd3, 0xbb, 0x9a, 0x75, 0x3b, 0x73, 0x04, 0x1f, 0xd9, 0x81, 0x90, 0xd0,
		0xb7, 0x69, 0xd3, 0xa8, 0xe8, 0xe0, 0x84, 0x0e, 0x4e, 0x9a, 0x98, 0x05, 0x74, 0x70, 0x42, 0x07,
		0x27, 0x7d, 0x34, 0x23, 0x3a, 0x38, 0xa1, 0x83, 0xd3, 0xf6, 0x81, 0xd0, 0xc1, 0x49, 0xc6, 0x80,
		0xc8, 0x4d, 0x45, 0x6e, 0x6a, 0xb6, 0x98, 0x0f, 0xe4, 0xa6, 0x12, 0xd1, 0xa2, 0xb8, 0xec, 0x24,
		0x55, 0x42, 0x64, 0xca, 0x88, 0x4c, 0x29, 0x91, 0x28, 0x27, 0xb9, 0x4a, 0x4a, 0xb2, 0xb2, 0x8a,
		0x56, 0x00, 0xb9, 0xa9, 0x1b, 0x87, 0xc6, 0x45, 0x27, 0xbd, 0x5a, 0x8f, 0x4d, 0x83, 0x8b, 0xce,
		0xfd, 0xb6, 0x1e, 0xb9, 0xa9, 0xd9, 0x90, 0x01, 0xdc, 0x77, 0x9a, 0x72, 0x86, 0x90, 0x9b, 0x0a,
		0x28, 0x0f, 0x28, 0x0f, 0x28, 0x0f, 0x28, 0xbf, 0x93, 0xbc, 0x23, 0x37, 0x55, 0xca, 0xbb, 0x22,
		0x37, 0x15, 0xe6, 0x00, 0xe6, 0x00, 0xe6, 0x20, 0xeb, 0xe6, 0x00, 0xb9, 0xa9, 0xa0, 0x90, 0x52,
		0x6e, 0x2f, 0x72, 0x53, 0x0b, 0x4b, 0x21, 0x21, 0x37, 0x15, 0xcc, 0x51, 0x86, 0x41, 0x3c, 0x72,
		0x53, 0x01, 0xea, 0x01, 0xea, 0x01, 0xea, 0xf3, 0x06, 0xea, 0x91, 0x9b, 0x9a, 0x67, 0xbc, 0x8d,
		0x2b, 0xdb, 0xc2, 0xe2, 0x6d, 0xe4, 0xa6, 0x02, 0x71, 0xd3, 0x23, 0x6e, 0xe4, 0xa6, 0xee, 0x9b,
		0xce, 0xb6, 0x21, 0xd3, 0x0a, 0xbd, 0x9c, 0x12, 0x41, 0x19, 0xf4, 0x72, 0x32, 0xd5, 0x07, 0x42,
		0xbc, 0xbc, 0x16, 0x1f, 0x07, 0xf1, 0xf2, 0x12, 0x0e, 0x03, 0xe2, 0xe5, 0x41, 0xc0, 0x80, 0x80,
		0x01, 0x01, 0xa3, 0x4a, 0xde, 0x11, 0x2f, 0x0f, 0xf2, 0x05, 0xe4, 0x0b, 0xc8, 0x97, 0x44, 0x5b,
		0x8f, 0x78, 0x79, 0x70, 0x30, 0x0a, 0xcf, 0x10, 0xe2, 0xe5, 0x01, 0xe5, 0x01, 0xe5, 0x01, 0xe5,
		0x01, 0xe5, 0x77, 0x92, 0x77, 0xc4, 0xcb, 0x4b, 0x79, 0x57, 0xc4, 0xcb, 0xc3, 0x1c, 0xc0, 0x1c,
		0xc0, 0x1c, 0x64, 0xdd, 0x1c, 0x20, 0x5e, 0x1e, 0x14, 0x52, 0xca, 0xed, 0x45, 0xbc, 0x7c, 0x61,
		0x29, 0x24, 0xc4, 0xcb, 0x83, 0x39, 0xca, 0x30, 0x88, 0x47, 0xbc, 0x3c, 0x40, 0x3d, 0x40, 0x3d,
		0x40, 0x7d, 0xde, 0x40, 0x3d, 0xe2, 0xe5, 0xf3, 0x8c, 0xb7, 0x71, 0x65, 0x5b, 0x58, 0xbc, 0x8d,
		0x78, 0x79, 0x20, 0x6e, 0x7a, 0xc4, 0x8d, 0x78, 0x79, 0xe9, 0xf1, 0xf2, 0xe8, 0xea, 0xa4, 0x6a,
		0x43, 0x69, 0x37, 0x92, 0xac, 0xbf, 0xd3, 0xf1, 0xf7, 0xa9, 0xdb, 0x9d, 0xde, 0xd5, 0xbe, 0xad,
		0x1e, 0x03, 0x8d, 0x9e, 0x4c, 0x15, 0x10, 0xe5, 0x2d, 0x9f, 0x62, 0xb2, 0x90, 0x91, 0xde, 0x4f,
		0x33, 0x57, 0x7e, 0xe7, 0xa7, 0xd5, 0x98, 0xe8, 0xfb, 0x84, 0xbe, 0x4f, 0x9a, 0x58, 0x08, 0xf4,
		0x7d, 0x42, 0xdf, 0x27, 0x7d, 0x94, 0x24, 0xfa, 0x3e, 0xa1, 0xef, 0xd3, 0xf6, 0x81, 0xd0, 0xf7,
		0x49, 0xc6, 0x80, 0xc8, 0x63, 0x45, 0x1e, 0x6b, 0xb6, 0x58, 0x12, 0xe4, 0xb1, 0x12, 0x51, 0xa8,
		0xb8, 0x18, 0x25, 0x55, 0x42, 0x64, 0xca, 0x88, 0x4c, 0x29, 0x91, 0x28, 0x27, 0xb9, 0x4a, 0x4a,
		0xb2, 0xb2, 0x8a, 0x56, 0x00, 0x79, 0xac, 0x1b, 0x87, 0xc6, 0xa5, 0x28, 0xbd, 0x5a, 0x8f, 0x4d,
		0x83, 0x4b, 0xd1, 0xfd, 0xb6, 0x1e, 0x79, 0xac, 0xd9, 0x90, 0x01, 0xdc, 0x8d, 0x9a, 0x72, 0x86,
		0x90, 0xc7, 0x0a, 0x28, 0x0f, 0x28, 0x0f, 0x28, 0x0f, 0x28, 0xbf, 0x93, 0xbc, 0x23, 0x8f, 0x55,
		0xca, 0xbb, 0x22, 0x8f, 0x15, 0xe6, 0x00, 0xe6, 0x00, 0xe6, 0x20, 0xeb, 0xe6, 0x00, 0x79, 0xac,
		0xa0, 0x90, 0x52, 0x6e, 0x2f, 0xf2, 0x58, 0x0b, 0x4b, 0x21, 0x21, 0x8f, 0x15, 0xcc, 0x51, 0x86,
		0x41, 0x3c, 0xf2, 0x58, 0x01, 0xea, 0x01, 0xea, 0x01, 0xea, 0xf3, 0x06, 0xea, 0x91, 0xc7, 0x9a,
		0x67, 0xbc, 0x8d, 0x2b, 0xdb, 0xc2, 0xe2, 0x6d, 0xe4, 0xb1, 0x02, 0x71, 0xd3, 0x23, 0x6e, 0xe4,
		0xb1, 0x26, 0xcf, 0x6e, 0x5b, 0xe6, 0x59, 0xa1, 0xeb, 0x53, 0x22, 0x20, 0x83, 0xae, 0x4f, 0xa6,
		0x7a, 0x40, 0x88, 0x96, 0xd7, 0xe2, 0xe1, 0x20, 0x5a, 0x5e, 0xc2, 0x61, 0x40, 0xb4, 0x3c, 0xe8,
		0x17, 0xd0, 0x2f, 0xa0, 0x5f, 0x54, 0xc9, 0x3b, 0xa2, 0xe5, 0x41, 0xbd, 0x80, 0x7a, 0x01, 0xf5,
		0x92, 0x68, 0xeb, 0x11, 0x2d, 0x0f, 0x06, 0x46, 0xe1, 0x19, 0x42, 0xb4, 0x3c, 0xa0, 0x3c, 0xa0,
		0x3c, 0xa0, 0x3c, 0xa0, 0xfc, 0x4e, 0xf2, 0x8e, 0x68, 0x79, 0x29, 0xef, 0x8a, 0x68, 0x79, 0x98,
		0x03, 0x98, 0x03, 0x98, 0x83, 0xac, 0x9b, 0x03, 0x44, 0xcb, 0x83, 0x42, 0x4a, 0xb9, 0xbd, 0x88,
		0x96, 0x2f, 0x2c, 0x85, 0x84, 0x68, 0x79, 0x30, 0x47, 0x19, 0x06, 0xf1, 0x88, 0x96, 0x07, 0xa8,
		0x07, 0xa8, 0x07, 0xa8, 0xcf, 0x1b, 0xa8, 0x47, 0xb4, 0x7c, 0x9e, 0xf1, 0x36, 0xae, 0x6c, 0x0b,
		0x8b, 0xb7, 0x11, 0x2d, 0x0f, 0xc4, 0x4d, 0x8f, 0xb8, 0x11, 0x2d, 0x2f, 0x39, 0x5a, 0x1e, 0x3d,
		0x9f, 0x54, 0x6d, 0x27, 0xe5, 0x36, 0x92, 0x77, 0x7c, 0xba, 0x74, 0xd1, 0xef, 0xc9, 0xc4, 0x7e,
		0x4f, 0xe9, 0x3a, 0x0f, 0x25, 0x96, 0x83, 0x4c, 0xf4, 0x7a, 0x6a, 0xbc, 0xe8, 0x86, 0x25, 0xaf,
		0xdb, 0x53, 0x23, 0x75, 0x8f, 0x2d, 0xf4, 0x7b, 0x52, 0xc1, 0x63, 0xa0, 0xdf, 0x93, 0x42, 0x2d,
		0x88, 0x7e, 0x4f, 0xd4, 0x64, 0x25, 0xfa, 0x3d, 0xa1, 0xdf, 0x13, 0x31, 0x1e, 0x46, 0xbf, 0x27,
		0x13, 0x0e, 0xbe, 0x0a, 0x05, 0xa0, 0x4e, 0x11, 0xa8, 0x52, 0x08, 0xca, 0x15, 0x83, 0x72, 0x05,
		0xa1, 0x54, 0x51, 0x98, 0xc9, 0x8f, 0x20, 0x83, 0x95, 0x88, 0x3c, 0xc5, 0x95, 0x28, 0xa9, 0x12,
		0x22, 0x53, 0x46, 0x64, 0x4a, 0x89, 0x44, 0x39, 0xc9, 0x55, 0x52, 0x92, 0x95, 0x55, 0xb4, 0x02,
		0xc8, 0x60, 0xdd, 0x38, 0x34, 0xae, 0x43, 0xe9, 0xd5, 0x7a, 0x6c, 0x1a, 0x5c, 0x87, 0xee, 0xb7,
		0xf5, 0xc8, 0x60, 0xcd, 0x86, 0x0c, 0xe0, 0x56, 0xd4, 0x94, 0x33, 0x84, 0x0c, 0x56, 0x40, 0x79,
		0x40, 0x79, 0x40, 0x79, 0x40, 0xf9, 0x9d, 0xe4, 0x1d, 0x19, 0xac, 0x52, 0xde, 0x15, 0x19, 0xac,
		0x30, 0x07, 0x30, 0x07, 0x30, 0x07, 0x59, 0x37, 0x07, 0xc8, 0x60, 0x05, 0x85, 0x94, 0x72, 0x7b,
		0x91, 0xc1, 0x5a, 0x58, 0x0a, 0x09, 0x19, 0xac, 0x60, 0x8e, 0x32, 0x0c, 0xe2, 0x91, 0xc1, 0x0a,
		0x50, 0x0f, 0x50, 0x0f, 0x50, 0x9f, 0x37, 0x50, 0x8f, 0x0c, 0xd6, 0x3c, 0xe3, 0x6d, 0x5c, 0xd9,
		0x16, 0x16, 0x6f, 0x23, 0x83, 0x15, 0x88, 0x9b, 0x1e, 0x71, 0x23, 0x83, 0x35, 0x69, 0x76, 0xdb,
		0x8b, 0x4c, 0x2b, 0x74, 0x7c, 0x4a, 0x04, 0x65, 0xd0, 0xf1, 0xc9, 0x54, 0x1f, 0x08, 0xf1, 0xf2,
		0x5a, 0x7c, 0x1c, 0xc4, 0xcb, 0x4b, 0x38, 0x0c, 0x88, 0x97, 0x07, 0x01, 0x03, 0x02, 0x06, 0x04,
		0x8c, 0x2a, 0x79, 0x47, 0xbc, 0x3c, 0xc8, 0x17, 0x90, 0x2f, 0x20, 0x5f, 0x12, 0x6d, 0x3d, 0xe2,
		0xe5, 0xc1, 0xc1, 0x28, 0x3c, 0x43, 0x88, 0x97, 0x07, 0x94, 0x07, 0x94, 0x07, 0x94, 0x07, 0x94,
		0xdf, 0x49, 0xde, 0x11, 0x2f, 0x2f, 0xe5, 0x5d, 0x11, 0x2f, 0x0f, 0x73, 0x00, 0x73, 0x00, 0x73,
		0x90, 0x75, 0x73, 0x80, 0x78, 0x79, 0x50, 0x48, 0x29, 0xb7, 0x17, 0xf1, 0xf2, 0x85, 0xa5, 0x90,
		0x10, 0x2f, 0x0f, 0xe6, 0x28, 0xc3, 0x20, 0x1e, 0xf1, 0xf2, 0x00, 0xf5, 0x00, 0xf5, 0x00, 0xf5,
		0x79, 0x03, 0xf5, 0x88, 0x97, 0xcf, 0x33, 0xde, 0xc6, 0x95, 0x6d, 0x61, 0xf1, 0x36, 0xe2, 0xe5,
		0x81, 0xb8, 0xe9, 0x11, 0x37, 0xe2, 0xe5, 0xa5, 0xc7, 0xcb, 0xa3, 0xe7, 0x93, 0xaa, 0x0d, 0xa5,
		0xdd, 0x48, 0xea, 0xae, 0x4f, 0x8d, 0x6f, 0xab, 0xc7, 0x40, 0xdf, 0x27, 0x53, 0x05, 0x84, 0xaa,
		0xf3, 0xd3, 0xb3, 0x2c, 0x64, 0xa4, 0xf7, 0xd3, 0xaa, 0x33, 0x96, 0xcc, 0xce, 0x4f, 0xe9, 0xba,
		0x6d, 0xa1, 0xef, 0x93, 0x0a, 0x36, 0x03, 0x7d, 0x9f, 0x14, 0x6a, 0x41, 0xf4, 0x7d, 0xa2, 0xa6,
		0x2c, 0xd1, 0xf7, 0x09, 0x7d, 0x9f, 0x88, 0x31, 0x31, 0xfa, 0x3e, 0x99, 0x70, 0xf0, 0x55, 0x28,
		0x00, 0x75, 0x8a, 0x40, 0x95, 0x42, 0x50, 0xae, 0x18, 0x94, 0x2b, 0x08, 0xa5, 0x8a, 0xc2, 0x4c,
		0x96, 0x04, 0x79, 0xac, 0x44, 0x14, 0x2a, 0x2e, 0x46, 0x49, 0x95, 0x10, 0x99, 0x32, 0x22, 0x53,
		0x4a, 0x24, 0xca, 0x49, 0xae, 0x92, 0x92, 0xac, 0xac, 0xa2, 0x15, 0x40, 0x1e, 0xeb, 0xc6, 0xa1,
		0x71, 0x29, 0x4a, 0xaf, 0xd6, 0x63, 0xd3, 0xe0, 0x52, 0x74, 0xbf, 0xad, 0x47, 0x1e, 0x6b, 0x36,
		0x64, 0x00, 0x77, 0xa3, 0xa6, 0x9c, 0x21, 0xe4, 0xb1, 0x02, 0xca, 0x03, 0xca, 0x03, 0xca, 0x03,
		0xca, 0xef, 0x24, 0xef, 0xc8, 0x63, 0x95, 0xf2, 0xae, 0xc8, 0x63, 0x85, 0x39, 0x80, 0x39, 0x80,
		0x39, 0xc8, 0xba, 0x39, 0x40, 0x1e, 0x2b, 0x28, 0xa4, 0x94, 0xdb, 0x8b, 0x3c, 0xd6, 0xc2, 0x52,
		0x48, 0xc8, 0x63, 0x05, 0x73, 0x94, 0x61, 0x10, 0x8f, 0x3c, 0x56, 0x80, 0x7a, 0x80, 0x7a, 0x80,
		0xfa, 0xbc, 0x81, 0x7a, 0xe4, 0xb1, 0xe6, 0x19, 0x6f, 0xe3, 0xca, 0xb6, 0xb0, 0x78, 0x1b, 0x79,
		0xac, 0x40, 0xdc, 0xf4, 0x88, 0x1b, 0x79, 0xac, 0xc9, 0xb3, 0xdb, 0x96, 0x79, 0x56, 0xe8, 0xfa,
		0x94, 0x08, 0xc8, 0xa0, 0xeb, 0x93, 0xa9, 0x1e, 0x10, 0xa2, 0xe5, 0xb5, 0x78, 0x38, 0x88, 0x96,
		0x97, 0x70, 0x18, 0x10, 0x2d, 0x0f, 0xfa, 0x05, 0xf4, 0x0b, 0xe8, 0x17, 0x55, 0xf2, 0x8e, 0x68,
		0x79, 0x50, 0x2f, 0xa0, 0x5e, 0x40, 0xbd, 0x24, 0xda, 0x7a, 0x44, 0xcb, 0x83, 0x81, 0x51, 0x78,
		0x86, 0x10, 0x2d, 0x0f, 0x28, 0x0f, 0x28, 0x0f, 0x28, 0x0f, 0x28, 0xbf, 0x93, 0xbc, 0x23, 0x5a,
		0x5e, 0xca, 0xbb, 0x22, 0x5a, 0x1e, 0xe6, 0x00, 0xe6, 0x00, 0xe6, 0x20, 0xeb, 0xe6, 0x00, 0xd1,
		0xf2, 0xa0, 0x90, 0x52, 0x6e, 0x2f, 0xa2, 0xe5, 0x0b, 0x4b, 0x21, 0x21, 0x5a, 0x1e, 0xcc, 0x51,
		0x86, 0x41, 0x3c, 0xa2, 0xe5, 0x01, 0xea, 0x01, 0xea, 0x01, 0xea, 0xf3, 0x06, 0xea, 0x11, 0x2d,
		0x9f, 0x67, 0xbc, 0x8d, 0x2b, 0xdb, 0xc2, 0xe2, 0x6d, 0x44, 0xcb, 0x03, 0x71, 0xd3, 0x23, 0x6e,
		0x44, 0xcb, 0x4b, 0x8e, 0x96, 0x47, 0xcf, 0x27, 0x55, 0xdb, 0x49, 0xb9, 0x8d, 0xe4, 0x1d, 0x9f,
		0x2e, 0x5d, 0xf4, 0x7b, 0x32, 0xb1, 0xdf, 0x53, 0xba, 0xce, 0x43, 0x89, 0xe5, 0xc0, 0xe4, 0x5e,
		0x4f, 0x81, 0x2f, 0x98, 0x35, 0xf5, 0x1c, 0x3e, 0x7a, 0x98, 0xaf, 0x51, 0x2d, 0x7d, 0xa7, 0xa7,
		0xd8, 0x88, 0xe8, 0xf3, 0x84, 0x3e, 0x4f, 0x9a, 0x78, 0x07, 0xf4, 0x79, 0x42, 0x9f, 0x27, 0x7d,
		0x24, 0x24, 0xfa, 0x3c, 0xa1, 0xcf, 0xd3, 0xf6, 0x81, 0xd0, 0xe7, 0x49, 0xc6, 0x80, 0xc8, 0x5c,
		0x45, 0xe6, 0x6a, 0xb6, 0x78, 0x11, 0x64, 0xae, 0x12, 0x91, 0xa6, 0xb8, 0x0a, 0x25, 0x55, 0x42,
		0x64, 0xca, 0x88, 0x4c, 0x29, 0x91, 0x28, 0x27, 0xb9, 0x4a, 0x4a, 0xb2, 0xb2, 0x8a, 0x56, 0x00,
		0x99, 0xab, 0x1b, 0x87, 0xc6, 0x35, 0x28, 0xbd, 0x5a, 0x8f, 0x4d, 0x83, 0x6b, 0xd0, 0xfd, 0xb6,
		0x1e, 0x99, 0xab, 0xd9, 0x90, 0x01, 0xdc, 0x86, 0x9a, 0x72, 0x86, 0x90, 0xb9, 0x0a, 0x28, 0x0f,
		0x28, 0x0f, 0x28, 0x0f, 0x28, 0xbf, 0x93, 0xbc, 0x23, 0x73, 0x55, 0xca, 0xbb, 0x22, 0x73, 0x15,
		0xe6, 0x00, 0xe6, 0x00, 0xe6, 0x20, 0xeb, 0xe6, 0x00, 0x99, 0xab, 0xa0, 0x90, 0x52, 0x6e, 0x2f,
		0x32, 0x57, 0x0b, 0x4b, 0x21, 0x21, 0x73, 0x15, 0xcc, 0x51, 0x86, 0x41, 0x3c, 0x32, 0x57, 0x01,
		0xea, 0x01, 0xea, 0x01, 0xea, 0xf3, 0x06, 0xea, 0x91, 0xb9, 0x9a, 0x67, 0xbc, 0x8d, 0x2b, 0xdb,
		0xc2, 0xe2, 0x6d, 0x64, 0xae, 0x02, 0x71, 0xd3, 0x23, 0x6e, 0x64, 0xae, 0xee, 0x99, 0xd5, 0xf6,
		0x3a, 0xcb, 0x0a, 0x5d, 0x9e, 0x12, 0xc1, 0x18, 0x74, 0x79, 0x32, 0xd5, 0xff, 0x41, 0xac, 0xbc,
		0x16, 0xff, 0x06, 0xb1, 0xf2, 0x12, 0x0e, 0x03, 0x62, 0xe5, 0x41, 0xbe, 0x80, 0x7c, 0x01, 0xf9,
		0xa2, 0x4a, 0xde, 0x11, 0x2b, 0x0f, 0xe2, 0x05, 0xc4, 0x0b, 0x88, 0x97, 0x44, 0x5b, 0x8f, 0x58,
		0x79, 0xf0, 0x2f, 0x0a, 0xcf, 0x10, 0x62, 0xe5, 0x01, 0xe5, 0x01, 0xe5, 0x01, 0xe5, 0x01, 0xe5,
		0x77, 0x92, 0x77, 0xc4, 0xca, 0x4b, 0x79, 0x57, 0xc4, 0xca, 0xc3, 0x1c, 0xc0, 0x1c, 0xc0, 0x1c,
		0x64, 0xdd, 0x1c, 0x20, 0x56, 0x1e, 0x14, 0x52, 0xca, 0xed, 0x45, 0xac, 0x7c, 0x61, 0x29, 0x24,
		0xc4, 0xca, 0x83, 0x39, 0xca, 0x30, 0x88, 0x47, 0xac, 0x3c, 0x40, 0x3d, 0x40, 0x3d, 0x40, 0x7d,
		0xde, 0x40, 0x3d, 0x62, 0xe5, 0xf3, 0x8c, 0xb7, 0x71, 0x65, 0x5b, 0x58, 0xbc, 0x8d, 0x58, 0x79,
		0x20, 0x6e, 0x7a, 0xc4, 0x8d, 0x58, 0x79, 0xa9, 0xb1, 0xf2, 0xe8, 0xf1, 0xa4, 0x6a, 0x33, 0xe9,
		0x36, 0x91, 0xaa, 0xc3, 0xd3, 0xb9, 0x2f, 0xd8, 0xd9, 0xe2, 0x19, 0xba, 0xd3, 0xbb, 0x1a, 0xfa,
		0x3b, 0x99, 0x28, 0x18, 0xaa, 0xbb, 0x3b, 0xad, 0xcb, 0x40, 0x86, 0x7a, 0x3b, 0x35, 0xa4, 0xf7,
		0x76, 0x6a, 0xa0, 0xb7, 0x13, 0x7a, 0x3b, 0xe9, 0x62, 0x1b, 0xd0, 0xdb, 0x09, 0xbd, 0x9d, 0xf4,
		0x51, 0x8f, 0xe8, 0xed, 0x84, 0xde, 0x4e, 0xdb, 0x07, 0x42, 0x6f, 0x27, 0x19, 0x03, 0x22, 0x5f,
		0x15, 0xf9, 0xaa, 0xd9, 0x62, 0x43, 0x90, 0xaf, 0x4a, 0x44, 0x95, 0xe2, 0x02, 0x94, 0x54, 0x09,
		0x91, 0x29, 0x23, 0x32, 0xa5, 0x44, 0xa2, 0x9c, 0xe4, 0x2a, 0x29, 0xc9, 0xca, 0x2a, 0x5a, 0x01,
		0xe4, 0xab, 0x6e, 0x1c, 0x1a, 0x97, 0x9f, 0xf4, 0x6a, 0x3d, 0x36, 0x0d, 0x2e, 0x3f, 0xf7, 0xdb,
		0x7a, 0xe4, 0xab, 0x66, 0x43, 0x06, 0x70, 0x07, 0x6a, 0xca, 0x19, 0x42, 0xbe, 0x2a, 0xa0, 0x3c,
		0xa0, 0x3c, 0xa0, 0x3c, 0xa0, 0xfc, 0x4e, 0xf2, 0x8e, 0x7c, 0x55, 0x29, 0xef, 0x8a, 0x7c, 0x55,
		0x98, 0x03, 0x98, 0x03, 0x98, 0x83, 0xac, 0x9b, 0x03, 0xe4, 0xab, 0x82, 0x42, 0x4a, 0xb9, 0xbd,
		0xc8, 0x57, 0x2d, 0x2c, 0x85, 0x84, 0x7c, 0x55, 0x30, 0x47, 0x19, 0x06, 0xf1, 0xc8, 0x57, 0x05,
		0xa8, 0x07, 0xa8, 0x07, 0xa8, 0xcf, 0x1b, 0xa8, 0x47, 0xbe, 0x6a, 0x9e, 0xf1, 0x36, 0xae, 0x6c,
		0x0b, 0x8b, 0xb7, 0x91, 0xaf, 0x0a, 0xc4, 0x4d, 0x8f, 0xb8, 0x91, 0xaf, 0x9a, 0x2e, 0xa3, 0xad,
		0x81, 0xde, 0x4e, 0x89, 0x60, 0x0c, 0x7a, 0x3b, 0x99, 0xea, 0xff, 0x20, 0x56, 0x5e, 0x8b, 0x7f,
		0x83, 0x58, 0x79, 0x09, 0x87, 0x01, 0xb1, 0xf2, 0x20, 0x5f, 0x40, 0xbe, 0x80, 0x7c, 0x51, 0x25,
		0xef, 0x88, 0x95, 0x07, 0xf1, 0x02, 0xe2, 0x05, 0xc4, 0x4b, 0xa2, 0xad, 0x47, 0xac, 0x3c, 0xf8,
		0x17, 0x85, 0x67, 0x08, 0xb1, 0xf2, 0x80, 0xf2, 0x80, 0xf2, 0x80, 0xf2, 0x80, 0xf2, 0x3b, 0xc9,
		0x3b, 0x62, 0xe5, 0xa5, 0xbc, 0x2b, 0x62, 0xe5, 0x61, 0x0e, 0x60, 0x0e, 0x60, 0x0e, 0xb2, 0x6e,
		0x0e, 0x10, 0x2b, 0x0f, 0x0a, 0x29, 0xe5, 0xf6, 0x22, 0x56, 0xbe, 0xb0, 0x14, 0x12, 0x62, 0xe5,
		0xc1, 0x1c, 0x65, 0x18, 0xc4, 0x23, 0x56, 0x1e, 0xa0, 0x1e, 0xa0, 0x1e, 0xa0, 0x3e, 0x6f, 0xa0,
		0x1e, 0xb1, 0xf2, 0x79, 0xc6, 0xdb, 0xb8, 0xb2, 0x2d, 0x2c, 0xde, 0x46, 0xac, 0x3c, 0x10, 0x37,
		0x3d, 0xe2, 0x46, 0xac, 0xbc, 0xd4, 0x58, 0x79, 0xf4, 0x76, 0x52, 0xb5, 0x99, 0x74, 0x9b, 0xa8,
		0xa5, 0xb7, 0x53, 0x03, 0xbd, 0x9d, 0x4c, 0x14, 0x0c, 0xd2, 0xde, 0x4e, 0x0d, 0xa3, 0x7b, 0x3b,
		0xa5, 0xca, 0x99, 0x91, 0x92, 0x23, 0x23, 0xad, 0x8b, 0x53, 0x15, 0x5d, 0x9c, 0x14, 0xf2, 0x10,
		0xe8, 0xe2, 0xf4, 0xfc, 0xe4, 0xa9, 0xbb, 0x38, 0xad, 0x34, 0x93, 0xb5, 0xd4, 0x23, 0x92, 0xda,
		0x38, 0xad, 0x0f, 0x2b, 0xa7, 0x8f, 0x53, 0x19, 0x7d, 0x9c, 0x34, 0xd0, 0x8a, 0xe8, 0xe3, 0x64,
		0x00, 0xd6, 0x95, 0x46, 0xfb, 0x45, 0xf2, 0xc6, 0xc7, 0xcc, 0x15, 0x5c, 0x3c, 0xf8, 0x6c, 0x22,
		0x43, 0xe8, 0x56, 0x96, 0x53, 0x02, 0xb1, 0x57, 0xea, 0x2e, 0x1f, 0xed, 0x93, 0x1d, 0x28, 0x48,
		0xa2, 0x6d, 0x7f, 0xed, 0x0e, 0xcf, 0xe7, 0xff, 0x77, 0xf1, 0x7f, 0x67, 0x1d, 0x59, 0xa2, 0xbc,
		0xe0, 0x3e, 0x02, 0xa9, 0xe4, 0xa3, 0xa2, 0x7b, 0xa4, 0x93, 0xe3, 0xef, 0x67, 0xa7, 0xc3, 0xee,
		0xd9, 0xf7, 0xc6, 0xf0, 0xf2, 0xb4, 0xfb, 0xb9, 0x7d, 0x7e, 0x51, 0x32, 0xf1, 0x7a, 0x4d, 0xd5,
		0xdb, 0x77, 0x4f, 0xff, 0x7b, 0x7e, 0xd1, 0xbe, 0xe8, 0x0c, 0xcf, 0xcf, 0xbe, 0x16, 0xea, 0xc5,
		0x57, 0xdb, 0x5e, 0x2b, 0xe4, 0xb6, 0x3f, 0x0b, 0xfd, 0xb7, 0xcb, 0x93, 0x8b, 0xc2, 0xbd, 0x7f,
		0xe1, 0x8f, 0x7b, 0xe1, 0x36, 0xfb, 0xa4, 0xfd, 0xa9, 0x73, 0xd2, 0xf9, 0x52, 0xc4, 0x4d, 0x3f,
		0xef, 0x5f, 0x74, 0x86, 0x67, 0xbd, 0x93, 0xee, 0xe7, 0xff, 0x5b, 0x1c, 0xf9, 0x42, 0x09, 0x7c,
		0x75, 0xae, 0xe8, 0xbe, 0x9f, 0x9d, 0x9c, 0x17, 0x4c, 0xe2, 0x6b, 0x45, 0x96, 0xf8, 0xc5, 0xfb,
		0x7f, 0x3d, 0xe9, 0xfd, 0xbf, 0xf3, 0xb3, 0xce, 0xe7, 0x02, 0x1f, 0xf5, 0x5a, 0x31, 0xa1, 0xec,
		0xf7, 0xb3, 0xd3, 0xc2, 0x49, 0x7b, 0x01, 0x4f, 0xf9, 0xf7, 0xb3, 0xd3, 0x82, 0x1e, 0xf3, 0xd0,
		0xaa, 0x75, 0x0a, 0x26, 0xe7, 0x2f, 0x5c, 0x36, 0x15, 0x4e, 0x8b, 0x94, 0x91, 0x06, 0xba, 0x79,
		0xb5, 0x37, 0x1a, 0xf6, 0xbf, 0xc4, 0x5c, 0xfb, 0xda, 0x61, 0x63, 0x79, 0x6c, 0xf9, 0x6a, 0xc0,
		0xb4, 0xdd, 0xde, 0xe5, 0xa6, 0x80, 0x83, 0x77, 0xdf, 0x6b, 0x44, 0xf0, 0xee, 0xe0, 0xdd, 0x7f,
		0x2f, 0x6f, 0xf2, 0x52, 0xa8, 0x25, 0xa5, 0x4c, 0x23, 0x9a, 0x23, 0x45, 0x34, 0x47, 0xf2, 0x68,
		0x2c, 0x9a, 0xa0, 0x8a, 0x59, 0xc0, 0xac, 0xdb, 0x99, 0x23, 0xf8, 0xd4, 0x61, 0xd6, 0xfc, 0x9d,
		0x83, 0xf4, 0x11, 0x16, 0x1b, 0xc6, 0xd4, 0x1c, 0x6e, 0x51, 0x46, 0xb8, 0x85, 0x42, 0xbb, 0x81,
		0x70, 0x8b, 0x17, 0x08, 0x2b, 0x6d, 0xb8, 0xc5, 0x68, 0x25, 0xb3, 0x92, 0x90, 0xe3, 0x72, 0x3c,
		0x39, 0x40, 0xaf, 0x02, 0xa0, 0x07, 0xa0, 0x57, 0x4c, 0xa0, 0x27, 0xab, 0x76, 0xaf, 0x34, 0xdf,
		0x50, 0x91, 0x8f, 0xa8, 0xca, 0x57, 0x94, 0xec, 0x33, 0x4a, 0x57, 0x29, 0x2a, 0x54, 0x8b, 0x3a,
		0x15, 0xa3, 0x4a, 0xd5, 0x28, 0x57, 0x39, 0xca, 0x55, 0x8f, 0x52, 0x15, 0x24, 0x97, 0x1b, 0x93,
		0x95, 0xb4, 0x22, 0x3d, 0xe5, 0x53, 0x61, 0x39, 0x2f, 0xc9, 0x65, 0xbc, 0x90, 0xa2, 0xa2, 0xce,
		0x77, 0x8d, 0xbb, 0x71, 0x52, 0x1a, 0x71, 0x68, 0x62, 0x64, 0xe7, 0xe7, 0x5f, 0x1e, 0x1d, 0x9b,
		0x5e, 0x8b, 0x03, 0x52, 0x03, 0x52, 0x03, 0x52, 0xcb, 0x11, 0x37, 0x49, 0x3e, 0xb3, 0x1a, 0xdf,
		0x59, 0xf2, 0x81, 0x07, 0xf0, 0x05, 0xf0, 0x05, 0xf0, 0x95, 0xab, 0x40, 0xa2, 0x01, 0x6d, 0xc7,
		0xf1, 0xfe, 0x79, 0x06, 0x3d, 0xb6, 0xc2, 0xa6, 0x3a, 0xf1, 0xa9, 0x50, 0xee, 0x1b, 0xa5, 0xa0,
		0xa8, 0xd5, 0x1d, 0x99, 0xda, 0x23, 0x53, 0x7f, 0x24, 0x6a, 0x50, 0xae, 0x3a, 0x94, 0xac, 0x16,
		0xd5, 0xf1, 0x02, 0x04, 0xfc, 0x80, 0x22, 0x9e, 0x40, 0xfe, 0x86, 0xc9, 0xac, 0x14, 0x78, 0x6b,
		0xdf, 0xf3, 0xdb, 0xd9, 0x6d, 0xca, 0xfb, 0xd7, 0xdf, 0xee, 0xd6, 0xfa, 0x34, 0xea, 0xcc, 0x4d,
		0x05, 0xa6, 0x06, 0xa6, 0x06, 0xa6, 0x06, 0xa6, 0x46, 0xa6, 0xbc, 0xa3, 0x49, 0x5c, 0xec, 0x17,
		0x2a, 0x0e, 0xee, 0x34, 0x0d, 0x2a, 0x0e, 0xee, 0xb7, 0xf5, 0x68, 0x12, 0x97, 0x0d, 0x19, 0x40,
		0xe1, 0xc1, 0x1c, 0x51, 0x59, 0x59, 0x28, 0x3c, 0xb8, 0xe1, 0x42, 0x90, 0xcd, 0x47, 0x90, 0x71,
		0x2b, 0x28, 0x6f, 0x57, 0xd0, 0x9e, 0x3f, 0x9d, 0x33, 0x84, 0xf6, 0xfc, 0x59, 0x72, 0x76, 0x70,
		0x9d, 0x80, 0xeb, 0x04, 0x5c, 0x27, 0x80, 0xe3, 0x01, 0xc7, 0x03, 0x8e, 0x27, 0xf3, 0x1c, 0x0f,
		0xae, 0x13, 0xa4, 0xbc, 0x2b, 0xae, 0x13, 0x60, 0x6a, 0x60, 0x6a, 0x60, 0x6a, 0x60, 0x6a, 0xb6,
		0xcb, 0x3b, 0xae, 0x13, 0x62, 0xbf, 0x70, 0x9d, 0xb0, 0xd3, 0x34, 0xb8, 0x4e, 0xd8, 0x6f, 0xeb,
		0x71, 0x9d, 0x90, 0x0d, 0x19, 0xc0, 0x75, 0x42, 0x8e, 0xa8, 0xac, 0x2c, 0x5f, 0x27, 0xa0, 0x83,
		0x91, 0xaa, 0x6d, 0xa4, 0xd8, 0x3e, 0xaa, 0xde, 0x45, 0x97, 0x01, 0xfb, 0xb6, 0x9c, 0xfd, 0x6c,
		0x3e, 0xf9, 0xb0, 0x93, 0x1a, 0x27, 0xeb, 0xc9, 0x4c, 0xe3, 0x52, 0x33, 0xd3, 0x38, 0x32, 0xd3,
		0x68, 0xfd, 0x5d, 0x64, 0xa6, 0x21, 0x33, 0x6d, 0xfb, 0x40, 0xc8, 0x4c, 0x33, 0x94, 0x00, 0xc3,
		0x55, 0x32, 0x3d, 0xc1, 0x85, 0xab, 0xe4, 0xe4, 0x03, 0x82, 0xd3, 0xd7, 0xc1, 0x00, 0x80, 0xd3,
		0x27, 0x55, 0x71, 0x64, 0xaa, 0x8e, 0x4c, 0xe5, 0x91, 0xa8, 0x3e, 0x35, 0x64, 0x0b, 0x38, 0xfd,
		0x98, 0x76, 0x01, 0xa7, 0xff, 0xe2, 0xc1, 0xc1, 0xe9, 0xef, 0x3f, 0x0f, 0x38, 0x7d, 0x63, 0xb7,
		0x1e, 0x9c, 0xbe, 0xbe, 0x51, 0xc1, 0xe9, 0xef, 0x04, 0x21, 0xb2, 0xc9, 0xe9, 0x73, 0xa4, 0x08,
		0xec, 0x81, 0x61, 0x90, 0x22, 0x00, 0x5e, 0x07, 0xbc, 0x0e, 0x78, 0x1d, 0xf0, 0x3a, 0xe0, 0x75,
		0xc0, 0xeb, 0x80, 0xd7, 0x01, 0xaf, 0x03, 0x5e, 0x07, 0xbc, 0x0e, 0x78, 0x1d, 0xf0, 0x3a, 0xe0,
		0x75, 0xc0, 0xeb, 0x80, 0xd7, 0x31, 0x8c, 0xd7, 0x41, 0xac, 0xa6, 0xaa, 0x6d, 0xa4, 0xd8, 0x3e,
		0x6d, 0xb1, 0x9a, 0xdd, 0x8c, 0xc6, 0x6a, 0xca, 0x21, 0xfd, 0xa4, 0x92, 0x7d, 0xd2, 0xa3, 0x35,
		0xab, 0x88, 0xd6, 0x34, 0xc0, 0xa3, 0x45, 0xb4, 0x26, 0x3d, 0x29, 0x87, 0xd6, 0x5c, 0x68, 0xcd,
		0x85, 0xfb, 0x02, 0xdc, 0x17, 0xa0, 0x35, 0x17, 0xf0, 0x7c, 0xe6, 0xf0, 0xbc, 0x04, 0x4f, 0x0c,
		0x8d, 0xbe, 0x65, 0xee, 0x48, 0x29, 0x95, 0x9f, 0xb1, 0xbf, 0x53, 0x45, 0xd6, 0x65, 0xfc, 0x8d,
		0xc2, 0x3d, 0x9e, 0x1b, 0xb7, 0x45, 0x39, 0xb3, 0xe5, 0xba, 0x5a, 0x8b, 0x35, 0xd8, 0x73, 0x8c,
		0x13, 0x1e, 0x88, 0xb6, 0x10, 0xc9, 0x40, 0x61, 0xe9, 0x1b, 0x77, 0x3b, 0x0e, 0x9b, 0x9b, 0xa7,
		0x20, 0x19, 0x74, 0x29, 0x7d, 0xb3, 0xef, 0x5f, 0x8c, 0x50, 0xf9, 0x50, 0xab, 0x35, 0x9a, 0xb5,
		0x5a, 0xb9, 0x79, 0xdc, 0x2c, 0xb7, 0xea, 0xf5, 0x4a, 0xa3, 0x92, 0x80, 0x8a, 0x2c, 0xf5, 0xfc,
		0x31, 0xf3, 0xd9, 0xf8, 0xd3, 0x7c, 0x79, 0xdc, 0x99, 0xe3, 0x28, 0xdd, 0x85, 0x94, 0x27, 0x4c,
		0xe6, 0xc9, 0x4a, 0x70, 0x8c, 0x76, 0x39, 0x3e, 0xfb, 0x9d, 0x96, 0xdd, 0x65, 0x7e, 0xb7, 0x9f,
		0xdc, 0x71, 0x3f, 0x92, 0xee, 0x83, 0x84, 0xf5, 0xdf, 0x6d, 0x7d, 0x7e, 0xff, 0xb6, 0x3b, 0xbc,
		0x69, 0xc9, 0x9e, 0x4e, 0x9d, 0x07, 0x6b, 0xea, 0x39, 0x7c, 0xf4, 0xb0, 0xf3, 0x7b, 0x3e, 0x57,
		0x3e, 0x7c, 0xf9, 0xed, 0x1d, 0xd7, 0x75, 0x3f, 0xce, 0x64, 0x6f, 0x47, 0x26, 0x89, 0xa3, 0xf2,
		0xd2, 0x11, 0xf1, 0xa7, 0x9e, 0xb3, 0x87, 0xdc, 0x27, 0xf5, 0x34, 0x52, 0x7b, 0x12, 0xa9, 0x3d,
		0x85, 0xd7, 0x9e, 0xc0, 0xe2, 0xc5, 0x35, 0x9d, 0xb5, 0x7d, 0x59, 0x84, 0xa4, 0xb9, 0x9d, 0xe9,
		0x72, 0x38, 0x13, 0xd2, 0x7d, 0x89, 0x7d, 0xf1, 0x34, 0x3e, 0x77, 0x0a, 0x91, 0x96, 0xe5, 0x44,
		0x4b, 0x73, 0x96, 0xa5, 0x39, 0xc5, 0xe9, 0x44, 0x9e, 0x06, 0x84, 0x25, 0x25, 0xd4, 0x4a, 0xe3,
		0x90, 0x98, 0xb2, 0xd8, 0xfd, 0xd4, 0xf3, 0xc5, 0xbe, 0x2a, 0x7d, 0xab, 0xfc, 0x6c, 0x1e, 0x36,
		0xe1, 0xfa, 0xbf, 0x20, 0xcf, 0xfa, 0x9d, 0xff, 0x7f, 0xe7, 0xf3, 0xc5, 0xb0, 0xdf, 0xbb, 0xbc,
		0xe8, 0x24, 0x1d, 0x2e, 0x1d, 0x67, 0x96, 0x9a, 0x23, 0x93, 0xc1, 0x89, 0x49, 0x38, 0xa7, 0xb2,
		0x49, 0x2f, 0xe9, 0x24, 0x97, 0x74, 0x52, 0x4b, 0xce, 0x39, 0xd6, 0xe3, 0x40, 0xa7, 0x66, 0xa5,
		0x62, 0x27, 0x33, 0x3c, 0x92, 0x96, 0x98, 0x0f, 0x9c, 0x42, 0x7a, 0x56, 0xc6, 0xad, 0x96, 0x62,
		0x8c, 0x8e, 0x3b, 0xbb, 0x9d, 0xbf, 0xdc, 0x13, 0x95, 0x3f, 0xfc, 0x2e, 0xb9, 0x9e, 0xe4, 0xb7,
		0x4a, 0xf4, 0xe4, 0xfa, 0xb0, 0xd0, 0x93, 0xd0, 0x93, 0xd0, 0x93, 0xd0, 0x93, 0x19, 0xd4, 0x93,
		0x92, 0x71, 0xa4, 0x14, 0xfc, 0x08, 0x45, 0x06, 0x45, 0x56, 0x5c, 0x45, 0xe6, 0x30, 0x7b, 0xe2,
		0xb3, 0x89, 0x0c, 0xe5, 0x95, 0x22, 0xea, 0xbe, 0x74, 0x16, 0x51, 0x9b, 0xe1, 0x46, 0x7c, 0xf4,
		0xbd, 0x99, 0xe0, 0xee, 0xcd, 0xf2, 0x6c, 0x47, 0x7f, 0xbd, 0xd4, 0xb7, 0x63, 0x36, 0xe1, 0x2e,
		0x17, 0xdc, 0x73, 0x83, 0xed, 0xff, 0x14, 0xfd, 0xcb, 0x82, 0x38, 0x26, 0xdd, 0x9f, 0x54, 0x37,
		0x16, 0xd1, 0x28, 0xa9, 0x6f, 0x2e, 0x9e, 0x47, 0x52, 0x70, 0x83, 0x11, 0x0d, 0xfe, 0xf2, 0x26,
		0x43, 0x52, 0x20, 0xdd, 0x2c, 0x60, 0x7e, 0x5a, 0x7d, 0x21, 0x31, 0x5c, 0xe3, 0xa5, 0x32, 0xf3,
		0xc2, 0xb7, 0xb5, 0xae, 0x1f, 0x64, 0x84, 0xaf, 0xa9, 0x08, 0xcd, 0x58, 0x53, 0x6c, 0x8b, 0x95,
		0xcc, 0xd6, 0x2d, 0x32, 0x09, 0x12, 0x91, 0xec, 0xa9, 0x49, 0xf1, 0xd0, 0x80, 0x44, 0x80, 0x44,
		0x80, 0x44, 0x80, 0x44, 0x80, 0x44, 0x80, 0x44, 0x80, 0x44, 0x32, 0x89, 0x44, 0x72, 0x1a, 0xc5,
		0xf3, 0x22, 0x24, 0x23, 0x51, 0xe9, 0x9f, 0x3d, 0xe2, 0x6d, 0xf6, 0x08, 0x93, 0x48, 0x96, 0xbd,
		0x93, 0x2a, 0x5b, 0x27, 0xf5, 0x75, 0x7d, 0x15, 0xd7, 0xf5, 0x5a, 0xd5, 0x13, 0xae, 0xeb, 0xf7,
		0x97, 0x1f, 0x5c, 0xd7, 0xc3, 0x67, 0x82, 0xcf, 0x64, 0xa2, 0xcf, 0x84, 0x6b, 0x28, 0x5c, 0xd7,
		0x43, 0x4f, 0x42, 0x4f, 0x42, 0x4f, 0x42, 0x4f, 0x2a, 0xd0, 0x93, 0xb8, 0xae, 0x87, 0x22, 0x83,
		0x22, 0x33, 0x49, 0x91, 0x81, 0x24, 0x57, 0xb1, 0x3f, 0x20, 0xc9, 0xd3, 0x49, 0x25, 0x48, 0x72,
		0x59, 0x8a, 0x0d, 0xd7, 0xf5, 0x9b, 0xd7, 0x08, 0xd7, 0xf5, 0x40, 0x22, 0x40, 0x22, 0x40, 0x22,
		0x40, 0x22, 0x40, 0x22, 0x40, 0x22, 0x40, 0x22, 0x92, 0x90, 0x48, 0x01, 0xae, 0xeb, 0x13, 0xd4,
		0x11, 0x2a, 0x4e, 0x75, 0x8c, 0xfd, 0x4b, 0x4d, 0x1c, 0xfc, 0xb6, 0x1e, 0xc9, 0x7c, 0xcc, 0xb3,
		0x70, 0x48, 0xca, 0x9a, 0x1b, 0xc1, 0xa2, 0x4a, 0x91, 0xe5, 0x4d, 0x17, 0xc6, 0x2d, 0x41, 0xd9,
		0x8d, 0x57, 0x03, 0xe4, 0xa3, 0xf2, 0xc6, 0x7e, 0x25, 0x00, 0xf3, 0x53, 0x78, 0x63, 0xaf, 0x12,
		0x7c, 0xa8, 0xbb, 0xa1, 0xde, 0x6b, 0x93, 0x15, 0xc8, 0x93, 0xac, 0xa6, 0x65, 0xfe, 0xe3, 0x78,
		0x12, 0xd5, 0x9c, 0x34, 0x34, 0x8c, 0xc7, 0x76, 0x1c, 0xef, 0x1f, 0xcb, 0xfb, 0xc7, 0xb5, 0xec,
		0x20, 0x3d, 0xd7, 0xb1, 0x36, 0x5a, 0xfa, 0xcb, 0xe8, 0x32, 0xe8, 0x12, 0x09, 0xc5, 0x65, 0x8b,
		0xcb, 0x96, 0xa4, 0x2a, 0x0e, 0x9b, 0x55, 0xb2, 0x64, 0xc6, 0x5d, 0xf1, 0x41, 0x02, 0x55, 0x92,
		0xc6, 0xdb, 0x96, 0xd3, 0xc0, 0x48, 0x82, 0x4f, 0x2c, 0xb3, 0x21, 0x91, 0xec, 0x12, 0xd7, 0x92,
		0x1b, 0x0c, 0xa9, 0x68, 0x22, 0x23, 0xa3, 0xd9, 0xa9, 0xcc, 0xc6, 0x40, 0xaa, 0xb6, 0xa0, 0x5a,
		0xaf, 0x1b, 0xbc, 0x09, 0x9a, 0x98, 0x91, 0x81, 0xc9, 0x51, 0x75, 0x3c, 0xb0, 0xaf, 0x1d, 0x66,
		0x2d, 0x1c, 0x6c, 0x3b, 0xb0, 0x26, 0xdc, 0x11, 0xcc, 0x97, 0x10, 0x56, 0xb7, 0x79, 0xdc, 0xf4,
		0x50, 0x26, 0x4d, 0xad, 0x7d, 0xc0, 0x19, 0xc0, 0x99, 0xc2, 0xc2, 0x99, 0xf4, 0xb5, 0xea, 0x53,
		0xd6, 0xa6, 0xa7, 0x51, 0x68, 0x3e, 0x9b, 0x3a, 0xf6, 0x28, 0x52, 0x3c, 0xe9, 0x35, 0xd9, 0xeb,
		0x01, 0xa1, 0xc2, 0xa0, 0xc2, 0xa0, 0xc2, 0xa0, 0xc2, 0x4c, 0x60, 0xab, 0xf4, 0xdd, 0x56, 0xad,
		0x5f, 0x3c, 0x20, 0xbf, 0x34, 0x8b, 0xf9, 0xa5, 0xa0, 0xa5, 0x25, 0xea, 0x56, 0xd0, 0xd2, 0xfb,
		0x03, 0x21, 0xd0, 0xd2, 0x00, 0x41, 0x00, 0x41, 0x7b, 0xca, 0x0b, 0x68, 0xe9, 0x97, 0x9c, 0x28,
		0x68, 0xe9, 0x54, 0x9c, 0x26, 0x68, 0x69, 0x03, 0x36, 0x01, 0xb4, 0x74, 0x6c, 0x99, 0x41, 0x4b,
		0x03, 0xce, 0x00, 0xce, 0x80, 0xd3, 0x31, 0x93, 0xd3, 0x01, 0x2d, 0x0d, 0x15, 0x06, 0x15, 0x06,
		0x15, 0x06, 0x5a, 0x7a, 0x8b, 0x50, 0x98, 0x42, 0x4b, 0x23, 0x8f, 0x62, 0xe7, 0xb5, 0x92, 0x96,
		0x4a, 0x11, 0x9c, 0xd9, 0xe2, 0x67, 0x6f, 0x39, 0x28, 0x61, 0x32, 0xc5, 0x9e, 0x11, 0xe9, 0xc9,
		0x22, 0xd1, 0x91, 0x3a, 0x71, 0x80, 0xd4, 0x89, 0x57, 0x08, 0x6a, 0xdf, 0xd4, 0x09, 0x7b, 0x26,
		0x7e, 0x5a, 0x53, 0x3b, 0x08, 0x96, 0x4b, 0x98, 0xf0, 0xa6, 0x6a, 0x7d, 0x98, 0x64, 0x37, 0x56,
		0x65, 0x24, 0x52, 0x50, 0xc2, 0xb0, 0x22, 0xdd, 0x58, 0x25, 0x86, 0x57, 0xcf, 0x1e, 0xce, 0x2a,
		0x29, 0x3c, 0x99, 0x8c, 0xaf, 0xa9, 0xeb, 0x0f, 0x06, 0xdc, 0x4c, 0x8f, 0x59, 0x30, 0xf2, 0xf9,
		0x34, 0x11, 0x2c, 0x7a, 0x51, 0x14, 0xed, 0x79, 0x10, 0x9c, 0x79, 0x9c, 0xf9, 0x9c, 0x9d, 0xf9,
		0x40, 0xf8, 0xdc, 0xbd, 0xc9, 0xfa, 0x49, 0x77, 0xbc, 0x91, 0xed, 0x24, 0x61, 0x79, 0x9e, 0x0b,
		0x75, 0xac, 0x46, 0xc0, 0x19, 0xc7, 0x19, 0xcf, 0xd9, 0x19, 0xb7, 0x03, 0xcb, 0x9d, 0xdd, 0x5e,
		0x27, 0xba, 0x76, 0x59, 0x09, 0x78, 0x82, 0xea, 0x33, 0x29, 0x2f, 0xad, 0xd3, 0x55, 0x76, 0x91,
		0x40, 0x05, 0x4a, 0xb9, 0x19, 0x95, 0x75, 0x29, 0x2d, 0xf3, 0x1e, 0xf4, 0x29, 0x5d, 0xa9, 0x1b,
		0xe3, 0x96, 0xb6, 0x56, 0x6d, 0xd5, 0x5a, 0x8d, 0x66, 0xb5, 0x55, 0x37, 0x68, 0x8d, 0x89, 0x78,
		0xc5, 0x81, 0x01, 0xd6, 0x37, 0xe9, 0x15, 0x4b, 0xa4, 0xa0, 0x92, 0x5d, 0xa9, 0xc0, 0xf6, 0xc2,
		0xf6, 0xc2, 0xf6, 0xc2, 0xf6, 0xc2, 0xf6, 0xc2, 0xf6, 0x16, 0xdb, 0xf6, 0x2e, 0xee, 0x97, 0xac,
		0xe5, 0xf5, 0x50, 0x1a, 0x1b, 0xfc, 0x62, 0x20, 0xd8, 0x62, 0xd8, 0x62, 0x70, 0x5d, 0x06, 0x72,
		0x5d, 0x8b, 0x83, 0x2a, 0x92, 0x2c, 0xc6, 0xfa, 0x59, 0x4f, 0xd0, 0xde, 0x03, 0xa7, 0x1c, 0xa7,
		0xdc, 0xf8, 0x53, 0x9e, 0x54, 0xb8, 0x0f, 0x52, 0xf6, 0xac, 0x49, 0xd8, 0xab, 0x46, 0x8d, 0x92,
		0xf0, 0xd9, 0xad, 0x77, 0xc7, 0xac, 0xa9, 0xcf, 0xef, 0x6c, 0xc1, 0x52, 0x39, 0xe7, 0xf1, 0xa1,
		0xa0, 0x34, 0xa0, 0x34, 0x72, 0xa6, 0x34, 0x62, 0x42, 0xbe, 0x8c, 0xd2, 0x4a, 0xa3, 0x43, 0x12,
		0x78, 0x44, 0xa5, 0xee, 0x98, 0xb9, 0x82, 0x8b, 0x87, 0x4f, 0x76, 0xc0, 0xd2, 0x87, 0x2c, 0xf7,
		0x3b, 0xdf, 0x7a, 0xdf, 0x3b, 0xc3, 0xb3, 0x7e, 0xf7, 0x7b, 0xfb, 0xa2, 0x33, 0x6c, 0x9f, 0x0f,
		0x7b, 0x67, 0x17, 0xdd, 0xde, 0x69, 0x52, 0x91, 0x5a, 0x38, 0x7d, 0x41, 0xaa, 0x34, 0x34, 0x49,
		0x15, 0xcc, 0x5f, 0xbc, 0x52, 0xbf, 0x73, 0x76, 0xd2, 0xfe, 0xdc, 0x19, 0xb6, 0x4f, 0x4e, 0x4a,
		0x3a, 0xdc, 0x72, 0x15, 0x6f, 0xb4, 0xd8, 0xb6, 0x74, 0x2f, 0x94, 0xe8, 0x9b, 0x03, 0xd5, 0x07,
		0x5b, 0x8d, 0xb1, 0xf3, 0x66, 0x82, 0x59, 0x13, 0xc7, 0x9e, 0x5a, 0x63, 0xfb, 0x76, 0x3a, 0xc7,
		0xf8, 0xc9, 0xad, 0x5d, 0x7c, 0xac, 0x7d, 0x33, 0xc7, 0xd3, 0x05, 0xf8, 0xc3, 0x5c, 0xc2, 0x5c,
		0x1a, 0x6f, 0x2e, 0x93, 0x07, 0xe0, 0x27, 0x0c, 0xbc, 0x57, 0x54, 0xba, 0x84, 0xb9, 0x63, 0x6b,
		0xe4, 0xdd, 0xde, 0xce, 0x5c, 0x2e, 0x1e, 0x52, 0xd4, 0x30, 0x59, 0x1f, 0x27, 0xb9, 0xc2, 0x38,
		0xed, 0x9d, 0x76, 0xa0, 0x2f, 0xa0, 0x2f, 0xf2, 0xa6, 0x2f, 0xa2, 0xb3, 0x91, 0x4f, 0xc7, 0x3c,
		0xdb, 0x79, 0x29, 0xfb, 0x94, 0x92, 0x92, 0x93, 0x39, 0xc2, 0xae, 0x6f, 0xa6, 0xd6, 0xed, 0xcc,
		0x11, 0xfc, 0xa7, 0x37, 0xdd, 0x3f, 0x81, 0x64, 0xfd, 0xeb, 0xc8, 0x23, 0x21, 0x54, 0x7f, 0x68,
		0xc1, 0x81, 0x16, 0x1c, 0xb0, 0xef, 0x39, 0xb3, 0xef, 0x89, 0x6b, 0x9d, 0x31, 0xd7, 0xbe, 0x76,
		0xd8, 0x58, 0x42, 0xcf, 0xf3, 0xe5, 0x40, 0xc8, 0xa9, 0x47, 0x4e, 0x3d, 0xdd, 0xd1, 0x94, 0x7a,
		0x44, 0xd3, 0x11, 0x6f, 0xc8, 0xa9, 0x27, 0x2a, 0x0b, 0xb2, 0x82, 0x8d, 0x96, 0x10, 0x4e, 0x7a,
		0xbd, 0xb5, 0x36, 0x1a, 0x94, 0x0e, 0x94, 0x0e, 0x94, 0xce, 0x5e, 0xf2, 0x82, 0xd2, 0x8a, 0x2f,
		0x1e, 0x04, 0xa5, 0x15, 0x53, 0xfd, 0x42, 0x69, 0x45, 0x13, 0x36, 0x21, 0xef, 0xa5, 0x15, 0xf3,
		0x59, 0xc6, 0x67, 0x8d, 0x51, 0x43, 0x6d, 0x79, 0xd4, 0x96, 0x07, 0xdf, 0x02, 0xbe, 0x05, 0x7c,
		0x0b, 0x5c, 0x1f, 0xb8, 0x3e, 0xe0, 0x5b, 0xc0, 0xb7, 0x40, 0xe9, 0x40, 0xe9, 0x80, 0x6f, 0x01,
		0xdf, 0x02, 0xbe, 0x05, 0x7c, 0x0b, 0xf8, 0x16, 0xf0, 0x2d, 0x92, 0xf9, 0x16, 0x14, 0x4d, 0xde,
		0x71, 0xa5, 0x64, 0x95, 0x4c, 0xee, 0x5c, 0xdf, 0x4c, 0xbf, 0xad, 0xc6, 0xa4, 0x8c, 0x7b, 0x5b,
		0xb8, 0xdd, 0xd6, 0xf5, 0x64, 0x9c, 0x20, 0xe8, 0xed, 0xf9, 0xbb, 0x39, 0x89, 0x78, 0x9b, 0x8c,
		0x8b, 0x19, 0xf1, 0x36, 0x19, 0x23, 0xe2, 0x4d, 0x29, 0x03, 0xab, 0x2b, 0xe2, 0x6d, 0x32, 0x06,
		0x03, 0x9b, 0x56, 0xe0, 0xc1, 0xc0, 0x16, 0x92, 0xc4, 0x98, 0x8c, 0x41, 0x62, 0x50, 0x1d, 0x2d,
		0x30, 0xa7, 0xe8, 0xfe, 0x22, 0x09, 0x9c, 0x47, 0x98, 0x14, 0x77, 0xc6, 0x99, 0xbc, 0x33, 0x06,
		0x62, 0x01, 0x62, 0x01, 0x62, 0x01, 0x62, 0x01, 0x62, 0x01, 0x62, 0x29, 0x1a, 0x62, 0x01, 0xeb,
		0xba, 0xcb, 0x32, 0x49, 0xa3, 0x5c, 0x17, 0x23, 0x7e, 0xda, 0xf5, 0xf4, 0x4b, 0xe2, 0x5b, 0x7d,
		0xdf, 0xf3, 0xad, 0x9f, 0xb6, 0x3b, 0x76, 0xf6, 0x29, 0x0a, 0xf3, 0x6c, 0xf2, 0xd6, 0xbf, 0x8f,
		0x4c, 0xe3, 0x4c, 0xf3, 0xae, 0xc8, 0x34, 0xce, 0x29, 0xef, 0x8a, 0xc8, 0xd7, 0xf4, 0x02, 0x6f,
		0xb8, 0x17, 0x23, 0x7c, 0x66, 0x0b, 0xcb, 0x0e, 0xac, 0x7f, 0xb8, 0xf8, 0x39, 0xf6, 0xed, 0x7f,
		0xd2, 0xfb, 0x33, 0xf1, 0x21, 0x11, 0x0d, 0x8b, 0xc0, 0x34, 0x03, 0x3c, 0x24, 0x44, 0xc3, 0xc2,
		0x43, 0xd2, 0xe8, 0x21, 0xad, 0x61, 0x5e, 0xf0, 0xba, 0xc8, 0x05, 0x02, 0x22, 0x02, 0x22, 0x02,
		0x22, 0x02, 0x22, 0x02, 0x22, 0x02, 0x22, 0x02, 0x22, 0x02, 0x6f, 0xbc, 0xf3, 0x52, 0x49, 0xe3,
		0x8e, 0xe7, 0xa3, 0xfe, 0xff, 0x56, 0x83, 0x12, 0xf2, 0xc7, 0x37, 0xbe, 0x3d, 0x62, 0x93, 0x99,
		0x63, 0xf9, 0x2c, 0x10, 0xb6, 0x2f, 0xf6, 0x67, 0x90, 0x63, 0x23, 0x80, 0x43, 0x06, 0x87, 0x0c,
		0x0e, 0x19, 0x1c, 0x32, 0x3c, 0x26, 0x72, 0x8f, 0x09, 0x91, 0x30, 0xf0, 0x6a, 0xe0, 0xd5, 0xc0,
		0xab, 0x51, 0xbf, 0x68, 0xa5, 0x9f, 0xcc, 0x99, 0x32, 0xdf, 0xf2, 0x5c, 0xe7, 0x21, 0xbd, 0xba,
		0x79, 0x39, 0x18, 0x54, 0x0e, 0x54, 0x0e, 0x54, 0x0e, 0x54, 0x4e, 0xfc, 0x19, 0x97, 0x0e, 0xa6,
		0x25, 0xf8, 0xad, 0x84, 0xce, 0x71, 0x6b, 0xa3, 0x41, 0xe9, 0x40, 0xe9, 0x40, 0xe9, 0xec, 0x25,
		0x2f, 0x33, 0xee, 0x8a, 0x4a, 0x43, 0x82, 0xce, 0x69, 0xa0, 0xd2, 0x8a, 0x54, 0xb5, 0x12, 0x1b,
		0x0e, 0x95, 0x56, 0x8c, 0xd9, 0x82, 0x5a, 0xb9, 0xd5, 0x40, 0xa9, 0x95, 0xd7, 0xbf, 0x06, 0x06,
		0x83, 0x8e, 0x40, 0xd8, 0x0e, 0xb3, 0x16, 0x3d, 0x33, 0x03, 0x49, 0xc8, 0x23, 0x3e, 0x24, 0xe0,
		0x07, 0xe0, 0x07, 0xe0, 0xc7, 0x5e, 0xf2, 0x32, 0x66, 0x23, 0x7e, 0x6b, 0x3b, 0x8d, 0x9a, 0x0c,
		0xaf, 0xa7, 0x9a, 0x62, 0x8c, 0x98, 0x1e, 0xae, 0x02, 0xcf, 0x6c, 0x5e, 0xe6, 0x2a, 0xf0, 0x8c,
		0x6e, 0x3c, 0x73, 0x5c, 0xa0, 0x2d, 0x40, 0xdd, 0xb8, 0xe4, 0x02, 0xa9, 0x2f, 0x14, 0xe5, 0x75,
		0x38, 0x01, 0xc2, 0x73, 0x11, 0x9e, 0x4b, 0x0e, 0xdd, 0x70, 0xd9, 0xbc, 0xc3, 0x17, 0x71, 0xd9,
		0x0c, 0x2f, 0x08, 0x5e, 0x90, 0x5e, 0x2f, 0x08, 0x97, 0xcd, 0xfb, 0xaf, 0x19, 0x2e, 0x9b, 0xa1,
		0x72, 0xa0, 0x72, 0xa0, 0x72, 0xfe, 0xfd, 0x19, 0x71, 0xd9, 0x0c, 0xa5, 0x03, 0xa5, 0x63, 0x8a,
		0xd2, 0xc1, 0x65, 0xf3, 0x1a, 0x33, 0x88, 0xcb, 0xe6, 0x54, 0xdc, 0x1e, 0x2e, 0x9b, 0x4d, 0xd8,
		0x05, 0x5c, 0x36, 0x6f, 0x62, 0x18, 0x71, 0xd9, 0x0c, 0xf8, 0x01, 0xf8, 0x61, 0x18, 0xfc, 0xc0,
		0x65, 0x73, 0xe6, 0xf0, 0x0c, 0x2e, 0x9b, 0xb5, 0xe3, 0x19, 0x5c, 0x36, 0xe7, 0x07, 0xcc, 0x14,
		0xe4, 0xb2, 0x19, 0x95, 0x0f, 0x76, 0x5f, 0x2c, 0x59, 0xb5, 0x0f, 0xfe, 0x58, 0x8e, 0xdb, 0x5f,
		0x0e, 0x4b, 0x58, 0xfd, 0xc0, 0xf1, 0x6e, 0x6e, 0xb8, 0x7b, 0x63, 0x79, 0xd3, 0xf9, 0x3a, 0x06,
		0xfb, 0x17, 0x3f, 0x78, 0x3d, 0x00, 0x6a, 0x1f, 0x10, 0x62, 0x5f, 0xd4, 0x3e, 0x40, 0xed, 0x03,
		0x95, 0xce, 0x1e, 0xc2, 0x51, 0x34, 0x60, 0x81, 0xc4, 0xe1, 0x28, 0x8e, 0x77, 0x63, 0xb9, 0x8c,
		0xdf, 0xfc, 0xbc, 0xf6, 0x7c, 0x6b, 0x61, 0xc7, 0xad, 0xd1, 0xcf, 0xb9, 0x87, 0x13, 0xa4, 0x27,
		0x51, 0xfe, 0x65, 0xec, 0xf4, 0xf5, 0xe3, 0xe6, 0xdb, 0x09, 0x52, 0x06, 0xa4, 0x0c, 0x48, 0x99,
		0xfd, 0xe4, 0x05, 0xe5, 0xe3, 0x4c, 0x71, 0xa3, 0x5e, 0xa1, 0x60, 0x84, 0xec, 0x22, 0x64, 0x17,
		0x18, 0x09, 0x18, 0x09, 0x18, 0x09, 0x18, 0x09, 0x18, 0x09, 0x18, 0x09, 0x18, 0x69, 0x03, 0x46,
		0x02, 0xd3, 0xbc, 0xf3, 0x5a, 0xc9, 0x22, 0x9a, 0x4f, 0xc2, 0x61, 0x7b, 0xcb, 0x51, 0x09, 0x79,
		0xe6, 0xe7, 0x77, 0xb3, 0x96, 0x8f, 0xb6, 0x27, 0xcf, 0xfc, 0x7a, 0x80, 0xfd, 0x78, 0xe6, 0x32,
		0x78, 0x66, 0xf0, 0xcc, 0x09, 0x4d, 0xcb, 0x33, 0xbe, 0x63, 0xf6, 0xc4, 0x67, 0x93, 0x7d, 0x36,
		0x6c, 0x65, 0x3a, 0x9a, 0x7b, 0x7c, 0xe7, 0x6c, 0xa9, 0x2e, 0xde, 0xbf, 0x0f, 0x55, 0xe4, 0xd1,
		0x6b, 0xd1, 0x27, 0x3c, 0xb6, 0x8b, 0xa8, 0x29, 0xcb, 0x67, 0x13, 0x87, 0x8d, 0x84, 0xe7, 0xef,
		0x7f, 0x6c, 0x5f, 0x0f, 0x80, 0xeb, 0x21, 0x1c, 0xdb, 0x44, 0xc7, 0x16, 0xd7, 0x43, 0xa0, 0x3e,
		0x40, 0x7d, 0xa4, 0xa1, 0x3e, 0x5e, 0xa9, 0x62, 0x6b, 0xe4, 0xf0, 0xf0, 0x45, 0xd3, 0x66, 0xf6,
		0x6c, 0x1e, 0x17, 0x6d, 0x85, 0xc0, 0x79, 0x80, 0xf3, 0x00, 0xe7, 0xa1, 0x6c, 0xd1, 0x36, 0x28,
		0x9e, 0x59, 0x20, 0x98, 0x6f, 0xf1, 0xb1, 0x0a, 0xa5, 0x16, 0x8d, 0x0d, 0x85, 0x04, 0x85, 0x04,
		0x85, 0xb4, 0xdf, 0x69, 0x7a, 0x79, 0x80, 0x2c, 0x31, 0x1f, 0x57, 0x82, 0x6e, 0x6a, 0xa5, 0x18,
		0x63, 0xf9, 0x6e, 0xda, 0x03, 0xff, 0x5f, 0xa6, 0x77, 0x1e, 0x57, 0x4b, 0x12, 0xe2, 0xd8, 0x97,
		0xab, 0xd3, 0x94, 0x30, 0x94, 0x9c, 0xf4, 0x08, 0x79, 0xab, 0x15, 0x3d, 0x98, 0xcc, 0x74, 0x09,
		0x49, 0x0a, 0x7a, 0xeb, 0xb0, 0x92, 0x63, 0xf7, 0xa3, 0x71, 0x15, 0xc4, 0xf0, 0xa7, 0x54, 0x18,
		0x9b, 0xb7, 0x4a, 0x62, 0x5a, 0x05, 0xd5, 0x56, 0xd5, 0xaa, 0xad, 0x5a, 0xab, 0xd1, 0xac, 0xb6,
		0xea, 0x19, 0xda, 0xb3, 0x37, 0x66, 0x8c, 0x32, 0x78, 0xa3, 0x51, 0xf2, 0x24, 0x2a, 0x64, 0x3e,
		0xbd, 0xab, 0x59, 0xf6, 0x78, 0xec, 0xb3, 0x20, 0x90, 0xa8, 0x96, 0x2b, 0x1f, 0x24, 0x8c, 0x75,
		0x66, 0x0b, 0xc1, 0x7c, 0x57, 0x9a, 0x66, 0x2e, 0xbd, 0x7d, 0x7b, 0x55, 0xb6, 0x5a, 0x83, 0xc7,
		0xab, 0x8a, 0xd5, 0x1a, 0x84, 0x1f, 0x2b, 0x8b, 0x3f, 0xc2, 0xcf, 0xd5, 0xab, 0xb2, 0x55, 0x5b,
		0x7d, 0xae, 0x5f, 0x95, 0xad, 0xfa, 0xe0, 0xf0, 0xc7, 0x8f, 0xf7, 0x87, 0xbf, 0x8e, 0x9f, 0xf6,
		0xff, 0x62, 0x29, 0xbd, 0x88, 0xc9, 0x58, 0xc2, 0xde, 0x79, 0xf7, 0x7f, 0xd2, 0xd7, 0xf1, 0x4f,
		0xca, 0x85, 0xfc, 0x4f, 0x49, 0xf7, 0x61, 0x45, 0xd2, 0x96, 0x9e, 0x9b, 0xf4, 0x57, 0xce, 0x29,
		0xa2, 0x0d, 0x11, 0x6d, 0x48, 0xee, 0x30, 0x83, 0x72, 0x4f, 0xc4, 0x50, 0x81, 0x72, 0x07, 0xc3,
		0x05, 0x86, 0x2b, 0x7f, 0x0c, 0x17, 0x28, 0x77, 0x50, 0xee, 0x50, 0x48, 0x50, 0x48, 0xc6, 0x28,
		0x24, 0x50, 0xee, 0xbf, 0x5b, 0x21, 0x50, 0xee, 0xfb, 0x3c, 0x18, 0x28, 0x77, 0x50, 0xee, 0xa0,
		0xdc, 0x25, 0xf1, 0x5f, 0x72, 0x47, 0x01, 0xe5, 0xfe, 0xef, 0x46, 0x0b, 0x94, 0x3b, 0x28, 0x77,
		0x50, 0xee, 0xa0, 0xdc, 0x65, 0x52, 0xee, 0x48, 0x5e, 0xdb, 0x79, 0xad, 0x64, 0x25, 0xaf, 0xf5,
		0xe7, 0xc3, 0xf6, 0xa3, 0x51, 0x09, 0xb3, 0x60, 0xf6, 0xbb, 0xd5, 0x48, 0x74, 0x9b, 0x91, 0x38,
		0xe3, 0xa5, 0x8a, 0x8c, 0x17, 0x99, 0x5c, 0x42, 0x96, 0x33, 0x5e, 0xec, 0x99, 0xf8, 0x69, 0x4d,
		0xed, 0x20, 0x58, 0x2e, 0x61, 0xc2, 0x4b, 0xb8, 0xf5, 0x61, 0x92, 0x5d, 0xc6, 0x95, 0x91, 0xff,
		0x42, 0x49, 0xa5, 0x15, 0xe9, 0x32, 0x2e, 0x31, 0x45, 0xb6, 0x46, 0x34, 0x73, 0xf7, 0x26, 0xa9,
		0x8c, 0xaf, 0xfb, 0x16, 0x06, 0x5c, 0xba, 0x8f, 0x59, 0x30, 0xf2, 0xf9, 0x34, 0x11, 0x2a, 0x7a,
		0x51, 0xe0, 0xfb, 0x79, 0x10, 0x9c, 0x79, 0x9c, 0xf9, 0x9c, 0x9d, 0xf9, 0x40, 0xf8, 0xdc, 0xbd,
		0xc9, 0xfa, 0x49, 0x77, 0xbc, 0x91, 0xed, 0x58, 0x76, 0x90, 0xfc, 0x98, 0x47, 0x23, 0xe0, 0x8c,
		0xe3, 0x8c, 0xe7, 0xec, 0x8c, 0xdb, 0x81, 0xe5, 0xce, 0x6e, 0xaf, 0x99, 0x9f, 0xe2, 0x98, 0x27,
		0xb8, 0xc3, 0x49, 0x79, 0x67, 0x93, 0xe2, 0xae, 0x4f, 0xc6, 0x9d, 0x8c, 0x24, 0x62, 0x5f, 0xd6,
		0x9d, 0x8b, 0x4c, 0xbe, 0x3e, 0x05, 0xb3, 0x2d, 0xe5, 0x0e, 0x45, 0xf6, 0xd2, 0xca, 0xba, 0x23,
		0x91, 0xba, 0xc6, 0x44, 0xb4, 0xe2, 0xc0, 0x00, 0xeb, 0xbb, 0xa0, 0xb8, 0xd2, 0x18, 0xdf, 0xd5,
		0x00, 0xb0, 0xbd, 0xb0, 0xbd, 0xb0, 0xbd, 0xb0, 0xbd, 0xb0, 0xbd, 0xb0, 0xbd, 0xb0, 0xbd, 0xbb,
		0xdb, 0xde, 0x04, 0xf5, 0x03, 0x37, 0xdb, 0xe0, 0xbd, 0xeb, 0x08, 0xc2, 0x16, 0xc3, 0x16, 0x83,
		0xeb, 0xa2, 0x3f, 0xf1, 0x22, 0xc9, 0x62, 0xac, 0x9f, 0xf5, 0x04, 0xa1, 0xaf, 0x38, 0xe5, 0x38,
		0xe5, 0xc6, 0x9f, 0xf2, 0xa4, 0xc2, 0xbd, 0x76, 0xd0, 0x6b, 0x09, 0xbe, 0xdb, 0x71, 0x67, 0xb7,
		0xf3, 0x47, 0x7f, 0x32, 0x40, 0x49, 0xf8, 0xec, 0xd6, 0xbb, 0x63, 0xd6, 0xd4, 0xe7, 0x77, 0xb6,
		0x60, 0xa9, 0x9c, 0xf3, 0xf8, 0x50, 0x50, 0x1a, 0x50, 0x1a, 0x39, 0x53, 0x1a, 0x31, 0x21, 0x5f,
		0x56, 0x18, 0x4f, 0xa3, 0x43, 0x12, 0x78, 0x44, 0xa5, 0xee, 0x98, 0xb9, 0x82, 0x8b, 0x87, 0x4f,
		0x76, 0x20, 0xa1, 0xc3, 0x7b, 0xbf, 0xf3, 0xad, 0xf7, 0xbd, 0x33, 0x3c, 0xeb, 0x77, 0xbf, 0xb7,
		0x2f, 0x3a, 0xc3, 0xf6, 0xf9, 0xb0, 0x77, 0x76, 0xd1, 0xed, 0x9d, 0x26, 0x15, 0xa9, 0x85, 0xd3,
		0x17, 0xa4, 0x8a, 0x51, 0x4d, 0xe9, 0xbd, 0xae, 0xde, 0xec, 0xc5, 0x2b, 0xf5, 0x3b, 0x67, 0x27,
		0xed, 0xcf, 0x9d, 0x61, 0xfb, 0xe4, 0xa4, 0xa4, 0xc3, 0x2d, 0x57, 0xf1, 0x46, 0x8b, 0x6d, 0x4b,
		0xf7, 0x42, 0x89, 0xbe, 0x39, 0x50, 0x7d, 0xb0, 0xd5, 0x18, 0xbb, 0x45, 0x5c, 0xe5, 0xc4, 0xb1,
		0xa7, 0xd6, 0xd8, 0xbe, 0x9d, 0xce, 0x31, 0x7e, 0x72, 0x6b, 0x17, 0x1f, 0x6b, 0xdf, 0xa4, 0xf8,
		0x74, 0x59, 0xe3, 0x30, 0x97, 0x30, 0x97, 0xc6, 0x9b, 0xcb, 0xe4, 0x59, 0xdd, 0x09, 0xb3, 0xb9,
		0x15, 0x55, 0x65, 0x61, 0xee, 0xd8, 0x1a, 0x79, 0xb7, 0xb7, 0x33, 0x97, 0x8b, 0x87, 0x14, 0xe5,
		0x59, 0xd6, 0xc7, 0x49, 0xae, 0x30, 0x4e, 0x7b, 0xa7, 0x1d, 0xe8, 0x0b, 0xe8, 0x8b, 0xbc, 0xe9,
		0x8b, 0xe8, 0x6c, 0x14, 0xde, 0x31, 0x17, 0x9e, 0xb0, 0x1d, 0x6b, 0x6a, 0x8b, 0x9f, 0x29, 0x5c,
		0xf2, 0x97, 0x83, 0x40, 0x5b, 0x40, 0x5b, 0xe4, 0x4c, 0x5b, 0x24, 0x2e, 0x40, 0x80, 0x0b, 0x73,
		0x5c, 0x98, 0xaf, 0x2d, 0x2d, 0x2e, 0xcc, 0x15, 0x92, 0x05, 0xd9, 0xbc, 0x30, 0x5f, 0xda, 0xce,
		0x85, 0x36, 0x67, 0xe9, 0x6d, 0xf0, 0x6a, 0x1c, 0x98, 0x61, 0x98, 0x61, 0x98, 0x61, 0x98, 0x61,
		0x98, 0x61, 0x98, 0xe1, 0xc2, 0x9a, 0xe1, 0x6c, 0x97, 0x67, 0xd8, 0xa3, 0x74, 0x85, 0x9c, 0xf2,
		0x09, 0x82, 0xdf, 0x32, 0x3f, 0xd8, 0xbf, 0x7e, 0xc2, 0xf2, 0x7b, 0x68, 0x19, 0x4a, 0x08, 0x21,
		0xd0, 0x32, 0x14, 0x2d, 0x43, 0x81, 0x91, 0x73, 0x86, 0x91, 0x13, 0xd7, 0x2f, 0x1f, 0x79, 0xae,
		0xcb, 0x46, 0xc2, 0xf2, 0x99, 0xf0, 0x1f, 0xd2, 0xc7, 0x69, 0xac, 0x0f, 0x97, 0xbe, 0x5a, 0xf9,
		0x71, 0x19, 0x95, 0x81, 0x51, 0x19, 0x98, 0xfa, 0xac, 0xa6, 0x84, 0xb1, 0xda, 0x2b, 0x03, 0x8f,
		0xd9, 0x88, 0xdf, 0xda, 0x4e, 0xa3, 0x26, 0xa3, 0x20, 0x70, 0x35, 0xc5, 0x18, 0x31, 0x97, 0x22,
		0xcd, 0x60, 0x72, 0x0a, 0xe7, 0x4a, 0xa8, 0x66, 0x29, 0xb3, 0x50, 0xee, 0x6a, 0x99, 0xab, 0x72,
		0x8a, 0xa2, 0xca, 0x2e, 0x8c, 0xab, 0xa2, 0xb8, 0xaa, 0x84, 0x42, 0xb8, 0x52, 0x0b, 0xe0, 0xae,
		0xb6, 0xe0, 0xb8, 0x40, 0x5b, 0x90, 0xf7, 0x12, 0x95, 0x09, 0x60, 0xeb, 0x4f, 0xcf, 0x19, 0x5b,
		0x73, 0x87, 0x34, 0x3d, 0x0a, 0x7a, 0x1e, 0x2a, 0x3d, 0x02, 0x6a, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xa9, 0x43, 0x40, 0x7f, 0x33,
		0x36, 0xb5, 0x1d, 0x7e, 0xc7, 0x2c, 0xee, 0x0a, 0xe6, 0xdf, 0xd9, 0x4e, 0x7a, 0x28, 0xb4, 0x61,
		0x4c, 0xb0, 0x42, 0xc0, 0x44, 0xc0, 0x44, 0xc0, 0x44, 0xc0, 0x44, 0xc0, 0x44, 0xc0, 0x44, 0xc0,
		0x44, 0x46, 0x63, 0xa2, 0x5b, 0xee, 0xf2, 0xdb, 0xd9, 0xad, 0x65, 0x8f, 0xef, 0x98, 0x2f, 0x78,
		0xc0, 0xe6, 0x56, 0x44, 0x22, 0x3e, 0xfa, 0xcd, 0xf8, 0xc0, 0x4a, 0xc0, 0x4a, 0xc0, 0x4a, 0xc0,
		0x4a, 0xc0, 0x4a, 0xc0, 0x4a, 0xc0, 0x4a, 0xc0, 0x4a, 0x68, 0xf2, 0x76, 0x90, 0x2a, 0x32, 0x36,
		0x0c, 0x38, 0x3d, 0x5a, 0x86, 0xf1, 0x99, 0x90, 0xb8, 0xbf, 0x57, 0xe3, 0xb1, 0x98, 0x9d, 0xda,
		0xa7, 0x01, 0x59, 0xcc, 0x2e, 0x25, 0x0d, 0x47, 0xac, 0x22, 0x1c, 0x51, 0x27, 0x50, 0x43, 0x38,
		0xe2, 0xce, 0x52, 0x83, 0x70, 0x44, 0x38, 0x53, 0x70, 0xa6, 0xe0, 0x4c, 0xc1, 0x99, 0x82, 0x33,
		0x05, 0x67, 0x0a, 0xce, 0x94, 0x2e, 0x67, 0x0a, 0xe1, 0x88, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3b, 0x2c, 0x33, 0xc2, 0x11, 0x81,
		0x89, 0x80, 0x89, 0x80, 0x89, 0x80, 0x89, 0x80, 0x89, 0x80, 0x89, 0x80, 0x89, 0x80, 0x89, 0x10,
		0x8e, 0x08, 0xac, 0x04, 0xac, 0x04, 0xac, 0x04, 0xac, 0x04, 0xac, 0x04, 0xac, 0x04, 0xac, 0x54,
		0x20, 0xac, 0x94, 0xeb, 0x70, 0xc4, 0x3d, 0xea, 0x75, 0xee, 0xbf, 0x20, 0x19, 0xaf, 0x65, 0xba,
		0x57, 0x89, 0xd0, 0x70, 0x2a, 0xe1, 0xcf, 0x46, 0x62, 0xd9, 0x43, 0xbc, 0xf4, 0xe9, 0x66, 0x3a,
		0x3c, 0x63, 0xcc, 0xff, 0x63, 0x3e, 0xda, 0xf0, 0x22, 0x1c, 0x8d, 0xb2, 0x34, 0xaa, 0x6f, 0xbb,
		0xc1, 0xd4, 0xf3, 0x45, 0x82, 0xea, 0xa8, 0xd1, 0x57, 0x51, 0x20, 0x95, 0x10, 0xd2, 0xa2, 0x40,
		0x2a, 0x0a, 0xa4, 0xaa, 0xf4, 0xe1, 0x10, 0x91, 0xac, 0xc1, 0xc4, 0x27, 0x8e, 0x48, 0x76, 0xbc,
		0x91, 0xed, 0x58, 0xf6, 0x78, 0xec, 0xb3, 0x20, 0x48, 0x4f, 0xb0, 0xac, 0x0f, 0x07, 0x2a, 0x04,
		0x54, 0x08, 0xa8, 0x90, 0xbd, 0xe4, 0x65, 0xe6, 0x26, 0x6b, 0x66, 0x1d, 0xb3, 0x35, 0xad, 0x14,
		0x63, 0x2c, 0x5f, 0x47, 0x3b, 0x71, 0xb1, 0x5a, 0x14, 0x3e, 0x4d, 0xa9, 0x52, 0x64, 0xaf, 0x90,
		0xdc, 0x95, 0x92, 0xb7, 0x62, 0x1b, 0x56, 0xee, 0xae, 0x26, 0x71, 0xed, 0x62, 0x6b, 0xf8, 0x41,
		0xe2, 0x98, 0x67, 0xb6, 0x10, 0xcc, 0x77, 0xa5, 0x2d, 0x67, 0x34, 0xf0, 0xdb, 0xb7, 0x57, 0x65,
		0xab, 0x35, 0x78, 0xbc, 0xaa, 0x58, 0xad, 0x41, 0xf8, 0xb1, 0xb2, 0xf8, 0x23, 0xfc, 0x5c, 0xbd,
		0x2a, 0x5b, 0xb5, 0xd5, 0xe7, 0xfa, 0x55, 0xd9, 0xaa, 0x0f, 0x0e, 0x7f, 0xfc, 0x78, 0x7f, 0xf8,
		0xeb, 0xf8, 0x69, 0xff, 0x2f, 0x96, 0xa4, 0x3d, 0xfa, 0x40, 0xe6, 0xd2, 0xf6, 0xce, 0xbb, 0xff,
		0x53, 0xb6, 0xbe, 0x7f, 0x52, 0x2e, 0xf0, 0x7f, 0x24, 0xae, 0xb0, 0x94, 0x91, 0x9e, 0xde, 0x19,
		0x7c, 0xf8, 0x1b, 0x38, 0xfc, 0x0b, 0x11, 0xb3, 0xad, 0x49, 0xdb, 0xfa, 0x3a, 0xf8, 0x55, 0x79,
		0x57, 0x7b, 0xfa, 0x78, 0xf8, 0xab, 0xf9, 0xf4, 0xfa, 0x2f, 0x1f, 0x37, 0xfd, 0x58, 0xe5, 0x5d,
		0xf3, 0xe9, 0xe3, 0x96, 0x7f, 0x69, 0x3c, 0x7d, 0xdc, 0x71, 0x8c, 0xfa, 0xd3, 0xdb, 0xd8, 0x8f,
		0xce, 0xff, 0xbe, 0xba, 0xed, 0x0b, 0xb5, 0x2d, 0x5f, 0x38, 0xde, 0xf6, 0x85, 0xe3, 0x2d, 0x5f,
		0xd8, 0xfa, 0x48, 0xd5, 0x2d, 0x5f, 0xa8, 0x3f, 0x3d, 0xc6, 0x7e, 0xfe, 0xed, 0xe6, 0x1f, 0x6d,
		0x3c, 0x1d, 0x3e, 0x6e, 0xfb, 0xb7, 0xe6, 0xd3, 0xe3, 0xc7, 0xc3, 0x22, 0xab, 0x42, 0x88, 0x1b,
		0xbd, 0xb8, 0x99, 0x67, 0x18, 0xde, 0xe8, 0x7d, 0x8e, 0x94, 0x86, 0x49, 0x22, 0x7e, 0x0f, 0x84,
		0xcf, 0xdd, 0x1b, 0x99, 0xd8, 0xfd, 0x03, 0x82, 0x67, 0x62, 0x6b, 0x73, 0x2b, 0x66, 0xd6, 0x98,
		0x07, 0x23, 0xef, 0x8e, 0xc9, 0x48, 0x2e, 0x5f, 0x1f, 0x2e, 0x7d, 0x68, 0xcc, 0xc4, 0x76, 0x02,
		0x06, 0x4a, 0x08, 0x94, 0x10, 0x28, 0xa1, 0xfd, 0xe4, 0xe5, 0xda, 0xf3, 0x1c, 0x66, 0x4b, 0x21,
		0x85, 0x2a, 0x06, 0xab, 0xaf, 0xa9, 0x1d, 0x04, 0xfc, 0x8e, 0x59, 0xb7, 0xde, 0x58, 0x42, 0x52,
		0xe8, 0xda, 0x68, 0x50, 0x5e, 0x50, 0x5e, 0x50, 0x5e, 0x50, 0x5e, 0xea, 0x94, 0x97, 0x18, 0x4d,
		0xad, 0x5b, 0x19, 0x17, 0x68, 0xab, 0x81, 0xa0, 0x6a, 0xa0, 0x6a, 0xa0, 0x6a, 0xf6, 0x92, 0x97,
		0x19, 0x77, 0x45, 0xa5, 0x21, 0x41, 0xd3, 0x34, 0x10, 0xf4, 0x2b, 0x55, 0xad, 0xc4, 0x86, 0x43,
		0xd0, 0xaf, 0x31, 0x5b, 0xd0, 0xa8, 0xd7, 0x8f, 0xeb, 0x08, 0xfc, 0xd5, 0xc6, 0xf3, 0xe4, 0x34,
		0xf0, 0x77, 0x15, 0xda, 0x89, 0x52, 0xa4, 0x28, 0x45, 0x4a, 0x0e, 0xb3, 0x10, 0xf8, 0xb7, 0xc3,
		0x17, 0x11, 0xf8, 0x07, 0xef, 0x05, 0xde, 0x8b, 0x41, 0xde, 0x0b, 0x02, 0xff, 0xe2, 0x8b, 0x82,
		0xc0, 0xbf, 0xe4, 0x2b, 0x87, 0xc0, 0x3f, 0x04, 0xfe, 0x21, 0xf0, 0x4f, 0xa2, 0x77, 0xa7, 0x80,
		0x22, 0x38, 0x40, 0xe0, 0x1f, 0x02, 0xff, 0x10, 0xf8, 0x97, 0x1f, 0x55, 0x08, 0x71, 0x43, 0xe0,
		0x1f, 0x02, 0xff, 0x10, 0xf8, 0x97, 0x9c, 0x10, 0x46, 0xe0, 0x1f, 0x28, 0x21, 0x50, 0x42, 0xa0,
		0x84, 0x10, 0xf8, 0x97, 0x6c, 0xd1, 0x10, 0xf8, 0x07, 0xe5, 0x05, 0xe5, 0x05, 0xe5, 0x85, 0xc0,
		0x3f, 0xa8, 0x1a, 0xa8, 0x9a, 0x42, 0xa8, 0x1a, 0x04, 0xfe, 0xbd, 0x7c, 0x10, 0x04, 0xfe, 0x1d,
		0x68, 0x24, 0x4f, 0x0e, 0x10, 0xf8, 0x87, 0xc0, 0x3f, 0xe9, 0xdf, 0xc8, 0x60, 0xe0, 0x1f, 0x8a,
		0x7e, 0xee, 0xb0, 0x4a, 0xd2, 0xea, 0x7e, 0x46, 0x03, 0x12, 0x96, 0xfe, 0x9c, 0x05, 0xcc, 0xba,
		0x9d, 0x39, 0x82, 0x4f, 0x1d, 0x66, 0xcd, 0x57, 0x21, 0xd8, 0xbf, 0x06, 0xe8, 0x86, 0x31, 0x50,
		0x0c, 0x94, 0x10, 0xa0, 0xa2, 0x18, 0x28, 0x8a, 0x81, 0xaa, 0xf4, 0xc8, 0x10, 0x13, 0xac, 0xc1,
		0xfa, 0x27, 0x8e, 0x09, 0x66, 0xae, 0x7d, 0xed, 0xb0, 0x71, 0x7a, 0x32, 0x63, 0x35, 0x10, 0xf8,
		0x57, 0x90, 0x22, 0x20, 0x45, 0xc0, 0xbf, 0x16, 0xda, 0x27, 0x8a, 0x63, 0x5c, 0x83, 0xb2, 0xa2,
		0xd8, 0xfc, 0x70, 0x24, 0x46, 0x40, 0x6c, 0x7f, 0x95, 0x04, 0xfc, 0x03, 0xfc, 0x63, 0x2a, 0xfe,
		0x49, 0xe8, 0x10, 0xc8, 0x71, 0x0c, 0x52, 0x1e, 0x10, 0xa0, 0x16, 0xa0, 0x16, 0x5d, 0xa8, 0x25,
		0xe9, 0x81, 0x8b, 0x06, 0xb0, 0x1d, 0xc7, 0xfb, 0xe7, 0xd9, 0x48, 0xda, 0x41, 0xfa, 0xfd, 0x5e,
		0x49, 0x60, 0x7c, 0xe8, 0x94, 0xdb, 0x24, 0xc9, 0x39, 0x91, 0xe4, 0xa4, 0x48, 0x3b, 0xf6, 0x32,
		0x8f, 0xbf, 0x7c, 0x35, 0x20, 0x5b, 0x1d, 0x28, 0x53, 0x0b, 0xca, 0xd4, 0x83, 0x12, 0x35, 0x91,
		0x4e, 0x5d, 0xa4, 0x54, 0x1b, 0xf2, 0x9c, 0x1e, 0x05, 0xce, 0x8f, 0x24, 0x27, 0x28, 0xfd, 0x02,
		0xa7, 0x58, 0xdc, 0xd2, 0xad, 0x7d, 0xbf, 0x68, 0x77, 0xbb, 0x1f, 0x39, 0xff, 0xdb, 0xd5, 0x5d,
		0x1f, 0x56, 0x9e, 0x3a, 0xad, 0x40, 0x95, 0x42, 0x95, 0x42, 0x95, 0x9a, 0xa5, 0x4a, 0x67, 0xdc,
		0x15, 0xc7, 0x55, 0x89, 0x9a, 0xb4, 0x29, 0x61, 0x28, 0x39, 0xc1, 0x36, 0xab, 0x5f, 0x12, 0x33,
		0x30, 0x65, 0x06, 0xdf, 0x48, 0x56, 0x6b, 0xb1, 0x61, 0x25, 0x07, 0xe3, 0x44, 0xe3, 0x2a, 0x88,
		0x06, 0x91, 0x74, 0x3c, 0xd6, 0xb7, 0x4a, 0x62, 0x90, 0x0e, 0xd5, 0x56, 0xd5, 0xaa, 0xad, 0x5a,
		0xab, 0xd1, 0xac, 0xb6, 0xea, 0x19, 0xda, 0xb3, 0x7c, 0xe4, 0xd4, 0x65, 0xc4, 0x15, 0x4f, 0xc9,
		0x72, 0x47, 0xe3, 0xc8, 0x64, 0xbb, 0xd9, 0xfc, 0xc7, 0x93, 0x50, 0xde, 0xc9, 0x97, 0x30, 0x49,
		0x28, 0x77, 0xb2, 0x02, 0x61, 0x31, 0x83, 0x99, 0xa4, 0x50, 0x98, 0x74, 0xee, 0xaf, 0x0a, 0xee,
		0x0f, 0xdc, 0x1f, 0xb8, 0x3f, 0x70, 0x7f, 0x70, 0x58, 0xe1, 0xb0, 0x82, 0xfb, 0x03, 0xf7, 0x07,
		0xee, 0x0f, 0xaa, 0x14, 0xaa, 0x14, 0xaa, 0x14, 0xdc, 0x1f, 0xb8, 0x3f, 0x70, 0x7f, 0xe0, 0xfe,
		0xc0, 0xfd, 0x81, 0xfb, 0x23, 0xe3, 0xfe, 0x12, 0xe4, 0x02, 0xa6, 0xa0, 0xfe, 0x0a, 0x13, 0x45,
		0xcc, 0x12, 0xc6, 0xa4, 0xfe, 0x5b, 0x26, 0xe1, 0x65, 0xc0, 0xbe, 0x2d, 0x67, 0x39, 0x9b, 0x4f,
		0x32, 0xec, 0xec, 0x8d, 0x8c, 0xd4, 0x04, 0x2a, 0xf3, 0x54, 0x81, 0xca, 0x1c, 0x81, 0xca, 0x6a,
		0x3d, 0x02, 0x04, 0x2a, 0x23, 0x50, 0x99, 0xd8, 0xd5, 0xc6, 0x65, 0x85, 0x1e, 0x17, 0xba, 0xc8,
		0x97, 0x15, 0x60, 0xd5, 0xc0, 0xaa, 0x81, 0x55, 0x03, 0xab, 0x06, 0x56, 0x0d, 0xac, 0x1a, 0x58,
		0x35, 0xb0, 0x6a, 0x60, 0xd5, 0xc0, 0xaa, 0x69, 0x60, 0x7e, 0x38, 0x22, 0xea, 0xa8, 0x9d, 0x54,
		0x44, 0xd4, 0xc1, 0x49, 0x85, 0x93, 0x0a, 0x27, 0x15, 0x4e, 0x2a, 0x9c, 0x54, 0x38, 0xa9, 0x70,
		0x52, 0xe1, 0xa4, 0xc2, 0x49, 0x85, 0x93, 0x0a, 0x27, 0x15, 0x4e, 0xea, 0xbf, 0x3a, 0xa9, 0x08,
		0xfd, 0x50, 0xb6, 0xb6, 0xca, 0x43, 0x3f, 0xba, 0x86, 0x84, 0x7e, 0x24, 0xa3, 0x11, 0x52, 0xd1,
		0x07, 0xa9, 0x83, 0x3f, 0xaa, 0x08, 0xfe, 0xd0, 0x89, 0xf9, 0x51, 0xa5, 0x77, 0x07, 0x79, 0x41,
		0x95, 0x5e, 0x30, 0x74, 0x60, 0xe8, 0x74, 0xb8, 0xdb, 0xa8, 0xd2, 0x9b, 0x05, 0x90, 0x85, 0x16,
		0x26, 0xfb, 0x2c, 0x97, 0xac, 0x5e, 0x26, 0xaf, 0x61, 0xa8, 0xb4, 0x96, 0x26, 0x6f, 0x52, 0x2c,
		0xf4, 0x5c, 0x9d, 0x2e, 0x54, 0x69, 0xb4, 0x02, 0xd6, 0xe2, 0xe9, 0x7f, 0xf3, 0xad, 0x13, 0x1e,
		0x88, 0xb6, 0x10, 0xbb, 0x19, 0xfa, 0xd2, 0x37, 0xee, 0x76, 0x1c, 0x36, 0x57, 0x89, 0xc1, 0x6e,
		0xe6, 0xac, 0xf4, 0xcd, 0xbe, 0x7f, 0xf1, 0x8d, 0xca, 0x87, 0x5a, 0xad, 0xd1, 0xac, 0xd5, 0xca,
		0xcd, 0xe3, 0x66, 0xb9, 0x55, 0xaf, 0x57, 0x1a, 0x95, 0x1d, 0x08, 0x83, 0x52, 0xcf, 0x1f, 0x33,
		0x9f, 0x8d, 0x3f, 0xcd, 0x5f, 0xd0, 0x9d, 0x39, 0x4e, 0xaa, 0x75, 0xda, 0x53, 0x10, 0x13, 0x0b,
		0xe0, 0x0e, 0xd2, 0xf6, 0x6f, 0x52, 0xf6, 0xef, 0x42, 0xb5, 0x5d, 0x54, 0x36, 0xff, 0xcb, 0x96,
		0x45, 0xd9, 0x75, 0x31, 0xf6, 0x5b, 0x84, 0xcd, 0x8f, 0x1e, 0x7f, 0xb0, 0x0d, 0x0f, 0x55, 0xf2,
		0xf9, 0xf5, 0xd6, 0x27, 0x89, 0x6c, 0xd2, 0xfc, 0x87, 0xb6, 0xbc, 0xd0, 0xbf, 0x7b, 0x45, 0xbf,
		0xf5, 0x7e, 0x76, 0x81, 0x5a, 0x2f, 0xa1, 0x94, 0xcf, 0xaf, 0x7f, 0x03, 0xa7, 0x76, 0x85, 0x4b,
		0x7b, 0xc3, 0xa1, 0xbd, 0xe1, 0xce, 0x6b, 0x38, 0xb3, 0x7a, 0x76, 0x49, 0xa2, 0xf4, 0x3b, 0x6f,
		0xa1, 0x64, 0x4f, 0xb8, 0x15, 0xd8, 0x13, 0xfe, 0xfb, 0x0b, 0xbf, 0xe7, 0xf2, 0x18, 0xd1, 0x57,
		0x7e, 0xa7, 0xfc, 0x76, 0x72, 0x86, 0x77, 0x76, 0x7e, 0xf7, 0x41, 0xdc, 0xfb, 0x89, 0x43, 0x52,
		0x14, 0x9d, 0x18, 0x2d, 0x27, 0x46, 0xc5, 0x7b, 0x8b, 0x8b, 0x1c, 0x33, 0xb6, 0xab, 0xd3, 0x19,
		0xc9, 0xc6, 0xfe, 0x2d, 0xbd, 0xa2, 0x6f, 0xe6, 0xa3, 0x91, 0xd7, 0xee, 0x42, 0x97, 0xd6, 0x85,
		0x33, 0xaf, 0x99, 0xd7, 0xce, 0x42, 0xa9, 0x06, 0xd4, 0xee, 0xdd, 0xd0, 0x6b, 0x25, 0x7a, 0xd6,
		0xd2, 0xe6, 0x27, 0x24, 0x0c, 0xd7, 0x87, 0x49, 0x46, 0x1c, 0x96, 0x33, 0x96, 0x35, 0xb6, 0xbf,
		0x98, 0x17, 0x87, 0x3c, 0xdc, 0xfb, 0x18, 0xd0, 0xb8, 0xca, 0x89, 0x59, 0x88, 0x68, 0xdf, 0x1d,
		0x66, 0x4f, 0x7c, 0x36, 0x49, 0xb2, 0xe9, 0x2b, 0xad, 0x9d, 0xe0, 0x5a, 0xbf, 0x74, 0xb6, 0x04,
		0xba, 0xef, 0xdf, 0x87, 0x2e, 0xf6, 0xd1, 0xfa, 0x81, 0x33, 0x21, 0xd9, 0x74, 0x7a, 0x57, 0xb3,
		0x02, 0x5f, 0x30, 0x6b, 0xea, 0x39, 0x7c, 0xf4, 0x90, 0x22, 0xf1, 0xf4, 0xf5, 0x48, 0xc5, 0x48,
		0x42, 0x85, 0x3a, 0xc9, 0x9c, 0x3a, 0x49, 0x7c, 0x1f, 0xe1, 0x84, 0xef, 0x94, 0xfe, 0x3e, 0x62,
		0x35, 0x10, 0xd2, 0x51, 0xd3, 0x1d, 0x21, 0xdc, 0x25, 0x24, 0x3e, 0x62, 0x7a, 0xee, 0x13, 0x52,
		0x47, 0xfc, 0xfa, 0xde, 0x4c, 0x30, 0x89, 0xa1, 0xbe, 0xcb, 0xf1, 0xe4, 0xc4, 0xe5, 0x56, 0x72,
		0x1e, 0x97, 0x9b, 0xfe, 0xa0, 0xca, 0x3e, 0xb0, 0xca, 0x0e, 0xae, 0xb2, 0x03, 0xac, 0xec, 0x20,
		0xa7, 0x3b, 0xd0, 0x29, 0x0f, 0xb6, 0xb4, 0x03, 0xbe, 0x7e, 0xd0, 0xe5, 0xc9, 0xc7, 0xda, 0x79,
		0x97, 0x25, 0x1b, 0x72, 0x8e, 0xbd, 0xf4, 0xe3, 0xaf, 0x42, 0x0d, 0xa8, 0x55, 0x07, 0xaa, 0xd4,
		0x82, 0x72, 0xf5, 0xa0, 0x5c, 0x4d, 0x28, 0x57, 0x17, 0x72, 0xd4, 0x86, 0x24, 0xf5, 0x21, 0x5d,
		0x8d, 0x44, 0x03, 0x8e, 0x3c, 0xc7, 0xf3, 0xe5, 0xcb, 0xd5, 0x73, 0x79, 0x99, 0xf9, 0xf0, 0xef,
		0x32, 0x11, 0x6b, 0x2d, 0x5b, 0xcd, 0xa8, 0x54, 0x37, 0x34, 0x6a, 0x47, 0xb5, 0xfa, 0x21, 0x53,
		0x43, 0x64, 0xea, 0x88, 0x4c, 0x2d, 0xc9, 0x55, 0x4f, 0x92, 0xd5, 0x54, 0x7a, 0x82, 0x72, 0x77,
		0xc6, 0x20, 0x31, 0x81, 0xb9, 0x33, 0x8a, 0x69, 0x2a, 0x18, 0x3b, 0x46, 0x80, 0x86, 0x8a, 0xf2,
		0x8d, 0x99, 0xa2, 0x21, 0x33, 0xfb, 0x86, 0xb9, 0xe3, 0xa9, 0xc7, 0x17, 0x07, 0x43, 0x91, 0xcd,
		0x89, 0x66, 0x80, 0xd9, 0x81, 0xd9, 0x81, 0xd9, 0x81, 0xd9, 0x81, 0xd9, 0xd9, 0x6a, 0x76, 0x22,
		0x5d, 0x59, 0x00, 0xcb, 0x33, 0xb5, 0xc5, 0x4f, 0x8b, 0x8f, 0xd5, 0x19, 0x9e, 0xd5, 0x04, 0xb0,
		0x3b, 0xb0, 0x3b, 0xb0, 0x3b, 0xb0, 0x3b, 0xb0, 0x3b, 0x5b, 0xed, 0xce, 0x4a, 0x55, 0x16, 0xc0,
		0xec, 0xa4, 0x2b, 0x81, 0xf5, 0x5b, 0x89, 0x48, 0x53, 0x1a, 0xeb, 0xb7, 0xb2, 0x00, 0x93, 0x03,
		0x93, 0x03, 0x93, 0x63, 0xb2, 0xc9, 0x91, 0x7d, 0x21, 0x10, 0x0d, 0x6c, 0x0b, 0xe1, 0x5b, 0xdc,
		0x1d, 0xb3, 0x7b, 0x75, 0x42, 0x19, 0x85, 0xdb, 0x3e, 0xcf, 0xa5, 0x48, 0x58, 0xd4, 0x60, 0x68,
		0xe5, 0x8a, 0x8d, 0x42, 0xc1, 0xd1, 0x2a, 0x3a, 0x2a, 0x85, 0x47, 0xae, 0xf8, 0xc8, 0x15, 0x20,
		0xb9, 0x22, 0x54, 0xa3, 0x10, 0x15, 0x29, 0x46, 0xf5, 0x98, 0x9c, 0x10, 0x9b, 0x53, 0x60, 0xf4,
		0x4d, 0x58, 0x7d, 0xe3, 0xef, 0x85, 0xb2, 0x0e, 0x98, 0x08, 0xa2, 0x4f, 0x4b, 0x4c, 0x1f, 0x2a,
		0xf0, 0x37, 0xd9, 0x10, 0x39, 0x05, 0xe2, 0xa6, 0xe8, 0x2e, 0x3d, 0x26, 0x67, 0x2a, 0xee, 0xd4,
		0x61, 0x28, 0x61, 0x28, 0x61, 0x28, 0x61, 0x28, 0x49, 0xce, 0x8d, 0xb4, 0xca, 0xa2, 0xbf, 0xd3,
		0x62, 0x2a, 0xcd, 0xa4, 0xdc, 0x4a, 0xa4, 0xdb, 0x7e, 0xa9, 0x3d, 0xf3, 0x07, 0xaa, 0x2a, 0x97,
		0x6a, 0x32, 0x2f, 0xb1, 0xe9, 0x14, 0x55, 0x3a, 0xdd, 0x3a, 0x9f, 0xc2, 0x6a, 0x9a, 0xc4, 0xea,
		0x60, 0x5d, 0x44, 0xec, 0xfb, 0xdc, 0x8b, 0x88, 0xaa, 0x0a, 0xab, 0x46, 0xc9, 0xca, 0x9b, 0x6c,
		0x8e, 0x3e, 0x28, 0xb4, 0x53, 0x71, 0x7b, 0x3b, 0x73, 0xb9, 0x78, 0xa0, 0x22, 0xe3, 0x5e, 0x4f,
		0x08, 0x47, 0x03, 0x8e, 0x06, 0x1c, 0x0d, 0x38, 0x1a, 0x19, 0x74, 0x34, 0x0a, 0xc2, 0xc8, 0xad,
		0x34, 0x36, 0x67, 0x41, 0xf4, 0xf9, 0x01, 0xa4, 0x5c, 0xb8, 0x78, 0xca, 0xe2, 0x8d, 0x63, 0xd2,
		0xa6, 0x28, 0xee, 0x18, 0x16, 0x13, 0x16, 0x13, 0x16, 0x13, 0x16, 0x93, 0xe4, 0xdc, 0xf0, 0xa9,
		0x65, 0x8f, 0xc7, 0x3e, 0x0b, 0x02, 0x0a, 0xa3, 0xd9, 0x52, 0x38, 0xc7, 0x72, 0xcd, 0x32, 0x4f,
		0xcf, 0xad, 0x95, 0x11, 0x52, 0xbf, 0x37, 0xb1, 0x3d, 0xfa, 0x40, 0x30, 0xd7, 0x99, 0x2d, 0x04,
		0xf3, 0x5d, 0xe5, 0xdb, 0x15, 0x4d, 0xf8, 0xf6, 0xed, 0x55, 0xd9, 0x6a, 0x0d, 0x1e, 0xaf, 0x2a,
		0x56, 0x6b, 0x10, 0x7e, 0xac, 0x2c, 0xfe, 0x08, 0x3f, 0x57, 0xaf, 0xca, 0x56, 0x6d, 0xf5, 0xb9,
		0x7e, 0x55, 0xb6, 0xea, 0x83, 0xc3, 0x1f, 0x3f, 0xde, 0x1f, 0xfe, 0x3a, 0x7e, 0xda, 0xff, 0x8b,
		0x25, 0xe5, 0xaf, 0x34, 0xa0, 0xd8, 0xa2, 0xde, 0x79, 0xf7, 0x7f, 0xe4, 0xfb, 0xf4, 0x27, 0xe5,
		0x46, 0xfd, 0x87, 0x60, 0xa7, 0xd4, 0x12, 0x70, 0xef, 0x72, 0xa4, 0xec, 0x1a, 0x50, 0x76, 0x52,
		0x95, 0x9d, 0x6d, 0x4d, 0xda, 0xd6, 0xd7, 0xc1, 0xaf, 0xca, 0xbb, 0xda, 0xd3, 0xc7, 0xc3, 0x5f,
		0xcd, 0xa7, 0xd7, 0x7f, 0xf9, 0xb8, 0xe9, 0xc7, 0x2a, 0xef, 0x9a, 0x4f, 0x1f, 0xb7, 0xfc, 0x4b,
		0xe3, 0xe9, 0xe3, 0x8e, 0x63, 0xd4, 0x9f, 0xde, 0xc6, 0x7e, 0x74, 0xfe, 0xf7, 0xd5, 0x6d, 0x5f,
		0xa8, 0x6d, 0xf9, 0xc2, 0xf1, 0xb6, 0x2f, 0x1c, 0x6f, 0xf9, 0xc2, 0xd6, 0x47, 0xaa, 0x6e, 0xf9,
		0x42, 0xfd, 0xe9, 0x31, 0xf6, 0xf3, 0x6f, 0x37, 0xff, 0x68, 0xe3, 0xe9, 0xf0, 0x71, 0xdb, 0xbf,
		0x35, 0x9f, 0x1e, 0x3f, 0x1e, 0x42, 0xf5, 0xa7, 0x57, 0xfd, 0x10, 0x5b, 0x7a, 0xb1, 0xcd, 0xbe,
		0x21, 0xc4, 0x4d, 0x94, 0x0a, 0x26, 0xed, 0x5e, 0x58, 0xe4, 0xb7, 0x51, 0x9b, 0x26, 0x05, 0xbf,
		0x06, 0x7e, 0x0d, 0xfc, 0x1a, 0xf8, 0xb5, 0x0c, 0xf2, 0x6b, 0x05, 0xb9, 0x91, 0x7a, 0xa9, 0xb5,
		0x39, 0x0b, 0xd6, 0xfe, 0x1b, 0x37, 0x53, 0xcb, 0x45, 0xe4, 0xee, 0x9d, 0xed, 0xf0, 0xb1, 0xe5,
		0x33, 0x3b, 0xf0, 0x5c, 0xf5, 0xa6, 0xf4, 0xd5, 0x7c, 0xb0, 0xa2, 0xb0, 0xa2, 0xb0, 0xa2, 0xb0,
		0xa2, 0x19, 0xb4, 0xa2, 0x7c, 0xcc, 0x5c, 0xc1, 0xc5, 0x03, 0x91, 0x25, 0x55, 0x18, 0x11, 0x5a,
		0xea, 0x2e, 0x5f, 0xe5, 0x93, 0x1d, 0x10, 0x1c, 0xd1, 0xd5, 0x02, 0x76, 0x4f, 0xbf, 0xb7, 0x4f,
		0xba, 0x5f, 0x86, 0xfd, 0xde, 0xe5, 0x45, 0x67, 0xd8, 0xef, 0xb4, 0xcf, 0x7b, 0xa7, 0xaa, 0x4f,
		0xeb, 0x22, 0xd0, 0x36, 0x20, 0x21, 0x90, 0x88, 0x22, 0x95, 0x5f, 0xaf, 0xe6, 0xe7, 0x93, 0xcb,
		0xf3, 0x8b, 0x4e, 0x7f, 0x78, 0xd2, 0xeb, 0x9d, 0x95, 0xf2, 0x10, 0xf8, 0xad, 0x6b, 0x1d, 0x7b,
		0xa7, 0x5f, 0x3b, 0x5f, 0xb0, 0x82, 0xc9, 0x57, 0xb0, 0x7d, 0x0e, 0x21, 0x4c, 0xb9, 0x84, 0xbd,
		0x7e, 0xf7, 0x8f, 0xee, 0x69, 0xfb, 0xa2, 0xd7, 0x2f, 0x65, 0x3c, 0x2e, 0x7f, 0x90, 0x35, 0x7c,
		0x92, 0x09, 0xef, 0xcd, 0xb1, 0x03, 0x61, 0xdd, 0x7a, 0x63, 0x3e, 0xe1, 0x6c, 0xac, 0xde, 0x79,
		0x5b, 0x9f, 0x0e, 0xbe, 0x1b, 0x7c, 0x37, 0xf8, 0x6e, 0xf0, 0xdd, 0x32, 0xe8, 0xbb, 0x09, 0x7e,
		0xcb, 0x04, 0x1f, 0xfd, 0x1d, 0x34, 0x6a, 0x04, 0xbe, 0x9b, 0xc2, 0x80, 0x8e, 0xd2, 0xa5, 0x1b,
		0xe6, 0xed, 0x95, 0x5c, 0xdb, 0xf5, 0x02, 0x36, 0xf2, 0xdc, 0xb1, 0xd2, 0xa8, 0x49, 0x64, 0x1c,
		0x9b, 0x67, 0xd3, 0x36, 0x7b, 0xb9, 0xc8, 0x38, 0x4e, 0x2d, 0x22, 0x05, 0xc8, 0x38, 0xae, 0x7c,
		0xa8, 0xd5, 0x1a, 0xcd, 0x5a, 0xad, 0xdc, 0x3c, 0x6e, 0x96, 0x5b, 0xf5, 0x7a, 0xa5, 0x51, 0x41,
		0xee, 0xb1, 0x71, 0xa3, 0x17, 0x39, 0xe2, 0x43, 0x55, 0xc5, 0xec, 0x18, 0x28, 0x50, 0x53, 0x39,
		0x3b, 0x9a, 0xe6, 0x0b, 0x9b, 0xd8, 0x33, 0x67, 0x01, 0xfd, 0xca, 0xf0, 0x9d, 0xe0, 0x3b, 0xc1,
		0x77, 0x82, 0xef, 0x94, 0x45, 0xdf, 0x09, 0x85, 0x93, 0xe0, 0xc6, 0xc0, 0x8d, 0x81, 0x1b, 0x63,
		0x94, 0x88, 0xa0, 0x70, 0x12, 0x9c, 0x17, 0x13, 0x9d, 0x97, 0x65, 0xb0, 0x9b, 0xd4, 0x76, 0xc9,
		0x5b, 0x2d, 0xf3, 0xcb, 0xc9, 0xe0, 0x60, 0xc0, 0xc1, 0x80, 0x83, 0x01, 0x07, 0x23, 0x83, 0x0e,
		0xc6, 0xb5, 0xe7, 0x39, 0xcc, 0x76, 0x29, 0x82, 0xea, 0x2a, 0x59, 0x31, 0x4d, 0x46, 0xb7, 0xff,
		0x68, 0xbb, 0xae, 0x27, 0xec, 0x39, 0x1a, 0x52, 0xd3, 0x05, 0x24, 0x18, 0xfd, 0x64, 0xb7, 0xf6,
		0x74, 0x19, 0xee, 0x7f, 0xe4, 0x4d, 0x99, 0x3b, 0x5a, 0x18, 0x8a, 0xf9, 0xf9, 0x3c, 0x9a, 0xff,
		0xcf, 0xe7, 0xd7, 0x47, 0xf6, 0x84, 0x5b, 0x81, 0x3d, 0xe1, 0x41, 0xf4, 0xe9, 0x68, 0x51, 0xae,
		0x22, 0xf0, 0x05, 0xb3, 0xa6, 0x9e, 0xc3, 0x47, 0x0f, 0x47, 0x4e, 0x78, 0xae, 0x8f, 0x16, 0x36,
		0x32, 0x08, 0xff, 0x08, 0x33, 0x01, 0x8a, 0xd0, 0x04, 0x6a, 0xe6, 0xfe, 0xed, 0x7a, 0xff, 0xb8,
		0x96, 0x2d, 0x84, 0xcf, 0xaf, 0xe7, 0x2b, 0xa0, 0xae, 0x23, 0xd4, 0x86, 0xb9, 0xd0, 0x1e, 0x0a,
		0xed, 0xa1, 0x8c, 0x80, 0x18, 0x68, 0x0f, 0x45, 0x6b, 0x1f, 0x94, 0xb5, 0x87, 0x8a, 0x29, 0x19,
		0xf5, 0x3e, 0x56, 0x7c, 0x4a, 0xb5, 0x9e, 0x56, 0x05, 0x9e, 0x16, 0x3c, 0x2d, 0x78, 0x5a, 0x45,
		0xf2, 0xb4, 0x54, 0xa9, 0xcb, 0x68, 0x82, 0x45, 0xcb, 0x24, 0xa1, 0xda, 0x9f, 0x3b, 0x88, 0x35,
		0xd7, 0x5b, 0x4c, 0xa9, 0x58, 0xb4, 0x68, 0xf8, 0x67, 0xe5, 0xea, 0x93, 0x52, 0x8d, 0xea, 0x51,
		0xa7, 0xd4, 0x6a, 0x55, 0x9b, 0x7a, 0xd5, 0xa6, 0x66, 0xb5, 0xa9, 0x5b, 0xb5, 0x6a, 0x57, 0xb1,
		0xfa, 0xa5, 0x23, 0xbc, 0x62, 0xe7, 0x4e, 0x7d, 0x5d, 0x86, 0x18, 0xba, 0x6c, 0xd2, 0xd4, 0x9a,
		0x5b, 0xef, 0xbb, 0xfd, 0x6c, 0x0c, 0x32, 0x7a, 0xa3, 0xa5, 0x50, 0xf4, 0x14, 0x75, 0xea, 0xde,
		0x2a, 0x73, 0x2a, 0x3a, 0x77, 0x13, 0xfb, 0x32, 0x30, 0xca, 0x30, 0xca, 0x30, 0xca, 0xc5, 0x30,
		0xca, 0xaa, 0x7d, 0xa3, 0x75, 0x1f, 0xc9, 0x61, 0x84, 0xc1, 0x55, 0x6b, 0xae, 0xd2, 0x7c, 0xe6,
		0x77, 0xb9, 0x8c, 0xd8, 0xa1, 0x52, 0xd2, 0x3a, 0x94, 0xb5, 0x5e, 0xa5, 0xad, 0x4b, 0x79, 0x6b,
		0x57, 0xe2, 0xda, 0x95, 0xb9, 0x76, 0xa5, 0x4e, 0xa3, 0xdc, 0x89, 0x94, 0x3c, 0xbd, 0x07, 0x16,
		0x3b, 0xb7, 0x33, 0xee, 0x8a, 0x4a, 0x83, 0xf2, 0xcc, 0x2e, 0xb5, 0x70, 0x83, 0x70, 0x4a, 0x9a,
		0x18, 0xe8, 0xd7, 0xbf, 0x68, 0x75, 0xd2, 0x01, 0x75, 0x8c, 0xb4, 0x66, 0xf3, 0x1a, 0x9b, 0x9e,
		0x38, 0x86, 0x3a, 0x36, 0xbf, 0x86, 0x38, 0x59, 0x4d, 0xea, 0x6a, 0x5d, 0xe4, 0xec, 0xfb, 0xc2,
		0x8b, 0x5c, 0xa3, 0x5e, 0x3f, 0xae, 0x17, 0x58, 0xec, 0xde, 0xe4, 0x73, 0xb6, 0xc1, 0x9b, 0x7c,
		0xbc, 0x0f, 0x45, 0xea, 0x05, 0xdd, 0x4d, 0xdb, 0x66, 0x37, 0x92, 0xe0, 0xc6, 0x0d, 0x7e, 0x24,
		0xfc, 0x48, 0xf8, 0x91, 0xf0, 0x23, 0xe1, 0x47, 0x6e, 0xf1, 0x23, 0x3f, 0x68, 0x70, 0x23, 0xeb,
		0x70, 0x23, 0xe1, 0x46, 0xc2, 0x8d, 0x84, 0x1b, 0x99, 0x03, 0x91, 0xab, 0xd6, 0xe1, 0x44, 0xc2,
		0x89, 0x2c, 0xba, 0x13, 0x79, 0xb7, 0x3c, 0x0d, 0x3a, 0xbc, 0xc8, 0x70, 0x6e, 0xb8, 0x91, 0x70,
		0x23, 0xe1, 0x46, 0xc2, 0x8d, 0x84, 0x1b, 0x49, 0x7e, 0x6e, 0xaf, 0xb9, 0x6b, 0xfb, 0x0f, 0x1a,
		0xfc, 0xc8, 0x16, 0xe1, 0x94, 0x27, 0xcc, 0xbd, 0x59, 0x04, 0x8a, 0xc2, 0x91, 0x2c, 0x00, 0xaa,
		0xaf, 0xc0, 0x91, 0x84, 0x23, 0x49, 0x2b, 0x72, 0xb8, 0x8f, 0x84, 0x2b, 0x59, 0x70, 0x57, 0x92,
		0xdd, 0x0b, 0xe6, 0x8e, 0x15, 0xb6, 0x0a, 0xd9, 0x0a, 0x61, 0xa2, 0x99, 0xe1, 0x46, 0xc2, 0x8d,
		0x84, 0x1b, 0x09, 0x37, 0x12, 0x6e, 0x24, 0xbd, 0x1b, 0xa9, 0xbc, 0xb0, 0xd6, 0x36, 0x35, 0xac,
		0xa8, 0xd0, 0x56, 0x3e, 0x8d, 0xb4, 0x37, 0x9d, 0x23, 0x45, 0xdb, 0xa1, 0x37, 0xd2, 0xd1, 0xcc,
		0x30, 0xd2, 0x30, 0xd2, 0x30, 0xd2, 0x30, 0xd2, 0x30, 0xd2, 0x30, 0xd2, 0x30, 0xd2, 0x9b, 0xd6,
		0x6c, 0x6a, 0xfb, 0x82, 0xeb, 0xb0, 0xd1, 0xab, 0x89, 0x61, 0xa2, 0x61, 0xa2, 0x61, 0xa2, 0x61,
		0xa2, 0x61, 0xa2, 0x61, 0xa2, 0x61, 0xa2, 0x37, 0xad, 0x99, 0xf0, 0x6d, 0x37, 0xe0, 0x82, 0xdf,
		0x69, 0x88, 0x9b, 0x7a, 0x31, 0x37, 0x0c, 0x35, 0x0c, 0x35, 0x0c, 0x35, 0x0c, 0x35, 0x0c, 0x35,
		0x0c, 0x75, 0x06, 0x0d, 0x75, 0xa6, 0xcb, 0x45, 0x29, 0xee, 0x4c, 0x11, 0x9b, 0x4f, 0x71, 0xa7,
		0x8a, 0x78, 0x53, 0x85, 0xf8, 0x5f, 0xa9, 0x68, 0x67, 0x41, 0x27, 0x14, 0xd9, 0xaa, 0xd4, 0xfc,
		0x5f, 0xf6, 0x40, 0x91, 0x6a, 0x5d, 0x3a, 0xe1, 0x81, 0x68, 0x0b, 0xa1, 0xb8, 0x2c, 0xf4, 0x37,
		0xee, 0x76, 0x1c, 0x36, 0xb7, 0x7b, 0x81, 0x5a, 0x5c, 0x57, 0xfa, 0x66, 0xdf, 0xbf, 0x98, 0x89,
		0xb6, 0x05, 0x79, 0xa9, 0xe7, 0x8f, 0x99, 0xcf, 0xc6, 0x9f, 0xe6, 0x5b, 0xe7, 0xce, 0x1c, 0x27,
		0x53, 0x12, 0x47, 0xa4, 0xd0, 0x4c, 0x50, 0x64, 0x25, 0xa5, 0x45, 0x56, 0xfd, 0xd9, 0x48, 0xb8,
		0x4b, 0x98, 0xf0, 0xe9, 0x66, 0x3a, 0xec, 0xf3, 0xeb, 0x61, 0x7b, 0xc2, 0xcf, 0xed, 0x09, 0x1f,
		0x76, 0xa7, 0x77, 0xb5, 0x73, 0x5f, 0xb0, 0xb3, 0xc5, 0x1b, 0x0c, 0x4f, 0xbc, 0xd1, 0xfc, 0x5f,
		0xfb, 0xf3, 0x27, 0x1f, 0x5e, 0x86, 0x8f, 0xd9, 0x8e, 0x9e, 0x12, 0x1d, 0xa4, 0xcc, 0x17, 0x6b,
		0x7a, 0x71, 0x36, 0xb6, 0x9d, 0xd4, 0x1b, 0x83, 0xb6, 0x7f, 0x65, 0x3f, 0x97, 0x8d, 0xf7, 0x0f,
		0x98, 0x3b, 0x9e, 0x7a, 0xdc, 0x15, 0x07, 0x23, 0xcf, 0xf1, 0x7c, 0x49, 0xe7, 0x5f, 0x8d, 0xf1,
		0x54, 0x67, 0x2c, 0x49, 0x8d, 0xa3, 0x1a, 0x63, 0x28, 0x4b, 0x3c, 0x14, 0x69, 0x05, 0xc5, 0xda,
		0x40, 0xa2, 0xdd, 0x4a, 0x6e, 0xa7, 0xe4, 0xe8, 0x9f, 0xf4, 0xda, 0x22, 0xdd, 0x08, 0x29, 0x05,
		0x49, 0xb6, 0x00, 0x29, 0x13, 0x9c, 0x74, 0xbb, 0x95, 0x7c, 0x8d, 0x93, 0x7d, 0x33, 0xe1, 0xae,
		0xc8, 0xda, 0x0d, 0xf9, 0xbb, 0x90, 0xe2, 0xc4, 0x26, 0x39, 0xa1, 0xc9, 0x76, 0x7b, 0xff, 0xbd,
		0x4a, 0xb0, 0x4f, 0x25, 0x97, 0xf1, 0x9b, 0x9f, 0xd7, 0x9e, 0x9f, 0xbc, 0x33, 0x64, 0x44, 0xbe,
		0x3d, 0x0f, 0x95, 0x50, 0x5e, 0xd2, 0x75, 0x0d, 0x48, 0x7d, 0x43, 0x21, 0xe3, 0xc6, 0x41, 0xee,
		0x0d, 0x82, 0xac, 0x1b, 0x01, 0xe9, 0x0c, 0xbf, 0x74, 0xc6, 0x5e, 0x3a, 0x03, 0x4f, 0xab, 0xe9,
		0xd2, 0x56, 0xa9, 0x8f, 0xce, 0x4e, 0xfa, 0xad, 0x7e, 0x7d, 0x1a, 0xd3, 0xee, 0xb4, 0x9c, 0x56,
		0x1e, 0xd2, 0xae, 0x0f, 0x65, 0x5e, 0x0b, 0xaa, 0xb9, 0xee, 0x93, 0x7d, 0x8d, 0xa7, 0xec, 0x7a,
		0x4e, 0xd9, 0xb5, 0x9b, 0xb2, 0xeb, 0x34, 0xbd, 0xe0, 0x52, 0x56, 0x2b, 0x8a, 0x92, 0x3d, 0xfe,
		0x6b, 0xb1, 0x26, 0xdc, 0xb5, 0xa6, 0x5e, 0x20, 0xe4, 0x49, 0x4a, 0x54, 0xc4, 0xe5, 0xd5, 0x04,
		0xb2, 0xbc, 0x77, 0xa9, 0x5d, 0x7d, 0xa4, 0x47, 0x14, 0xa8, 0x88, 0x18, 0x50, 0x1b, 0x11, 0xa0,
		0xea, 0xc6, 0x5f, 0xf9, 0x8d, 0xbe, 0xf2, 0x1b, 0x7b, 0xe5, 0x37, 0xf2, 0x66, 0xf1, 0x62, 0xb2,
		0xbb, 0xdc, 0x94, 0x96, 0x6e, 0xa6, 0xb2, 0x6e, 0xef, 0xcb, 0xf1, 0xd1, 0xe1, 0x1d, 0x1d, 0xde,
		0xb5, 0x2a, 0x22, 0x32, 0x85, 0x44, 0xa6, 0x98, 0xe4, 0x2a, 0x28, 0xc9, 0x8a, 0x4a, 0x99, 0xc2,
		0x5a, 0x57, 0x5c, 0xea, 0xbb, 0xba, 0xcb, 0x26, 0x6e, 0x09, 0xd4, 0x98, 0x72, 0x75, 0x46, 0xa1,
		0xd6, 0x68, 0xd5, 0x1b, 0x95, 0x9a, 0x23, 0x57, 0x77, 0xe4, 0x6a, 0x8f, 0x5c, 0xfd, 0xa9, 0x51,
		0x83, 0x8a, 0xd4, 0xa1, 0x72, 0xb5, 0x18, 0x4d, 0x10, 0x5e, 0x94, 0x92, 0x35, 0x8b, 0x95, 0x79,
		0x2f, 0xfb, 0x3b, 0x75, 0x89, 0x0e, 0xee, 0xa6, 0xab, 0x51, 0x6a, 0x75, 0xaa, 0x4d, 0xad, 0x6a,
		0x53, 0xaf, 0xda, 0xd4, 0xac, 0x5a, 0x75, 0xab, 0x58, 0xed, 0x46, 0xab, 0x86, 0x0e, 0xee, 0xb2,
		0x54, 0xd8, 0xeb, 0x0e, 0xee, 0xa1, 0x21, 0x40, 0xf7, 0xf6, 0xd8, 0x4a, 0xad, 0x42, 0x98, 0xe8,
		0x6c, 0x72, 0x34, 0x23, 0xcc, 0x32, 0xcc, 0x32, 0xcc, 0x32, 0xcc, 0x32, 0xcc, 0x72, 0x61, 0xcd,
		0x72, 0x64, 0x0b, 0x60, 0x99, 0x63, 0x8b, 0xb5, 0x0c, 0x32, 0xa6, 0x33, 0xcc, 0xab, 0x09, 0x61,
		0x97, 0x61, 0x97, 0x61, 0x97, 0x61, 0x97, 0x61, 0x97, 0x0b, 0x6b, 0x97, 0x57, 0xa6, 0x00, 0x66,
		0x39, 0xb6, 0x56, 0x61, 0xb6, 0x32, 0x99, 0x51, 0x0e, 0xa7, 0xa3, 0x31, 0xc9, 0x15, 0x98, 0x64,
		0x98, 0x64, 0x98, 0x64, 0x98, 0xe4, 0xe4, 0xab, 0xa6, 0xfa, 0x02, 0x31, 0x9a, 0x68, 0x51, 0xc2,
		0x80, 0xbb, 0x63, 0x76, 0xaf, 0xa9, 0xc7, 0x60, 0x38, 0x37, 0x6a, 0x65, 0x65, 0x4d, 0x61, 0xeb,
		0x55, 0xdc, 0xba, 0x14, 0xb8, 0x76, 0x45, 0xae, 0x5d, 0xa1, 0x6b, 0x57, 0xec, 0x34, 0x0a, 0x9e,
		0x48, 0xd1, 0xd3, 0xfb, 0x60, 0x1a, 0x7d, 0x31, 0x1d, 0x3e, 0xd9, 0x26, 0xdf, 0xec, 0x5f, 0x7e,
		0x2f, 0x4c, 0x52, 0xc0, 0x44, 0x10, 0x7d, 0x5a, 0x7a, 0x72, 0xa1, 0x99, 0x42, 0x11, 0xce, 0x9d,
		0xd7, 0xfb, 0x9a, 0x05, 0xc2, 0x5a, 0xe6, 0xea, 0x12, 0xe3, 0x8a, 0xe7, 0xa9, 0x01, 0x2b, 0x00,
		0x2b, 0x00, 0x2b, 0x00, 0x2b, 0x00, 0x2b, 0xc8, 0xcf, 0x2d, 0x4a, 0x70, 0x66, 0xc2, 0x4c, 0xd3,
		0x04, 0x12, 0xc7, 0xa4, 0x83, 0x22, 0xa0, 0x18, 0xe6, 0x19, 0xe6, 0x19, 0xe6, 0x19, 0xe6, 0x19,
		0xe6, 0x79, 0xc3, 0xb9, 0x9d, 0x71, 0x57, 0x1c, 0x57, 0x35, 0x58, 0x67, 0x4a, 0x9f, 0xbf, 0x6f,
		0xbb, 0x37, 0xf3, 0xb7, 0xbd, 0x22, 0x3d, 0x23, 0xbf, 0x34, 0x74, 0x79, 0xe7, 0x6e, 0xe1, 0xbb,
		0xbc, 0x97, 0x0b, 0xdc, 0xe1, 0xfd, 0x9d, 0x06, 0x91, 0xb3, 0xef, 0x0b, 0x2f, 0x72, 0xb5, 0x6a,
		0xab, 0xd6, 0x6a, 0x34, 0xab, 0xad, 0x7a, 0x81, 0x65, 0xef, 0x4d, 0x3e, 0x67, 0x1b, 0xc0, 0x89,
		0xdc, 0xc3, 0x89, 0xbc, 0xbd, 0x9d, 0xb9, 0x5c, 0x3c, 0xe8, 0xba, 0x49, 0x7e, 0xfd, 0x00, 0x70,
		0x2c, 0xe1, 0x58, 0xc2, 0xb1, 0x84, 0x63, 0x09, 0xc7, 0x92, 0xfc, 0xdc, 0xe2, 0x3a, 0xf9, 0xc5,
		0xef, 0x95, 0x5d, 0xe2, 0x2c, 0x88, 0x3e, 0x3f, 0xe0, 0x46, 0x39, 0xd9, 0x92, 0x93, 0xa5, 0xd8,
		0xc6, 0x64, 0x9a, 0x28, 0xd5, 0x16, 0xb8, 0x02, 0xb8, 0x02, 0xb8, 0x02, 0xb8, 0x02, 0xb8, 0x62,
		0xc3, 0xb9, 0xe5, 0x53, 0xcb, 0x1e, 0x8f, 0x7d, 0x16, 0x04, 0x3a, 0xa0, 0x45, 0x8b, 0x70, 0xce,
		0xe5, 0x1a, 0xe7, 0x9e, 0xb4, 0x7e, 0xde, 0xd9, 0xbb, 0x9a, 0x86, 0xbd, 0x8d, 0xed, 0xf1, 0x07,
		0x0d, 0x73, 0x9f, 0xd9, 0x42, 0x30, 0xdf, 0x25, 0xdf, 0xee, 0xe8, 0x01, 0xde, 0xbe, 0xbd, 0x2a,
		0x5b, 0xad, 0xc1, 0xe3, 0x55, 0xc5, 0x6a, 0x0d, 0xc2, 0x8f, 0x95, 0xc5, 0x1f, 0xe1, 0xe7, 0xea,
		0x55, 0xd9, 0xaa, 0xad, 0x3e, 0xd7, 0xaf, 0xca, 0x56, 0x7d, 0x70, 0xf8, 0xe3, 0xc7, 0xfb, 0xc3,
		0x5f, 0xc7, 0x4f, 0xfb, 0x7f, 0xb1, 0x44, 0xfe, 0x8a, 0x03, 0x1d, 0x5b, 0xda, 0x3b, 0xef, 0xfe,
		0x4f, 0xfb, 0xbe, 0xfe, 0x49, 0xb9, 0xb1, 0xff, 0xd1, 0xb0, 0xb3, 0xb4, 0xb4, 0xf3, 0xbb, 0x02,
		0x29, 0xe3, 0x06, 0x94, 0xb1, 0x56, 0x65, 0x6c, 0x5b, 0x93, 0xb6, 0xf5, 0x75, 0xf0, 0xab, 0xf2,
		0xae, 0xf6, 0xf4, 0xf1, 0xf0, 0x57, 0xf3, 0xe9, 0xf5, 0x5f, 0x3e, 0x6e, 0xfa, 0xb1, 0xca, 0xbb,
		0xe6, 0xd3, 0xc7, 0x2d, 0xff, 0xd2, 0x78, 0xfa, 0xb8, 0xe3, 0x18, 0xf5, 0xa7, 0xb7, 0xb1, 0x1f,
		0x9d, 0xff, 0x7d, 0x75, 0xdb, 0x17, 0x6a, 0x5b, 0xbe, 0x70, 0xbc, 0xed, 0x0b, 0xc7, 0x5b, 0xbe,
		0xb0, 0xf5, 0x91, 0xaa, 0x5b, 0xbe, 0x50, 0x7f, 0x7a, 0x8c, 0xfd, 0xfc, 0xdb, 0xcd, 0x3f, 0xda,
		0x78, 0x3a, 0x7c, 0xdc, 0xf6, 0x6f, 0xcd, 0xa7, 0xc7, 0x8f, 0x87, 0x30, 0x4d, 0xf4, 0xa6, 0x09,
		0x62, 0x4e, 0x2f, 0xe6, 0xf9, 0x37, 0xd4, 0xb8, 0x1f, 0x36, 0x91, 0xb9, 0xbd, 0x17, 0x96, 0xf6,
		0x3b, 0xe2, 0x4d, 0x0f, 0x01, 0x3e, 0x17, 0x7c, 0x2e, 0xf8, 0x5c, 0xf0, 0xb9, 0xe0, 0x73, 0xc9,
		0xcf, 0x2d, 0xee, 0x89, 0x5f, 0xfc, 0x7e, 0x69, 0x9b, 0x38, 0x0b, 0xd6, 0xfe, 0x1b, 0xf7, 0xc5,
		0x09, 0x97, 0x9e, 0xbb, 0x77, 0xb6, 0xc3, 0xc7, 0x96, 0xcf, 0xec, 0xc0, 0x73, 0xe9, 0x01, 0xc7,
		0xab, 0xf9, 0x81, 0x35, 0x80, 0x35, 0x80, 0x35, 0x80, 0x35, 0x80, 0x35, 0xc8, 0xcf, 0x2d, 0x1f,
		0x33, 0x57, 0x70, 0xf1, 0xa0, 0x09, 0x6f, 0x10, 0x66, 0x07, 0x94, 0xba, 0xcb, 0x57, 0xfd, 0x64,
		0x07, 0x1a, 0x54, 0xc6, 0x6a, 0xc1, 0xbb, 0xa7, 0xdf, 0xdb, 0x27, 0xdd, 0x2f, 0xc3, 0x7e, 0xef,
		0xf2, 0xa2, 0x33, 0xec, 0x77, 0xda, 0xe7, 0xbd, 0x53, 0x6a, 0xed, 0xb1, 0x48, 0xd2, 0x08, 0xb4,
		0xd0, 0x9c, 0x9a, 0xb2, 0x62, 0x5e, 0xaf, 0xfe, 0xe7, 0x93, 0xcb, 0xf3, 0x8b, 0x4e, 0x7f, 0x78,
		0xd2, 0xeb, 0x9d, 0x95, 0x8a, 0x90, 0x94, 0x64, 0xca, 0xba, 0xf7, 0x4e, 0xbf, 0x76, 0xbe, 0x60,
		0xc5, 0xe9, 0x56, 0xbc, 0x7d, 0x0e, 0x21, 0x27, 0x5e, 0xf2, 0x5e, 0xbf, 0xfb, 0x47, 0xf7, 0xb4,
		0x7d, 0xd1, 0xeb, 0x97, 0x72, 0x9e, 0x73, 0x36, 0xc8, 0x1b, 0xde, 0xcb, 0x85, 0x77, 0xef, 0xd8,
		0x81, 0xb0, 0x6e, 0xbd, 0x31, 0x9f, 0x70, 0x36, 0xa6, 0x77, 0xee, 0xd7, 0xa7, 0x87, 0x6f, 0x0f,
		0xdf, 0x1e, 0xbe, 0x3d, 0x7c, 0x7b, 0xf8, 0xf6, 0xe4, 0xe7, 0x56, 0xf0, 0x5b, 0x26, 0xf8, 0xe8,
		0xef, 0xa0, 0x51, 0xd3, 0xe0, 0xdb, 0x13, 0x86, 0xa9, 0x95, 0x2e, 0xdd, 0x30, 0xc7, 0xbf, 0xe4,
		0xda, 0xae, 0x17, 0xb0, 0x91, 0xe7, 0x8e, 0x49, 0x63, 0xe1, 0x51, 0x4d, 0x25, 0x7f, 0x36, 0x7e,
		0x33, 0x6b, 0x82, 0x6a, 0x2a, 0xe4, 0x22, 0x87, 0x6a, 0x2a, 0x07, 0x95, 0x0f, 0xb5, 0x5a, 0xa3,
		0x59, 0xab, 0x95, 0x9b, 0xc7, 0xcd, 0x72, 0xab, 0x5e, 0xaf, 0x34, 0x2a, 0xa8, 0xab, 0x92, 0xbb,
		0xd9, 0x10, 0x37, 0xb7, 0xbb, 0x18, 0x52, 0xb5, 0x2e, 0x8c, 0x81, 0x2a, 0x9a, 0x16, 0x86, 0xd1,
		0xb4, 0x5f, 0xd8, 0xc4, 0x9e, 0x39, 0x0b, 0x28, 0x5e, 0x86, 0x2f, 0x0d, 0x5f, 0x1a, 0xbe, 0x34,
		0x7c, 0x69, 0xf8, 0xd2, 0x28, 0x0a, 0x0a, 0x37, 0x16, 0x6e, 0x2c, 0xdc, 0x58, 0xb8, 0xb1, 0x99,
		0x12, 0x39, 0x14, 0x05, 0x85, 0xf3, 0x0a, 0xe7, 0xf5, 0xa0, 0xb4, 0x0c, 0x7e, 0xf6, 0x66, 0x82,
		0xd1, 0x3b, 0xb0, 0x2f, 0x27, 0x87, 0x43, 0x09, 0x87, 0x12, 0x0e, 0x25, 0x1c, 0x4a, 0x38, 0x94,
		0xe4, 0xe7, 0x16, 0x4d, 0xa0, 0x0c, 0x9f, 0x41, 0x75, 0x1f, 0xeb, 0xb6, 0xeb, 0x7a, 0xc2, 0x9e,
		0xa3, 0x51, 0x9a, 0x76, 0xd6, 0xc1, 0xe8, 0x27, 0xbb, 0xb5, 0x97, 0x6d, 0x27, 0x4b, 0x47, 0xde,
		0x94, 0xb9, 0xa3, 0x85, 0xa1, 0x9c, 0xeb, 0x8f, 0xa3, 0xf9, 0xff, 0x7c, 0x7e, 0x7d, 0x64, 0x4f,
		0xb8, 0x15, 0xd8, 0x13, 0x1e, 0x44, 0x9f, 0x8e, 0x16, 0x45, 0xc8, 0x02, 0x5f, 0x30, 0x6b, 0xea,
		0x39, 0x7c, 0xf4, 0x70, 0xe4, 0x32, 0x7e, 0xf3, 0xf3, 0xda, 0xf3, 0x83, 0xe8, 0xd3, 0x91, 0x3d,
		0xfe, 0x6b, 0xa1, 0x8a, 0xb8, 0x6b, 0x4d, 0xbd, 0x40, 0x1c, 0x2d, 0xe0, 0x45, 0x10, 0xfe, 0x11,
		0x26, 0xe9, 0xa9, 0xd5, 0x50, 0xea, 0x44, 0x41, 0xa1, 0x18, 0x94, 0x66, 0xee, 0xdf, 0xae, 0xf7,
		0x8f, 0x6b, 0xd9, 0x42, 0xf8, 0xfc, 0x7a, 0xbe, 0x62, 0xca, 0x45, 0xe1, 0x99, 0xd0, 0x8a, 0xcf,
		0xad, 0x58, 0xe0, 0x57, 0xea, 0x47, 0xf1, 0x34, 0x54, 0xe8, 0x8f, 0x12, 0xf5, 0xe9, 0x41, 0x7b,
		0xd4, 0x28, 0x4f, 0x1b, 0xba, 0xd3, 0x86, 0xea, 0xb4, 0xa1, 0xb9, 0x6c, 0x9b, 0xce, 0x2f, 0x9c,
		0xa6, 0x2f, 0x63, 0x5c, 0x49, 0xd2, 0xbb, 0xeb, 0xf1, 0x47, 0xa0, 0x75, 0xda, 0x2b, 0x70, 0xda,
		0xe1, 0xb4, 0xc3, 0x69, 0x87, 0xd3, 0x6e, 0x8e, 0xd3, 0x4e, 0xa5, 0xfe, 0xa3, 0x09, 0xe7, 0xba,
		0xd7, 0x12, 0xd4, 0x54, 0xc1, 0x9a, 0xc6, 0x78, 0x7e, 0x04, 0x62, 0xd1, 0xd5, 0x73, 0x75, 0x44,
		0x6e, 0x0e, 0x74, 0x9a, 0x05, 0x33, 0xcc, 0x83, 0x6e, 0x33, 0x61, 0x8c, 0xb9, 0x30, 0xc6, 0x6c,
		0x18, 0x63, 0x3e, 0x68, 0xcd, 0x08, 0xb1, 0x39, 0x89, 0x56, 0xf9, 0x42, 0x87, 0x82, 0x3f, 0xd0,
		0x5b, 0xf8, 0x2b, 0x86, 0xf6, 0x9b, 0x7a, 0x8a, 0x4b, 0xaf, 0x0a, 0x81, 0x85, 0xf5, 0xbc, 0x9e,
		0x8d, 0x5d, 0x4e, 0x2f, 0xcb, 0x09, 0x45, 0xbb, 0x14, 0xb2, 0xaf, 0xda, 0x80, 0x4b, 0x38, 0xbd,
		0x1e, 0xd0, 0x52, 0x01, 0x68, 0x01, 0x68, 0x01, 0x68, 0x01, 0x68, 0xc9, 0x2f, 0x68, 0xa1, 0xf6,
		0x85, 0xd7, 0x7d, 0x62, 0x87, 0x69, 0x8c, 0xa3, 0x5d, 0x73, 0x8d, 0xe7, 0x4f, 0xf2, 0xae, 0x90,
		0xc1, 0x95, 0xba, 0x8c, 0x8e, 0x09, 0xc6, 0xc7, 0x2c, 0x23, 0x64, 0x8a, 0x31, 0x32, 0xce, 0x28,
		0x19, 0x67, 0x9c, 0x8c, 0x33, 0x52, 0x7a, 0x8c, 0x95, 0x26, 0xa3, 0xa5, 0xdf, 0xe3, 0x8e, 0xe9,
		0x8d, 0x19, 0x77, 0x45, 0xa5, 0xa1, 0x53, 0x67, 0x2c, 0xad, 0x48, 0x43, 0xe3, 0x23, 0xe8, 0x49,
		0xff, 0x79, 0xfd, 0x4b, 0xaf, 0xce, 0x3c, 0xd0, 0x9d, 0x1e, 0x64, 0x18, 0xbc, 0x88, 0x3d, 0x8e,
		0xe6, 0xf4, 0xa1, 0xd8, 0xf3, 0x18, 0x90, 0xd2, 0x61, 0x88, 0x3a, 0x5d, 0x17, 0x61, 0xfb, 0x1e,
		0x22, 0xfc, 0x1b, 0x11, 0x6e, 0xd4, 0xeb, 0xc7, 0x75, 0x88, 0xb1, 0x59, 0x58, 0x44, 0xff, 0xec,
		0x83, 0x37, 0xc5, 0x78, 0x5f, 0x1d, 0x59, 0x90, 0xfa, 0x6e, 0xd2, 0x37, 0xd3, 0x06, 0x1a, 0x6e,
		0xd4, 0xc1, 0x1b, 0x80, 0x37, 0x00, 0x6f, 0x00, 0xde, 0x00, 0xbc, 0x41, 0x4e, 0x78, 0x83, 0x0f,
		0x06, 0xd0, 0x06, 0x75, 0xd0, 0x06, 0xa0, 0x0d, 0x40, 0x1b, 0x80, 0x36, 0x00, 0x6d, 0xa0, 0x5c,
		0x84, 0xab, 0x75, 0x90, 0x06, 0x20, 0x0d, 0x40, 0x1a, 0xd0, 0x92, 0x06, 0x77, 0xcb, 0xd3, 0x67,
		0x02, 0x6b, 0x10, 0x3e, 0x0b, 0x68, 0x03, 0xd0, 0x06, 0xa0, 0x0d, 0x40, 0x1b, 0x80, 0x36, 0x00,
		0x6d, 0xb0, 0xa7, 0xde, 0xb8, 0xe6, 0xae, 0xed, 0x3f, 0x18, 0xc0, 0x1b, 0xb4, 0x34, 0x3e, 0xc2,
		0x09, 0x73, 0x6f, 0x16, 0x81, 0xff, 0x20, 0x0e, 0x40, 0x1c, 0xfc, 0xd6, 0xeb, 0xaa, 0xc0, 0xe7,
		0x02, 0x71, 0x90, 0x6d, 0x11, 0x46, 0xbc, 0x01, 0xa8, 0x03, 0x50, 0x07, 0xa4, 0x62, 0xce, 0xee,
		0x05, 0x73, 0xc7, 0x84, 0x5d, 0x30, 0xb7, 0x42, 0xbe, 0xe8, 0x49, 0x40, 0x1b, 0x80, 0x36, 0x00,
		0x6d, 0x00, 0xda, 0x00, 0xb4, 0x01, 0x68, 0x83, 0x7d, 0x69, 0x03, 0xf2, 0x9a, 0xb1, 0xdb, 0xcc,
		0x08, 0x51, 0x0d, 0xd9, 0x62, 0x82, 0x16, 0x6f, 0x3a, 0x47, 0xe6, 0xb6, 0xa3, 0x1f, 0xb4, 0x44,
		0x4f, 0x02, 0xd0, 0x02, 0xd0, 0x02, 0xd0, 0x02, 0xd0, 0x02, 0xd0, 0x02, 0xd0, 0x02, 0xd0, 0x02,
		0xd0, 0x12, 0x5f, 0xe3, 0xa9, 0xed, 0x0b, 0x6e, 0x02, 0x66, 0x59, 0x3d, 0x08, 0x20, 0x0b, 0x20,
		0x0b, 0x20, 0x0b, 0x20, 0x0b, 0x20, 0x0b, 0x20, 0x0b, 0x20, 0x0b, 0x20, 0x4b, 0x7c, 0x8d, 0x85,
		0x6f, 0xbb, 0x01, 0x17, 0xfc, 0xce, 0x80, 0xb8, 0xd2, 0x17, 0xcf, 0x02, 0xe0, 0x02, 0xe0, 0x02,
		0xe0, 0x02, 0xe0, 0x02, 0xe0, 0x02, 0xe0, 0x02, 0xe0, 0x62, 0x3c, 0x70, 0xc9, 0x75, 0x79, 0x51,
		0xe2, 0x26, 0x85, 0xb1, 0xf9, 0xf5, 0x35, 0x2d, 0x8c, 0xf7, 0xc7, 0x8b, 0xff, 0x15, 0x45, 0x67,
		0x43, 0x7d, 0xf2, 0x96, 0xaf, 0xa6, 0x31, 0xff, 0x65, 0x0f, 0x3a, 0xaa, 0xbe, 0x94, 0x4e, 0x78,
		0x20, 0xda, 0x42, 0x10, 0x77, 0xac, 0xf9, 0xc6, 0xdd, 0x8e, 0xc3, 0xe6, 0x90, 0x20, 0xa0, 0x85,
		0xd4, 0xa5, 0x6f, 0xf6, 0xfd, 0x8b, 0x99, 0x2b, 0x1f, 0x6a, 0xb5, 0x46, 0xb3, 0x56, 0x2b, 0x37,
		0x8f, 0x9b, 0xe5, 0x56, 0xbd, 0x5e, 0x69, 0x54, 0x08, 0x23, 0x60, 0x4b, 0x3d, 0x7f, 0xcc, 0x7c,
		0x36, 0xfe, 0x34, 0xdf, 0x7a, 0x77, 0xe6, 0x38, 0xb9, 0x92, 0x68, 0x4d, 0xba, 0xd9, 0x70, 0x9d,
		0x5c, 0x22, 0x6d, 0xad, 0xe0, 0xcf, 0x46, 0xc2, 0x5d, 0x82, 0xaf, 0x4f, 0x37, 0xd3, 0x61, 0x9f,
		0x5f, 0x0f, 0xdb, 0x13, 0x7e, 0x6e, 0x4f, 0xf8, 0xb0, 0x3b, 0xbd, 0xab, 0x9d, 0xfb, 0x82, 0x9d,
		0x2d, 0x5e, 0x76, 0x78, 0xba, 0x7c, 0xc5, 0x61, 0x7b, 0xfc, 0x57, 0x9f, 0x5f, 0x77, 0xdd, 0x33,
		0x2f, 0x10, 0xc3, 0xfe, 0xfc, 0xc5, 0x86, 0x97, 0xe1, 0x5b, 0xb4, 0xa3, 0x97, 0x40, 0x87, 0x66,
		0xfd, 0x07, 0xad, 0x40, 0x1d, 0x9a, 0x37, 0x34, 0x03, 0xce, 0x6a, 0xbb, 0xe6, 0x37, 0x19, 0x92,
		0xb4, 0x15, 0x28, 0x99, 0x6f, 0xb9, 0xc5, 0xc7, 0x07, 0xcc, 0x1d, 0x4f, 0x3d, 0xee, 0x8a, 0x83,
		0x91, 0xe7, 0x78, 0xbe, 0x22, 0x4d, 0x46, 0x83, 0x48, 0xe8, 0x10, 0x88, 0x56, 0xc4, 0x41, 0x83,
		0x30, 0x54, 0x89, 0x1f, 0x91, 0x82, 0xd3, 0xa7, 0xd8, 0x14, 0x82, 0x01, 0x69, 0xc6, 0x5f, 0x8d,
		0xa6, 0x95, 0xaf, 0x07, 0xe5, 0x8e, 0x28, 0x59, 0xa4, 0x55, 0x8b, 0xb2, 0x0e, 0x11, 0x96, 0x2b,
		0x18, 0xf2, 0xb6, 0x4f, 0xce, 0x48, 0x92, 0x04, 0x40, 0xd5, 0xc6, 0x93, 0x6e, 0xb8, 0x44, 0x35,
		0x25, 0x41, 0x2d, 0xc9, 0x91, 0xbb, 0xf4, 0x52, 0x22, 0x41, 0x42, 0x4a, 0x2f, 0x17, 0xda, 0x97,
		0x47, 0xd2, 0x3f, 0x97, 0x03, 0x5a, 0x1f, 0x5f, 0x92, 0x4c, 0xcb, 0x6d, 0x5f, 0x27, 0xfd, 0x6a,
		0x55, 0xc5, 0x55, 0xa9, 0xda, 0xab, 0x4f, 0x55, 0x57, 0x99, 0xca, 0xaf, 0x26, 0x95, 0x5f, 0x35,
		0x2a, 0xbf, 0x3a, 0x34, 0xcb, 0x5a, 0xc8, 0x6e, 0x97, 0x56, 0x5a, 0x9a, 0x6a, 0xe9, 0x82, 0xb5,
		0x3a, 0x0e, 0xcb, 0xf1, 0x25, 0x6f, 0xba, 0x9a, 0xfe, 0x98, 0xca, 0x62, 0x38, 0x54, 0xc6, 0x66,
		0xd0, 0xc4, 0x5c, 0xa8, 0x8e, 0xa5, 0x20, 0x8b, 0x91, 0x20, 0x8b, 0x7d, 0x20, 0x8b, 0x69, 0x30,
		0xdb, 0xaf, 0x51, 0xd5, 0xdf, 0x31, 0x54, 0x2c, 0xea, 0xe4, 0x71, 0x4d, 0x7f, 0xa9, 0x92, 0x45,
		0xb5, 0x6d, 0x7e, 0x95, 0x87, 0xa4, 0x51, 0x84, 0x9c, 0xd1, 0x86, 0x94, 0x51, 0x85, 0x8c, 0x91,
		0x87, 0x84, 0x91, 0x87, 0x7c, 0x91, 0x87, 0x74, 0x65, 0x8b, 0x38, 0x57, 0xdd, 0xf6, 0xb6, 0x14,
		0x32, 0xf0, 0xca, 0xe5, 0x78, 0x75, 0x3a, 0x55, 0x12, 0xfe, 0xaf, 0xd5, 0xa5, 0xe2, 0x68, 0x00,
		0xb2, 0x48, 0x5e, 0xca, 0x88, 0x5d, 0x3d, 0x91, 0xb9, 0xd4, 0x11, 0xb8, 0xda, 0x22, 0x6d, 0xb5,
		0x45, 0xd4, 0x6a, 0x8b, 0x9c, 0xcd, 0xf6, 0xcd, 0x38, 0x59, 0xc4, 0x6b, 0x74, 0xee, 0x1c, 0x66,
		0x4f, 0x7c, 0x36, 0xa1, 0x38, 0x74, 0x2b, 0x54, 0xd9, 0x24, 0x98, 0xeb, 0x6c, 0xc9, 0x2f, 0xbf,
		0x7f, 0x1f, 0xc6, 0x12, 0x1e, 0x85, 0x86, 0x20, 0xab, 0x97, 0xef, 0x0a, 0x91, 0xe5, 0xea, 0x6e,
		0x9c, 0xce, 0x26, 0x47, 0x33, 0xc2, 0x2c, 0xc3, 0x2c, 0xc3, 0x2c, 0xc3, 0x2c, 0xc3, 0x2c, 0x17,
		0xd6, 0x2c, 0x47, 0xb6, 0x00, 0x96, 0x39, 0xb6, 0x58, 0xcb, 0xe8, 0x35, 0x3a, 0xc3, 0xbc, 0x9a,
		0x10, 0x76, 0x19, 0x76, 0x19, 0x76, 0x19, 0x76, 0x19, 0x76, 0xb9, 0xb0, 0x76, 0x79, 0x65, 0x0a,
		0x60, 0x96, 0x63, 0x6b, 0x15, 0xe6, 0x26, 0x92, 0x19, 0xe5, 0x70, 0x3a, 0x1a, 0x93, 0x5c, 0x81,
		0x49, 0x86, 0x49, 0x86, 0x49, 0x86, 0x49, 0x4e, 0xbe, 0x6a, 0xaa, 0x2f, 0x10, 0xa3, 0x89, 0x16,
		0x09, 0xc7, 0xdc, 0x1d, 0x33, 0xba, 0xd2, 0x32, 0xeb, 0xcd, 0x2a, 0xc3, 0xb9, 0xa9, 0xb2, 0xac,
		0x49, 0x8b, 0x08, 0x91, 0x17, 0x0d, 0xd2, 0x51, 0x24, 0x48, 0x6f, 0x51, 0x20, 0x5d, 0x45, 0x80,
		0xb4, 0x17, 0xfd, 0xd1, 0x5e, 0xe4, 0x47, 0x7b, 0x51, 0x9f, 0x7c, 0xd5, 0x7f, 0x20, 0x2f, 0xd2,
		0xa3, 0xc1, 0x17, 0xd3, 0xe1, 0x93, 0x6d, 0xf2, 0xcd, 0xfe, 0xe5, 0xf7, 0xc2, 0x24, 0x05, 0x4c,
		0x04, 0xd1, 0xa7, 0xa5, 0x27, 0x17, 0x9a, 0xa9, 0xbc, 0xe4, 0xbd, 0x13, 0x20, 0x6b, 0x9a, 0x08,
		0xa5, 0x98, 0x34, 0x53, 0x44, 0x2a, 0x01, 0x4e, 0x00, 0x4e, 0x00, 0x4e, 0x00, 0x4e, 0x00, 0x4e,
		0x6c, 0x38, 0xb7, 0x33, 0xee, 0x8a, 0xe3, 0xaa, 0x06, 0x34, 0x41, 0x09, 0x26, 0xfa, 0xb6, 0x7b,
		0xc3, 0xc8, 0x5b, 0x43, 0x6b, 0x28, 0x70, 0xa7, 0xb3, 0xf5, 0xb3, 0xee, 0x92, 0xbf, 0xab, 0xbe,
		0xb8, 0xba, 0xe6, 0x37, 0xa0, 0x07, 0xae, 0x8e, 0xb2, 0xd7, 0x3a, 0x5b, 0x35, 0x9b, 0x22, 0x72,
		0xb5, 0x6a, 0xab, 0xd6, 0x6a, 0x34, 0xab, 0xad, 0x7a, 0x81, 0x65, 0x2f, 0xa7, 0x75, 0x2b, 0x07,
		0x70, 0x22, 0xf7, 0x70, 0x22, 0x6f, 0x6f, 0x67, 0x2e, 0x17, 0x0f, 0xba, 0x28, 0xea, 0xd7, 0x0f,
		0x00, 0xc7, 0x12, 0x8e, 0x25, 0x1c, 0x4b, 0x38, 0x96, 0x70, 0x2c, 0xc9, 0xcf, 0x2d, 0x78, 0xea,
		0x17, 0xbf, 0x57, 0x76, 0x89, 0xb3, 0x20, 0xfa, 0xfc, 0x00, 0xaa, 0x3a, 0xd9, 0x92, 0x93, 0xe5,
		0xee, 0xc4, 0x64, 0x9a, 0x28, 0x87, 0x07, 0xb8, 0x02, 0xb8, 0x02, 0xb8, 0x02, 0xb8, 0x02, 0xb8,
		0x62, 0xc3, 0xb9, 0xe5, 0x53, 0xcb, 0x1e, 0x8f, 0x7d, 0x16, 0x04, 0x3a, 0xa0, 0x45, 0x8b, 0x70,
		0xce, 0xe5, 0x1a, 0xe7, 0x9e, 0xb4, 0x7e, 0xde, 0xd9, 0xbb, 0x9a, 0x86, 0xbd, 0x8d, 0xed, 0xf1,
		0x07, 0x0d, 0x73, 0x9f, 0xd9, 0x42, 0x30, 0xdf, 0x25, 0xdf, 0xee, 0xe8, 0x01, 0xde, 0xbe, 0xbd,
		0x2a, 0x5b, 0xad, 0xc1, 0xe3, 0x55, 0xc5, 0x6a, 0x0d, 0xc2, 0x8f, 0x95, 0xc5, 0x1f, 0xe1, 0xe7,
		0xea, 0x55, 0xd9, 0xaa, 0xad, 0x3e, 0xd7, 0xaf, 0xca, 0x56, 0x7d, 0x70, 0xf8, 0xe3, 0xc7, 0xfb,
		0xc3, 0x5f, 0xc7, 0x4f, 0xfb, 0x7f, 0x91, 0xbe, 0x93, 0xd8, 0x40, 0xc7, 0x96, 0xf6, 0xce, 0xbb,
		0xff, 0xd3, 0xbe, 0xaf, 0x7f, 0x52, 0x6e, 0xec, 0x7f, 0x34, 0xec, 0x6c, 0x9e, 0x1b, 0x66, 0xe9,
		0x55, 0xc6, 0x0d, 0x28, 0x63, 0xad, 0xca, 0xd8, 0xb6, 0x26, 0x6d, 0xeb, 0xeb, 0xe0, 0x57, 0xe5,
		0x5d, 0xed, 0xe9, 0xe3, 0xe1, 0xaf, 0xe6, 0xd3, 0xeb, 0xbf, 0x7c, 0xdc, 0xf4, 0x63, 0x95, 0x77,
		0xcd, 0xa7, 0x8f, 0x5b, 0xfe, 0xa5, 0xf1, 0xf4, 0x71, 0xc7, 0x31, 0xea, 0x4f, 0x6f, 0x63, 0x3f,
		0x3a, 0xff, 0xfb, 0xea, 0xb6, 0x2f, 0xd4, 0xb6, 0x7c, 0xe1, 0x78, 0xdb, 0x17, 0x8e, 0xb7, 0x7c,
		0x61, 0xeb, 0x23, 0x55, 0xb7, 0x7c, 0xa1, 0xfe, 0xf4, 0x18, 0xfb, 0xf9, 0xb7, 0x9b, 0x7f, 0xb4,
		0xf1, 0x74, 0xf8, 0xb8, 0xed, 0xdf, 0x9a, 0x4f, 0x8f, 0x1f, 0x0f, 0x61, 0x9a, 0xe8, 0x4d, 0x13,
		0xc4, 0x9c, 0x5e, 0xcc, 0xf3, 0x6f, 0xa8, 0x71, 0x3f, 0x6c, 0x22, 0x73, 0x7b, 0x2f, 0x2c, 0xed,
		0x77, 0xc4, 0x9b, 0x1e, 0x02, 0x7c, 0x2e, 0xf8, 0x5c, 0xf0, 0xb9, 0xe0, 0x73, 0xc1, 0xe7, 0x92,
		0x9f, 0x5b, 0xdc, 0x13, 0xbf, 0xf8, 0xfd, 0xd2, 0x36, 0x71, 0x16, 0xac, 0xfd, 0x37, 0xee, 0x8b,
		0x13, 0x2e, 0x3d, 0x77, 0xef, 0x6c, 0x87, 0x8f, 0x2d, 0x9f, 0xd9, 0x01, 0x61, 0x77, 0xdb, 0x67,
		0x2a, 0x65, 0x7d, 0x7e, 0x60, 0x0d, 0x60, 0x0d, 0x60, 0x0d, 0x60, 0x0d, 0x60, 0x0d, 0xf2, 0x73,
		0xcb, 0xc7, 0xcc, 0x15, 0x5c, 0x3c, 0x68, 0xc2, 0x1b, 0x94, 0xbd, 0xea, 0xbb, 0xcb, 0x57, 0xfd,
		0x64, 0x07, 0x1a, 0x54, 0xc6, 0x6a, 0xc1, 0xbb, 0xa7, 0xdf, 0xdb, 0x27, 0xdd, 0x2f, 0xc3, 0x7e,
		0xef, 0xf2, 0xa2, 0x33, 0xec, 0x77, 0xda, 0xe7, 0xbd, 0x53, 0x6a, 0xed, 0xb1, 0x48, 0xd2, 0x08,
		0xb4, 0xd0, 0x9c, 0x9a, 0xb2, 0x62, 0x5e, 0xaf, 0xfe, 0xe7, 0x93, 0xcb, 0xf3, 0x8b, 0x4e, 0x7f,
		0x78, 0xd2, 0xeb, 0x9d, 0x95, 0x8a, 0x90, 0x94, 0x64, 0xca, 0xba, 0xf7, 0x4e, 0xbf, 0x76, 0xbe,
		0x60, 0xc5, 0xe9, 0x56, 0xbc, 0x7d, 0x0e, 0x21, 0x27, 0x5e, 0xf2, 0x5e, 0xbf, 0xfb, 0x47, 0xf7,
		0xb4, 0x7d, 0xd1, 0xeb, 0x97, 0x72, 0x9e, 0x73, 0x36, 0xc8, 0x1b, 0xde, 0xcb, 0x85, 0x77, 0xef,
		0xd8, 0x81, 0xb0, 0x6e, 0xbd, 0x31, 0x9f, 0x70, 0x36, 0xa6, 0x77, 0xee, 0xd7, 0xa7, 0x87, 0x6f,
		0x0f, 0xdf, 0x1e, 0xbe, 0x3d, 0x7c, 0x7b, 0xf8, 0xf6, 0xe4, 0xe7, 0x56, 0xf0, 0x5b, 0x26, 0xf8,
		0xe8, 0xef, 0xa0, 0x51, 0xd3, 0xe0, 0xdb, 0x13, 0x86, 0xa9, 0x95, 0x2e, 0xdd, 0x30, 0xc7, 0xbf,
		0xe4, 0xda, 0xae, 0x17, 0xb0, 0x91, 0xe7, 0x8e, 0x49, 0x63, 0xe1, 0x51, 0x4d, 0x25, 0x7f, 0x36,
		0x7e, 0x33, 0x6b, 0x82, 0x6a, 0x2a, 0xe4, 0x22, 0x87, 0x6a, 0x2a, 0x07, 0x95, 0x0f, 0xb5, 0x5a,
		0xa3, 0x59, 0xab, 0x95, 0x9b, 0xc7, 0xcd, 0x72, 0xab, 0x5e, 0xaf, 0x34, 0x2a, 0xa8, 0xab, 0x92,
		0xbb, 0xd9, 0x10, 0x37, 0xb7, 0xbb, 0x18, 0x52, 0xf5, 0x44, 0x8a, 0x81, 0x2a, 0x9a, 0xde, 0x48,
		0xd1, 0xb4, 0x5f, 0xd8, 0xc4, 0x9e, 0x39, 0x0b, 0x28, 0x5e, 0x86, 0x2f, 0x0d, 0x5f, 0x1a, 0xbe,
		0x34, 0x7c, 0x69, 0xf8, 0xd2, 0x28, 0x0a, 0x0a, 0x37, 0x16, 0x6e, 0x2c, 0xdc, 0x58, 0xb8, 0xb1,
		0x99, 0x12, 0x39, 0x14, 0x05, 0x85, 0xf3, 0x0a, 0xe7, 0xf5, 0xa0, 0xb4, 0x0c, 0x7e, 0xf6, 0x66,
		0x82, 0xd1, 0x3b, 0xb0, 0x2f, 0x27, 0x87, 0x43, 0x09, 0x87, 0x12, 0x0e, 0x25, 0x1c, 0x4a, 0x38,
		0x94, 0xe4, 0xe7, 0xf6, 0xda, 0xf3, 0x1c, 0x66, 0xbb, 0x3a, 0x82, 0xae, 0x2b, 0x79, 0x31, 0xd5,
		0x99, 0x6e, 0x90, 0xd9, 0x76, 0x5d, 0x4f, 0xd8, 0x73, 0x34, 0x4a, 0xd3, 0x27, 0x33, 0x18, 0xfd,
		0x64, 0xb7, 0xf6, 0x74, 0x99, 0x74, 0x77, 0xe4, 0x4d, 0x99, 0x3b, 0x5a, 0x18, 0xca, 0xb9, 0xfe,
		0x38, 0x9a, 0xff, 0xcf, 0xe7, 0xd7, 0x47, 0xf6, 0x84, 0x5b, 0x81, 0x3d, 0xe1, 0x41, 0xf4, 0xe9,
		0x68, 0x51, 0x84, 0x2c, 0xf0, 0x05, 0xb3, 0xa6, 0x9e, 0xc3, 0x47, 0x0f, 0x47, 0x2e, 0xe3, 0x37,
		0x3f, 0xaf, 0x3d, 0x3f, 0x88, 0x3e, 0x1d, 0xd9, 0xe3, 0xbf, 0x16, 0xaa, 0x88, 0xbb, 0xd6, 0xd4,
		0x67, 0x47, 0x0b, 0x74, 0x11, 0x84, 0x7f, 0x84, 0x39, 0x7a, 0x68, 0x20, 0x1d, 0xdf, 0x91, 0x99,
		0xfb, 0xb7, 0xeb, 0xfd, 0xe3, 0x5a, 0xb6, 0x10, 0x3e, 0xbf, 0x9e, 0xaf, 0x18, 0x5d, 0x37, 0xe9,
		0x0d, 0x73, 0xa3, 0xb5, 0xb4, 0xa9, 0xa0, 0x0f, 0xad, 0xa5, 0xf3, 0x09, 0xea, 0xd0, 0x5a, 0x3a,
		0xd1, 0xaa, 0x91, 0xb5, 0x96, 0x8e, 0x29, 0x49, 0x7a, 0x6f, 0x3d, 0xfe, 0x08, 0xb4, 0x3e, 0x7b,
		0x05, 0x3e, 0x3b, 0x7c, 0x76, 0xf8, 0xec, 0xf0, 0xd9, 0xcd, 0xf1, 0xd9, 0xa9, 0xd4, 0x7f, 0x34,
		0xe1, 0xa2, 0x91, 0xb2, 0xa0, 0x66, 0x0a, 0xd6, 0x34, 0xc6, 0xf3, 0x23, 0x10, 0x8b, 0xae, 0x9e,
		0x9b, 0x23, 0x72, 0x73, 0xa0, 0xd3, 0x2c, 0x98, 0x61, 0x1e, 0x74, 0x9b, 0x09, 0x63, 0xcc, 0x85,
		0x31, 0x66, 0xc3, 0x18, 0xf3, 0x41, 0x6b, 0x46, 0x88, 0xcd, 0x49, 0xb4, 0xca, 0x17, 0x3a, 0x14,
		0xfc, 0x81, 0xde, 0xba, 0x5f, 0x31, 0xb4, 0xdf, 0xd4, 0x53, 0x5b, 0x7a, 0x55, 0x07, 0x2c, 0x2c,
		0xe7, 0xf5, 0x6c, 0xec, 0x72, 0x7a, 0x57, 0x4e, 0x28, 0xda, 0xa5, 0x90, 0x7d, 0xd5, 0x06, 0x5c,
		0xc2, 0xe9, 0xf5, 0x80, 0x96, 0x0a, 0x40, 0x0b, 0x40, 0x0b, 0x40, 0x0b, 0x40, 0x4b, 0x7e, 0x41,
		0x0b, 0xb5, 0x2f, 0xbc, 0xee, 0x13, 0x3b, 0x4c, 0x63, 0x18, 0xed, 0x9a, 0x6b, 0x3c, 0x7f, 0x92,
		0x77, 0x85, 0x8c, 0xad, 0xd4, 0x65, 0x74, 0x4c, 0x30, 0x3e, 0x66, 0x19, 0x21, 0x53, 0x8c, 0x91,
		0x71, 0x46, 0xc9, 0x38, 0xe3, 0x64, 0x9c, 0x91, 0xd2, 0x63, 0xac, 0x34, 0x19, 0x2d, 0xfd, 0x1e,
		0x77, 0x4c, 0x6f, 0xcc, 0xb8, 0x2b, 0x2a, 0x0d, 0x9d, 0x3a, 0x63, 0x69, 0x45, 0x1a, 0x1a, 0x1f,
		0x41, 0x4f, 0xf6, 0xcf, 0xeb, 0x5f, 0x7a, 0x75, 0xe6, 0x81, 0xee, 0xec, 0x20, 0xc3, 0xe0, 0x45,
		0xec, 0x71, 0x34, 0x67, 0x0f, 0xc5, 0x9e, 0xc7, 0x80, 0x8c, 0x0e, 0x43, 0xd4, 0xe9, 0xba, 0x08,
		0xdb, 0xf7, 0x10, 0xe1, 0xdf, 0x88, 0x70, 0xa3, 0x5e, 0x3f, 0xae, 0x43, 0x8c, 0xcd, 0xc2, 0x22,
		0xfa, 0x67, 0x1f, 0xbc, 0x29, 0xc6, 0xfb, 0xea, 0x48, 0x82, 0xd4, 0x77, 0x93, 0xbe, 0x99, 0x36,
		0xd0, 0x70, 0xa3, 0x0e, 0xde, 0x00, 0xbc, 0x01, 0x78, 0x03, 0xf0, 0x06, 0xe0, 0x0d, 0x72, 0xc2,
		0x1b, 0x7c, 0x30, 0x80, 0x36, 0xa8, 0x83, 0x36, 0x00, 0x6d, 0x00, 0xda, 0x00, 0xb4, 0x01, 0x68,
		0x03, 0xe5, 0x22, 0x5c, 0xad, 0x83, 0x34, 0x00, 0x69, 0x00, 0xd2, 0x80, 0x96, 0x34, 0xb8, 0x5b,
		0x9e, 0x3e, 0x13, 0x58, 0x83, 0xf0, 0x59, 0x40, 0x1b, 0x80, 0x36, 0x00, 0x6d, 0x00, 0xda, 0x00,
		0xb4, 0x01, 0x68, 0x83, 0x3d, 0xf5, 0xc6, 0x35, 0x77, 0x6d, 0xff, 0xc1, 0x00, 0xde, 0xa0, 0xa5,
		0xf1, 0x11, 0x4e, 0x98, 0x7b, 0xb3, 0x08, 0xfc, 0x07, 0x71, 0x00, 0xe2, 0xe0, 0xb7, 0x5e, 0x57,
		0x05, 0x3e, 0x17, 0x88, 0x83, 0x6c, 0x8b, 0x30, 0xe2, 0x0d, 0x40, 0x1d, 0x80, 0x3a, 0x20, 0x15,
		0x73, 0x76, 0x2f, 0x98, 0x3b, 0x26, 0x6c, 0x82, 0xb9, 0x15, 0xf2, 0x45, 0x4f, 0x02, 0xda, 0x00,
		0xb4, 0x01, 0x68, 0x03, 0xd0, 0x06, 0xa0, 0x0d, 0x40, 0x1b, 0xec, 0x4b, 0x1b, 0x90, 0x97, 0x8c,
		0xdd, 0x66, 0x46, 0x88, 0x4a, 0xc8, 0x16, 0x13, 0xb4, 0x78, 0xd3, 0x39, 0x32, 0xb7, 0x1d, 0xfd,
		0xa0, 0x25, 0x7a, 0x12, 0x80, 0x16, 0x80, 0x16, 0x80, 0x16, 0x80, 0x16, 0x80, 0x16, 0x80, 0x16,
		0x80, 0x16, 0x80, 0x96, 0xf8, 0x1a, 0x4f, 0x6d, 0x5f, 0x70, 0x13, 0x30, 0xcb, 0xea, 0x41, 0x00,
		0x59, 0x00, 0x59, 0x00, 0x59, 0x00, 0x59, 0x00, 0x59, 0x00, 0x59, 0x00, 0x59, 0x00, 0x59, 0xe2,
		0x6b, 0x2c, 0x7c, 0xdb, 0x0d, 0xb8, 0xe0, 0x77, 0x06, 0xc4, 0x95, 0xbe, 0x78, 0x16, 0x00, 0x17,
		0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0xe3, 0x81, 0x4b, 0xae,
		0xcb, 0x8b, 0x12, 0xf7, 0x28, 0x8c, 0xcd, 0xaf, 0xad, 0x67, 0x61, 0xbc, 0x3d, 0x5e, 0xfc, 0xaf,
		0x28, 0x1a, 0x1b, 0xea, 0x13, 0xb7, 0x7c, 0xf5, 0x8c, 0xf9, 0x2f, 0x7b, 0xd0, 0x51, 0xf4, 0xa5,
		0x74, 0xc2, 0x03, 0xd1, 0x16, 0x82, 0xb8, 0x61, 0xcd, 0x37, 0xee, 0x76, 0x1c, 0x36, 0x47, 0x04,
		0x01, 0x2d, 0xa2, 0x2e, 0x7d, 0xb3, 0xef, 0x5f, 0xcc, 0x5c, 0xf9, 0x50, 0xab, 0x35, 0x9a, 0xb5,
		0x5a, 0xb9, 0x79, 0xdc, 0x2c, 0xb7, 0xea, 0xf5, 0x4a, 0xa3, 0x42, 0x18, 0x00, 0x5b, 0xea, 0xf9,
		0x63, 0xe6, 0xb3, 0xf1, 0xa7, 0xf9, 0xd6, 0xbb, 0x33, 0xc7, 0xc9, 0x95, 0x44, 0x6b, 0x52, 0xcd,
		0x66, 0xab, 0xe4, 0x12, 0x69, 0x63, 0x05, 0x7f, 0x36, 0x12, 0xee, 0x12, 0x7a, 0x7d, 0xba, 0x99,
		0x0e, 0xfb, 0xfc, 0x7a, 0xd8, 0x9e, 0xf0, 0x73, 0x7b, 0xc2, 0x87, 0xdd, 0xe9, 0x5d, 0xed, 0xdc,
		0x17, 0xec, 0x6c, 0xf1, 0xae, 0xc3, 0xd3, 0xe5, 0x1b, 0x0e, 0xdb, 0xe3, 0xbf, 0xfa, 0xfc, 0xba,
		0xeb, 0x9e, 0xf9, 0x6c, 0xd8, 0x9f, 0xbf, 0xd7, 0xf0, 0x32, 0x7c, 0x89, 0x76, 0xf4, 0x0e, 0xe8,
		0xce, 0xac, 0xff, 0x98, 0x15, 0xa7, 0x3b, 0xf3, 0x86, 0x46, 0xc0, 0x59, 0x6d, 0xd5, 0xfc, 0x26,
		0x43, 0x82, 0xb6, 0x42, 0x24, 0xf3, 0x1d, 0xb7, 0xf8, 0xf8, 0x80, 0xb9, 0xe3, 0xa9, 0xc7, 0x5d,
		0x71, 0x30, 0xf2, 0x1c, 0xcf, 0x57, 0xa4, 0xc7, 0x68, 0xe0, 0x08, 0x1d, 0xfc, 0xd0, 0x0a, 0x37,
		0x68, 0xe0, 0x85, 0x2a, 0xf1, 0x23, 0xd2, 0x6f, 0xda, 0xf4, 0x9a, 0x42, 0x24, 0x20, 0xcb, 0xf2,
		0xab, 0xd1, 0xb3, 0xf2, 0xb5, 0xa0, 0xdc, 0x11, 0x25, 0x0b, 0xb4, 0x6a, 0x41, 0xd6, 0x20, 0xc0,
		0x72, 0xe5, 0x42, 0xde, 0xee, 0xc9, 0x19, 0x49, 0xd2, 0xfe, 0xab, 0xda, 0x77, 0xca, 0xfd, 0x96,
		0xa8, 0xa3, 0xd2, 0xeb, 0x24, 0x39, 0x52, 0x97, 0x5e, 0x46, 0x24, 0xc8, 0x47, 0x69, 0xb5, 0xcc,
		0xde, 0x4c, 0x58, 0x53, 0x2f, 0x10, 0xd2, 0x24, 0xe4, 0xb9, 0x0e, 0xd0, 0xeb, 0x19, 0x24, 0x49,
		0xb5, 0xdc, 0xce, 0x75, 0xd2, 0x6f, 0x55, 0x55, 0xdc, 0x92, 0xaa, 0xbd, 0xf5, 0x54, 0x75, 0x8b,
		0xa9, 0xfc, 0x56, 0x52, 0xf9, 0x2d, 0xa3, 0xf2, 0x5b, 0x43, 0xb3, 0xec, 0x85, 0xec, 0x4e, 0x69,
		0xa5, 0xa5, 0xb1, 0x96, 0x2e, 0x58, 0xab, 0xe3, 0xb0, 0x1c, 0x5f, 0xf2, 0xa6, 0xab, 0x69, 0x8d,
		0xa9, 0x2c, 0x7c, 0x43, 0x65, 0x58, 0x06, 0x4d, 0xb8, 0x85, 0xea, 0x30, 0x0a, 0xb2, 0xf0, 0x08,
		0xb2, 0xb0, 0x07, 0xb2, 0x70, 0x06, 0xb3, 0x1d, 0x1b, 0x55, 0xad, 0x1d, 0x43, 0xc5, 0xa2, 0x4e,
		0x1e, 0xd7, 0xf4, 0x97, 0x2a, 0x59, 0x54, 0xdb, 0xe1, 0x57, 0x79, 0x34, 0x1a, 0x45, 0xb4, 0x19,
		0x6d, 0x34, 0x19, 0x55, 0xb4, 0x18, 0x79, 0x34, 0x18, 0x79, 0xb4, 0x17, 0x79, 0x34, 0x57, 0xb6,
		0x78, 0x73, 0xd5, 0x1d, 0x6f, 0x4b, 0x21, 0x01, 0xaf, 0x5c, 0x8e, 0x57, 0xa7, 0x53, 0x25, 0xdf,
		0xff, 0x5a, 0x5d, 0x2a, 0x8e, 0x04, 0x20, 0x0b, 0xe2, 0xa5, 0x0c, 0xd6, 0xd5, 0x13, 0x94, 0x4b,
		0x1d, 0x7c, 0xab, 0x2d, 0xc8, 0x56, 0x5b, 0x30, 0xad, 0xb6, 0xa0, 0xd9, 0x6c, 0xdf, 0x8b, 0x93,
		0x05, 0xbb, 0x46, 0xe7, 0xce, 0x61, 0xf6, 0xc4, 0x67, 0x13, 0x8a, 0x43, 0xb7, 0x42, 0x95, 0x4d,
		0x82, 0xb9, 0xce, 0x96, 0x0c, 0xf3, 0xfb, 0xf7, 0x61, 0x1c, 0xe1, 0x51, 0x68, 0x08, 0xb2, 0x7a,
		0xf7, 0xae, 0x10, 0x59, 0xae, 0xae, 0xc6, 0xe9, 0x6c, 0x72, 0x34, 0x23, 0xcc, 0x32, 0xcc, 0x32,
		0xcc, 0x32, 0xcc, 0x32, 0xcc, 0x72, 0x61, 0xcd, 0x72, 0x64, 0x0b, 0x60, 0x99, 0x63, 0x8b, 0xb5,
		0x0c, 0x5e, 0xa3, 0x33, 0xcc, 0xab, 0x09, 0x61, 0x97, 0x61, 0x97, 0x61, 0x97, 0x61, 0x97, 0x61,
		0x97, 0x0b, 0x6b, 0x97, 0x57, 0xa6, 0x00, 0x66, 0x39, 0xb6, 0x56, 0x61, 0x5e, 0x22, 0x99, 0x51,
		0x0e, 0xa7, 0xa3, 0x31, 0xc9, 0x15, 0x98, 0x64, 0x98, 0x64, 0x98, 0x64, 0x98, 0xe4, 0xe4, 0xab,
		0xa6, 0xfa, 0x02, 0x31, 0x9a, 0x68, 0x91, 0x6c, 0xcc, 0xdd, 0x31, 0xa3, 0xab, 0x2a, 0xb3, 0xde,
		0xa7, 0x32, 0x9c, 0x9b, 0x2a, 0xc3, 0x9a, 0xb4, 0x7e, 0x10, 0x79, 0xbd, 0x20, 0x1d, 0xf5, 0x81,
		0xf4, 0xd6, 0x03, 0xd2, 0x55, 0xff, 0x47, 0x7b, 0xbd, 0x1f, 0xed, 0xf5, 0x7d, 0xb4, 0xd7, 0xf3,
		0xc9, 0x57, 0xed, 0x07, 0xf2, 0xfa, 0x3c, 0x1a, 0x7c, 0x31, 0x1d, 0x3e, 0xd9, 0x26, 0xdf, 0xec,
		0x5f, 0x7e, 0x2f, 0x4c, 0x52, 0xc0, 0x44, 0x10, 0x7d, 0x5a, 0x7a, 0x72, 0xa1, 0x99, 0xca, 0x4b,
		0xd6, 0x3b, 0x01, 0xb2, 0xa6, 0x89, 0x50, 0x8a, 0x49, 0x33, 0x45, 0xa4, 0x12, 0xe0, 0x04, 0xe0,
		0x04, 0xe0, 0x04, 0xe0, 0x04, 0xe0, 0xc4, 0x86, 0x73, 0x3b, 0xe3, 0xae, 0x38, 0xae, 0x6a, 0x40,
		0x13, 0x94, 0x60, 0xa2, 0x6f, 0xbb, 0x37, 0x8c, 0xbc, 0x2b, 0xb4, 0x86, 0xda, 0x76, 0x3a, 0xbb,
		0x3e, 0xeb, 0xae, 0xf6, 0xbb, 0x6a, 0x89, 0xab, 0x6b, 0x7e, 0x03, 0xda, 0xdf, 0xea, 0xa8, 0x78,
		0xad, 0xb3, 0x4b, 0xb3, 0x29, 0x22, 0x57, 0xab, 0xb6, 0x6a, 0xad, 0x46, 0xb3, 0xda, 0xaa, 0x17,
		0x58, 0xf6, 0x72, 0x5a, 0xb3, 0x72, 0x00, 0x27, 0x72, 0x0f, 0x27, 0xf2, 0xf6, 0x76, 0xe6, 0x72,
		0xf1, 0xa0, 0x8b, 0xa2, 0x7e, 0xfd, 0x00, 0x70, 0x2c, 0xe1, 0x58, 0xc2, 0xb1, 0x84, 0x63, 0x09,
		0xc7, 0x92, 0xfc, 0xdc, 0x82, 0xa7, 0x7e, 0xf1, 0x7b, 0x65, 0x97, 0x38, 0x0b, 0xa2, 0xcf, 0x0f,
		0xa0, 0xaa, 0x93, 0x2d, 0x39, 0x59, 0xee, 0x4e, 0x4c, 0xa6, 0x89, 0x72, 0x78, 0x80, 0x2b, 0x80,
		0x2b, 0x80, 0x2b, 0x80, 0x2b, 0x80, 0x2b, 0x36, 0x9c, 0x5b, 0x3e, 0xb5, 0xec, 0xf1, 0xd8, 0x67,
		0x41, 0xa0, 0x03, 0x5a, 0xb4, 0x08, 0xe7, 0x5c, 0xae, 0x71, 0xee, 0x49, 0xeb, 0xe7, 0x9d, 0xbd,
		0xab, 0x69, 0xd8, 0xdb, 0xd8, 0x1e, 0x7f, 0xd0, 0x30, 0xf7, 0x99, 0x2d, 0x04, 0xf3, 0x5d, 0xf2,
		0xed, 0x8e, 0x1e, 0xe0, 0xed, 0xdb, 0xab, 0xb2, 0xd5, 0x1a, 0x3c, 0x5e, 0x55, 0xac, 0xd6, 0x20,
		0xfc, 0x58, 0x59, 0xfc, 0x11, 0x7e, 0xae, 0x5e, 0x95, 0xad, 0xda, 0xea, 0x73, 0xfd, 0xaa, 0x6c,
		0xd5, 0x07, 0x87, 0x3f, 0x7e, 0xbc, 0x3f, 0xfc, 0x75, 0xfc, 0xb4, 0xff, 0x17, 0xe9, 0x9b, 0x88,
		0x0d, 0x74, 0x6c, 0x69, 0xef, 0xbc, 0xfb, 0x3f, 0xed, 0xfb, 0xfa, 0x27, 0xe5, 0xc6, 0xfe, 0x47,
		0xc3, 0xce, 0xe6, 0xb9, 0x57, 0x96, 0x5e, 0x65, 0xdc, 0x80, 0x32, 0xd6, 0xaa, 0x8c, 0x6d, 0x6b,
		0xd2, 0xb6, 0xbe, 0x0e, 0x7e, 0x55, 0xde, 0xd5, 0x9e, 0x3e, 0x1e, 0xfe, 0x6a, 0x3e, 0xbd, 0xfe,
		0xcb, 0xc7, 0x4d, 0x3f, 0x56, 0x79, 0xd7, 0x7c, 0xfa, 0xb8, 0xe5, 0x5f, 0x1a, 0x4f, 0x1f, 0x77,
		0x1c, 0xa3, 0xfe, 0xf4, 0x36, 0xf6, 0xa3, 0xf3, 0xbf, 0xaf, 0x6e, 0xfb, 0x42, 0x6d, 0xcb, 0x17,
		0x8e, 0xb7, 0x7d, 0xe1, 0x78, 0xcb, 0x17, 0xb6, 0x3e, 0x52, 0x75, 0xcb, 0x17, 0xea, 0x4f, 0x8f,
		0xb1, 0x9f, 0x7f, 0xbb, 0xf9, 0x47, 0x1b, 0x4f, 0x87, 0x8f, 0xdb, 0xfe, 0xad, 0xf9, 0xf4, 0xf8,
		0xf1, 0x10, 0xa6, 0x89, 0xde, 0x34, 0x41, 0xcc, 0xe9, 0xc5, 0x3c, 0xff, 0x86, 0x1a, 0xf7, 0xc3,
		0x26, 0x32, 0xb7, 0xf7, 0xc2, 0xd2, 0x7e, 0x47, 0xbc, 0xe9, 0x21, 0xc0, 0xe7, 0x82, 0xcf, 0x05,
		0x9f, 0x0b, 0x3e, 0x17, 0x7c, 0x2e, 0xf9, 0xb9, 0xc5, 0x3d, 0xf1, 0x8b, 0xdf, 0x2f, 0x6d, 0x13,
		0x67, 0xc1, 0xda, 0x7f, 0xe3, 0xbe, 0x38, 0xe1, 0xd2, 0x73, 0xf7, 0xce, 0x76, 0xf8, 0xd8, 0xf2,
		0x99, 0x1d, 0x10, 0x76, 0xb6, 0x7d, 0xa6, 0x52, 0xd6, 0xe7, 0x07, 0xd6, 0x00, 0xd6, 0x00, 0xd6,
		0x00, 0xd6, 0x00, 0xd6, 0x20, 0x3f, 0xb7, 0x7c, 0xcc, 0x5c, 0xc1, 0xc5, 0x83, 0x26, 0xbc, 0x41,
		0xd9, 0xa7, 0xbe, 0xbb, 0x7c, 0xd5, 0x4f, 0x76, 0xa0, 0x41, 0x65, 0xac, 0x16, 0xbc, 0x7b, 0xfa,
		0xbd, 0x7d, 0xd2, 0xfd, 0x32, 0xec, 0xf7, 0x2e, 0x2f, 0x3a, 0xc3, 0x7e, 0xa7, 0x7d, 0xde, 0x3b,
		0xa5, 0xd6, 0x1e, 0x8b, 0x24, 0x8d, 0x40, 0x0b, 0xcd, 0xa9, 0x29, 0x2b, 0xe6, 0xf5, 0xea, 0x7f,
		0x3e, 0xb9, 0x3c, 0xbf, 0xe8, 0xf4, 0x87, 0x27, 0xbd, 0xde, 0x59, 0xa9, 0x08, 0x49, 0x49, 0xa6,
		0xac, 0x7b, 0xef, 0xf4, 0x6b, 0xe7, 0x0b, 0x56, 0x9c, 0x6e, 0xc5, 0xdb, 0xe7, 0x10, 0x72, 0xe2,
		0x25, 0xef, 0xf5, 0xbb, 0x7f, 0x74, 0x4f, 0xdb, 0x17, 0xbd, 0x7e, 0x29, 0xe7, 0x39, 0x67, 0x83,
		0xbc, 0xe1, 0xbd, 0x5c, 0x78, 0xf7, 0x8e, 0x1d, 0x08, 0xeb, 0xd6, 0x1b, 0xf3, 0x09, 0x67, 0x63,
		0x7a, 0xe7, 0x7e, 0x7d, 0x7a, 0xf8, 0xf6, 0xf0, 0xed, 0xe1, 0xdb, 0xc3, 0xb7, 0x87, 0x6f, 0x4f,
		0x7e, 0x6e, 0x05, 0xbf, 0x65, 0x82, 0x8f, 0xfe, 0x0e, 0x1a, 0x35, 0x0d, 0xbe, 0x3d, 0x61, 0x98,
		0x5a, 0xe9, 0xd2, 0x0d, 0x73, 0xfc, 0x4b, 0xae, 0xed, 0x7a, 0x01, 0x1b, 0x79, 0xee, 0x98, 0x34,
		0x16, 0x1e, 0xd5, 0x54, 0xf2, 0x67, 0xe3, 0x37, 0xb3, 0x26, 0xa8, 0xa6, 0x42, 0x2e, 0x72, 0xa8,
		0xa6, 0x72, 0x50, 0xf9, 0x50, 0xab, 0x35, 0x9a, 0xb5, 0x5a, 0xb9, 0x79, 0xdc, 0x2c, 0xb7, 0xea,
		0xf5, 0x4a, 0xa3, 0x82, 0xba, 0x2a, 0xb9, 0x9b, 0x0d, 0x71, 0x73, 0xbb, 0x8b, 0x21, 0x55, 0x4f,
		0xa4, 0x18, 0xa8, 0xa2, 0xe9, 0x8d, 0x14, 0x4d, 0xfb, 0x85, 0x4d, 0xec, 0x99, 0xb3, 0x80, 0xe2,
		0x65, 0xf8, 0xd2, 0xf0, 0xa5, 0xe1, 0x4b, 0xc3, 0x97, 0x86, 0x2f, 0x8d, 0xa2, 0xa0, 0x70, 0x63,
		0xe1, 0xc6, 0xc2, 0x8d, 0x85, 0x1b, 0x9b, 0x29, 0x91, 0x43, 0x51, 0x50, 0x38, 0xaf, 0x70, 0x5e,
		0x0f, 0x4a, 0xcb, 0xe0, 0x67, 0x6f, 0x26, 0x18, 0xbd, 0x03, 0xfb, 0x72, 0x72, 0x38, 0x94, 0x70,
		0x28, 0xe1, 0x50, 0xc2, 0xa1, 0x84, 0x43, 0x49, 0x7e, 0x6e, 0xaf, 0x3d, 0xcf, 0x61, 0xb6, 0xab,
		0x23, 0xe8, 0xba, 0x92, 0x17, 0x53, 0x9d, 0xe9, 0x06, 0x99, 0x6d, 0xd7, 0xf5, 0x84, 0x3d, 0x47,
		0xa3, 0x34, 0x7d, 0x32, 0x83, 0xd1, 0x4f, 0x76, 0x6b, 0x4f, 0x97, 0x49, 0x77, 0x47, 0xde, 0x94,
		0xb9, 0xa3, 0x85, 0xa1, 0x9c, 0xeb, 0x8f, 0xa3, 0xf9, 0xff, 0x7c, 0x7e, 0x7d, 0x64, 0x4f, 0xb8,
		0x15, 0xd8, 0x13, 0x1e, 0x44, 0x9f, 0x8e, 0x16, 0x45, 0xc8, 0x02, 0x5f, 0x30, 0x6b, 0xea, 0x39,
		0x7c, 0xf4, 0x70, 0xe4, 0x32, 0x7e, 0xf3, 0xf3, 0xda, 0xf3, 0x83, 0xe8, 0xd3, 0x91, 0x3d, 0xfe,
		0x6b, 0xa1, 0x8a, 0xbc, 0x99, 0xb0, 0xa6, 0x5e, 0x20, 0x8e, 0x16, 0xf8, 0x22, 0x08, 0xff, 0x08,
		0xb3, 0xf4, 0xd0, 0x42, 0x3a, 0xbe, 0x27, 0x33, 0xf7, 0x6f, 0xd7, 0xfb, 0xc7, 0xb5, 0x6c, 0x21,
		0x7c, 0x7e, 0x3d, 0x5f, 0x31, 0xba, 0x7e, 0xd2, 0x1b, 0xe6, 0x46, 0x73, 0x69, 0x53, 0x61, 0x1f,
		0x9a, 0x4b, 0xe7, 0x13, 0xd6, 0xa1, 0xb9, 0x74, 0xa2, 0x55, 0x23, 0x6b, 0x2e, 0x1d, 0x53, 0x92,
		0xf4, 0xfe, 0x7a, 0xfc, 0x11, 0x68, 0xbd, 0xf6, 0x0a, 0xbc, 0x76, 0x78, 0xed, 0xf0, 0xda, 0xe1,
		0xb5, 0x9b, 0xe3, 0xb5, 0x53, 0xa9, 0xff, 0x68, 0xc2, 0x45, 0x2b, 0x65, 0x41, 0xcd, 0x15, 0xac,
		0x69, 0x8c, 0xe7, 0x47, 0x20, 0x16, 0x5d, 0x3d, 0x77, 0x47, 0xe4, 0xe6, 0x40, 0xa7, 0x59, 0x30,
		0xc3, 0x3c, 0xe8, 0x36, 0x13, 0xc6, 0x98, 0x0b, 0x63, 0xcc, 0x86, 0x31, 0xe6, 0x83, 0xd6, 0x8c,
		0x10, 0x9b, 0x93, 0x68, 0x95, 0x2f, 0x74, 0x28, 0xf8, 0x03, 0xbd, 0x95, 0xbf, 0x62, 0x68, 0xbf,
		0xa9, 0xa7, 0xba, 0xf4, 0xaa, 0x12, 0x58, 0x58, 0xd0, 0xeb, 0xd9, 0xd8, 0xe5, 0xf4, 0xb6, 0x9c,
		0x50, 0xb4, 0x4b, 0x21, 0xfb, 0xaa, 0x0d, 0xb8, 0x84, 0xd3, 0xeb, 0x01, 0x2d, 0x15, 0x80, 0x16,
		0x80, 0x16, 0x80, 0x16, 0x80, 0x96, 0xfc, 0x82, 0x16, 0x6a, 0x5f, 0x78, 0xdd, 0x27, 0x76, 0x98,
		0xc6, 0x40, 0xda, 0x35, 0xd7, 0x78, 0xfe, 0x24, 0xef, 0x0a, 0x19, 0x5d, 0xa9, 0xcb, 0xe8, 0x98,
		0x60, 0x7c, 0xcc, 0x32, 0x42, 0xa6, 0x18, 0x23, 0xe3, 0x8c, 0x92, 0x71, 0xc6, 0xc9, 0x38, 0x23,
		0xa5, 0xc7, 0x58, 0x69, 0x32, 0x5a, 0xfa, 0x3d, 0xee, 0x98, 0xde, 0x98, 0x71, 0x57, 0x54, 0x1a,
		0x3a, 0x75, 0xc6, 0xd2, 0x8a, 0x34, 0x34, 0x3e, 0x82, 0x9e, 0xfc, 0x9f, 0xd7, 0xbf, 0xf4, 0xea,
		0xcc, 0x03, 0xdd, 0xf9, 0x41, 0x86, 0xc1, 0x8b, 0xd8, 0xe3, 0x68, 0xce, 0x1f, 0x8a, 0x3d, 0x8f,
		0x01, 0x39, 0x1d, 0x86, 0xa8, 0xd3, 0x75, 0x11, 0xb6, 0xef, 0x21, 0xc2, 0xbf, 0x11, 0xe1, 0x46,
		0xbd, 0x7e, 0x5c, 0x87, 0x18, 0x9b, 0x85, 0x45, 0xf4, 0xcf, 0x3e, 0x78, 0x53, 0x8c, 0xf7, 0xd5,
		0x91, 0x06, 0xa9, 0xef, 0x26, 0x7d, 0x33, 0x6d, 0xa0, 0xe1, 0x46, 0x1d, 0xbc, 0x01, 0x78, 0x03,
		0xf0, 0x06, 0xe0, 0x0d, 0xc0, 0x1b, 0xe4, 0x84, 0x37, 0xf8, 0x60, 0x00, 0x6d, 0x50, 0x07, 0x6d,
		0x00, 0xda, 0x00, 0xb4, 0x01, 0x68, 0x03, 0xd0, 0x06, 0xca, 0x45, 0xb8, 0x5a, 0x07, 0x69, 0x00,
		0xd2, 0x00, 0xa4, 0x01, 0x2d, 0x69, 0x70, 0xb7, 0x3c, 0x7d, 0x26, 0xb0, 0x06, 0xe1, 0xb3, 0x80,
		0x36, 0x00, 0x6d, 0x00, 0xda, 0x00, 0xb4, 0x01, 0x68, 0x03, 0xd0, 0x06, 0x7b, 0xea, 0x8d, 0x6b,
		0xee, 0xda, 0xfe, 0x83, 0x01, 0xbc, 0x41, 0x4b, 0xe3, 0x23, 0x9c, 0x30, 0xf7, 0x66, 0x11, 0xf8,
		0x0f, 0xe2, 0x00, 0xc4, 0xc1, 0x6f, 0xbd, 0xae, 0x0a, 0x7c, 0x2e, 0x10, 0x07, 0xd9, 0x16, 0x61,
		0xc4, 0x1b, 0x80, 0x3a, 0x00, 0x75, 0x40, 0x2a, 0xe6, 0xec, 0x5e, 0x30, 0x77, 0x4c, 0xd8, 0x06,
		0x73, 0x2b, 0xe4, 0x8b, 0x9e, 0x04, 0xb4, 0x01, 0x68, 0x03, 0xd0, 0x06, 0xa0, 0x0d, 0x40, 0x1b,
		0x80, 0x36, 0xd8, 0x97, 0x36, 0x20, 0x2f, 0x1a, 0xbb, 0xcd, 0x8c, 0x10, 0x15, 0x91, 0x2d, 0x26,
		0x68, 0xf1, 0xa6, 0x73, 0x64, 0x6e, 0x3b, 0xfa, 0x41, 0x4b, 0xf4, 0x24, 0x00, 0x2d, 0x00, 0x2d,
		0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0xf1, 0x35, 0x9e, 0xda,
		0xbe, 0xe0, 0x26, 0x60, 0x96, 0xd5, 0x83, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2, 0x00,
		0xb2, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2, 0xc4, 0xd7, 0x58, 0xf8, 0xb6, 0x1b, 0x70, 0xc1, 0xef,
		0x0c, 0x88, 0x2b, 0x7d, 0xf1, 0x2c, 0x00, 0x2e, 0x00, 0x2e, 0x00, 0x2e, 0x00, 0x2e, 0x00, 0x2e,
		0x00, 0x2e, 0x00, 0x2e, 0xc6, 0x03, 0x97, 0x5c, 0x97, 0x17, 0x25, 0xee, 0x52, 0x18, 0x9b, 0x5f,
		0x63, 0xd7, 0xc2, 0x78, 0x83, 0xbc, 0xf8, 0x5f, 0x51, 0xb4, 0x36, 0xd4, 0x27, 0x70, 0xf9, 0xea,
		0x1a, 0xf3, 0x5f, 0xf6, 0xa0, 0xa3, 0xec, 0x4b, 0xe9, 0x84, 0x07, 0xa2, 0x2d, 0x04, 0x71, 0xcb,
		0x9a, 0x6f, 0xdc, 0xed, 0x38, 0x6c, 0x8e, 0x09, 0x02, 0x5a, 0x4c, 0x5d, 0xfa, 0x66, 0xdf, 0xbf,
		0x98, 0xb9, 0xf2, 0xa1, 0x56, 0x6b, 0x34, 0x6b, 0xb5, 0x72, 0xf3, 0xb8, 0x59, 0x6e, 0xd5, 0xeb,
		0x95, 0x46, 0x85, 0x30, 0x04, 0xb6, 0xd4, 0xf3, 0xc7, 0xcc, 0x67, 0xe3, 0x4f, 0xf3, 0xad, 0x77,
		0x67, 0x8e, 0x93, 0x2b, 0x89, 0xd6, 0xa4, 0x9c, 0x4d, 0x57, 0xca, 0x25, 0xd2, 0xe6, 0x0a, 0xfe,
		0x6c, 0x24, 0xdc, 0x25, 0xfc, 0xfa, 0x74, 0x33, 0x1d, 0xf6, 0xf9, 0xf5, 0xb0, 0x3d, 0xe1, 0xe7,
		0xf6, 0x84, 0x0f, 0xbb, 0xd3, 0xbb, 0xda, 0xb9, 0x2f, 0xd8, 0xd9, 0xe2, 0x6d, 0x87, 0xa7, 0xcb,
		0x77, 0x1c, 0xb6, 0xc7, 0x7f, 0xf5, 0xf9, 0x75, 0x6f, 0x26, 0xce, 0xbc, 0x40, 0x0c, 0xfb, 0xf3,
		0x37, 0x1b, 0x5e, 0x86, 0xaf, 0xd1, 0x8e, 0xde, 0x02, 0x5d, 0x9a, 0xf5, 0x1f, 0xb5, 0x22, 0x75,
		0x69, 0xde, 0xd0, 0x10, 0x38, 0xab, 0x2d, 0x9b, 0xdf, 0x64, 0x48, 0xd4, 0x56, 0xb8, 0x64, 0xbe,
		0xe7, 0x16, 0x1f, 0x1f, 0x30, 0x77, 0x3c, 0xf5, 0xb8, 0x2b, 0x0e, 0x46, 0x9e, 0xe3, 0xf9, 0x8a,
		0x74, 0x19, 0x0d, 0x28, 0xa1, 0x03, 0x21, 0x5a, 0x41, 0x07, 0x0d, 0xc8, 0x50, 0x25, 0x7e, 0x44,
		0x1a, 0x4e, 0xa3, 0x66, 0x53, 0x88, 0x07, 0xe4, 0xd9, 0x7f, 0x35, 0xba, 0x56, 0xbe, 0x26, 0x94,
		0x3b, 0xa2, 0x64, 0xa1, 0x56, 0x2d, 0xcc, 0x5a, 0x84, 0x58, 0xae, 0x64, 0xc8, 0xdb, 0x3f, 0x39,
		0x23, 0x49, 0x92, 0x00, 0x55, 0x3b, 0x4f, 0xbb, 0xe3, 0x12, 0x35, 0x95, 0x0c, 0xcd, 0x24, 0x47,
		0xf2, 0xd2, 0xcb, 0x89, 0x04, 0x19, 0x29, 0xad, 0x2d, 0xb5, 0x2f, 0x8f, 0xae, 0x7f, 0x2e, 0x0c,
		0xf4, 0x6a, 0x02, 0x49, 0x72, 0x2d, 0xb7, 0x93, 0x9d, 0xf4, 0x5b, 0x56, 0x15, 0xb7, 0xa6, 0x6a,
		0x6f, 0x41, 0x55, 0xdd, 0x6a, 0x2a, 0xbf, 0xa5, 0x54, 0x7e, 0xeb, 0xa8, 0xfc, 0x16, 0xd1, 0x2c,
		0x8b, 0x21, 0xbb, 0x73, 0x5a, 0x69, 0x69, 0xae, 0xa5, 0x0b, 0xd6, 0xea, 0x38, 0x2c, 0xc7, 0x97,
		0xbc, 0xe9, 0x6a, 0x5a, 0x65, 0x2a, 0x0b, 0xe7, 0x50, 0x19, 0xa6, 0x41, 0x13, 0x7e, 0xa1, 0x3a,
		0xac, 0x82, 0x2c, 0x5c, 0x82, 0x2c, 0x0c, 0x82, 0x2c, 0xbc, 0xc1, 0x6c, 0xe7, 0x46, 0x55, 0xab,
		0xc7, 0x50, 0xb1, 0xa8, 0x93, 0xc7, 0x35, 0xfd, 0xa5, 0x4a, 0x16, 0xd5, 0x76, 0xfc, 0x55, 0x1e,
		0x9d, 0x46, 0x11, 0x7d, 0x46, 0x1b, 0x5d, 0x46, 0x15, 0x3d, 0x46, 0x1e, 0x1d, 0x46, 0x1e, 0xfd,
		0x45, 0x1e, 0xdd, 0x95, 0x2d, 0xfe, 0x5c, 0x75, 0x07, 0xdc, 0x52, 0x48, 0xc4, 0x2b, 0x97, 0xe3,
		0xd5, 0xe9, 0x54, 0xc9, 0xfb, 0xbf, 0x56, 0x97, 0x8a, 0xe3, 0x02, 0xc8, 0x82, 0x7a, 0x29, 0x83,
		0x77, 0xf5, 0x04, 0xe9, 0x52, 0x07, 0xe3, 0x6a, 0x0b, 0xba, 0xd5, 0x16, 0x5c, 0xab, 0x2d, 0x88,
		0x36, 0xdb, 0x37, 0xe4, 0x64, 0xc1, 0xaf, 0xd1, 0xb9, 0x73, 0x98, 0x3d, 0xf1, 0xd9, 0x84, 0xe2,
		0xd0, 0xad, 0x50, 0x65, 0x93, 0x60, 0xae, 0xb3, 0x25, 0xc7, 0xfc, 0xfe, 0x7d, 0x18, 0x55, 0x78,
		0x14, 0x1a, 0x82, 0xac, 0xde, 0xc1, 0x2b, 0x44, 0x96, 0xab, 0x2b, 0x72, 0x3a, 0x9b, 0x1c, 0xcd,
		0x08, 0xb3, 0x0c, 0xb3, 0x0c, 0xb3, 0x0c, 0xb3, 0x0c, 0xb3, 0x5c, 0x58, 0xb3, 0x1c, 0xd9, 0x02,
		0x58, 0xe6, 0xd8, 0x62, 0x2d, 0x83, 0xd8, 0xe8, 0x0c, 0xf3, 0x6a, 0x42, 0xd8, 0x65, 0xd8, 0x65,
		0xd8, 0x65, 0xd8, 0x65, 0xd8, 0xe5, 0xc2, 0xda, 0xe5, 0x95, 0x29, 0x80, 0x59, 0x8e, 0xad, 0x55,
		0x98, 0xa5, 0x48, 0x66, 0x94, 0xc3, 0xe9, 0x68, 0x4c, 0x72, 0x05, 0x26, 0x19, 0x26, 0x19, 0x26,
		0x19, 0x26, 0x39, 0xf9, 0xaa, 0xa9, 0xbe, 0x40, 0x8c, 0x26, 0x5a, 0xa4, 0x1e, 0x73, 0x77, 0xcc,
		0xe8, 0xaa, 0xcc, 0xac, 0xf7, 0xad, 0x0c, 0xe7, 0xa6, 0xca, 0xb7, 0x26, 0xad, 0x27, 0x44, 0x5e,
		0x3f, 0x48, 0x47, 0xbd, 0x20, 0xbd, 0xf5, 0x81, 0x74, 0xd5, 0x03, 0xd2, 0x5e, 0xff, 0x47, 0x7b,
		0xbd, 0x1f, 0xed, 0xf5, 0x7d, 0xf2, 0x55, 0x09, 0x82, 0xbc, 0x5e, 0x8f, 0x06, 0x5f, 0x4c, 0x87,
		0x4f, 0xb6, 0xc9, 0x37, 0xfb, 0x97, 0xdf, 0x0b, 0x93, 0x14, 0x30, 0x11, 0x44, 0x9f, 0x96, 0x9e,
		0x5c, 0x68, 0xa6, 0xf2, 0x92, 0xff, 0x4e, 0x80, 0xac, 0x69, 0x22, 0x94, 0x62, 0xd2, 0x4c, 0x11,
		0xa9, 0x04, 0x38, 0x01, 0x38, 0x01, 0x38, 0x01, 0x38, 0x01, 0x38, 0xb1, 0xe1, 0xdc, 0xce, 0xb8,
		0x2b, 0x8e, 0xab, 0x1a, 0xd0, 0x04, 0x25, 0x98, 0xe8, 0xdb, 0xee, 0x0d, 0x23, 0xef, 0x12, 0xad,
		0xa1, 0xd6, 0x9d, 0xce, 0x2e, 0xd0, 0xba, 0xab, 0xff, 0xae, 0x5a, 0xe4, 0xea, 0x9a, 0xdf, 0x80,
		0x76, 0xb8, 0x3a, 0x2a, 0x60, 0xeb, 0xec, 0xda, 0x6c, 0x8a, 0xc8, 0xd5, 0xaa, 0xad, 0x5a, 0xab,
		0xd1, 0xac, 0xb6, 0xea, 0x05, 0x96, 0xbd, 0x9c, 0x56, 0xb0, 0x1c, 0xc0, 0x89, 0xdc, 0xc3, 0x89,
		0xbc, 0xbd, 0x9d, 0xb9, 0x5c, 0x3c, 0xe8, 0xa2, 0xa8, 0x5f, 0x3f, 0x00, 0x1c, 0x4b, 0x38, 0x96,
		0x70, 0x2c, 0xe1, 0x58, 0xc2, 0xb1, 0x24, 0x3f, 0xb7, 0xe0, 0xa9, 0x5f, 0xfc, 0x5e, 0xd9, 0x25,
		0xce, 0x82, 0xe8, 0xf3, 0x03, 0xa8, 0xea, 0x64, 0x4b, 0x4e, 0x96, 0xbb, 0x13, 0x93, 0x69, 0xa2,
		0x1c, 0x1e, 0xe0, 0x0a, 0xe0, 0x0a, 0xe0, 0x0a, 0xe0, 0x0a, 0xe0, 0x8a, 0x0d, 0xe7, 0x96, 0x4f,
		0x2d, 0x7b, 0x3c, 0xf6, 0x59, 0x10, 0xe8, 0x80, 0x16, 0x2d, 0xc2, 0x39, 0x97, 0x6b, 0x9c, 0x7b,
		0xd2, 0xfa, 0x79, 0x67, 0xef, 0x6a, 0x1a, 0xf6, 0x36, 0xb6, 0xc7, 0x1f, 0x34, 0xcc, 0x7d, 0x66,
		0x0b, 0xc1, 0x7c, 0x97, 0x7c, 0xbb, 0xa3, 0x07, 0x78, 0xfb, 0xf6, 0xaa, 0x6c, 0xb5, 0x06, 0x8f,
		0x57, 0x15, 0xab, 0x35, 0x08, 0x3f, 0x56, 0x16, 0x7f, 0x84, 0x9f, 0xab, 0x57, 0x65, 0xab, 0xb6,
		0xfa, 0x5c, 0xbf, 0x2a, 0x5b, 0xf5, 0xc1, 0xe1, 0x8f, 0x1f, 0xef, 0x0f, 0x7f, 0x1d, 0x3f, 0xed,
		0xff, 0x45, 0xfa, 0xa6, 0x62, 0x03, 0x1d, 0x5b, 0xda, 0x3b, 0xef, 0xfe, 0x4f, 0xfb, 0xbe, 0xfe,
		0x49, 0xb9, 0xb1, 0xff, 0xd1, 0xb0, 0xb3, 0x79, 0xee, 0x9d, 0xa5, 0x57, 0x19, 0x37, 0xa0, 0x8c,
		0xb5, 0x2a, 0x63, 0xdb, 0x9a, 0xb4, 0xad, 0xaf, 0x83, 0x5f, 0x95, 0x77, 0xb5, 0xa7, 0x8f, 0x87,
		0xbf, 0x9a, 0x4f, 0xaf, 0xff, 0xf2, 0x71, 0xd3, 0x8f, 0x55, 0xde, 0x35, 0x9f, 0x3e, 0x6e, 0xf9,
		0x97, 0xc6, 0xd3, 0xc7, 0x1d, 0xc7, 0xa8, 0x3f, 0xbd, 0x8d, 0xfd, 0xe8, 0xfc, 0xef, 0xab, 0xdb,
		0xbe, 0x50, 0xdb, 0xf2, 0x85, 0xe3, 0x6d, 0x5f, 0x38, 0xde, 0xf2, 0x85, 0xad, 0x8f, 0x54, 0xdd,
		0xf2, 0x85, 0xfa, 0xd3, 0x63, 0xec, 0xe7, 0xdf, 0x6e, 0xfe, 0xd1, 0xc6, 0xd3, 0xe1, 0xe3, 0xb6,
		0x7f, 0x6b, 0x3e, 0x3d, 0x7e, 0x3c, 0x84, 0x69, 0xa2, 0x37, 0x4d, 0x10, 0x73, 0x7a, 0x31, 0xcf,
		0xbf, 0xa1, 0xc6, 0xfd, 0xb0, 0x89, 0xcc, 0xed, 0xbd, 0xb0, 0xb4, 0xdf, 0x11, 0x6f, 0x7a, 0x08,
		0xf0, 0xb9, 0xe0, 0x73, 0xc1, 0xe7, 0x82, 0xcf, 0x05, 0x9f, 0x4b, 0x7e, 0x6e, 0x71, 0x4f, 0xfc,
		0xe2, 0xf7, 0x4b, 0xdb, 0xc4, 0x59, 0xb0, 0xf6, 0xdf, 0xb8, 0x2f, 0x4e, 0xb8, 0xf4, 0xdc, 0xbd,
		0xb3, 0x1d, 0x3e, 0xb6, 0x7c, 0x66, 0x07, 0x84, 0x7d, 0x6e, 0x9f, 0xa9, 0x94, 0xf5, 0xf9, 0x81,
		0x35, 0x80, 0x35, 0x80, 0x35, 0x80, 0x35, 0x80, 0x35, 0xc8, 0xcf, 0x2d, 0x1f, 0x33, 0x57, 0x70,
		0xf1, 0xa0, 0x09, 0x6f, 0x50, 0x76, 0xad, 0xef, 0x2e, 0x5f, 0xf5, 0x93, 0x1d, 0x68, 0x50, 0x19,
		0xab, 0x05, 0xef, 0x9e, 0x7e, 0x6f, 0x9f, 0x74, 0xbf, 0x0c, 0xfb, 0xbd, 0xcb, 0x8b, 0xce, 0xb0,
		0xdf, 0x69, 0x9f, 0xf7, 0x4e, 0xa9, 0xb5, 0xc7, 0x22, 0x49, 0x23, 0xd0, 0x42, 0x73, 0x6a, 0xca,
		0x8a, 0x79, 0xbd, 0xfa, 0x9f, 0x4f, 0x2e, 0xcf, 0x2f, 0x3a, 0xfd, 0xe1, 0x49, 0xaf, 0x77, 0x56,
		0x2a, 0x42, 0x52, 0x92, 0x29, 0xeb, 0xde, 0x3b, 0xfd, 0xda, 0xf9, 0x82, 0x15, 0xa7, 0x5b, 0xf1,
		0xf6, 0x39, 0x84, 0x9c, 0x78, 0xc9, 0x7b, 0xfd, 0xee, 0x1f, 0xdd, 0xd3, 0xf6, 0x45, 0xaf, 0x5f,
		0xca, 0x79, 0xce, 0xd9, 0x20, 0x6f, 0x78, 0x2f, 0x17, 0xde, 0xbd, 0x63, 0x07, 0xc2, 0xba, 0xf5,
		0xc6, 0x7c, 0xc2, 0xd9, 0x98, 0xde, 0xb9, 0x5f, 0x9f, 0x1e, 0xbe, 0x3d, 0x7c, 0x7b, 0xf8, 0xf6,
		0xf0, 0xed, 0xe1, 0xdb, 0x93, 0x9f, 0x5b, 0xc1, 0x6f, 0x99, 0xe0, 0xa3, 0xbf, 0x83, 0x46, 0x4d,
		0x83, 0x6f, 0x4f, 0x18, 0xa6, 0x56, 0xba, 0x74, 0xc3, 0x1c, 0xff, 0x92, 0x6b, 0xbb, 0x5e, 0xc0,
		0x46, 0x9e, 0x3b, 0x26, 0x8d, 0x85, 0x47, 0x35, 0x95, 0xfc, 0xd9, 0xf8, 0xcd, 0xac, 0x09, 0xaa,
		0xa9, 0x90, 0x8b, 0x1c, 0xaa, 0xa9, 0x1c, 0x54, 0x3e, 0xd4, 0x6a, 0x8d, 0x66, 0xad, 0x56, 0x6e,
		0x1e, 0x37, 0xcb, 0xad, 0x7a, 0xbd, 0xd2, 0xa8, 0xa0, 0xae, 0x4a, 0xee, 0x66, 0x43, 0xdc, 0xdc,
		0xee, 0x62, 0x48, 0xd5, 0x13, 0x29, 0x06, 0xaa, 0x68, 0x7a, 0x23, 0x45, 0xd3, 0x7e, 0x61, 0x13,
		0x7b, 0xe6, 0x2c, 0xa0, 0x78, 0x19, 0xbe, 0x34, 0x7c, 0x69, 0xf8, 0xd2, 0xf0, 0xa5, 0xe1, 0x4b,
		0xa3, 0x28, 0x28, 0xdc, 0x58, 0xb8, 0xb1, 0x70, 0x63, 0xe1, 0xc6, 0x66, 0x4a, 0xe4, 0x50, 0x14,
		0x14, 0xce, 0x2b, 0x9c, 0xd7, 0x83, 0xd2, 0x32, 0xf8, 0xd9, 0x9b, 0x09, 0x46, 0xef, 0xc0, 0xbe,
		0x9c, 0x1c, 0x0e, 0x25, 0x1c, 0x4a, 0x38, 0x94, 0x70, 0x28, 0xe1, 0x50, 0x92, 0x9f, 0xdb, 0x6b,
		0xcf, 0x73, 0x98, 0xed, 0xea, 0x08, 0xba, 0xae, 0xe4, 0xc5, 0x54, 0x67, 0xba, 0x41, 0x66, 0xdb,
		0x75, 0x3d, 0x61, 0xcf, 0xd1, 0x28, 0x4d, 0x9f, 0xcc, 0x60, 0xf4, 0x93, 0xdd, 0xda, 0xd3, 0x65,
		0xd2, 0xdd, 0x91, 0x37, 0x65, 0xee, 0x68, 0x61, 0x28, 0xe7, 0xfa, 0xe3, 0x68, 0xfe, 0x3f, 0x9f,
		0x5f, 0x1f, 0xd9, 0x13, 0x6e, 0x05, 0xf6, 0x84, 0x07, 0xd1, 0xa7, 0xa3, 0x45, 0x11, 0xb2, 0xc0,
		0x17, 0xcc, 0x9a, 0x7a, 0x0e, 0x1f, 0x3d, 0x1c, 0xb9, 0x8c, 0xdf, 0xfc, 0xbc, 0xf6, 0xfc, 0x20,
		0xfa, 0x74, 0x64, 0x8f, 0xff, 0x5a, 0xa8, 0x22, 0x6f, 0x26, 0xac, 0xa9, 0xcf, 0x8e, 0x16, 0xf0,
		0x22, 0x08, 0xff, 0x08, 0x93, 0xf4, 0xd0, 0x41, 0x3a, 0xbe, 0x25, 0x33, 0xf7, 0x6f, 0xd7, 0xfb,
		0xc7, 0xb5, 0x6c, 0x21, 0x7c, 0x7e, 0x3d, 0x5f, 0x31, 0xba, 0x76, 0xd2, 0x1b, 0xe6, 0x46, 0x6f,
		0x69, 0x53, 0x51, 0x1f, 0x7a, 0x4b, 0xe7, 0x13, 0xd5, 0xa1, 0xb7, 0x74, 0xa2, 0x55, 0x23, 0xeb,
		0x2d, 0x1d, 0x53, 0x92, 0xf4, 0xee, 0x7a, 0xfc, 0x11, 0x68, 0x9d, 0xf6, 0x0a, 0x9c, 0x76, 0x38,
		0xed, 0x70, 0xda, 0xe1, 0xb4, 0x9b, 0xe3, 0xb4, 0x53, 0xa9, 0xff, 0x68, 0xc2, 0x45, 0x27, 0x65,
		0x41, 0x4d, 0x15, 0xac, 0x69, 0x8c, 0xe7, 0x47, 0x20, 0x16, 0x5d, 0x3d, 0x57, 0x47, 0xe4, 0xe6,
		0x40, 0xa7, 0x59, 0x30, 0xc3, 0x3c, 0xe8, 0x36, 0x13, 0xc6, 0x98, 0x0b, 0x63, 0xcc, 0x86, 0x31,
		0xe6, 0x83, 0xd6, 0x8c, 0x10, 0x9b, 0x93, 0x68, 0x95, 0x2f, 0x74, 0x28, 0xf8, 0x03, 0xbd, 0x85,
		0xbf, 0x62, 0x68, 0xbf, 0xa9, 0xa7, 0xb8, 0xf4, 0xaa, 0x10, 0x58, 0x58, 0xcf, 0xeb, 0xd9, 0xd8,
		0xe5, 0xf4, 0xb2, 0x9c, 0x50, 0xb4, 0x4b, 0x21, 0xfb, 0xaa, 0x0d, 0xb8, 0x84, 0xd3, 0xeb, 0x01,
		0x2d, 0x15, 0x80, 0x16, 0x80, 0x16, 0x80, 0x16, 0x80, 0x96, 0xfc, 0x82, 0x16, 0x6a, 0x5f, 0x78,
		0xdd, 0x27, 0x76, 0x98, 0xc6, 0x38, 0xda, 0x35, 0xd7, 0x78, 0xfe, 0x24, 0xef, 0x0a, 0x19, 0x5c,
		0xa9, 0xcb, 0xe8, 0x98, 0x60, 0x7c, 0xcc, 0x32, 0x42, 0xa6, 0x18, 0x23, 0xe3, 0x8c, 0x92, 0x71,
		0xc6, 0xc9, 0x38, 0x23, 0xa5, 0xc7, 0x58, 0x69, 0x32, 0x5a, 0xfa, 0x3d, 0xee, 0x98, 0xde, 0x98,
		0x71, 0x57, 0x54, 0x1a, 0x3a, 0x75, 0xc6, 0xd2, 0x8a, 0x34, 0x34, 0x3e, 0x82, 0x9e, 0xf4, 0x9f,
		0xd7, 0xbf, 0xf4, 0xea, 0xcc, 0x03, 0xdd, 0xe9, 0x41, 0x86, 0xc1, 0x8b, 0xd8, 0xe3, 0x68, 0x4e,
		0x1f, 0x8a, 0x3d, 0x8f, 0x01, 0x29, 0x1d, 0x86, 0xa8, 0xd3, 0x75, 0x11, 0xb6, 0xef, 0x21, 0xc2,
		0xbf, 0x11, 0xe1, 0x46, 0xbd, 0x7e, 0x5c, 0x87, 0x18, 0x9b, 0x85, 0x45, 0xf4, 0xcf, 0x3e, 0x78,
		0x53, 0x8c, 0xf7, 0xd5, 0x91, 0x05, 0xa9, 0xef, 0x26, 0x7d, 0x33, 0x6d, 0xa0, 0xe1, 0x46, 0x1d,
		0xbc, 0x01, 0x78, 0x03, 0xf0, 0x06, 0xe0, 0x0d, 0xc0, 0x1b, 0xe4, 0x84, 0x37, 0xf8, 0x60, 0x00,
		0x6d, 0x50, 0x07, 0x6d, 0x00, 0xda, 0x00, 0xb4, 0x01, 0x68, 0x03, 0xd0, 0x06, 0xca, 0x45, 0xb8,
		0x5a, 0x07, 0x69, 0x00, 0xd2, 0x00, 0xa4, 0x01, 0x2d, 0x69, 0x70, 0xb7, 0x3c, 0x7d, 0x26, 0xb0,
		0x06, 0xe1, 0xb3, 0x80, 0x36, 0x00, 0x6d, 0x00, 0xda, 0x00, 0xb4, 0x01, 0x68, 0x03, 0xd0, 0x06,
		0x7b, 0xea, 0x8d, 0x6b, 0xee, 0xda, 0xfe, 0x83, 0x01, 0xbc, 0x41, 0x4b, 0xe3, 0x23, 0x9c, 0x30,
		0xf7, 0x66, 0x11, 0xf8, 0x0f, 0xe2, 0x00, 0xc4, 0xc1, 0x6f, 0xbd, 0xae, 0x0a, 0x7c, 0x2e, 0x10,
		0x07, 0xd9, 0x16, 0x61, 0xc4, 0x1b, 0x80, 0x3a, 0x00, 0x75, 0x40, 0x2a, 0xe6, 0xec, 0x5e, 0x30,
		0x77, 0x4c, 0xd8, 0x05, 0x73, 0x2b, 0xe4, 0x8b, 0x9e, 0x04, 0xb4, 0x01, 0x68, 0x03, 0xd0, 0x06,
		0xa0, 0x0d, 0x40, 0x1b, 0x80, 0x36, 0xd8, 0x97, 0x36, 0x20, 0xaf, 0x19, 0xbb, 0xcd, 0x8c, 0x10,
		0xd5, 0x90, 0x2d, 0x26, 0x68, 0xf1, 0xa6, 0x73, 0x64, 0x6e, 0x3b, 0xfa, 0x41, 0x4b, 0xf4, 0x24,
		0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d,
		0xf1, 0x35, 0x9e, 0xda, 0xbe, 0xe0, 0x26, 0x60, 0x96, 0xd5, 0x83, 0x00, 0xb2, 0x00, 0xb2, 0x00,
		0xb2, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2, 0xc4, 0xd7, 0x58, 0xf8, 0xb6,
		0x1b, 0x70, 0xc1, 0xef, 0x0c, 0x88, 0x2b, 0x7d, 0xf1, 0x2c, 0x00, 0x2e, 0x00, 0x2e, 0x00, 0x2e,
		0x00, 0x2e, 0x00, 0x2e, 0x00, 0x2e, 0x00, 0x2e, 0xc6, 0x03, 0x97, 0x5c, 0x97, 0x17, 0x25, 0x6e,
		0x52, 0x18, 0x9b, 0x5f, 0x5f, 0xd3, 0xc2, 0x78, 0x7f, 0xbc, 0xf8, 0x5f, 0x51, 0x74, 0x36, 0xd4,
		0x27, 0x6f, 0xf9, 0x6a, 0x1a, 0xf3, 0x5f, 0xf6, 0xa0, 0xa3, 0xea, 0x4b, 0xe9, 0x84, 0x07, 0xa2,
		0x2d, 0x04, 0x71, 0xc7, 0x9a, 0x6f, 0xdc, 0xed, 0x38, 0x6c, 0x0e, 0x09, 0x02, 0x5a, 0x48, 0x5d,
		0xfa, 0x66, 0xdf, 0xbf, 0x98, 0xb9, 0xf2, 0xa1, 0x56, 0x6b, 0x34, 0x6b, 0xb5, 0x72, 0xf3, 0xb8,
		0x59, 0x6e, 0xd5, 0xeb, 0x95, 0x46, 0x85, 0x30, 0x02, 0xb6, 0xd4, 0xf3, 0xc7, 0xcc, 0x67, 0xe3,
		0x4f, 0xf3, 0xad, 0x77, 0x67, 0x8e, 0x93, 0x2b, 0x89, 0xd6, 0xa4, 0x9b, 0x0d, 0xd7, 0xc9, 0x25,
		0xd2, 0xd6, 0x0a, 0xfe, 0x6c, 0x24, 0xdc, 0x25, 0xf8, 0xfa, 0x74, 0x33, 0x1d, 0xf6, 0xf9, 0xf5,
		0xb0, 0x3d, 0xe1, 0xe7, 0xf6, 0x84, 0x0f, 0xbb, 0xd3, 0xbb, 0xda, 0xb9, 0x2f, 0xd8, 0xd9, 0xe2,
		0x65, 0x87, 0xa7, 0xcb, 0x57, 0x1c, 0xb6, 0xc7, 0x7f, 0xf5, 0xf9, 0x75, 0x6f, 0x26, 0xce, 0x7c,
		0x36, 0xec, 0xcf, 0x5f, 0x6c, 0x78, 0x19, 0xbe, 0x45, 0x3b, 0x7a, 0x09, 0x74, 0x68, 0xd6, 0x7f,
		0xd0, 0x0a, 0xd4, 0xa1, 0x79, 0x43, 0x33, 0xe0, 0xac, 0xb6, 0x6b, 0x7e, 0x93, 0x21, 0x49, 0x5b,
		0x81, 0x92, 0xf9, 0x96, 0x5b, 0x7c, 0x7c, 0xc0, 0xdc, 0xf1, 0xd4, 0xe3, 0xae, 0x38, 0x18, 0x79,
		0x8e, 0xe7, 0x2b, 0xd2, 0x64, 0x34, 0x88, 0x84, 0x0e, 0x81, 0x68, 0x45, 0x1c, 0x34, 0x08, 0x43,
		0x95, 0xf8, 0x11, 0x29, 0x38, 0x7d, 0x8a, 0x4d, 0x21, 0x18, 0x90, 0x66, 0xfc, 0xd5, 0x68, 0x5a,
		0xf9, 0x7a, 0x50, 0xee, 0x88, 0x92, 0x45, 0x5a, 0xb5, 0x28, 0xeb, 0x10, 0x61, 0xb9, 0x82, 0x21,
		0x6f, 0xfb, 0xe4, 0x8c, 0x24, 0x49, 0x00, 0x54, 0x6d, 0x3c, 0xe9, 0x86, 0x4b, 0x54, 0x53, 0x12,
		0xd4, 0x92, 0x1c, 0xb9, 0x4b, 0x2f, 0x25, 0x12, 0x24, 0xa4, 0xb4, 0x5a, 0x71, 0xcb, 0x1e, 0x8f,
		0x7d, 0x16, 0x04, 0xd2, 0x64, 0x24, 0xa2, 0xdc, 0x63, 0x33, 0x48, 0x92, 0x6b, 0xb9, 0xd7, 0xb1,
		0xd2, 0xaf, 0x57, 0x55, 0x5c, 0x97, 0xaa, 0xbd, 0xfe, 0x54, 0x75, 0x9d, 0xa9, 0xfc, 0x7a, 0x52,
		0xf9, 0x75, 0xa3, 0xf2, 0xeb, 0x43, 0xb3, 0x2c, 0x86, 0xf4, 0xeb, 0x3a, 0x85, 0xfd, 0x5b, 0x55,
		0xf4, 0x65, 0x8d, 0xf7, 0x5b, 0x8d, 0xe9, 0xb0, 0x1c, 0x59, 0x00, 0xb9, 0xed, 0x4f, 0x95, 0xb4,
		0x35, 0x95, 0xdc, 0xae, 0x14, 0xba, 0x1e, 0xba, 0x1e, 0xba, 0x3e, 0x7c, 0x5b, 0xd9, 0xed, 0x31,
		0xd5, 0x01, 0x4a, 0x2a, 0x60, 0xa9, 0x08, 0x60, 0x2a, 0x53, 0x3e, 0x2a, 0x95, 0x10, 0x8d, 0x32,
		0x52, 0xad, 0x94, 0xc8, 0x94, 0x13, 0x99, 0x92, 0x22, 0x53, 0x56, 0xd9, 0xe0, 0xb6, 0x94, 0xc5,
		0x97, 0x45, 0x72, 0xcf, 0xa7, 0x8a, 0xb4, 0xcc, 0x1a, 0xbc, 0x51, 0x50, 0x6c, 0x70, 0xb5, 0x36,
		0x6a, 0x4a, 0x08, 0x2a, 0xa4, 0xc4, 0x9f, 0x57, 0xfe, 0xae, 0xa6, 0x70, 0xed, 0x63, 0x7b, 0xf0,
		0x41, 0xe1, 0x1c, 0x67, 0xb6, 0x10, 0xcc, 0x77, 0x95, 0x57, 0x74, 0x2c, 0xbd, 0x7d, 0x7b, 0x55,
		0xb6, 0x5a, 0x83, 0xc7, 0xab, 0x8a, 0xd5, 0x1a, 0x84, 0x1f, 0x2b, 0x8b, 0x3f, 0xc2, 0xcf, 0xd5,
		0xab, 0xb2, 0x55, 0x5b, 0x7d, 0xae, 0x5f, 0x95, 0xad, 0xfa, 0xe0, 0xf0, 0xc7, 0x8f, 0xf7, 0x87,
		0xbf, 0x8e, 0x9f, 0xf6, 0xff, 0xa2, 0xba, 0x8b, 0xd0, 0x81, 0xca, 0xad, 0xe8, 0x9d, 0x77, 0xff,
		0x47, 0xb6, 0x1f, 0x7f, 0x52, 0x6e, 0xc8, 0x7f, 0x14, 0xee, 0x48, 0x96, 0x6e, 0xef, 0x68, 0x94,
		0x53, 0x03, 0xca, 0x29, 0x91, 0x72, 0xb2, 0xad, 0x49, 0xdb, 0xfa, 0x3a, 0xf8, 0x55, 0x79, 0x57,
		0x7b, 0xfa, 0x78, 0xf8, 0xab, 0xf9, 0xf4, 0xfa, 0x2f, 0x1f, 0x37, 0xfd, 0x58, 0xe5, 0x5d, 0xf3,
		0xe9, 0xe3, 0x96, 0x7f, 0x69, 0x3c, 0x7d, 0xdc, 0x71, 0x8c, 0xfa, 0xd3, 0xdb, 0xd8, 0x8f, 0xce,
		0xff, 0xbe, 0xba, 0xed, 0x0b, 0xb5, 0x2d, 0x5f, 0x38, 0xde, 0xf6, 0x85, 0xe3, 0x2d, 0x5f, 0xd8,
		0xfa, 0x48, 0xd5, 0x2d, 0x5f, 0xa8, 0x3f, 0x3d, 0xc6, 0x7e, 0xfe, 0xed, 0xe6, 0x1f, 0x6d, 0x3c,
		0x1d, 0x3e, 0x6e, 0xfb, 0xb7, 0xe6, 0xd3, 0xe3, 0xc7, 0x43, 0xa8, 0xea, 0xdd, 0x55, 0x35, 0xc4,
		0x93, 0x5e, 0x3c, 0xb3, 0x67, 0xb8, 0xde, 0x98, 0xfd, 0x9c, 0xb8, 0xd2, 0xde, 0x6f, 0x5c, 0xa5,
		0x57, 0xda, 0x12, 0x53, 0x21, 0x24, 0x5c, 0x1c, 0xbc, 0xd1, 0xb8, 0x8f, 0xab, 0xa8, 0x3e, 0xc9,
		0x04, 0x9e, 0xdc, 0xb8, 0x3d, 0xf9, 0xf1, 0x79, 0x24, 0x71, 0x78, 0x72, 0xe3, 0xed, 0xd2, 0x6e,
		0xb4, 0xe4, 0x83, 0xaa, 0xf4, 0x80, 0x96, 0xa4, 0xdc, 0xa5, 0x25, 0x88, 0x2d, 0x49, 0xa7, 0x13,
		0x92, 0x9f, 0xe4, 0x64, 0xdf, 0x4c, 0x28, 0x12, 0xb2, 0x44, 0x41, 0x85, 0x08, 0x24, 0xdb, 0x80,
		0xfd, 0x97, 0x6f, 0xbf, 0x6f, 0xec, 0xb9, 0xd0, 0x69, 0x17, 0x58, 0xde, 0xc2, 0x26, 0x38, 0x48,
		0x7b, 0x1d, 0x9c, 0xfd, 0xb6, 0x6b, 0xf7, 0x45, 0xdf, 0x63, 0xc1, 0x43, 0x56, 0x72, 0xe6, 0xf2,
		0x91, 0x1d, 0x88, 0xbd, 0x97, 0x7b, 0x9d, 0xdb, 0x5c, 0x8d, 0xb2, 0xe7, 0x76, 0x27, 0xbb, 0x12,
		0x4f, 0x7c, 0xfb, 0x94, 0xe6, 0x76, 0x49, 0xce, 0xed, 0x51, 0xda, 0xdb, 0x21, 0x69, 0xb7, 0x3f,
		0xd2, 0x6e, 0x77, 0xa4, 0xdd, 0xde, 0xa8, 0x55, 0x2c, 0x49, 0xaf, 0x88, 0x4b, 0x4e, 0xf8, 0x4e,
		0xc9, 0x77, 0x2c, 0x0a, 0x1b, 0x5a, 0x0e, 0x94, 0x70, 0x99, 0xd3, 0x45, 0x8f, 0x3c, 0x1f, 0x99,
		0x6a, 0xc2, 0x01, 0x24, 0x5c, 0xcc, 0xca, 0xbd, 0x80, 0x95, 0x75, 0xd1, 0x2a, 0xfd, 0x42, 0x55,
		0xfa, 0xc5, 0xa9, 0xf4, 0x0b, 0x52, 0x5a, 0xd0, 0x94, 0x36, 0x3a, 0xa3, 0xb4, 0x0c, 0x94, 0x4f,
		0xbd, 0xd1, 0x2b, 0xf1, 0x5b, 0x8e, 0x97, 0xd6, 0xff, 0x93, 0x12, 0xce, 0x25, 0x2d, 0x92, 0x42,
		0x66, 0xe4, 0x84, 0x9a, 0x48, 0x09, 0xd9, 0x91, 0x11, 0xca, 0x22, 0x21, 0x94, 0x45, 0x3e, 0x28,
		0x8b, 0x74, 0xd0, 0xcb, 0x84, 0xc8, 0x0a, 0xbf, 0x0a, 0x0f, 0xa6, 0xfc, 0x28, 0x4e, 0x99, 0x49,
		0x62, 0x88, 0xe2, 0x44, 0x14, 0xa7, 0x6a, 0x35, 0xa1, 0x5c, 0x5d, 0xc8, 0xa3, 0x60, 0x0f, 0x4c,
		0x8e, 0xe2, 0xf4, 0x7c, 0x7e, 0xa3, 0xa0, 0xe7, 0xe6, 0xf3, 0x71, 0x08, 0xc7, 0x47, 0xc4, 0x26,
		0x22, 0x36, 0xb5, 0x2a, 0x22, 0x32, 0x85, 0x44, 0xa6, 0x98, 0xe4, 0x2a, 0x28, 0xc9, 0x8a, 0x2a,
		0x5a, 0x05, 0xf5, 0x11, 0x9b, 0xf2, 0x53, 0x8d, 0x62, 0x38, 0xa6, 0xa9, 0x60, 0xec, 0x58, 0xea,
		0xd1, 0x52, 0x53, 0x9a, 0x7a, 0x2f, 0x2c, 0x11, 0xcc, 0x2c, 0x8b, 0x7c, 0xa8, 0x33, 0x3a, 0xab,
		0x09, 0x60, 0x75, 0x60, 0x75, 0x60, 0x75, 0x60, 0x75, 0x60, 0x75, 0xb6, 0x5a, 0x9d, 0x95, 0xaa,
		0x2c, 0x82, 0xd9, 0x51, 0xa3, 0x0e, 0x9f, 0xad, 0x8e, 0x12, 0x07, 0x1a, 0x46, 0x07, 0x46, 0x07,
		0x46, 0x07, 0x46, 0x27, 0x57, 0x46, 0x27, 0x14, 0xfb, 0x02, 0xd8, 0x1c, 0xb9, 0x35, 0x17, 0x62,
		0x02, 0x21, 0xb3, 0xf6, 0x42, 0x4c, 0x14, 0x60, 0x71, 0x60, 0x71, 0x60, 0x71, 0x4c, 0xb6, 0x38,
		0xb2, 0x6f, 0x03, 0xa2, 0x81, 0x17, 0xb5, 0xe1, 0xb9, 0x3b, 0x66, 0xea, 0xba, 0x00, 0x45, 0x47,
		0xeb, 0xc5, 0x5c, 0xaa, 0x6a, 0xcb, 0x2a, 0xed, 0xe7, 0xa4, 0xbc, 0x5f, 0x13, 0x45, 0x3f, 0x26,
		0xda, 0x7e, 0x4b, 0x54, 0xfd, 0x94, 0xc8, 0xfb, 0x25, 0x91, 0xf7, 0x43, 0x22, 0xef, 0x77, 0x94,
		0xad, 0xaa, 0xd2, 0xca, 0xfb, 0x11, 0x11, 0x40, 0x73, 0x0a, 0x88, 0xbe, 0x09, 0xaa, 0x6f, 0xfc,
		0xbd, 0x50, 0xd6, 0x01, 0x13, 0x41, 0xf4, 0x69, 0x09, 0xe9, 0x43, 0x05, 0x9e, 0x95, 0x02, 0xbe,
		0x0a, 0x30, 0xdc, 0xc8, 0xbb, 0xbd, 0x9d, 0xb9, 0x5c, 0x3c, 0x50, 0xd9, 0xcd, 0xd7, 0x13, 0xc2,
		0x78, 0xc2, 0x78, 0xc2, 0x78, 0xc2, 0x78, 0xc2, 0x78, 0x9a, 0x6a, 0x3c, 0x57, 0x1a, 0x9b, 0xb3,
		0x20, 0xfa, 0xfc, 0x00, 0xfb, 0x19, 0x2e, 0x1e, 0xbb, 0x17, 0x16, 0xb9, 0x0d, 0xdd, 0x34, 0x29,
		0xec, 0x28, 0xec, 0x28, 0xec, 0x28, 0xec, 0x28, 0xec, 0xa8, 0xa9, 0x76, 0xf4, 0xa5, 0xd6, 0x9e,
		0xdb, 0xd2, 0x35, 0x2d, 0x0e, 0x7b, 0x1a, 0x2e, 0x22, 0x77, 0xef, 0x6c, 0x87, 0x8f, 0x2d, 0x9f,
		0xd9, 0x81, 0xc2, 0xae, 0x46, 0xcf, 0x29, 0xce, 0xeb, 0xf3, 0xc1, 0x8a, 0xc2, 0x8a, 0xc2, 0x8a,
		0xc2, 0x8a, 0x66, 0xd0, 0x8a, 0xf2, 0x31, 0x73, 0x05, 0x17, 0x0f, 0x44, 0x96, 0x54, 0x65, 0x4f,
		0xbe, 0xee, 0xf2, 0x55, 0x3e, 0xd9, 0x01, 0xc1, 0x11, 0x5d, 0x2d, 0x60, 0xf7, 0xf4, 0x7b, 0xfb,
		0xa4, 0xfb, 0x65, 0xd8, 0xef, 0x5d, 0x5e, 0x74, 0x86, 0xfd, 0x4e, 0xfb, 0xbc, 0x77, 0xaa, 0xfa,
		0xb4, 0x7e, 0xb7, 0x9d, 0xd9, 0x22, 0xff, 0xf9, 0x4a, 0x79, 0x77, 0x52, 0x9a, 0x06, 0xc3, 0xb1,
		0xd5, 0xfc, 0x7c, 0x72, 0x79, 0x7e, 0xd1, 0xe9, 0x0f, 0x4f, 0x7a, 0xbd, 0x33, 0xf5, 0x5d, 0x71,
		0x09, 0x5a, 0x37, 0xeb, 0x5a, 0xc7, 0xde, 0xe9, 0xd7, 0xce, 0x17, 0xac, 0x60, 0xf2, 0x15, 0x6c,
		0x9f, 0x43, 0x08, 0x53, 0x2e, 0x61, 0xaf, 0xdf, 0xfd, 0xa3, 0x7b, 0xda, 0xbe, 0xe8, 0xf5, 0x4b,
		0x19, 0x6f, 0x3d, 0x3d, 0xc8, 0x1a, 0x3e, 0xc9, 0x84, 0xf7, 0xe6, 0xd8, 0x81, 0xb0, 0x6e, 0xbd,
		0x31, 0x9f, 0x70, 0x36, 0x56, 0xef, 0xbc, 0xad, 0x4f, 0x07, 0xdf, 0x0d, 0xbe, 0x1b, 0x7c, 0x37,
		0xf8, 0x6e, 0x19, 0xf4, 0xdd, 0x04, 0xbf, 0x65, 0x82, 0x8f, 0xfe, 0x0e, 0x1a, 0x35, 0x02, 0xdf,
		0x4d, 0x65, 0x95, 0xfe, 0x4b, 0x97, 0x2f, 0xaa, 0xc7, 0x96, 0x5c, 0xdb, 0xf5, 0x02, 0x36, 0xf2,
		0xdc, 0xb1, 0xd2, 0xce, 0x03, 0x7d, 0xdb, 0xbd, 0x61, 0xca, 0xfd, 0x27, 0xf5, 0x70, 0xab, 0xf4,
		0x8d, 0xbb, 0xca, 0x35, 0x1a, 0x91, 0x4d, 0xdb, 0xec, 0xe5, 0x12, 0xce, 0xf7, 0xd5, 0xb7, 0x47,
		0x82, 0x7b, 0xee, 0x17, 0x7e, 0x13, 0x4a, 0x63, 0x39, 0x0f, 0x98, 0xbf, 0xf4, 0xcd, 0xbe, 0xcf,
		0xbd, 0x88, 0xa8, 0xa9, 0x3a, 0x6d, 0xac, 0xd4, 0xbc, 0xc9, 0xe6, 0xe8, 0x83, 0x02, 0xfb, 0x38,
		0x8a, 0x4a, 0x0f, 0xc5, 0xb1, 0xb4, 0x8a, 0x12, 0x44, 0xf0, 0x6a, 0xe0, 0xd5, 0xc0, 0xab, 0x81,
		0x57, 0x43, 0x72, 0x6e, 0x66, 0x2e, 0x57, 0x76, 0xa5, 0x7e, 0xa0, 0xb8, 0x2f, 0xe5, 0xeb, 0xe5,
		0xca, 0xbc, 0x7f, 0x41, 0xd2, 0x29, 0x54, 0xc7, 0x0e, 0xd1, 0xee, 0x14, 0xdd, 0x8e, 0x6d, 0xd8,
		0x39, 0x92, 0x4e, 0xa3, 0x5b, 0xf7, 0xf0, 0x03, 0xe1, 0x9c, 0x54, 0xed, 0xd4, 0x62, 0x13, 0xe7,
		0xa3, 0x33, 0x69, 0x0c, 0xaf, 0x53, 0x6e, 0x1d, 0x65, 0x3b, 0xbc, 0xd8, 0xec, 0x79, 0xe9, 0x64,
		0x4a, 0xe3, 0x71, 0x69, 0x60, 0x31, 0xf4, 0x29, 0xcf, 0x06, 0x94, 0x27, 0x89, 0xf2, 0x44, 0x6b,
		0xca, 0x3c, 0x75, 0x4e, 0x2d, 0xbc, 0x29, 0x81, 0x38, 0xe7, 0xaa, 0xd3, 0xaa, 0x26, 0xc3, 0xfa,
		0x26, 0xdb, 0xef, 0xa1, 0x18, 0x18, 0x50, 0xfa, 0xbf, 0x24, 0x61, 0xb2, 0x31, 0xfb, 0x4f, 0x70,
		0x89, 0x41, 0x1b, 0x36, 0x1b, 0x5b, 0xd8, 0xee, 0xe9, 0xf9, 0x45, 0xfb, 0xe4, 0x64, 0x78, 0xd6,
		0xef, 0x5d, 0xf4, 0x3e, 0xf7, 0x4e, 0x86, 0x17, 0xff, 0x77, 0xd6, 0x29, 0x51, 0x5e, 0x1f, 0x05,
		0xa4, 0x36, 0xe2, 0x17, 0xad, 0x35, 0x5a, 0x2d, 0xf3, 0x97, 0x6e, 0xbf, 0xf3, 0xf9, 0xe2, 0xe4,
		0xff, 0x86, 0x9f, 0x7b, 0xa7, 0xa7, 0x9d, 0xcf, 0x17, 0x14, 0x31, 0xa1, 0xc4, 0xee, 0x81, 0xc6,
		0xd5, 0x3d, 0xbf, 0x68, 0x5f, 0x74, 0x3f, 0x63, 0x45, 0xe5, 0xad, 0xe8, 0x49, 0xef, 0x73, 0xfb,
		0x64, 0xd8, 0xfe, 0xe3, 0x8f, 0x7e, 0xe7, 0x8f, 0xf6, 0x45, 0x07, 0x4b, 0x2b, 0x51, 0xe3, 0xfe,
		0xf1, 0xed, 0x0c, 0xeb, 0x29, 0x6f, 0x3d, 0x3f, 0xfd, 0x81, 0xe5, 0x94, 0xb8, 0x9c, 0xbd, 0xf3,
		0xb3, 0xaf, 0x58, 0x4f, 0xb9, 0xeb, 0x79, 0x8c, 0x05, 0x95, 0xb7, 0xa0, 0x67, 0xdd, 0x6f, 0x58,
		0x4e, 0x89, 0xe6, 0xe8, 0xbc, 0x7b, 0x4e, 0xb8, 0x9e, 0x6f, 0xf2, 0xc1, 0x0e, 0x20, 0x04, 0x4c,
		0xed, 0xf3, 0xaa, 0x08, 0x01, 0x53, 0xd5, 0x09, 0x28, 0x76, 0xa4, 0xd4, 0x74, 0x04, 0x8a, 0xa6,
		0xf9, 0xc2, 0x26, 0xf6, 0xcc, 0x59, 0xc4, 0xc9, 0x94, 0x11, 0x68, 0xb6, 0x79, 0x02, 0x04, 0x9a,
		0x25, 0xde, 0x79, 0x04, 0x9a, 0x65, 0x42, 0x9b, 0xe7, 0x20, 0xd0, 0x8c, 0xbb, 0xe2, 0xb8, 0x4a,
		0x10, 0x69, 0xd6, 0x44, 0x26, 0xcb, 0xef, 0x5f, 0x04, 0x99, 0x2c, 0xf2, 0xe6, 0x43, 0x26, 0x4b,
		0x66, 0x45, 0xa4, 0x56, 0x6d, 0xd5, 0x5a, 0x8d, 0x66, 0xb5, 0x85, 0xfc, 0x15, 0x38, 0x2f, 0x26,
		0x39, 0x2f, 0x6a, 0x01, 0xad, 0xda, 0xbe, 0x72, 0x70, 0x2b, 0xe0, 0x56, 0xc0, 0xad, 0x80, 0x5b,
		0x41, 0x53, 0x51, 0x6d, 0x7a, 0x57, 0xb3, 0x94, 0xcb, 0x18, 0x45, 0x88, 0x28, 0x59, 0x48, 0x28,
		0x69, 0xfc, 0xfc, 0xd1, 0x72, 0xb2, 0xc3, 0xc7, 0xb7, 0x57, 0x15, 0xab, 0x3a, 0x58, 0xfd, 0xc7,
		0xf1, 0x55, 0xd9, 0xaa, 0x0e, 0x54, 0x06, 0x45, 0x0e, 0x54, 0x6e, 0x15, 0x65, 0xd0, 0x23, 0x6d,
		0xbc, 0xfc, 0xef, 0x36, 0x4c, 0x61, 0xd8, 0x5f, 0x91, 0x11, 0xdf, 0xb2, 0xc2, 0xad, 0x37, 0x13,
		0x4c, 0x3d, 0xec, 0x7b, 0x39, 0x19, 0xb0, 0x1f, 0xb0, 0x1f, 0xb0, 0x1f, 0xb0, 0x5f, 0x06, 0xb1,
		0xdf, 0xb5, 0xe7, 0x39, 0xcc, 0x26, 0xc9, 0x5e, 0xae, 0x64, 0xc5, 0x34, 0x19, 0xdd, 0x54, 0xb4,
		0xed, 0xba, 0x9e, 0xb0, 0x05, 0x57, 0x54, 0x34, 0xbe, 0x14, 0x8c, 0x7e, 0xb2, 0x5b, 0x7b, 0xba,
		0xac, 0xf1, 0x7f, 0xe4, 0x4d, 0x99, 0x3b, 0x5a, 0x18, 0x8a, 0xf9, 0xf9, 0x3c, 0x9a, 0xff, 0xcf,
		0xe7, 0xd7, 0x47, 0xf6, 0x84, 0x5b, 0x81, 0x3d, 0xe1, 0x41, 0xf4, 0xe9, 0x68, 0xe1, 0x45, 0xcc,
		0x5c, 0x3e, 0xb2, 0x03, 0x71, 0xe4, 0x84, 0x67, 0xfa, 0x68, 0x61, 0x1f, 0x83, 0xf0, 0x8f, 0xb0,
		0xf4, 0x7f, 0x11, 0xda, 0x4a, 0xcf, 0xdc, 0xbf, 0x5d, 0xef, 0x1f, 0xd7, 0xb2, 0x85, 0xf0, 0xf9,
		0xf5, 0x7c, 0x05, 0xd4, 0xf5, 0x98, 0xde, 0x30, 0x17, 0x1a, 0x4e, 0xa3, 0xe1, 0xb4, 0x11, 0xf0,
		0x02, 0x0d, 0xa7, 0x69, 0x6d, 0x83, 0xb2, 0x86, 0xd3, 0x31, 0x25, 0xa3, 0xde, 0xbf, 0x8a, 0x4f,
		0xa9, 0xd6, 0xcb, 0xaa, 0xc0, 0xcb, 0x82, 0x97, 0x05, 0x2f, 0xab, 0x48, 0x5e, 0x96, 0x2a, 0x75,
		0x19, 0x4d, 0xb0, 0x68, 0xc2, 0x2c, 0x54, 0xfb, 0x72, 0x07, 0xb1, 0x76, 0xfd, 0x8b, 0x29, 0x15,
		0x8b, 0x16, 0x4d, 0xb4, 0x81, 0x72, 0xf5, 0x49, 0xa9, 0x46, 0xf5, 0xa8, 0x53, 0x6a, 0xb5, 0xaa,
		0x4d, 0xbd, 0x6a, 0x53, 0xb3, 0xda, 0xd4, 0xad, 0x5a, 0xb5, 0xab, 0x58, 0xfd, 0xd2, 0x91, 0x5d,
		0xb1, 0x73, 0xa7, 0xbe, 0x11, 0x63, 0x0c, 0x5d, 0x36, 0x09, 0xe6, 0x7a, 0xd1, 0x98, 0x31, 0xec,
		0xb2, 0xf8, 0x6c, 0x0c, 0x32, 0x1a, 0xbf, 0xa4, 0x50, 0xf4, 0x4a, 0x21, 0x1b, 0x45, 0x66, 0x98,
		0xc3, 0xe9, 0x68, 0x8c, 0x72, 0x05, 0x46, 0x19, 0x46, 0x19, 0x46, 0x19, 0x46, 0xd9, 0x5c, 0xdf,
		0x68, 0xdd, 0x47, 0x72, 0x98, 0x4b, 0x5f, 0xc8, 0x25, 0x9a, 0xf9, 0x5d, 0x2e, 0xe3, 0xb3, 0xa9,
		0x94, 0xb4, 0x0e, 0x65, 0xad, 0x57, 0x69, 0xeb, 0x52, 0xde, 0xda, 0x95, 0xb8, 0x76, 0x65, 0xae,
		0x5d, 0xa9, 0xd3, 0x28, 0x77, 0x22, 0x25, 0x4f, 0xef, 0x81, 0xc5, 0xce, 0xed, 0x8c, 0xbb, 0xa2,
		0xd2, 0xd0, 0x50, 0xa8, 0xb4, 0x41, 0x38, 0x25, 0x4d, 0xc6, 0xdb, 0xeb, 0x5f, 0xb4, 0x3a, 0xe9,
		0x80, 0x3a, 0x23, 0x4e, 0xb3, 0x79, 0x8d, 0x4d, 0x4f, 0x9c, 0x31, 0x17, 0x9b, 0x5f, 0x43, 0x56,
		0x94, 0x26, 0x75, 0xb5, 0x2e, 0x72, 0xf6, 0x7d, 0xe1, 0x45, 0xae, 0x51, 0xaf, 0x1f, 0xd7, 0x0b,
		0x2c, 0x76, 0x6f, 0xf2, 0x39, 0x5b, 0x5e, 0x2a, 0xb6, 0x52, 0x24, 0xda, 0xd2, 0xdd, 0xb4, 0x6d,
		0x76, 0x23, 0x09, 0x6e, 0xdc, 0xe0, 0x47, 0xc2, 0x8f, 0x84, 0x1f, 0x09, 0x3f, 0x12, 0x7e, 0xe4,
		0x16, 0x3f, 0xf2, 0x83, 0x06, 0x37, 0xb2, 0x0e, 0x37, 0x12, 0x6e, 0x24, 0xdc, 0x48, 0xb8, 0x91,
		0x39, 0x10, 0xb9, 0x6a, 0x1d, 0x4e, 0x24, 0x9c, 0xc8, 0xa2, 0x3b, 0x91, 0x77, 0xcb, 0xd3, 0xa0,
		0xc3, 0x8b, 0x0c, 0xe7, 0x86, 0x1b, 0x09, 0x37, 0x12, 0x6e, 0x24, 0xdc, 0x48, 0xb8, 0x91, 0xe4,
		0xe7, 0xf6, 0x9a, 0xbb, 0xb6, 0xff, 0xa0, 0xc1, 0x8f, 0x6c, 0x11, 0x4e, 0x79, 0xc2, 0xdc, 0x9b,
		0x45, 0xa0, 0x28, 0x1c, 0xc9, 0x02, 0xa0, 0xfa, 0x0a, 0x1c, 0x49, 0x38, 0x92, 0xb4, 0x22, 0x87,
		0xfb, 0x48, 0xb8, 0x92, 0x05, 0x77, 0x25, 0xd9, 0xbd, 0x60, 0xee, 0x98, 0x8d, 0xe9, 0x1d, 0xc9,
		0x68, 0x66, 0xb8, 0x91, 0x70, 0x23, 0xe1, 0x46, 0xc2, 0x8d, 0x84, 0x1b, 0x49, 0xef, 0x46, 0x2a,
		0x2f, 0xaa, 0xb5, 0x4d, 0x0d, 0x2b, 0x2a, 0xb2, 0x95, 0x4f, 0x23, 0xed, 0x4d, 0xe7, 0x48, 0xd1,
		0x76, 0xe8, 0x8d, 0x74, 0x34, 0x33, 0x8c, 0x34, 0x8c, 0x34, 0x8c, 0x34, 0x8c, 0x34, 0x8c, 0x34,
		0x8c, 0x34, 0x8c, 0xf4, 0xa6, 0x35, 0x9b, 0xda, 0xbe, 0xe0, 0x3a, 0x6c, 0xf4, 0x6a, 0x62, 0x98,
		0x68, 0x98, 0x68, 0x98, 0x68, 0x98, 0x68, 0x98, 0x68, 0x98, 0x68, 0x98, 0xe8, 0x4d, 0x6b, 0x26,
		0x7c, 0xdb, 0x0d, 0xb8, 0xe0, 0x77, 0x1a, 0xe2, 0xa6, 0x5e, 0xcc, 0x0d, 0x43, 0x0d, 0x43, 0x0d,
		0x43, 0x0d, 0x43, 0x0d, 0x43, 0x0d, 0x43, 0x9d, 0x41, 0x43, 0x9d, 0xe9, 0x72, 0x51, 0x8a, 0xbb,
		0x52, 0xc4, 0xe6, 0x53, 0xd8, 0xa5, 0x22, 0xde, 0x50, 0x21, 0xfe, 0x57, 0x2a, 0x5a, 0x59, 0xd0,
		0x09, 0x44, 0xb6, 0xaa, 0x34, 0xff, 0x97, 0x3d, 0x50, 0xa4, 0x59, 0x97, 0x4e, 0x78, 0x20, 0xda,
		0x42, 0x28, 0x2e, 0x09, 0xfd, 0x8d, 0xbb, 0x1d, 0x87, 0xcd, 0x6d, 0x5e, 0xa0, 0x16, 0xd3, 0x95,
		0xbe, 0xd9, 0xf7, 0x2f, 0x66, 0xaa, 0x7c, 0xa8, 0xd5, 0x1a, 0xcd, 0x5a, 0xad, 0xdc, 0x3c, 0x6e,
		0x96, 0x5b, 0xf5, 0x7a, 0xa5, 0x51, 0x51, 0x18, 0xa2, 0x55, 0xea, 0xf9, 0x63, 0xe6, 0xb3, 0xf1,
		0xa7, 0xf9, 0xd6, 0xb9, 0x33, 0xc7, 0xc9, 0x94, 0xc4, 0x11, 0x29, 0x33, 0xdd, 0x4a, 0xac, 0xa4,
		0xb4, 0xb8, 0xaa, 0x3f, 0x1b, 0x09, 0x77, 0x09, 0x0f, 0x3e, 0xdd, 0x4c, 0x87, 0x7d, 0x7e, 0x3d,
		0x6c, 0x4f, 0xf8, 0xb9, 0x3d, 0xe1, 0xc3, 0xee, 0xf4, 0xae, 0x76, 0x19, 0x3e, 0xfe, 0xf0, 0xc4,
		0x1b, 0xcd, 0xff, 0xa9, 0x3f, 0x7f, 0xec, 0xe1, 0x65, 0xf8, 0x8c, 0xed, 0xe8, 0x11, 0xd1, 0x32,
		0xca, 0x7c, 0x79, 0xa6, 0x95, 0x63, 0x63, 0xfb, 0x47, 0xbd, 0x31, 0x68, 0xeb, 0x57, 0x46, 0x33,
		0x74, 0x2b, 0x0f, 0x3c, 0x9f, 0xdf, 0x70, 0xf7, 0x60, 0xbe, 0x43, 0x16, 0x97, 0x15, 0x19, 0xa8,
		0xc6, 0x60, 0xaa, 0x33, 0x90, 0xa4, 0x06, 0x51, 0x8d, 0x01, 0x94, 0x25, 0x1d, 0x8a, 0x14, 0x82,
		0x42, 0x45, 0x20, 0xd1, 0x56, 0x25, 0xb4, 0x4d, 0x72, 0xf4, 0x4e, 0x7a, 0x2d, 0x91, 0x6e, 0x84,
		0x94, 0x12, 0x24, 0x5b, 0x72, 0x94, 0x48, 0x4c, 0xba, 0x9d, 0x4a, 0xbe, 0xbe, 0x29, 0xd6, 0x56,
		0x52, 0x31, 0x7a, 0xa9, 0xc5, 0xe6, 0x25, 0x15, 0x93, 0x7f, 0x26, 0xb0, 0xab, 0x29, 0x07, 0x92,
		0x48, 0x4c, 0xab, 0x21, 0x9c, 0x65, 0x13, 0xc9, 0xca, 0x08, 0x62, 0x65, 0xc4, 0xaf, 0x32, 0x42,
		0x17, 0x5a, 0x6f, 0xbb, 0xd6, 0x93, 0xc0, 0x45, 0xa5, 0x50, 0x7a, 0x6f, 0x08, 0x37, 0x44, 0xd6,
		0x46, 0xc8, 0xdd, 0x80, 0x52, 0x2a, 0xbd, 0xbf, 0x1f, 0x16, 0x49, 0xb6, 0xcd, 0xfb, 0x6f, 0x52,
		0x82, 0x0d, 0x2a, 0xb9, 0x8c, 0xdf, 0xfc, 0xbc, 0xf6, 0xfc, 0xe4, 0xcd, 0x6e, 0x23, 0xb5, 0xfc,
		0x3c, 0x54, 0x42, 0x41, 0x49, 0x67, 0xbb, 0x52, 0xdb, 0x2c, 0x19, 0xb6, 0x4a, 0xae, 0x8d, 0x92,
		0x65, 0x9b, 0xa4, 0xdb, 0x24, 0xe9, 0xb6, 0x48, 0xba, 0x0d, 0xa2, 0x55, 0x71, 0x69, 0x1b, 0x6f,
		0x44, 0x67, 0x47, 0x1e, 0x9a, 0x8c, 0x46, 0x34, 0x0c, 0x50, 0x96, 0x01, 0x28, 0x01, 0x28, 0x33,
		0x09, 0x28, 0x65, 0x75, 0xd7, 0x29, 0xd9, 0xe3, 0xbf, 0x16, 0x6b, 0xc2, 0x5d, 0x6b, 0xea, 0x05,
		0x42, 0x9e, 0xa4, 0x44, 0x75, 0xa9, 0x5e, 0x4d, 0x20, 0x8b, 0x9f, 0x94, 0xda, 0xa8, 0x4c, 0x7a,
		0x90, 0x94, 0x8a, 0x20, 0x28, 0xb5, 0x41, 0x4e, 0xaa, 0x82, 0x98, 0x94, 0x07, 0x29, 0x29, 0x0f,
		0x42, 0x52, 0x1e, 0x64, 0x64, 0x16, 0xf3, 0x2f, 0xbb, 0x71, 0x57, 0x69, 0x49, 0xaa, 0x49, 0x17,
		0xac, 0xd5, 0x71, 0x58, 0x8e, 0x2f, 0x79, 0xd3, 0xd5, 0x74, 0x42, 0x94, 0x46, 0x66, 0x51, 0x28,
		0x1c, 0x1a, 0xc5, 0xa3, 0x5a, 0x01, 0x91, 0x29, 0x22, 0x32, 0x85, 0x44, 0xa6, 0x98, 0xe4, 0x2a,
		0x28, 0xc9, 0x8a, 0x4a, 0x99, 0xc2, 0x5a, 0x57, 0x5c, 0xea, 0xe4, 0x71, 0x4d, 0x7f, 0xa9, 0x92,
		0x45, 0xb5, 0x0d, 0x5d, 0x95, 0x07, 0x97, 0x53, 0x04, 0x93, 0xd3, 0x06, 0x8f, 0x53, 0x05, 0x8b,
		0x93, 0x07, 0x87, 0x93, 0x07, 0x83, 0x93, 0x07, 0x7f, 0x67, 0x2b, 0xec, 0x51, 0x75, 0x03, 0xd6,
		0xd2, 0x2a, 0x1a, 0x84, 0xac, 0x03, 0xb6, 0xdc, 0xf0, 0x93, 0xdf, 0xa9, 0xcc, 0x32, 0x7a, 0x60,
		0x1b, 0xae, 0x4a, 0xa9, 0x55, 0xaa, 0x36, 0xd5, 0xaa, 0x4d, 0xc5, 0x6a, 0x53, 0xb5, 0x6a, 0x55,
		0xae, 0x62, 0xd5, 0x1b, 0xad, 0x1a, 0x59, 0x3e, 0x4d, 0x74, 0xee, 0x1c, 0x66, 0x4f, 0x7c, 0x36,
		0xa1, 0x38, 0x74, 0x2b, 0x64, 0xd9, 0x24, 0x98, 0xeb, 0x6c, 0x79, 0xd1, 0xfa, 0xfe, 0x7d, 0x78,
		0x59, 0x7d, 0xb4, 0x32, 0x05, 0x59, 0x4d, 0xa0, 0x50, 0x88, 0x2f, 0xa7, 0x34, 0xea, 0xfe, 0xd9,
		0x2a, 0x93, 0x80, 0x4b, 0x18, 0x65, 0x18, 0x65, 0x18, 0x65, 0x18, 0x65, 0x18, 0x65, 0x83, 0x8d,
		0x72, 0x78, 0xec, 0x60, 0x93, 0x63, 0x4b, 0x25, 0x27, 0x3a, 0x77, 0x67, 0x81, 0x93, 0x11, 0xbd,
		0xbb, 0xb3, 0xa8, 0xc1, 0x22, 0xc3, 0x22, 0xc3, 0x22, 0xc3, 0x22, 0x27, 0x5f, 0x35, 0xd5, 0x4c,
		0x65, 0x34, 0xd1, 0x22, 0x05, 0x9c, 0xbb, 0x63, 0x76, 0xaf, 0xa9, 0x3f, 0x5b, 0x38, 0x37, 0xea,
		0x0c, 0x65, 0x4d, 0x61, 0xeb, 0x55, 0xdc, 0xba, 0x14, 0xb8, 0x76, 0x45, 0xae, 0x5d, 0xa1, 0x6b,
		0x57, 0xec, 0x34, 0x0a, 0x9e, 0x48, 0xd1, 0xd3, 0xbb, 0x60, 0x1a, 0x5d, 0x31, 0x1d, 0x2e, 0xd9,
		0x26, 0xd7, 0xec, 0x5f, 0x7e, 0x2f, 0x4c, 0x52, 0xc0, 0x44, 0x10, 0x7d, 0x5a, 0x3a, 0x72, 0xa1,
		0x99, 0x42, 0x01, 0xc3, 0x9d, 0xd7, 0xfb, 0x9a, 0x05, 0xc2, 0x5a, 0x66, 0x03, 0x11, 0xe3, 0x8a,
		0xe7, 0xa9, 0x01, 0x2b, 0x00, 0x2b, 0x00, 0x2b, 0x00, 0x2b, 0x00, 0x2b, 0xc8, 0xcf, 0x2d, 0xca,
		0x17, 0x66, 0xc2, 0x4c, 0x8f, 0xbc, 0xdb, 0xdb, 0x99, 0xcb, 0xc5, 0x83, 0x2e, 0x12, 0xe0, 0xf5,
		0x03, 0xc0, 0x64, 0xc3, 0x64, 0xc3, 0x64, 0xc3, 0x64, 0xc3, 0x64, 0x83, 0x09, 0xd0, 0xc9, 0x04,
		0xac, 0xec, 0x12, 0x67, 0x41, 0xf4, 0xf9, 0x01, 0x64, 0x40, 0xb2, 0x25, 0x67, 0xf7, 0xc2, 0xd2,
		0x8e, 0x34, 0x36, 0x3d, 0x04, 0xd0, 0x06, 0xd0, 0x06, 0xd0, 0x06, 0xd0, 0x06, 0xd0, 0x06, 0xd0,
		0x86, 0x4e, 0xb4, 0xf1, 0xd2, 0x36, 0xcd, 0x11, 0xc7, 0x9a, 0xad, 0x02, 0xea, 0x48, 0xb6, 0xf4,
		0xdc, 0xbd, 0xb3, 0x1d, 0x3e, 0xb6, 0x7c, 0x66, 0x07, 0x44, 0x4d, 0x14, 0xd6, 0x24, 0xfc, 0xd5,
		0xfc, 0xc0, 0x1a, 0xc0, 0x1a, 0xc0, 0x1a, 0xc0, 0x1a, 0xc0, 0x1a, 0xe4, 0xe7, 0x96, 0x8f, 0x99,
		0x2b, 0xb8, 0x78, 0xd0, 0x84, 0x37, 0xea, 0x84, 0x73, 0x76, 0x97, 0xaf, 0xfa, 0xc9, 0x0e, 0x34,
		0xa8, 0x8c, 0xd5, 0x82, 0x77, 0x4f, 0xbf, 0xb7, 0x4f, 0xba, 0x5f, 0x86, 0xfd, 0xde, 0xe5, 0x45,
		0x67, 0xd8, 0xef, 0xb4, 0xcf, 0x7b, 0xa7, 0xd4, 0xda, 0xe3, 0xbb, 0xed, 0xcc, 0x16, 0x45, 0x76,
		0xae, 0x48, 0xe7, 0x9d, 0xff, 0xfa, 0x45, 0x3e, 0xe3, 0xc6, 0xd5, 0xff, 0x7c, 0x72, 0x79, 0x7e,
		0xd1, 0xe9, 0x0f, 0x4f, 0x7a, 0xbd, 0xb3, 0x12, 0xf9, 0x23, 0x3d, 0xbd, 0x2b, 0xec, 0xba, 0xf7,
		0x4e, 0xbf, 0x76, 0xbe, 0x60, 0xc5, 0xe9, 0x56, 0xbc, 0x7d, 0x0e, 0x21, 0x27, 0x5e, 0xf2, 0x5e,
		0xbf, 0xfb, 0x47, 0xf7, 0xb4, 0x7d, 0xd1, 0xeb, 0x6b, 0x58, 0x75, 0xd2, 0x19, 0x07, 0x79, 0xc3,
		0x7b, 0xb9, 0xf0, 0xee, 0x1d, 0x3b, 0x10, 0xd6, 0xad, 0x37, 0xe6, 0x13, 0xce, 0xc6, 0xf4, 0xce,
		0xfd, 0xfa, 0xf4, 0xf0, 0xed, 0xe1, 0xdb, 0xc3, 0xb7, 0x87, 0x6f, 0x0f, 0xdf, 0x9e, 0xfc, 0xdc,
		0x0a, 0x7e, 0xcb, 0x04, 0x1f, 0xfd, 0x1d, 0x34, 0x6a, 0x1a, 0x7c, 0xfb, 0x0f, 0x84, 0x53, 0x5e,
		0xba, 0x7c, 0xd1, 0x66, 0xad, 0xe4, 0xda, 0xae, 0x17, 0xb0, 0x91, 0xe7, 0x8e, 0x03, 0xca, 0x57,
		0xee, 0xdb, 0xee, 0x0d, 0x23, 0xf7, 0xa7, 0xe9, 0xe1, 0x6e, 0xe9, 0x1b, 0x77, 0xc9, 0x35, 0xb2,
		0x26, 0x1b, 0xbf, 0x99, 0x35, 0xd1, 0x38, 0xff, 0x57, 0xdf, 0x1e, 0x09, 0xee, 0xb9, 0x5f, 0xf8,
		0x4d, 0x28, 0xed, 0xe5, 0x22, 0xf8, 0x74, 0xa5, 0x6f, 0xf6, 0x7d, 0xe1, 0x45, 0x8e, 0xb6, 0x9f,
		0xb2, 0xf1, 0x52, 0xf8, 0x26, 0x9f, 0xb3, 0x0d, 0xe0, 0xe3, 0xee, 0x2c, 0x86, 0x54, 0xf5, 0x44,
		0x63, 0xa0, 0x8a, 0xa6, 0xae, 0x28, 0xfc, 0x5a, 0xf8, 0xb5, 0xf0, 0x6b, 0xe1, 0xd7, 0xc2, 0xaf,
		0xdd, 0x70, 0x6e, 0x67, 0xdc, 0x15, 0xc7, 0x55, 0x0d, 0x2e, 0x6d, 0x13, 0x2e, 0x25, 0x5c, 0x4a,
		0xb8, 0x94, 0x70, 0x29, 0x73, 0x20, 0x72, 0xb5, 0x6a, 0xab, 0xd6, 0x6a, 0x34, 0xab, 0x2d, 0x38,
		0x92, 0x70, 0x24, 0x8b, 0xec, 0x48, 0xd2, 0x3a, 0x20, 0xb4, 0x95, 0xb0, 0xe1, 0x46, 0xc2, 0x8d,
		0x84, 0x1b, 0x09, 0x37, 0x12, 0x6e, 0xe4, 0x86, 0x73, 0xbb, 0xe8, 0xae, 0x4f, 0x2e, 0xc3, 0x51,
		0xe8, 0xf3, 0x07, 0xda, 0x54, 0x2b, 0xc1, 0x7c, 0x97, 0xdc, 0x9d, 0x2c, 0xbd, 0x7d, 0x7b, 0x55,
		0xb6, 0x5a, 0x83, 0xc7, 0xab, 0x8a, 0xd5, 0x1a, 0x84, 0x1f, 0x2b, 0x8b, 0x3f, 0xc2, 0xcf, 0xd5,
		0xab, 0xb2, 0x55, 0x5b, 0x7d, 0xae, 0x5f, 0x95, 0xad, 0xfa, 0xe0, 0xf0, 0xc7, 0x8f, 0xf7, 0x87,
		0xbf, 0x8e, 0x9f, 0xf6, 0xff, 0xe2, 0xd1, 0x72, 0xb2, 0xc3, 0xc7, 0xb7, 0x57, 0x15, 0xab, 0x3a,
		0x58, 0xfd, 0xc7, 0xf1, 0x55, 0xd9, 0xaa, 0x0e, 0x0e, 0x0f, 0xe9, 0x4e, 0xe8, 0x80, 0x72, 0x6b,
		0x7b, 0xe7, 0xdd, 0xff, 0x69, 0xdb, 0xdf, 0x3f, 0x4d, 0xda, 0xe0, 0xff, 0x94, 0x80, 0xb0, 0x0d,
		0x44, 0xd8, 0xcb, 0x54, 0x3f, 0xa5, 0xfd, 0x31, 0xb7, 0x2a, 0xf9, 0x97, 0x93, 0x03, 0x6b, 0x03,
		0x6b, 0x03, 0x6b, 0x03, 0x6b, 0x03, 0x6b, 0x93, 0x9f, 0x5b, 0xd4, 0x3c, 0x34, 0x7c, 0x06, 0xd5,
		0x6d, 0x1b, 0xda, 0xae, 0xeb, 0x09, 0x5b, 0x70, 0xa2, 0x6a, 0x03, 0xa5, 0x60, 0xf4, 0x93, 0xdd,
		0xda, 0xcb, 0x2a, 0xcb, 0xa5, 0x23, 0x6f, 0xca, 0xdc, 0xd1, 0xc2, 0x50, 0xce, 0xf5, 0xc7, 0xd1,
		0xfc, 0x7f, 0x3e, 0xbf, 0x3e, 0xb2, 0x27, 0xdc, 0x0a, 0xec, 0x09, 0x0f, 0xa2, 0x4f, 0x47, 0x0b,
		0xaf, 0x70, 0xe6, 0xf2, 0x91, 0x1d, 0x88, 0x23, 0x97, 0xf1, 0x9b, 0x9f, 0xd7, 0x9e, 0x1f, 0x44,
		0x9f, 0x8e, 0xec, 0xf1, 0x5f, 0x0b, 0x35, 0xc4, 0x5d, 0x6b, 0xea, 0x05, 0xe2, 0x68, 0x01, 0x2d,
		0x82, 0xf0, 0x8f, 0xb0, 0x1c, 0x05, 0x7a, 0x1a, 0xc5, 0xb7, 0x63, 0xe6, 0xfe, 0xed, 0x7a, 0xff,
		0xb8, 0x96, 0x2d, 0x84, 0xcf, 0xaf, 0xe7, 0x2b, 0x46, 0xd7, 0xe0, 0x68, 0xc3, 0xdc, 0xe8, 0x76,
		0x64, 0x2a, 0xe2, 0x43, 0xb7, 0xa3, 0x7c, 0x22, 0x3a, 0x74, 0x3b, 0x4a, 0xb4, 0x6a, 0x64, 0xdd,
		0x8e, 0x62, 0x4a, 0x92, 0xde, 0x55, 0x8f, 0x3f, 0x02, 0xad, 0xc3, 0x5e, 0x81, 0xc3, 0x0e, 0x87,
		0x1d, 0x0e, 0x3b, 0x1c, 0x76, 0x73, 0x1c, 0x76, 0x2a, 0xf5, 0x1f, 0x4d, 0xb8, 0xe8, 0xed, 0x23,
		0xa8, 0x69, 0x82, 0x83, 0x58, 0xef, 0xbb, 0xc5, 0x23, 0x10, 0x8b, 0xae, 0x9e, 0xc0, 0x2c, 0x72,
		0x73, 0xa0, 0xd3, 0x2c, 0x98, 0x61, 0x1e, 0x74, 0x9b, 0x09, 0x63, 0xcc, 0x85, 0x31, 0x66, 0xc3,
		0x18, 0xf3, 0x41, 0x6b, 0x46, 0x88, 0xcd, 0x49, 0xb4, 0xca, 0x17, 0x3a, 0x14, 0xfc, 0x81, 0xde,
		0x12, 0xb7, 0x31, 0xb4, 0xdf, 0xd4, 0x30, 0x77, 0xac, 0x0b, 0xfa, 0xb3, 0xb1, 0xcb, 0x69, 0x28,
		0x2a, 0xa1, 0x68, 0x13, 0x35, 0x4e, 0xdf, 0x2a, 0xd3, 0x14, 0x8d, 0xd4, 0x35, 0xfb, 0xae, 0x00,
		0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x3a, 0x40, 0x0b, 0xb5, 0x2f, 0xbc, 0xee, 0x13, 0x3b,
		0x4c, 0x63, 0x96, 0xda, 0x9a, 0x6b, 0x3c, 0x7f, 0x92, 0x77, 0x85, 0x4c, 0x5d, 0xd2, 0x65, 0x74,
		0x4c, 0x30, 0x3e, 0x66, 0x19, 0x21, 0x53, 0x8c, 0x91, 0x71, 0x46, 0xc9, 0x38, 0xe3, 0x64, 0x9c,
		0x91, 0xd2, 0x63, 0xac, 0x34, 0x19, 0x2d, 0xfd, 0x1e, 0x77, 0x4c, 0x6f, 0xcc, 0xb8, 0x2b, 0x2a,
		0x0d, 0x9d, 0x3a, 0x63, 0x69, 0x45, 0x1a, 0x1a, 0x1f, 0x41, 0x4f, 0x72, 0xfd, 0xeb, 0x5f, 0x7a,
		0x75, 0xe6, 0x81, 0xee, 0xe4, 0x7b, 0xc3, 0xe0, 0x45, 0xec, 0x71, 0x34, 0x27, 0xe7, 0xc7, 0x9e,
		0xc7, 0x80, 0x84, 0x69, 0x43, 0xd4, 0xe9, 0xba, 0x08, 0xdb, 0xf7, 0x10, 0xe1, 0xdf, 0x88, 0x70,
		0xa3, 0x5e, 0x3f, 0xae, 0x43, 0x8c, 0xcd, 0xc2, 0x22, 0xfa, 0x67, 0x1f, 0xbc, 0x29, 0xc6, 0xfb,
		0xea, 0xa8, 0x31, 0xa2, 0xef, 0x26, 0x7d, 0x33, 0x6d, 0xa0, 0xe1, 0x46, 0x1d, 0xbc, 0x01, 0x78,
		0x03, 0xf0, 0x06, 0xe0, 0x0d, 0xc0, 0x1b, 0xe4, 0x84, 0x37, 0xf8, 0x60, 0x00, 0x6d, 0x50, 0x07,
		0x6d, 0x00, 0xda, 0x00, 0xb4, 0x01, 0x68, 0x03, 0xd0, 0x06, 0xca, 0x45, 0xb8, 0x5a, 0x07, 0x69,
		0x00, 0xd2, 0x00, 0xa4, 0x01, 0x2d, 0x69, 0x70, 0xb7, 0x3c, 0x7d, 0x26, 0xb0, 0x06, 0xe1, 0xb3,
		0x80, 0x36, 0x00, 0x6d, 0x00, 0xda, 0x00, 0xb4, 0x01, 0x68, 0x03, 0xd0, 0x06, 0x7b, 0xea, 0x8d,
		0x6b, 0xee, 0xda, 0xfe, 0x83, 0x01, 0xbc, 0x41, 0x4b, 0xe3, 0x23, 0x9c, 0x30, 0xf7, 0x66, 0x11,
		0xf8, 0x0f, 0xe2, 0x00, 0xc4, 0xc1, 0x6f, 0xbd, 0xae, 0x0a, 0x7c, 0x2e, 0x10, 0x07, 0xd9, 0x16,
		0x61, 0xc4, 0x1b, 0x80, 0x3a, 0x00, 0x75, 0x40, 0x2a, 0xe6, 0xec, 0x5e, 0x30, 0x77, 0x4c, 0xd8,
		0xef, 0x7d, 0x2b, 0xe4, 0x8b, 0x9e, 0x04, 0xb4, 0x01, 0x68, 0x03, 0xd0, 0x06, 0xa0, 0x0d, 0x40,
		0x1b, 0x80, 0x36, 0xd8, 0x97, 0x36, 0x20, 0xaf, 0x17, 0xbb, 0xcd, 0x8c, 0x10, 0xd5, 0x8f, 0x2d,
		0x26, 0x68, 0xf1, 0xa6, 0x73, 0x64, 0x6e, 0x3b, 0xfa, 0x41, 0x4b, 0xf4, 0x24, 0x00, 0x2d, 0x00,
		0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0xf1, 0x35, 0x9e,
		0xda, 0xbe, 0xe0, 0x26, 0x60, 0x96, 0xd5, 0x83, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2,
		0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2, 0xc4, 0xd7, 0x58, 0xf8, 0xb6, 0x1b, 0x70, 0xc1,
		0xef, 0x0c, 0x88, 0x2b, 0x7d, 0xf1, 0x2c, 0x00, 0x2e, 0x00, 0x2e, 0x00, 0x2e, 0x00, 0x2e, 0x00,
		0x2e, 0x00, 0x2e, 0x00, 0x2e, 0xc6, 0x03, 0x97, 0x5c, 0x97, 0x17, 0x25, 0x6e, 0x50, 0x18, 0x9b,
		0x5f, 0x4f, 0xc3, 0xc2, 0x78, 0x6f, 0xbc, 0xf8, 0x5f, 0x51, 0x74, 0x35, 0xd4, 0x27, 0x6b, 0xf9,
		0x6a, 0x18, 0xf3, 0x5f, 0xf6, 0xa0, 0xa3, 0xe2, 0x4b, 0xe9, 0x84, 0x07, 0xa2, 0x2d, 0x04, 0x71,
		0xb7, 0x9a, 0x6f, 0xdc, 0xed, 0x38, 0x6c, 0x0e, 0x07, 0x02, 0x5a, 0x38, 0x5d, 0xfa, 0x66, 0xdf,
		0xbf, 0x98, 0xb9, 0xf2, 0xa1, 0x56, 0x6b, 0x34, 0x6b, 0xb5, 0x72, 0xf3, 0xb8, 0x59, 0x6e, 0xd5,
		0xeb, 0x95, 0x46, 0x85, 0x30, 0xfa, 0xb5, 0xd4, 0xf3, 0xc7, 0xcc, 0x67, 0xe3, 0x4f, 0xf3, 0xad,
		0x77, 0x67, 0x8e, 0x93, 0x2b, 0x89, 0xd6, 0xa4, 0x97, 0x0d, 0xd6, 0xc7, 0x25, 0xd2, 0x96, 0x0a,
		0xfe, 0x6c, 0x24, 0xdc, 0x25, 0xe8, 0xfa, 0x74, 0x33, 0x1d, 0xf6, 0xf9, 0xf5, 0xb0, 0x3d, 0xe1,
		0xe7, 0xf6, 0x84, 0x0f, 0xbb, 0xd3, 0xbb, 0xda, 0x65, 0xf8, 0xa6, 0xc3, 0xd3, 0xe5, 0xfb, 0x0d,
		0xdb, 0xe3, 0xbf, 0xfa, 0xfc, 0xba, 0xeb, 0x9e, 0x79, 0x81, 0x18, 0xf6, 0xe7, 0x6f, 0x35, 0xbc,
		0x0c, 0x5f, 0xa1, 0x1d, 0xbd, 0x01, 0x5a, 0x32, 0xeb, 0x3f, 0x61, 0x05, 0x69, 0xc9, 0xbc, 0xa1,
		0xfb, 0x6f, 0x56, 0xfb, 0x33, 0xbf, 0xc9, 0x90, 0x94, 0xad, 0x90, 0x48, 0x48, 0x63, 0x1c, 0xcc,
		0x77, 0xdd, 0xe2, 0xaa, 0x42, 0xc2, 0x69, 0xe0, 0x07, 0x1d, 0xdc, 0xd0, 0x0a, 0x2f, 0x68, 0xe0,
		0x84, 0x2a, 0xb1, 0x23, 0x52, 0x6a, 0x7a, 0x94, 0x99, 0x42, 0xcb, 0x2f, 0xc7, 0xd2, 0xab, 0x51,
		0xad, 0xf2, 0x15, 0x9f, 0xdc, 0x11, 0x25, 0xcb, 0xb2, 0x6a, 0x19, 0xa6, 0x96, 0x5d, 0xb9, 0x42,
		0x21, 0x6f, 0xeb, 0x24, 0x6e, 0x9b, 0xa2, 0xd6, 0x63, 0x4a, 0x5b, 0x8b, 0x29, 0x6a, 0x1d, 0xf6,
		0x7c, 0xbd, 0x55, 0x95, 0x3c, 0xb0, 0xc2, 0x6b, 0x2b, 0x9a, 0xeb, 0x28, 0xd5, 0xd7, 0x4c, 0x64,
		0xd7, 0x47, 0x64, 0xd7, 0x42, 0x64, 0xd7, 0x3d, 0x30, 0x08, 0x24, 0x06, 0x41, 0x01, 0x93, 0x2c,
		0xd1, 0x1e, 0xbc, 0x31, 0x68, 0xef, 0x55, 0xed, 0x39, 0xd9, 0x5e, 0x97, 0xa4, 0x5a, 0xd7, 0x54,
		0xd8, 0x54, 0x8e, 0xc0, 0xa5, 0x17, 0x0f, 0x09, 0xa2, 0x51, 0x7a, 0xb9, 0xca, 0xbe, 0x3c, 0x53,
		0xf2, 0x5c, 0xf5, 0x6d, 0x7d, 0x7c, 0x49, 0xc2, 0x2c, 0x17, 0x6a, 0x48, 0x8f, 0xa0, 0x51, 0x01,
		0x2d, 0xd4, 0x42, 0x0a, 0x55, 0x50, 0x42, 0x39, 0x84, 0x50, 0x0e, 0x1d, 0x94, 0x43, 0x06, 0xb3,
		0xcc, 0x84, 0xec, 0xae, 0x98, 0xa5, 0xa5, 0xcf, 0xa6, 0xcc, 0x95, 0x59, 0x8e, 0x0f, 0x5f, 0x06,
		0xbe, 0x0c, 0x7c, 0x99, 0x02, 0xfa, 0x32, 0xaa, 0xda, 0xf8, 0x86, 0x8a, 0x45, 0x9d, 0x3c, 0xae,
		0xe9, 0x2f, 0x55, 0xb2, 0xa8, 0xb6, 0x9b, 0xbb, 0xf2, 0xc8, 0x63, 0x8a, 0xc8, 0x62, 0xda, 0xc8,
		0x61, 0xaa, 0xc8, 0x60, 0xf2, 0xc8, 0x5f, 0xf2, 0xc8, 0x5e, 0xf2, 0xc8, 0xdd, 0x6c, 0x5d, 0x97,
		0xaa, 0xee, 0x6e, 0x5e, 0x5a, 0xdd, 0xc0, 0x2a, 0x97, 0xe4, 0xe7, 0xec, 0x54, 0x95, 0x57, 0xbe,
		0xaf, 0x55, 0xa6, 0xe2, 0xe0, 0x2f, 0xb2, 0xa4, 0x0d, 0xca, 0xe4, 0x0c, 0x3d, 0x49, 0x18, 0xd4,
		0xc9, 0x16, 0xda, 0x92, 0x2a, 0xb4, 0x25, 0x4f, 0x68, 0x4b, 0x92, 0xc8, 0x76, 0x3c, 0x14, 0x59,
		0x72, 0x43, 0x74, 0xee, 0x1c, 0x66, 0x4f, 0x7c, 0x36, 0xa1, 0x38, 0x74, 0x2b, 0x64, 0xd9, 0x24,
		0x98, 0xeb, 0x6c, 0x49, 0x2e, 0xbf, 0x7f, 0x1f, 0x12, 0xfe, 0x47, 0x2b, 0x53, 0x90, 0xd5, 0xc0,
		0x2b, 0x85, 0xf8, 0x72, 0x4a, 0xa3, 0xee, 0x9f, 0xad, 0x32, 0x09, 0xb8, 0x84, 0x51, 0x86, 0x51,
		0x86, 0x51, 0x86, 0x51, 0x86, 0x51, 0x36, 0xd8, 0x28, 0x87, 0xc7, 0x0e, 0x36, 0x39, 0xb6, 0x54,
		0x6a, 0x82, 0xb9, 0xb6, 0x0a, 0x9c, 0x8a, 0xe0, 0xae, 0xad, 0xa2, 0x06, 0x8b, 0x0c, 0x8b, 0x0c,
		0x8b, 0x0c, 0x8b, 0x9c, 0x7c, 0xd5, 0x54, 0x33, 0x95, 0xd1, 0x44, 0x8b, 0x24, 0x56, 0xee, 0x8e,
		0x19, 0x5d, 0xa9, 0x92, 0xf5, 0xe6, 0x87, 0xe1, 0xdc, 0x54, 0x99, 0xbb, 0xa4, 0x45, 0x69, 0xc8,
		0x8b, 0xd0, 0xe8, 0x28, 0x3a, 0xa3, 0xb7, 0xc8, 0x8c, 0xae, 0xa2, 0x32, 0xda, 0x8b, 0xc8, 0x68,
		0x2f, 0x1a, 0xa3, 0xbd, 0x48, 0x4c, 0xbe, 0x6a, 0x0a, 0x90, 0x17, 0x7d, 0xd1, 0xe0, 0x8a, 0xe9,
		0x70, 0xc9, 0x36, 0xb9, 0x66, 0xff, 0xf2, 0x7b, 0x61, 0x92, 0x02, 0x26, 0x82, 0xe8, 0xd3, 0xd2,
		0x91, 0x0b, 0xcd, 0x54, 0x5e, 0x52, 0xaa, 0x09, 0x90, 0xf5, 0xc8, 0xbb, 0xbd, 0x9d, 0xb9, 0x5c,
		0x3c, 0xe8, 0x42, 0x17, 0xaf, 0x1f, 0x00, 0x10, 0x03, 0x10, 0x03, 0x10, 0x03, 0x10, 0x03, 0x10,
		0x03, 0x10, 0x43, 0x27, 0xc4, 0x58, 0xd9, 0x25, 0xce, 0x82, 0xe8, 0xf3, 0x03, 0x50, 0x46, 0xb2,
		0x25, 0x67, 0xf7, 0xc2, 0xd2, 0x8e, 0x34, 0x36, 0x3d, 0x04, 0xd0, 0x06, 0xd0, 0x06, 0xd0, 0x06,
		0xd0, 0x06, 0xd0, 0x06, 0xd0, 0x86, 0x4e, 0xb4, 0xf1, 0xd2, 0x36, 0xcd, 0x11, 0xc7, 0x9a, 0xad,
		0x02, 0xea, 0x48, 0xb6, 0xf4, 0xdc, 0xbd, 0xb3, 0x1d, 0x3e, 0xb6, 0x7c, 0x66, 0x07, 0x84, 0x25,
		0x13, 0x23, 0x09, 0x7f, 0x35, 0x3f, 0xb0, 0x06, 0xb0, 0x06, 0xb0, 0x06, 0xb0, 0x06, 0xb0, 0x06,
		0xf9, 0xb9, 0xe5, 0x63, 0xe6, 0x0a, 0x2e, 0x1e, 0x34, 0xe1, 0x0d, 0xca, 0x02, 0xc8, 0xdd, 0xe5,
		0xab, 0x7e, 0xb2, 0x03, 0x0d, 0x2a, 0x63, 0xb5, 0xe0, 0xdd, 0xd3, 0xef, 0xed, 0x93, 0xee, 0x97,
		0x61, 0xbf, 0x77, 0x79, 0xd1, 0x19, 0xf6, 0x3b, 0xed, 0xf3, 0xde, 0x29, 0xb5, 0xf6, 0xf8, 0x6e,
		0x3b, 0xb3, 0x45, 0xf6, 0xfe, 0x15, 0x79, 0x05, 0x7b, 0xcd, 0x6d, 0x85, 0x56, 0xab, 0xff, 0xf9,
		0xe4, 0xf2, 0xfc, 0xa2, 0xd3, 0x1f, 0x9e, 0xf4, 0x7a, 0x67, 0xa5, 0x22, 0x34, 0x77, 0x32, 0x65,
		0xdd, 0x7b, 0xa7, 0x5f, 0x3b, 0x5f, 0xb0, 0xe2, 0x74, 0x2b, 0xde, 0x3e, 0x87, 0x90, 0x13, 0x2f,
		0x79, 0xaf, 0xdf, 0xfd, 0xa3, 0x7b, 0xda, 0xbe, 0xe8, 0xf5, 0x4b, 0x39, 0x6f, 0xbf, 0x32, 0xc8,
		0x1b, 0xde, 0xcb, 0x85, 0x77, 0xef, 0xd8, 0x81, 0xb0, 0x6e, 0xbd, 0x31, 0x9f, 0x70, 0x36, 0xa6,
		0x77, 0xee, 0xd7, 0xa7, 0x87, 0x6f, 0x0f, 0xdf, 0x1e, 0xbe, 0x3d, 0x7c, 0x7b, 0xf8, 0xf6, 0xe4,
		0xe7, 0x56, 0xf0, 0x5b, 0x26, 0xf8, 0xe8, 0xef, 0xa0, 0x51, 0xd3, 0xe0, 0xdb, 0x7f, 0x20, 0x9c,
		0xf2, 0xd2, 0xe5, 0x8b, 0x1e, 0x08, 0x25, 0xd7, 0x76, 0xbd, 0x80, 0x8d, 0x3c, 0x77, 0x1c, 0x50,
		0xbe, 0x72, 0xdf, 0x76, 0x6f, 0x18, 0xb9, 0x3f, 0xad, 0xa1, 0xff, 0xdc, 0x37, 0xee, 0xea, 0xeb,
		0x0d, 0xac, 0xb9, 0x23, 0xef, 0x82, 0x35, 0xd1, 0x38, 0xff, 0x57, 0xdf, 0x1e, 0x09, 0xee, 0xb9,
		0x5f, 0xf8, 0x4d, 0x28, 0xed, 0xe5, 0x42, 0x74, 0xa5, 0xfe, 0x66, 0xdf, 0x17, 0x5e, 0xe4, 0xf4,
		0xb6, 0x8e, 0x33, 0x4e, 0x0a, 0x73, 0xda, 0x64, 0x72, 0x00, 0x1f, 0x77, 0x67, 0x31, 0xa4, 0x2a,
		0x54, 0x16, 0x03, 0x55, 0x34, 0x05, 0xcb, 0xe0, 0xd7, 0xc2, 0xaf, 0x85, 0x5f, 0x0b, 0xbf, 0x16,
		0x7e, 0xed, 0x86, 0x73, 0x3b, 0xe3, 0xae, 0x38, 0xae, 0x6a, 0x70, 0x69, 0x9b, 0x70, 0x29, 0xe1,
		0x52, 0xc2, 0xa5, 0x84, 0x4b, 0x99, 0x03, 0x91, 0xab, 0x55, 0x5b, 0xb5, 0x56, 0xa3, 0x59, 0x6d,
		0xc1, 0x91, 0x84, 0x23, 0x59, 0x64, 0x47, 0x92, 0xd6, 0x01, 0xa1, 0x2d, 0xb1, 0x09, 0x37, 0x12,
		0x6e, 0x24, 0xdc, 0x48, 0xb8, 0x91, 0x70, 0x23, 0x37, 0x9c, 0xdb, 0x45, 0xab, 0x42, 0x72, 0x19,
		0x8e, 0x42, 0x9f, 0x3f, 0xd0, 0xa6, 0x5a, 0x09, 0xe6, 0xbb, 0xe4, 0xee, 0x64, 0xe9, 0xed, 0xdb,
		0xab, 0xb2, 0xd5, 0x1a, 0x3c, 0x5e, 0x55, 0xac, 0xd6, 0x20, 0xfc, 0x58, 0x59, 0xfc, 0x11, 0x7e,
		0xae, 0x5e, 0x95, 0xad, 0xda, 0xea, 0x73, 0xfd, 0xaa, 0x6c, 0xd5, 0x07, 0x87, 0x3f, 0x7e, 0xbc,
		0x3f, 0xfc, 0x75, 0xfc, 0xb4, 0xff, 0x17, 0x8f, 0x96, 0x93, 0x1d, 0x3e, 0xbe, 0xbd, 0xaa, 0x58,
		0xd5, 0xc1, 0xea, 0x3f, 0x8e, 0xaf, 0xca, 0x56, 0x75, 0x70, 0x78, 0x48, 0x77, 0x42, 0x07, 0x94,
		0x5b, 0xdb, 0x3b, 0xef, 0xfe, 0x4f, 0xdb, 0xfe, 0xfe, 0x69, 0xd2, 0x06, 0xff, 0xa7, 0x04, 0x84,
		0x6d, 0x20, 0xc2, 0x5e, 0xa6, 0xfa, 0x29, 0x6d, 0xbc, 0xb5, 0x55, 0xc9, 0xbf, 0x9c, 0x1c, 0x58,
		0x1b, 0x58, 0x1b, 0x58, 0x1b, 0x58, 0x1b, 0x58, 0x9b, 0xfc, 0xdc, 0x5e, 0x7b, 0x9e, 0xc3, 0x6c,
		0x57, 0x07, 0xce, 0xae, 0xe4, 0xc5, 0x54, 0x67, 0xba, 0x1e, 0xb4, 0xa2, 0x46, 0xf5, 0x5b, 0xe7,
		0x23, 0x69, 0x60, 0xef, 0xb3, 0xa3, 0xb0, 0x51, 0x71, 0xf8, 0x47, 0x58, 0x8d, 0x02, 0xbd, 0x12,
		0xe2, 0xbb, 0x31, 0x73, 0xff, 0x76, 0xbd, 0x7f, 0x5c, 0xcb, 0x16, 0xc2, 0xe7, 0xd7, 0x4a, 0x5a,
		0x47, 0x6f, 0x55, 0x3d, 0x1b, 0xe6, 0x46, 0x17, 0x05, 0x53, 0x01, 0x1f, 0xba, 0x28, 0xe4, 0x13,
		0xd0, 0xa1, 0x8b, 0x42, 0xa2, 0x55, 0x23, 0xeb, 0xa2, 0x10, 0x53, 0x92, 0xf4, 0x9e, 0x7a, 0xfc,
		0x11, 0x68, 0xfd, 0xf5, 0x0a, 0xfc, 0x75, 0xf8, 0xeb, 0xf0, 0xd7, 0xe1, 0xaf, 0x9b, 0xe3, 0xaf,
		0x53, 0xa9, 0xff, 0x68, 0xc2, 0x45, 0xcf, 0x00, 0x41, 0xcd, 0x12, 0x1c, 0xc4, 0x7a, 0xea, 0x2c,
		0x1e, 0x81, 0x58, 0x74, 0xf5, 0xc4, 0x65, 0x91, 0x9b, 0x03, 0x9d, 0x66, 0xc1, 0x0c, 0xf3, 0xa0,
		0xdb, 0x4c, 0x18, 0x63, 0x2e, 0x8c, 0x31, 0x1b, 0xc6, 0x98, 0x0f, 0x5a, 0x33, 0x42, 0x6c, 0x4e,
		0xa2, 0x55, 0xbe, 0xd0, 0xa1, 0xe0, 0x0f, 0xf4, 0x56, 0xb8, 0x8d, 0xa1, 0xfd, 0xa6, 0x86, 0xb9,
		0x63, 0xdd, 0x55, 0x9f, 0x8d, 0x5d, 0x4e, 0x23, 0x51, 0x09, 0x45, 0x9b, 0xa8, 0x21, 0xeb, 0x56,
		0x99, 0xa6, 0x68, 0xd0, 0xaa, 0xd9, 0x77, 0x05, 0x68, 0x01, 0x68, 0x01, 0x68, 0x01, 0x68, 0xd1,
		0x01, 0x5a, 0xa8, 0x7d, 0xe1, 0x75, 0x9f, 0xd8, 0x61, 0x1a, 0x93, 0xd4, 0xd6, 0x5c, 0xe3, 0xf9,
		0x93, 0xbc, 0x2b, 0x64, 0xe6, 0x92, 0x2e, 0xa3, 0x63, 0x82, 0xf1, 0x31, 0xcb, 0x08, 0x99, 0x62,
		0x8c, 0x8c, 0x33, 0x4a, 0xc6, 0x19, 0x27, 0xe3, 0x8c, 0x94, 0x1e, 0x63, 0xa5, 0xc9, 0x68, 0xe9,
		0xf7, 0xb8, 0x63, 0x7a, 0x63, 0xc6, 0x5d, 0x51, 0x69, 0xe8, 0xd4, 0x19, 0x4b, 0x2b, 0xd2, 0xd0,
		0xf8, 0x08, 0x7a, 0x72, 0xeb, 0x5f, 0xff, 0xd2, 0xab, 0x33, 0x0f, 0x74, 0xe7, 0xde, 0x1b, 0x06,
		0x2f, 0x62, 0x8f, 0xa3, 0x39, 0x37, 0x3f, 0xf6, 0x3c, 0x06, 0xe4, 0x4b, 0x1b, 0xa2, 0x4e, 0xd7,
		0x45, 0xd8, 0xbe, 0x87, 0x08, 0xff, 0x46, 0x84, 0x1b, 0xf5, 0xfa, 0x71, 0x1d, 0x62, 0x6c, 0x16,
		0x16, 0xd1, 0x3f, 0xfb, 0xe0, 0x4d, 0x31, 0xde, 0x57, 0x47, 0x89, 0x11, 0x7d, 0x37, 0xe9, 0x9b,
		0x69, 0x03, 0x0d, 0x37, 0xea, 0xe0, 0x0d, 0xc0, 0x1b, 0x80, 0x37, 0x00, 0x6f, 0x00, 0xde, 0x20,
		0x27, 0xbc, 0xc1, 0x07, 0x03, 0x68, 0x83, 0x3a, 0x68, 0x03, 0xd0, 0x06, 0xa0, 0x0d, 0x40, 0x1b,
		0x80, 0x36, 0x50, 0x2e, 0xc2, 0xd5, 0x3a, 0x48, 0x03, 0x90, 0x06, 0x20, 0x0d, 0x68, 0x49, 0x83,
		0xbb, 0xe5, 0xe9, 0x33, 0x81, 0x35, 0x08, 0x9f, 0x05, 0xb4, 0x01, 0x68, 0x03, 0xd0, 0x06, 0xa0,
		0x0d, 0x40, 0x1b, 0x80, 0x36, 0xd8, 0x53, 0x6f, 0x5c, 0x73, 0xd7, 0xf6, 0x1f, 0x0c, 0xe0, 0x0d,
		0x5a, 0x1a, 0x1f, 0xe1, 0x84, 0xb9, 0x37, 0x8b, 0xc0, 0x7f, 0x10, 0x07, 0x20, 0x0e, 0x7e, 0xeb,
		0x75, 0x55, 0xe0, 0x73, 0x81, 0x38, 0xc8, 0xb6, 0x08, 0x23, 0xde, 0x00, 0xd4, 0x01, 0xa8, 0x03,
		0x52, 0x31, 0x67, 0xf7, 0x82, 0xb9, 0x63, 0xc2, 0x76, 0xef, 0x5b, 0x21, 0x5f, 0xf4, 0x24, 0xa0,
		0x0d, 0x40, 0x1b, 0x80, 0x36, 0x00, 0x6d, 0x00, 0xda, 0x00, 0xb4, 0xc1, 0xbe, 0xb4, 0x01, 0x79,
		0xb9, 0xd8, 0x6d, 0x66, 0x84, 0xa8, 0x7c, 0x6c, 0x31, 0x41, 0x8b, 0x37, 0x9d, 0x23, 0x73, 0xdb,
		0xd1, 0x0f, 0x5a, 0xa2, 0x27, 0x01, 0x68, 0x01, 0x68, 0x01, 0x68, 0x01, 0x68, 0x01, 0x68, 0x01,
		0x68, 0x01, 0x68, 0x01, 0x68, 0x89, 0xaf, 0xf1, 0xd4, 0xf6, 0x05, 0x37, 0x01, 0xb3, 0xac, 0x1e,
		0x04, 0x90, 0x05, 0x90, 0x05, 0x90, 0x05, 0x90, 0x05, 0x90, 0x05, 0x90, 0x05, 0x90, 0x05, 0x90,
		0x25, 0xbe, 0xc6, 0xc2, 0xb7, 0xdd, 0x80, 0x0b, 0x7e, 0x67, 0x40, 0x5c, 0xe9, 0x8b, 0x67, 0x01,
		0x70, 0x01, 0x70, 0x01, 0x70, 0x01, 0x70, 0x01, 0x70, 0x01, 0x70, 0x01, 0x70, 0x31, 0x1e, 0xb8,
		0xe4, 0xba, 0xbc, 0x28, 0x71, 0x7f, 0xc2, 0xd8, 0xfc, 0x5a, 0xfa, 0x15, 0xc6, 0x5b, 0xe3, 0xc5,
		0xff, 0x8a, 0xa2, 0xa9, 0xa1, 0x3e, 0x51, 0xcb, 0x57, 0xbf, 0x98, 0xff, 0xb2, 0x07, 0x1d, 0x05,
		0x5f, 0x4a, 0x27, 0x3c, 0x10, 0x6d, 0x21, 0x88, 0x9b, 0xd5, 0x7c, 0xe3, 0x6e, 0xc7, 0x61, 0x73,
		0x34, 0x10, 0xd0, 0xa2, 0xe9, 0xd2, 0x37, 0xfb, 0xfe, 0xc5, 0xcc, 0x95, 0x0f, 0xb5, 0x5a, 0xa3,
		0x59, 0xab, 0x95, 0x9b, 0xc7, 0xcd, 0x72, 0xab, 0x5e, 0xaf, 0x34, 0x2a, 0x84, 0xc1, 0xaf, 0xa5,
		0x9e, 0x3f, 0x66, 0x3e, 0x1b, 0x7f, 0x9a, 0x6f, 0xbd, 0x3b, 0x73, 0x9c, 0x5c, 0x49, 0xb4, 0x26,
		0xb5, 0x6c, 0xae, 0x3a, 0x2e, 0x91, 0x36, 0x54, 0xf0, 0x67, 0x23, 0xe1, 0x2e, 0x21, 0xd7, 0xa7,
		0x9b, 0xe9, 0xb0, 0xcf, 0xaf, 0x87, 0xed, 0x09, 0x3f, 0xb7, 0x27, 0x7c, 0xd8, 0x9d, 0xde, 0xd5,
		0x2e, 0xc3, 0x17, 0x1d, 0x9e, 0x2e, 0x5f, 0x6f, 0xd8, 0x1e, 0xff, 0xd5, 0xe7, 0xd7, 0x5d, 0xf7,
		0xcc, 0x67, 0xc3, 0xfe, 0xfc, 0xa5, 0x86, 0x97, 0xe1, 0x1b, 0xb4, 0xa3, 0x17, 0x40, 0x3b, 0x66,
		0xfd, 0xe7, 0xab, 0x18, 0xed, 0x98, 0x37, 0x74, 0xfe, 0xcd, 0x6a, 0x6f, 0xe6, 0x37, 0x19, 0x12,
		0xb2, 0x15, 0x0c, 0x09, 0x29, 0x8c, 0x83, 0xf9, 0xa6, 0x5b, 0x5c, 0x55, 0x38, 0x38, 0x0d, 0xf6,
		0xa0, 0xc3, 0x1a, 0x5a, 0xb1, 0x05, 0x0d, 0x96, 0x50, 0x25, 0x76, 0x44, 0x3a, 0x4d, 0x8b, 0x2e,
		0x53, 0x68, 0xf6, 0xa5, 0x98, 0x79, 0x35, 0x8a, 0x55, 0xbe, 0xda, 0x93, 0x3b, 0xa2, 0x64, 0x49,
		0x56, 0x2d, 0xc1, 0xc4, 0x92, 0x2b, 0x57, 0x26, 0xe4, 0xed, 0x9c, 0xc4, 0x5d, 0x53, 0xd4, 0x73,
		0x4c, 0x69, 0x4f, 0x31, 0x45, 0x3d, 0xc3, 0x9e, 0xef, 0xb5, 0xaa, 0x92, 0x07, 0x56, 0x78, 0x5f,
		0x45, 0x73, 0x0f, 0xa5, 0xfa, 0x7e, 0x89, 0xec, 0xde, 0x88, 0xec, 0x3e, 0x88, 0xec, 0x9e, 0x07,
		0xf6, 0x80, 0xc2, 0x1e, 0x28, 0xa0, 0x90, 0x25, 0x9a, 0x83, 0x37, 0x06, 0x6d, 0xbd, 0xaa, 0x2d,
		0xa7, 0xda, 0xea, 0x92, 0x54, 0xdb, 0x9a, 0x06, 0x97, 0xca, 0x11, 0xb7, 0xf4, 0xc2, 0x21, 0x41,
		0x30, 0x4a, 0xab, 0x35, 0xf6, 0x66, 0xc2, 0x9a, 0x7a, 0x81, 0x90, 0x26, 0x1a, 0xcf, 0xd5, 0xde,
		0x5e, 0xcf, 0x20, 0x49, 0x9c, 0xe5, 0x62, 0x0d, 0xe9, 0xb1, 0x33, 0x2a, 0xb0, 0x85, 0x5a, 0x4c,
		0xa1, 0x0a, 0x4b, 0x28, 0xc7, 0x10, 0xca, 0xb1, 0x83, 0x72, 0xcc, 0x60, 0x96, 0xa1, 0x90, 0xdd,
		0x0f, 0xb3, 0xb4, 0x74, 0xda, 0x94, 0xf9, 0x32, 0xcb, 0xf1, 0xe1, 0xcc, 0xc0, 0x99, 0x81, 0x33,
		0x53, 0x40, 0x67, 0x46, 0x55, 0x03, 0xdf, 0x50, 0xb1, 0xa8, 0x93, 0xc7, 0x35, 0xfd, 0xa5, 0x4a,
		0x16, 0xd5, 0xf6, 0x71, 0x57, 0x1e, 0x73, 0x4c, 0x11, 0x53, 0x4c, 0x1b, 0x33, 0x4c, 0x15, 0x13,
		0x4c, 0x1e, 0xf3, 0x4b, 0x1e, 0xd3, 0x4b, 0x1e, 0xb3, 0x9b, 0xad, 0xcb, 0x52, 0xd5, 0x7d, 0xcd,
		0x4b, 0xab, 0xfb, 0x57, 0xe5, 0x92, 0xfc, 0x9c, 0x97, 0xaa, 0xf2, 0xc2, 0xf7, 0xb5, 0xca, 0x54,
		0x1c, 0xf7, 0x45, 0x96, 0xae, 0x41, 0x99, 0x96, 0xa1, 0x27, 0xfd, 0x82, 0x3a, 0xcd, 0x42, 0x5b,
		0x3a, 0x85, 0xb6, 0xb4, 0x09, 0x6d, 0xe9, 0x11, 0xd9, 0x0e, 0x86, 0x22, 0x4b, 0x6b, 0x88, 0xce,
		0x9d, 0xc3, 0xec, 0x89, 0xcf, 0x26, 0x14, 0x87, 0x6e, 0x85, 0x2c, 0x9b, 0x04, 0x73, 0x9d, 0x2d,
		0xe9, 0xe5, 0xf7, 0xef, 0x43, 0xca, 0xff, 0x68, 0x65, 0x0a, 0xb2, 0x1a, 0x76, 0xa5, 0x10, 0x5f,
		0x4e, 0x69, 0xd4, 0xfd, 0xb3, 0x55, 0x26, 0x01, 0x97, 0x30, 0xca, 0x30, 0xca, 0x30, 0xca, 0x30,
		0xca, 0x30, 0xca, 0x06, 0x1b, 0xe5, 0xf0, 0xd8, 0xc1, 0x26, 0xc7, 0x96, 0x4a, 0x4d, 0x34, 0xd7,
		0x56, 0x81, 0x53, 0x11, 0xdd, 0xb5, 0x55, 0xd4, 0x60, 0x91, 0x61, 0x91, 0x61, 0x91, 0x61, 0x91,
		0x93, 0xaf, 0x9a, 0x6a, 0xa6, 0x32, 0x9a, 0x68, 0x91, 0xbf, 0xca, 0xdd, 0x31, 0xa3, 0x2b, 0x52,
		0xb2, 0xde, 0xf6, 0x30, 0x9c, 0x9b, 0x2a, 0x69, 0x97, 0xb4, 0x1c, 0x0d, 0x79, 0xf9, 0x19, 0x1d,
		0xe5, 0x66, 0xf4, 0x96, 0x97, 0xd1, 0x55, 0x4e, 0x46, 0x7b, 0xf9, 0x18, 0xed, 0xe5, 0x62, 0xb4,
		0x97, 0x87, 0xc9, 0x57, 0x39, 0x01, 0xf2, 0x72, 0x2f, 0x1a, 0x5c, 0x31, 0x1d, 0x2e, 0xd9, 0x26,
		0xd7, 0xec, 0x5f, 0x7e, 0x2f, 0x4c, 0x52, 0xc0, 0x44, 0x10, 0x7d, 0x5a, 0x3a, 0x72, 0xa1, 0x99,
		0xca, 0x4b, 0x3e, 0x35, 0x01, 0xb2, 0x1e, 0x79, 0xb7, 0xb7, 0x33, 0x97, 0x8b, 0x07, 0x5d, 0xe8,
		0xe2, 0xf5, 0x03, 0x00, 0x62, 0x00, 0x62, 0x00, 0x62, 0x00, 0x62, 0x00, 0x62, 0x00, 0x62, 0xe8,
		0x84, 0x18, 0x2b, 0xbb, 0xc4, 0x59, 0x10, 0x7d, 0x7e, 0x00, 0xca, 0x48, 0xb6, 0xe4, 0xec, 0x5e,
		0x58, 0xda, 0x91, 0xc6, 0xa6, 0x87, 0x00, 0xda, 0x00, 0xda, 0x00, 0xda, 0x00, 0xda, 0x00, 0xda,
		0x00, 0xda, 0xd0, 0x89, 0x36, 0x5e, 0xda, 0xa6, 0x39, 0xe2, 0x58, 0xb3, 0x55, 0x40, 0x1d, 0xc9,
		0x96, 0x9e, 0xbb, 0x77, 0xb6, 0xc3, 0xc7, 0x96, 0xcf, 0xec, 0x80, 0xb0, 0x5a, 0x62, 0x24, 0xe1,
		0xaf, 0xe6, 0x07, 0xd6, 0x00, 0xd6, 0x00, 0xd6, 0x00, 0xd6, 0x00, 0xd6, 0x20, 0x3f, 0xb7, 0x7c,
		0xcc, 0x5c, 0xc1, 0xc5, 0x83, 0x26, 0xbc, 0x41, 0x59, 0xfb, 0xb8, 0xbb, 0x7c, 0xd5, 0x4f, 0x76,
		0xa0, 0x41, 0x65, 0xac, 0x16, 0xbc, 0x7b, 0xfa, 0xbd, 0x7d, 0xd2, 0xfd, 0x32, 0xec, 0xf7, 0x2e,
		0x2f, 0x3a, 0xc3, 0x7e, 0xa7, 0x7d, 0xde, 0x3b, 0xa5, 0xd6, 0x1e, 0xdf, 0x6d, 0x67, 0xb6, 0xc8,
		0xde, 0xbf, 0x22, 0xaf, 0x5d, 0xaf, 0xb9, 0xa1, 0xd0, 0x6a, 0xf5, 0x3f, 0x9f, 0x5c, 0x9e, 0x5f,
		0x74, 0xfa, 0xc3, 0x93, 0x5e, 0xef, 0xac, 0x54, 0x84, 0xb6, 0x4e, 0xa6, 0xac, 0x7b, 0xef, 0xf4,
		0x6b, 0xe7, 0x0b, 0x56, 0x9c, 0x6e, 0xc5, 0xdb, 0xe7, 0x10, 0x72, 0xe2, 0x25, 0xef, 0xf5, 0xbb,
		0x7f, 0x74, 0x4f, 0xdb, 0x17, 0xbd, 0x7e, 0x29, 0xe7, 0x8d, 0x57, 0x06, 0x79, 0xc3, 0x7b, 0xb9,
		0xf0, 0xee, 0x1d, 0x3b, 0x10, 0xd6, 0xad, 0x37, 0xe6, 0x13, 0xce, 0xc6, 0xf4, 0xce, 0xfd, 0xfa,
		0xf4, 0xf0, 0xed, 0xe1, 0xdb, 0xc3, 0xb7, 0x87, 0x6f, 0x0f, 0xdf, 0x9e, 0xfc, 0xdc, 0x0a, 0x7e,
		0xcb, 0x04, 0x1f, 0xfd, 0x1d, 0x34, 0x6a, 0x1a, 0x7c, 0xfb, 0x0f, 0x84, 0x53, 0x5e, 0xba, 0x7c,
		0xd1, 0x01, 0xa1, 0xe4, 0xda, 0xae, 0x17, 0xb0, 0x91, 0xe7, 0x8e, 0x03, 0xca, 0x57, 0xee, 0xdb,
		0xee, 0x0d, 0x23, 0xf7, 0xa7, 0x35, 0x74, 0x9e, 0xfb, 0xc6, 0x5d, 0x7d, 0x5d, 0x81, 0x35, 0xf7,
		0xe2, 0x5d, 0xb0, 0x26, 0x1a, 0xe7, 0xff, 0xea, 0xdb, 0x23, 0xc1, 0x3d, 0xf7, 0x0b, 0xbf, 0x09,
		0xa5, 0xbd, 0x5c, 0x88, 0x7e, 0xd4, 0xdf, 0xec, 0xfb, 0xc2, 0x8b, 0x9c, 0xde, 0xae, 0x71, 0xc6,
		0x49, 0x61, 0x4e, 0xfb, 0x4b, 0x0e, 0xe0, 0xe3, 0xee, 0x2c, 0x86, 0x54, 0x85, 0xca, 0x62, 0xa0,
		0x8a, 0xa6, 0x60, 0x19, 0xfc, 0x5a, 0xf8, 0xb5, 0xf0, 0x6b, 0xe1, 0xd7, 0xc2, 0xaf, 0xdd, 0x70,
		0x6e, 0x67, 0xdc, 0x15, 0xc7, 0x55, 0x0d, 0x2e, 0x6d, 0x13, 0x2e, 0x25, 0x5c, 0x4a, 0xb8, 0x94,
		0x70, 0x29, 0x73, 0x20, 0x72, 0xb5, 0x6a, 0xab, 0xd6, 0x6a, 0x34, 0xab, 0x2d, 0x38, 0x92, 0x70,
		0x24, 0x8b, 0xec, 0x48, 0xd2, 0x3a, 0x20, 0xb4, 0x25, 0x36, 0xe1, 0x46, 0xc2, 0x8d, 0x84, 0x1b,
		0x09, 0x37, 0x12, 0x6e, 0xe4, 0x86, 0x73, 0xbb, 0x68, 0x56, 0x48, 0x2e, 0xc3, 0x51, 0xe8, 0xf3,
		0x07, 0xda, 0x54, 0x2b, 0xc1, 0x7c, 0x97, 0xdc, 0x9d, 0x2c, 0xbd, 0x7d, 0x7b, 0x55, 0xb6, 0x5a,
		0x83, 0xc7, 0xab, 0x8a, 0xd5, 0x1a, 0x84, 0x1f, 0x2b, 0x8b, 0x3f, 0xc2, 0xcf, 0xd5, 0xab, 0xb2,
		0x55, 0x5b, 0x7d, 0xae, 0x5f, 0x95, 0xad, 0xfa, 0xe0, 0xf0, 0xc7, 0x8f, 0xf7, 0x87, 0xbf, 0x8e,
		0x9f, 0xf6, 0xff, 0xe2, 0xd1, 0x72, 0xb2, 0xc3, 0xc7, 0xb7, 0x57, 0x15, 0xab, 0x3a, 0x58, 0xfd,
		0xc7, 0xf1, 0x55, 0xd9, 0xaa, 0x0e, 0x0e, 0x0f, 0xe9, 0x4e, 0xe8, 0x80, 0x72, 0x6b, 0x7b, 0xe7,
		0xdd, 0xff, 0x69, 0xdb, 0xdf, 0x3f, 0x4d, 0xda, 0xe0, 0xff, 0x94, 0x80, 0xb0, 0x0d, 0x44, 0xd8,
		0xcb, 0x54, 0x3f, 0xa5, 0x8d, 0xb7, 0xb6, 0x2a, 0xf9, 0x97, 0x93, 0x03, 0x6b, 0x03, 0x6b, 0x03,
		0x6b, 0x03, 0x6b, 0x03, 0x6b, 0x93, 0x9f, 0xdb, 0x6b, 0xcf, 0x73, 0x98, 0xed, 0xea, 0xc0, 0xd9,
		0x95, 0xbc, 0x98, 0xea, 0x4c, 0xd7, 0x83, 0x56, 0xd4, 0xaa, 0x7e, 0xeb, 0x7c, 0xca, 0x5b, 0xd8,
		0xaf, 0x9a, 0x9f, 0x1f, 0x85, 0xad, 0x8a, 0xc3, 0x3f, 0xc2, 0x7a, 0x14, 0xe8, 0x96, 0x10, 0xdf,
		0x8f, 0x99, 0xfb, 0xb7, 0xeb, 0xfd, 0xe3, 0x5a, 0xb6, 0x10, 0x3e, 0xbf, 0x56, 0xd2, 0x3c, 0x7a,
		0xab, 0xf2, 0xd9, 0x30, 0x37, 0xfa, 0x28, 0x98, 0x0a, 0xf9, 0xd0, 0x47, 0x21, 0x9f, 0x90, 0x0e,
		0x7d, 0x14, 0x12, 0xad, 0x1a, 0x59, 0x1f, 0x85, 0x98, 0x92, 0xa4, 0xf7, 0xd5, 0xe3, 0x8f, 0x40,
		0xeb, 0xb1, 0x57, 0xe0, 0xb1, 0xc3, 0x63, 0x87, 0xc7, 0x0e, 0x8f, 0xdd, 0x1c, 0x8f, 0x9d, 0x4a,
		0xfd, 0x47, 0x13, 0x2e, 0xba, 0x06, 0x08, 0x6a, 0x9e, 0xe0, 0x20, 0xd6, 0x55, 0x67, 0xf1, 0x08,
		0xc4, 0xa2, 0xab, 0x27, 0x32, 0x8b, 0xdc, 0x1c, 0xe8, 0x34, 0x0b, 0x66, 0x98, 0x07, 0xdd, 0x66,
		0xc2, 0x18, 0x73, 0x61, 0x8c, 0xd9, 0x30, 0xc6, 0x7c, 0xd0, 0x9a, 0x11, 0x62, 0x73, 0x12, 0xad,
		0xf2, 0x85, 0x0e, 0x05, 0x7f, 0xa0, 0xb7, 0xc6, 0x6d, 0x0c, 0xed, 0x37, 0x35, 0xcc, 0x1d, 0xeb,
		0xaf, 0xfa, 0x6c, 0xec, 0x72, 0x1a, 0x8b, 0x4a, 0x28, 0xda, 0x44, 0x2d, 0x59, 0xb7, 0xca, 0x34,
		0x45, 0x8b, 0x56, 0xcd, 0xbe, 0x2b, 0x40, 0x0b, 0x40, 0x0b, 0x40, 0x0b, 0x40, 0x8b, 0x0e, 0xd0,
		0x42, 0xed, 0x0b, 0xaf, 0xfb, 0xc4, 0x0e, 0xd3, 0x98, 0xa6, 0xb6, 0xe6, 0x1a, 0xcf, 0x9f, 0xe4,
		0x5d, 0x21, 0x73, 0x97, 0x74, 0x19, 0x1d, 0x13, 0x8c, 0x8f, 0x59, 0x46, 0xc8, 0x14, 0x63, 0x64,
		0x9c, 0x51, 0x32, 0xce, 0x38, 0x19, 0x67, 0xa4, 0xf4, 0x18, 0x2b, 0x4d, 0x46, 0x4b, 0xbf, 0xc7,
		0x1d, 0xd3, 0x1b, 0x33, 0xee, 0x8a, 0x4a, 0x43, 0xa7, 0xce, 0x58, 0x5a, 0x91, 0x86, 0xc6, 0x47,
		0xd0, 0x93, 0x5d, 0xff, 0xfa, 0x97, 0x5e, 0x9d, 0x79, 0xa0, 0x3b, 0xfb, 0xde, 0x30, 0x78, 0x11,
		0x7b, 0x1c, 0xcd, 0xd9, 0xf9, 0xb1, 0xe7, 0x31, 0x20, 0x63, 0xda, 0x10, 0x75, 0xba, 0x2e, 0xc2,
		0xf6, 0x3d, 0x44, 0xf8, 0x37, 0x22, 0xdc, 0xa8, 0xd7, 0x8f, 0xeb, 0x10, 0x63, 0xb3, 0xb0, 0x88,
		0xfe, 0xd9, 0x07, 0x6f, 0x8a, 0xf1, 0xbe, 0x3a, 0x8a, 0x8c, 0xe8, 0xbb, 0x49, 0xdf, 0x4c, 0x1b,
		0x68, 0xb8, 0x51, 0x07, 0x6f, 0x00, 0xde, 0x00, 0xbc, 0x01, 0x78, 0x03, 0xf0, 0x06, 0x39, 0xe1,
		0x0d, 0x3e, 0x18, 0x40, 0x1b, 0xd4, 0x41, 0x1b, 0x80, 0x36, 0x00, 0x6d, 0x00, 0xda, 0x00, 0xb4,
		0x81, 0x72, 0x11, 0xae, 0xd6, 0x41, 0x1a, 0x80, 0x34, 0x00, 0x69, 0x40, 0x4b, 0x1a, 0xdc, 0x2d,
		0x4f, 0x9f, 0x09, 0xac, 0x41, 0xf8, 0x2c, 0xa0, 0x0d, 0x40, 0x1b, 0x80, 0x36, 0x00, 0x6d, 0x00,
		0xda, 0x00, 0xb4, 0xc1, 0x9e, 0x7a, 0xe3, 0x9a, 0xbb, 0xb6, 0xff, 0x60, 0x00, 0x6f, 0xd0, 0xd2,
		0xf8, 0x08, 0x27, 0xcc, 0xbd, 0x59, 0x04, 0xfe, 0x83, 0x38, 0x00, 0x71, 0xf0, 0x5b, 0xaf, 0xab,
		0x02, 0x9f, 0x0b, 0xc4, 0x41, 0xb6, 0x45, 0x18, 0xf1, 0x06, 0xa0, 0x0e, 0x40, 0x1d, 0x90, 0x8a,
		0x39, 0xbb, 0x17, 0xcc, 0x1d, 0x13, 0x36, 0x7c, 0xdf, 0x0a, 0xf9, 0xa2, 0x27, 0x01, 0x6d, 0x00,
		0xda, 0x00, 0xb4, 0x01, 0x68, 0x03, 0xd0, 0x06, 0xa0, 0x0d, 0xf6, 0xa5, 0x0d, 0xc8, 0x0b, 0xc6,
		0x6e, 0x33, 0x23, 0x44, 0x05, 0x64, 0x8b, 0x09, 0x5a, 0xbc, 0xe9, 0x1c, 0x99, 0xdb, 0x8e, 0x7e,
		0xd0, 0x12, 0x3d, 0x09, 0x40, 0x0b, 0x40, 0x0b, 0x40, 0x0b, 0x40, 0x0b, 0x40, 0x0b, 0x40, 0x0b,
		0x40, 0x0b, 0x40, 0x4b, 0x7c, 0x8d, 0xa7, 0xb6, 0x2f, 0xb8, 0x09, 0x98, 0x65, 0xf5, 0x20, 0x80,
		0x2c, 0x80, 0x2c, 0x80, 0x2c, 0x80, 0x2c, 0x80, 0x2c, 0x80, 0x2c, 0x80, 0x2c, 0x80, 0x2c, 0xf1,
		0x35, 0x16, 0xbe, 0xed, 0x06, 0x5c, 0xf0, 0x3b, 0x03, 0xe2, 0x4a, 0x5f, 0x3c, 0x0b, 0x80, 0x0b,
		0x80, 0x0b, 0x80, 0x0b, 0x80, 0x0b, 0x80, 0x0b, 0x80, 0x0b, 0x80, 0x8b, 0xf1, 0xc0, 0x25, 0xd7,
		0xe5, 0x45, 0x89, 0x3b, 0x14, 0xc6, 0xe6, 0xd7, 0xd4, 0xb1, 0x30, 0xde, 0x1c, 0x2f, 0xfe, 0x57,
		0x14, 0x6d, 0x0d, 0xf5, 0x09, 0x5b, 0xbe, 0x3a, 0xc6, 0xfc, 0x97, 0x3d, 0xe8, 0x28, 0xf9, 0x52,
		0x3a, 0xe1, 0x81, 0x68, 0x0b, 0x41, 0xdc, 0xae, 0xe6, 0x1b, 0x77, 0x3b, 0x0e, 0x9b, 0xe3, 0x81,
		0x80, 0x16, 0x4f, 0x97, 0xbe, 0xd9, 0xf7, 0x2f, 0x66, 0xae, 0x7c, 0xa8, 0xd5, 0x1a, 0xcd, 0x5a,
		0xad, 0xdc, 0x3c, 0x6e, 0x96, 0x5b, 0xf5, 0x7a, 0xa5, 0x51, 0x21, 0x0c, 0x7f, 0x2d, 0xf5, 0xfc,
		0x31, 0xf3, 0xd9, 0xf8, 0xd3, 0x7c, 0xeb, 0xdd, 0x99, 0xe3, 0xe4, 0x4a, 0xa2, 0x35, 0x29, 0x66,
		0x93, 0x15, 0x72, 0x89, 0xb4, 0xa9, 0x82, 0x3f, 0x1b, 0x09, 0x77, 0x09, 0xbb, 0x3e, 0xdd, 0x4c,
		0x87, 0x7d, 0x7e, 0x3d, 0x6c, 0x4f, 0xf8, 0xb9, 0x3d, 0xe1, 0xc3, 0xee, 0xf4, 0xae, 0x76, 0x19,
		0xbe, 0xea, 0xf0, 0x74, 0xf9, 0x82, 0xc3, 0xf6, 0xf8, 0xaf, 0x3e, 0xbf, 0xee, 0xcd, 0xc4, 0x99,
		0x17, 0x88, 0x61, 0x7f, 0xfe, 0x5a, 0xc3, 0xcb, 0xf0, 0x1d, 0xda, 0xd1, 0x2b, 0xa0, 0x2d, 0xb3,
		0xfe, 0x33, 0x56, 0x94, 0xb6, 0xcc, 0x1b, 0x3a, 0x00, 0x67, 0xb5, 0x47, 0xf3, 0x9b, 0x0c, 0x89,
		0xd9, 0x0a, 0x8c, 0x84, 0x54, 0xc6, 0xc1, 0x7c, 0xdb, 0x2d, 0xae, 0x2a, 0x2c, 0x9c, 0x06, 0x81,
		0xd0, 0x21, 0x0e, 0xad, 0x08, 0x83, 0x06, 0x51, 0xa8, 0x12, 0x3b, 0x22, 0xad, 0xa6, 0x49, 0x9b,
		0x29, 0x34, 0xfe, 0x92, 0x8c, 0xbd, 0x1a, 0xe5, 0x2a, 0x5f, 0xf5, 0xc9, 0x1d, 0x51, 0xb2, 0x34,
		0xab, 0x96, 0x62, 0x72, 0xe9, 0x95, 0x2b, 0x15, 0xf2, 0xf6, 0x4e, 0xe2, 0xbe, 0x29, 0xea, 0x40,
		0xa6, 0xb4, 0xc3, 0x98, 0xa2, 0x0e, 0x62, 0xcf, 0xb7, 0x5c, 0x55, 0xc9, 0x03, 0x2b, 0xbc, 0xbd,
		0xa2, 0xb9, 0x95, 0x52, 0x7d, 0xdb, 0x44, 0x76, 0x8b, 0x44, 0x76, 0x3b, 0x44, 0x76, 0xeb, 0x03,
		0x8b, 0x40, 0x63, 0x11, 0x14, 0x10, 0xca, 0x12, 0x0d, 0xc2, 0x1b, 0x83, 0x36, 0x5f, 0xd5, 0xa6,
		0xd3, 0x6d, 0x76, 0x49, 0xaa, 0x7d, 0x4d, 0x87, 0x4f, 0xe5, 0x88, 0x5c, 0x7a, 0x01, 0x91, 0x20,
		0x1c, 0xa5, 0xb5, 0x75, 0xf6, 0xe5, 0x99, 0x93, 0xe7, 0x02, 0x70, 0xaf, 0x26, 0x90, 0x24, 0xd0,
		0x72, 0xf1, 0x86, 0xf4, 0x68, 0x1a, 0x15, 0xf8, 0x42, 0x2d, 0xae, 0x50, 0x85, 0x27, 0x94, 0xe3,
		0x08, 0xe5, 0xf8, 0x41, 0x39, 0x6e, 0x30, 0xcb, 0x54, 0xc8, 0xee, 0x90, 0x59, 0x5a, 0x3a, 0x6e,
		0xca, 0xfc, 0x99, 0xe5, 0xf8, 0x70, 0x68, 0xe0, 0xd0, 0xc0, 0xa1, 0x29, 0xa0, 0x43, 0xa3, 0xaa,
		0xa5, 0x6f, 0xa8, 0x58, 0xd4, 0xc9, 0xe3, 0x9a, 0xfe, 0x52, 0x25, 0x8b, 0x6a, 0x3b, 0xbb, 0x2b,
		0x8f, 0x42, 0xa6, 0x88, 0x32, 0xa6, 0x8d, 0x22, 0xa6, 0x8a, 0x12, 0x26, 0x8f, 0x02, 0x26, 0x8f,
		0xf2, 0x25, 0x8f, 0xe2, 0xcd, 0xd6, 0xb5, 0xa9, 0xea, 0x4e, 0xe7, 0xa5, 0xd5, 0x4d, 0xac, 0x72,
		0x49, 0x7e, 0xce, 0x54, 0x55, 0x79, 0xf5, 0xfb, 0x5a, 0x65, 0x2a, 0x8e, 0x03, 0x23, 0x4b, 0xe0,
		0xa0, 0x4c, 0xd4, 0xd0, 0x93, 0x90, 0x41, 0x9d, 0x78, 0xa1, 0x2d, 0xc1, 0x42, 0x5b, 0x22, 0x85,
		0xb6, 0x84, 0x89, 0x6c, 0x07, 0x46, 0x91, 0x25, 0x3a, 0x44, 0xe7, 0xce, 0x61, 0xf6, 0xc4, 0x67,
		0x13, 0x8a, 0x43, 0xb7, 0x42, 0x96, 0x4d, 0x82, 0xb9, 0xce, 0x96, 0x04, 0xf3, 0xfb, 0xf7, 0x21,
		0xe9, 0x7f, 0xb4, 0x32, 0x05, 0x59, 0x0d, 0xc0, 0x52, 0x88, 0x2f, 0xa7, 0x34, 0xea, 0xfe, 0xd9,
		0x2a, 0x93, 0x80, 0x4b, 0x18, 0x65, 0x18, 0x65, 0x18, 0x65, 0x18, 0x65, 0x18, 0x65, 0x83, 0x8d,
		0x72, 0x78, 0xec, 0x60, 0x93, 0x63, 0x4b, 0xa5, 0x26, 0xa2, 0x6b, 0xab, 0xc0, 0xa9, 0x88, 0xf0,
		0xda, 0x2a, 0x6a, 0xb0, 0xc8, 0xb0, 0xc8, 0xb0, 0xc8, 0xb0, 0xc8, 0xc9, 0x57, 0x4d, 0x35, 0x53,
		0x19, 0x4d, 0xb4, 0xc8, 0x67, 0xe5, 0xee, 0x98, 0xd1, 0x95, 0x2d, 0x59, 0x6f, 0x84, 0x18, 0xce,
		0x4d, 0x95, 0xc4, 0x4b, 0x5a, 0xa0, 0x86, 0xbc, 0x20, 0x8d, 0x8e, 0x02, 0x34, 0x7a, 0x0b, 0xce,
		0xe8, 0x2a, 0x30, 0xa3, 0xbd, 0xa0, 0x8c, 0xf6, 0x02, 0x32, 0xda, 0x0b, 0xc6, 0xe4, 0xab, 0xbc,
		0x00, 0x79, 0x01, 0x18, 0x0d, 0xae, 0x98, 0x0e, 0x97, 0x6c, 0x93, 0x6b, 0xf6, 0x2f, 0xbf, 0x17,
		0x26, 0x29, 0x60, 0x22, 0x88, 0x3e, 0x2d, 0x1d, 0xb9, 0xd0, 0x4c, 0xe5, 0x25, 0xb7, 0x9a, 0x00,
		0x59, 0x8f, 0xbc, 0xdb, 0xdb, 0x99, 0xcb, 0xc5, 0x83, 0x2e, 0x74, 0xf1, 0xfa, 0x01, 0x00, 0x31,
		0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x74, 0x42, 0x8c, 0x95, 0x5d, 0xe2,
		0x2c, 0x88, 0x3e, 0x3f, 0x00, 0x65, 0x24, 0x5b, 0x72, 0x76, 0x2f, 0x2c, 0xed, 0x48, 0x63, 0xd3,
		0x43, 0x00, 0x6d, 0x00, 0x6d, 0x00, 0x6d, 0x00, 0x6d, 0x00, 0x6d, 0x00, 0x6d, 0xe8, 0x44, 0x1b,
		0x2f, 0x6d, 0xd3, 0x1c, 0x71, 0xac, 0xd9, 0x2a, 0xa0, 0x8e, 0x64, 0x4b, 0xcf, 0xdd, 0x3b, 0xdb,
		0xe1, 0x63, 0xcb, 0x67, 0x76, 0x40, 0x58, 0x3d, 0x31, 0x92, 0xf0, 0x57, 0xf3, 0x03, 0x6b, 0x00,
		0x6b, 0x00, 0x6b, 0x00, 0x6b, 0x00, 0x6b, 0x90, 0x9f, 0x5b, 0x3e, 0x66, 0xae, 0xe0, 0xe2, 0x41,
		0x13, 0xde, 0xa0, 0xac, 0x85, 0xdc, 0x5d, 0xbe, 0xea, 0x27, 0x3b, 0xd0, 0xa0, 0x32, 0x56, 0x0b,
		0xde, 0x3d, 0xfd, 0xde, 0x3e, 0xe9, 0x7e, 0x19, 0xf6, 0x7b, 0x97, 0x17, 0x9d, 0x61, 0xbf, 0xd3,
		0x3e, 0xef, 0x9d, 0x52, 0x6b, 0x8f, 0xef, 0xb6, 0x33, 0x5b, 0x64, 0xef, 0x5f, 0x91, 0x57, 0xb3,
		0xd7, 0xdc, 0x62, 0x68, 0xb5, 0xfa, 0x9f, 0x4f, 0x2e, 0xcf, 0x2f, 0x3a, 0xfd, 0xe1, 0x49, 0xaf,
		0x77, 0x56, 0x2a, 0x42, 0xa3, 0x27, 0x53, 0xd6, 0xbd, 0x77, 0xfa, 0xb5, 0xf3, 0x05, 0x2b, 0x4e,
		0xb7, 0xe2, 0xed, 0x73, 0x08, 0x39, 0xf1, 0x92, 0xf7, 0xfa, 0xdd, 0x3f, 0xba, 0xa7, 0xed, 0x8b,
		0x5e, 0xbf, 0x94, 0xf3, 0x56, 0x2c, 0x83, 0xbc, 0xe1, 0xbd, 0x5c, 0x78, 0xf7, 0x8e, 0x1d, 0x08,
		0xeb, 0xd6, 0x1b, 0xf3, 0x09, 0x67, 0x63, 0x7a, 0xe7, 0x7e, 0x7d, 0x7a, 0xf8, 0xf6, 0xf0, 0xed,
		0xe1, 0xdb, 0xc3, 0xb7, 0x87, 0x6f, 0x4f, 0x7e, 0x6e, 0x05, 0xbf, 0x65, 0x82, 0x8f, 0xfe, 0x0e,
		0x1a, 0x35, 0x0d, 0xbe, 0xfd, 0x07, 0xc2, 0x29, 0x2f, 0x5d, 0xbe, 0xe8, 0x85, 0x50, 0x72, 0x6d,
		0xd7, 0x0b, 0xd8, 0xc8, 0x73, 0xc7, 0x01, 0xe5, 0x2b, 0xf7, 0x6d, 0xf7, 0x86, 0x91, 0xfb, 0xd3,
		0x1a, 0x7a, 0xd1, 0x7d, 0xe3, 0xae, 0xbe, 0x3e, 0xc1, 0x9a, 0xbb, 0xf3, 0x2e, 0x58, 0x13, 0x8d,
		0xf3, 0x7f, 0xf5, 0xed, 0x91, 0xe0, 0x9e, 0xfb, 0x85, 0xdf, 0x84, 0xd2, 0x5e, 0x2e, 0x44, 0x87,
		0xea, 0x6f, 0xf6, 0x7d, 0xe1, 0x45, 0x4e, 0x6f, 0x17, 0x39, 0xe3, 0xa4, 0x30, 0xa7, 0xfd, 0x26,
		0x07, 0xf0, 0x71, 0x77, 0x16, 0x43, 0xaa, 0x42, 0x65, 0x31, 0x50, 0x45, 0x53, 0xb0, 0x0c, 0x7e,
		0x2d, 0xfc, 0x5a, 0xf8, 0xb5, 0xf0, 0x6b, 0xe1, 0xd7, 0x6e, 0x38, 0xb7, 0x33, 0xee, 0x8a, 0xe3,
		0xaa, 0x06, 0x97, 0xb6, 0x09, 0x97, 0x12, 0x2e, 0x25, 0x5c, 0x4a, 0xb8, 0x94, 0x39, 0x10, 0xb9,
		0x5a, 0xb5, 0x55, 0x6b, 0x35, 0x9a, 0xd5, 0x16, 0x1c, 0x49, 0x38, 0x92, 0x45, 0x76, 0x24, 0x69,
		0x1d, 0x10, 0xda, 0x12, 0x9b, 0x70, 0x23, 0xe1, 0x46, 0xc2, 0x8d, 0x84, 0x1b, 0x09, 0x37, 0x72,
		0xc3, 0xb9, 0x5d, 0xb4, 0x2b, 0x24, 0x97, 0xe1, 0x28, 0xf4, 0xf9, 0x03, 0x6d, 0xaa, 0x95, 0x60,
		0xbe, 0x4b, 0xee, 0x4e, 0x96, 0xde, 0xbe, 0xbd, 0x2a, 0x5b, 0xad, 0xc1, 0xe3, 0x55, 0xc5, 0x6a,
		0x0d, 0xc2, 0x8f, 0x95, 0xc5, 0x1f, 0xe1, 0xe7, 0xea, 0x55, 0xd9, 0xaa, 0xad, 0x3e, 0xd7, 0xaf,
		0xca, 0x56, 0x7d, 0x70, 0xf8, 0xe3, 0xc7, 0xfb, 0xc3, 0x5f, 0xc7, 0x4f, 0xfb, 0x7f, 0xf1, 0x68,
		0x39, 0xd9, 0xe1, 0xe3, 0xdb, 0xab, 0x8a, 0x55, 0x1d, 0xac, 0xfe, 0xe3, 0xf8, 0xaa, 0x6c, 0x55,
		0x07, 0x87, 0x87, 0x74, 0x27, 0x74, 0x40, 0xb9, 0xb5, 0xbd, 0xf3, 0xee, 0xff, 0xb4, 0xed, 0xef,
		0x9f, 0x26, 0x6d, 0xf0, 0x7f, 0x4a, 0x40, 0xd8, 0x06, 0x22, 0xec, 0x65, 0xaa, 0x9f, 0xd2, 0xc6,
		0x5b, 0x5b, 0x95, 0xfc, 0xcb, 0xc9, 0x81, 0xb5, 0x81, 0xb5, 0x81, 0xb5, 0x81, 0xb5, 0x81, 0xb5,
		0xc9, 0xcf, 0xed, 0xb5, 0xe7, 0x39, 0xcc, 0x76, 0x75, 0xe0, 0xec, 0x4a, 0x5e, 0x4c, 0x75, 0xa6,
		0xeb, 0x41, 0x2b, 0x6a, 0x56, 0xbf, 0x75, 0x3e, 0x9a, 0x26, 0xf6, 0x3e, 0x3b, 0x0a, 0x3b, 0x15,
		0x87, 0x7f, 0x84, 0xe5, 0x28, 0xd0, 0x2c, 0x21, 0xbe, 0x1d, 0x33, 0xf7, 0x6f, 0xd7, 0xfb, 0xc7,
		0xb5, 0x6c, 0x21, 0x7c, 0x7e, 0xad, 0xa4, 0x77, 0xf4, 0x56, 0xdd, 0xb3, 0x61, 0x6e, 0xb4, 0x51,
		0x30, 0x15, 0xf1, 0xa1, 0x8d, 0x42, 0x3e, 0x11, 0x1d, 0xda, 0x28, 0x24, 0x5a, 0x35, 0xb2, 0x36,
		0x0a, 0x31, 0x25, 0x49, 0xef, 0xaa, 0xc7, 0x1f, 0x81, 0xd6, 0x61, 0xaf, 0xc0, 0x61, 0x87, 0xc3,
		0x0e, 0x87, 0x1d, 0x0e, 0xbb, 0x39, 0x0e, 0x3b, 0x95, 0xfa, 0x8f, 0x26, 0x5c, 0x34, 0x0d, 0x10,
		0xd4, 0x34, 0xc1, 0x41, 0xac, 0xa9, 0xce, 0xe2, 0x11, 0x88, 0x45, 0x57, 0x4f, 0x60, 0x16, 0xb9,
		0x39, 0xd0, 0x69, 0x16, 0xcc, 0x30, 0x0f, 0xba, 0xcd, 0x84, 0x31, 0xe6, 0xc2, 0x18, 0xb3, 0x61,
		0x8c, 0xf9, 0xa0, 0x35, 0x23, 0xc4, 0xe6, 0x24, 0x5a, 0xe5, 0x0b, 0x1d, 0x0a, 0xfe, 0x40, 0x6f,
		0x89, 0xdb, 0x18, 0xda, 0x6f, 0x6a, 0x98, 0x3b, 0xd6, 0x5e, 0xf5, 0xd9, 0xd8, 0xe5, 0x34, 0x14,
		0x95, 0x50, 0xb4, 0x89, 0x3a, 0xb2, 0x6e, 0x95, 0x69, 0x8a, 0x0e, 0xad, 0x9a, 0x7d, 0x57, 0x80,
		0x16, 0x80, 0x16, 0x80, 0x16, 0x80, 0x16, 0x1d, 0xa0, 0x85, 0xda, 0x17, 0x5e, 0xf7, 0x89, 0x1d,
		0xa6, 0x31, 0x4b, 0x6d, 0xcd, 0x35, 0x9e, 0x3f, 0xc9, 0xbb, 0x42, 0xa6, 0x2e, 0xe9, 0x32, 0x3a,
		0x26, 0x18, 0x1f, 0xb3, 0x8c, 0x90, 0x29, 0xc6, 0xc8, 0x38, 0xa3, 0x64, 0x9c, 0x71, 0x32, 0xce,
		0x48, 0xe9, 0x31, 0x56, 0x9a, 0x8c, 0x96, 0x7e, 0x8f, 0x3b, 0xa6, 0x37, 0x66, 0xdc, 0x15, 0x95,
		0x86, 0x4e, 0x9d, 0xb1, 0xb4, 0x22, 0x0d, 0x8d, 0x8f, 0xa0, 0x27, 0xb9, 0xfe, 0xf5, 0x2f, 0xbd,
		0x3a, 0xf3, 0x40, 0x77, 0xf2, 0xbd, 0x61, 0xf0, 0x22, 0xf6, 0x38, 0x9a, 0x93, 0xf3, 0x63, 0xcf,
		0x63, 0x40, 0xc2, 0xb4, 0x21, 0xea, 0x74, 0x5d, 0x84, 0xed, 0xfb, 0xff, 0x8f, 0xbd, 0xeb, 0x7d,
		0x4e, 0x1b, 0x67, 0xfe, 0xef, 0xf3, 0x57, 0x64, 0x3c, 0xcf, 0x8b, 0x64, 0xa6, 0x6e, 0x80, 0xf0,
		0x23, 0xc9, 0x3b, 0xda, 0xd2, 0x1b, 0xe6, 0xd2, 0x90, 0x21, 0xc9, 0x7d, 0x9f, 0x67, 0x72, 0x1c,
		0xe3, 0x80, 0x48, 0x75, 0x47, 0x64, 0xc6, 0x16, 0xb9, 0x64, 0x1a, 0xfe, 0xf7, 0xef, 0x80, 0xc1,
		0x81, 0x18, 0xda, 0x60, 0xa4, 0x95, 0x30, 0x9f, 0x4e, 0xef, 0xe2, 0x12, 0x6c, 0xc9, 0xd2, 0x6a,
		0xf7, 0xf3, 0x59, 0xad, 0x76, 0x21, 0xc2, 0xbf, 0x10, 0xe1, 0x72, 0xa9, 0x74, 0x5c, 0x82, 0x18,
		0xdb, 0x85, 0x45, 0xcc, 0xb7, 0xde, 0xda, 0xdb, 0x8d, 0xf7, 0x35, 0x91, 0x63, 0xc4, 0xdc, 0x4e,
		0xfa, 0x72, 0xb7, 0x81, 0x81, 0x1d, 0x75, 0xf8, 0x0d, 0xe0, 0x37, 0x80, 0xdf, 0x00, 0x7e, 0x03,
		0xf8, 0x0d, 0x32, 0xe2, 0x37, 0x38, 0xb1, 0xc0, 0x6d, 0x50, 0x82, 0xdb, 0x00, 0x6e, 0x03, 0xb8,
		0x0d, 0xe0, 0x36, 0x80, 0xdb, 0x40, 0xbb, 0x08, 0x17, 0x4a, 0x70, 0x1a, 0xc0, 0x69, 0x00, 0xa7,
		0x01, 0xad, 0xd3, 0xe0, 0x71, 0xba, 0xfa, 0x6c, 0xf0, 0x1a, 0x44, 0x7d, 0x81, 0xdb, 0x00, 0x6e,
		0x03, 0xb8, 0x0d, 0xe0, 0x36, 0x80, 0xdb, 0x00, 0x6e, 0x83, 0x35, 0xf5, 0xc6, 0x1d, 0x17, 0x5e,
		0xf0, 0x6c, 0x81, 0xdf, 0xe0, 0xd4, 0x60, 0x17, 0xce, 0x99, 0xb8, 0x9f, 0x04, 0xfe, 0xc3, 0x71,
		0x00, 0xc7, 0xc1, 0x2f, 0x59, 0x57, 0x1e, 0x9c, 0x0b, 0x8e, 0x83, 0xed, 0x16, 0x61, 0xc4, 0x1b,
		0xc0, 0x75, 0x00, 0xd7, 0x01, 0xa9, 0x98, 0xb3, 0x27, 0xc9, 0x44, 0x97, 0xb0, 0xde, 0xfb, 0x4a,
		0xc8, 0x17, 0xf7, 0x04, 0x6e, 0x03, 0xb8, 0x0d, 0xe0, 0x36, 0x80, 0xdb, 0x00, 0x6e, 0x03, 0xb8,
		0x0d, 0xd6, 0x75, 0x1b, 0x90, 0xe7, 0x8b, 0x5d, 0x65, 0x46, 0x88, 0xf2, 0xc7, 0xee, 0x26, 0x68,
		0xf1, 0x07, 0x63, 0x64, 0xee, 0xf5, 0xcd, 0x83, 0x96, 0xb8, 0x27, 0x00, 0x2d, 0x00, 0x2d, 0x00,
		0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0xc9, 0x31, 0x1e, 0x78, 0x81,
		0xe4, 0x36, 0x60, 0x96, 0x59, 0x47, 0x00, 0x59, 0x00, 0x59, 0x00, 0x59, 0x00, 0x59, 0x00, 0x59,
		0x00, 0x59, 0x00, 0x59, 0x00, 0x59, 0x92, 0x63, 0x2c, 0x03, 0x4f, 0x84, 0x5c, 0xf2, 0x47, 0x0b,
		0xe2, 0x4a, 0xe7, 0xfa, 0x02, 0xe0, 0x02, 0xe0, 0x02, 0xe0, 0x02, 0xe0, 0x02, 0xe0, 0x02, 0xe0,
		0x02, 0xe0, 0x62, 0x3d, 0x70, 0xc9, 0x74, 0x7a, 0x51, 0xe2, 0x02, 0x85, 0x89, 0xf6, 0xcd, 0x14,
		0x2c, 0x4c, 0xd6, 0xc6, 0x4b, 0x7e, 0x44, 0x51, 0xd5, 0xd0, 0x9c, 0xac, 0x65, 0xab, 0x60, 0xcc,
		0xef, 0xec, 0xd9, 0x44, 0xc6, 0x17, 0xe7, 0x9c, 0x87, 0xb2, 0x2a, 0x25, 0x71, 0xb5, 0x9a, 0x6f,
		0x5c, 0xd4, 0xfa, 0x6c, 0x0c, 0x07, 0x42, 0x5a, 0x38, 0xed, 0x7c, 0xf3, 0x9e, 0xe6, 0x5a, 0xce,
		0x9f, 0x14, 0x8b, 0xe5, 0x4a, 0xb1, 0x98, 0xab, 0x1c, 0x57, 0x72, 0xa7, 0xa5, 0x52, 0xbe, 0x9c,
		0x27, 0x8c, 0x7e, 0x75, 0x1a, 0x41, 0x97, 0x05, 0xac, 0xfb, 0x69, 0x3c, 0xf5, 0x62, 0xd8, 0xef,
		0x67, 0x4a, 0xa2, 0x0d, 0xe9, 0x65, 0x8b, 0xf5, 0xb1, 0x43, 0x5a, 0x52, 0x21, 0x18, 0x76, 0xa4,
		0x98, 0x82, 0xae, 0x4f, 0xf7, 0x83, 0x76, 0x93, 0xdf, 0xb5, 0xab, 0x3d, 0x7e, 0xe5, 0xf5, 0x78,
		0xbb, 0x3e, 0x78, 0x2c, 0xde, 0x44, 0x6f, 0xda, 0xbe, 0x98, 0xbe, 0x5f, 0xbb, 0xda, 0xfd, 0xbb,
		0xc9, 0xef, 0x1a, 0x43, 0x79, 0x19, 0xb0, 0x76, 0x73, 0xfc, 0x56, 0xed, 0x9b, 0xe8, 0x15, 0xaa,
		0xf1, 0x1b, 0xa0, 0x24, 0xb3, 0xf9, 0x15, 0xb6, 0x23, 0x25, 0x99, 0x97, 0x54, 0xff, 0xdd, 0xd6,
		0xfa, 0xcc, 0x7b, 0x5b, 0x24, 0x65, 0x33, 0x24, 0x12, 0xb9, 0x31, 0xf6, 0xc7, 0xb3, 0xee, 0x72,
		0x5d, 0x21, 0xe1, 0x34, 0xf0, 0x83, 0x0e, 0x6e, 0x18, 0x85, 0x17, 0x34, 0x70, 0x42, 0x97, 0xd8,
		0x11, 0x29, 0x35, 0x33, 0xca, 0x4c, 0xa3, 0xe5, 0x57, 0x63, 0xe9, 0xf5, 0xa8, 0x56, 0xf5, 0x8a,
		0x4f, 0xed, 0x13, 0x15, 0xcb, 0xb2, 0x6e, 0x19, 0xa6, 0x96, 0x5d, 0xb5, 0x42, 0xa1, 0x6e, 0xea,
		0x14, 0x4e, 0x9b, 0xa6, 0xd2, 0x63, 0x5a, 0x4b, 0x8b, 0x69, 0x2a, 0x1d, 0xf6, 0xba, 0xbd, 0x55,
		0x50, 0xfc, 0x60, 0x8d, 0xdb, 0x56, 0x34, 0xdb, 0x51, 0xba, 0xb7, 0x99, 0xc8, 0xb6, 0x8f, 0xc8,
		0xb6, 0x85, 0xc8, 0xb6, 0x7b, 0x60, 0x10, 0x48, 0x0c, 0x82, 0x06, 0x4f, 0xb2, 0x42, 0x7b, 0xb0,
		0x67, 0xd1, 0xdc, 0xeb, 0x9a, 0x73, 0xb2, 0xb9, 0x76, 0x94, 0x5a, 0xd7, 0x8d, 0xb0, 0xa9, 0x1a,
		0x81, 0xdb, 0x5c, 0x3c, 0x14, 0x88, 0x86, 0x33, 0x1b, 0x6e, 0xd7, 0xeb, 0x76, 0x03, 0x16, 0x86,
		0xca, 0x84, 0x23, 0x36, 0x81, 0x89, 0x16, 0x14, 0x09, 0xb4, 0xda, 0xa8, 0x1b, 0xe5, 0x51, 0x34,
		0x3a, 0xe0, 0x85, 0x5e, 0x58, 0xa1, 0x0b, 0x4e, 0x68, 0x87, 0x11, 0xda, 0xe1, 0x83, 0x76, 0xd8,
		0x60, 0x97, 0xa9, 0x50, 0x1e, 0x95, 0xa1, 0xb1, 0x4c, 0xb7, 0x8e, 0xf2, 0xdb, 0xc9, 0xb2, 0xda,
		0x09, 0x1d, 0x96, 0x21, 0x0b, 0xa0, 0x96, 0x6a, 0x6a, 0xa1, 0x98, 0x8a, 0xa9, 0x25, 0x74, 0x3d,
		0x74, 0x3d, 0x74, 0x7d, 0xf4, 0xb6, 0xaa, 0xab, 0x20, 0xeb, 0x03, 0x94, 0x54, 0xc0, 0x52, 0x13,
		0xc0, 0xd4, 0xa6, 0x7c, 0xe0, 0xcf, 0x82, 0x3f, 0x6b, 0xc7, 0xfd, 0x59, 0xda, 0xc2, 0x88, 0x63,
		0xb9, 0xe7, 0x03, 0x4d, 0x5a, 0x66, 0x01, 0xde, 0x68, 0xc8, 0x29, 0x3b, 0x1b, 0x1b, 0x3d, 0x99,
		0x62, 0x35, 0x6e, 0x88, 0xbe, 0x8e, 0xfc, 0x63, 0x51, 0xe3, 0xd8, 0x27, 0xe6, 0xe0, 0x44, 0x63,
		0x1b, 0x97, 0x9e, 0x94, 0x2c, 0x10, 0xda, 0x13, 0xf7, 0x3a, 0x07, 0x07, 0xb7, 0x39, 0xf7, 0xb4,
		0xf5, 0x72, 0x9b, 0x77, 0x4f, 0x5b, 0xd1, 0x65, 0x7e, 0xf2, 0x23, 0xba, 0x2e, 0xdc, 0xe6, 0xdc,
		0xe2, 0xec, 0xba, 0x74, 0x9b, 0x73, 0x4b, 0xad, 0xc3, 0x3f, 0xff, 0xfc, 0x78, 0xf8, 0xe3, 0x78,
		0xb4, 0xfe, 0x8d, 0xfa, 0xc2, 0x5f, 0x5a, 0x3a, 0xa7, 0xa2, 0x71, 0x55, 0xff, 0x2f, 0xd9, 0x7c,
		0xfc, 0x45, 0x39, 0x21, 0xff, 0xd1, 0x38, 0x23, 0xdb, 0x14, 0xbb, 0x41, 0xa3, 0x9c, 0xca, 0x50,
		0x4e, 0xa9, 0x94, 0x93, 0xe7, 0xf6, 0xaa, 0xee, 0xd7, 0xd6, 0x8f, 0xfc, 0x87, 0xe2, 0xe8, 0xec,
		0xf0, 0x47, 0x65, 0xf4, 0xf6, 0xc3, 0x97, 0x65, 0x5f, 0xcb, 0x7f, 0xa8, 0x8c, 0xce, 0x56, 0xfc,
		0xa6, 0x3c, 0x3a, 0x7b, 0xe7, 0x33, 0x4a, 0xa3, 0x83, 0xc4, 0x57, 0xc7, 0x9f, 0x17, 0x56, 0xdd,
		0x50, 0x5c, 0x71, 0xc3, 0xf1, 0xaa, 0x1b, 0x8e, 0x57, 0xdc, 0xb0, 0xb2, 0x4b, 0x85, 0x15, 0x37,
		0x94, 0x46, 0x2f, 0x89, 0xef, 0x1f, 0x2c, 0xff, 0x6a, 0x79, 0x74, 0xf8, 0xb2, 0xea, 0x77, 0x95,
		0xd1, 0xcb, 0xd9, 0x21, 0x54, 0xf5, 0xfb, 0x55, 0x35, 0xc4, 0x93, 0x5e, 0x3c, 0xb7, 0xcf, 0x70,
		0xed, 0xd9, 0xdd, 0x4f, 0xec, 0x65, 0xaf, 0xf7, 0x5c, 0x6d, 0x7b, 0xd9, 0x0a, 0xe3, 0x14, 0x14,
		0x6c, 0x1a, 0xec, 0x19, 0x9c, 0xc3, 0x59, 0x1c, 0xb7, 0x62, 0xe7, 0x9d, 0xda, 0x88, 0x6d, 0xf5,
		0x91, 0xd9, 0x24, 0x11, 0xd8, 0x6a, 0x23, 0xad, 0x37, 0x9d, 0x68, 0xc5, 0x8b, 0x54, 0xdb, 0xe2,
		0x74, 0x94, 0xec, 0xa1, 0xad, 0x1b, 0x50, 0xb2, 0x99, 0x32, 0x48, 0xbf, 0x84, 0xd3, 0xdd, 0x99,
		0x52, 0x16, 0x54, 0xc9, 0x80, 0xea, 0xb9, 0x4f, 0x37, 0xf8, 0xeb, 0x0f, 0xdd, 0x7a, 0x77, 0xac,
		0x39, 0xc8, 0x9b, 0x0e, 0xae, 0x9a, 0x41, 0x4d, 0xb1, 0x7a, 0xde, 0xbf, 0x5a, 0xd6, 0x9b, 0xa7,
		0xf7, 0x8f, 0xf6, 0x1a, 0x23, 0x1d, 0x51, 0xfc, 0x30, 0x90, 0xcc, 0x1d, 0xf8, 0x7d, 0xde, 0x79,
		0x5e, 0x7b, 0xac, 0x17, 0x9d, 0x05, 0xf3, 0x4f, 0x5a, 0x73, 0xbe, 0xd3, 0x6d, 0x82, 0xa7, 0xde,
		0x6f, 0xda, 0x64, 0x3f, 0x49, 0xcd, 0x7e, 0xd1, 0xa6, 0xfb, 0x41, 0xca, 0xf6, 0x7b, 0x94, 0xed,
		0xe7, 0x28, 0xdb, 0xaf, 0xd1, 0xab, 0x59, 0xd2, 0x6e, 0x0a, 0x3b, 0xfd, 0xe8, 0x9d, 0xd2, 0xcf,
		0x58, 0x1c, 0x28, 0x34, 0x7d, 0x50, 0xca, 0x61, 0xde, 0x2c, 0x5e, 0x64, 0xe3, 0x2d, 0x5a, 0x15,
		0x5b, 0xb1, 0x6a, 0xb7, 0x5c, 0x55, 0x6d, 0xad, 0x2a, 0xdf, 0x42, 0x55, 0xbe, 0x55, 0xaa, 0x7c,
		0x4b, 0x94, 0x16, 0x31, 0x6d, 0x1a, 0x8f, 0xe1, 0x4c, 0xcf, 0x48, 0x6d, 0x3c, 0xd1, 0x33, 0xf1,
		0x9b, 0x3e, 0x6f, 0x53, 0xd6, 0xa7, 0x24, 0x80, 0x4b, 0x59, 0xec, 0x84, 0xca, 0x58, 0x09, 0x3d,
		0xb1, 0x11, 0xaa, 0x63, 0x21, 0xb4, 0xc5, 0x3e, 0x68, 0x8b, 0x75, 0xd0, 0x16, 0xdb, 0x60, 0xd6,
		0xff, 0xa1, 0x2a, 0xe0, 0x2a, 0x5a, 0x98, 0xea, 0xe3, 0x36, 0x55, 0x1e, 0x0c, 0x46, 0xdc, 0x26,
		0xe2, 0x36, 0x75, 0xab, 0x09, 0xed, 0xea, 0x42, 0x9d, 0xe3, 0x75, 0xdf, 0xe6, 0xb8, 0xcd, 0x8e,
		0xdf, 0xf7, 0x03, 0x7d, 0xc1, 0x9a, 0xd1, 0xe3, 0x11, 0xa1, 0x89, 0x08, 0x4d, 0xa3, 0x6a, 0x88,
		0x4c, 0x1d, 0x91, 0xa9, 0x25, 0xb5, 0xea, 0x49, 0xb1, 0x9a, 0x8a, 0x47, 0x41, 0x7f, 0x84, 0xa6,
		0xfa, 0xa3, 0x45, 0x09, 0x14, 0x53, 0xd1, 0xf0, 0xec, 0xc4, 0x51, 0xa3, 0x48, 0x51, 0xee, 0x40,
		0x8a, 0x0b, 0x26, 0xba, 0x03, 0x9f, 0x4f, 0x16, 0x86, 0x26, 0x9b, 0x13, 0xb7, 0x00, 0xb3, 0x03,
		0xb3, 0x03, 0xb3, 0x03, 0xb3, 0x03, 0xb3, 0xb3, 0xd2, 0xec, 0xc4, 0xba, 0x72, 0x07, 0x2c, 0xcf,
		0x2c, 0x79, 0xa0, 0x36, 0xc3, 0xa3, 0x27, 0x3b, 0x21, 0xec, 0x0e, 0xec, 0x0e, 0xec, 0x0e, 0xec,
		0x4e, 0xa6, 0xec, 0xce, 0x4c, 0x55, 0x22, 0xa7, 0xdf, 0xa6, 0x12, 0xb1, 0x95, 0x39, 0xfd, 0x60,
		0x72, 0x60, 0x72, 0x60, 0x72, 0x54, 0x8c, 0x82, 0xea, 0x0d, 0x81, 0xf8, 0xc1, 0x93, 0xda, 0x1f,
		0x5c, 0x74, 0x99, 0xbe, 0x0a, 0x6f, 0xf1, 0xd2, 0x9a, 0x6b, 0x4b, 0x57, 0x1a, 0x71, 0xad, 0xb5,
		0xfa, 0xb4, 0xd7, 0xe2, 0xa3, 0xa8, 0xb5, 0x47, 0x5b, 0x4b, 0x8f, 0xaa, 0x56, 0x1e, 0x79, 0x2d,
		0x3c, 0xf2, 0x5a, 0x77, 0xe4, 0xb5, 0xec, 0xb6, 0xab, 0x80, 0x80, 0xf6, 0x5a, 0x73, 0x04, 0xd8,
		0x9c, 0x02, 0xa3, 0x2f, 0xc3, 0xea, 0x4b, 0xff, 0x4e, 0x94, 0x75, 0xc8, 0x64, 0x18, 0x5f, 0x4d,
		0x31, 0x7d, 0xa4, 0xc0, 0xb7, 0x25, 0x75, 0xbb, 0x06, 0x0c, 0xa7, 0x67, 0x2f, 0x3d, 0x21, 0x67,
		0x3a, 0xf6, 0xd4, 0x61, 0x28, 0x61, 0x28, 0x61, 0x28, 0x61, 0x28, 0x49, 0xd6, 0xcd, 0x90, 0x0b,
		0x79, 0x5c, 0x20, 0xb0, 0x93, 0x3a, 0xcd, 0x64, 0xd3, 0x13, 0xf7, 0x4c, 0x7b, 0x5e, 0x02, 0x82,
		0x7a, 0x5a, 0xdf, 0x38, 0x5d, 0x49, 0x3c, 0xe2, 0x9a, 0xe9, 0xce, 0x1f, 0x5e, 0x7f, 0xc8, 0x08,
		0xdb, 0xfb, 0x1a, 0x78, 0x1d, 0xc9, 0x7d, 0xf1, 0x85, 0xdf, 0xf3, 0xe8, 0x0c, 0xb1, 0xfe, 0xe2,
		0x71, 0x1f, 0x08, 0x44, 0xc4, 0x7b, 0xca, 0xbc, 0x88, 0x14, 0x0b, 0xa7, 0xc5, 0xd3, 0x72, 0xa5,
		0x70, 0x5a, 0xca, 0xb0, 0xac, 0x6c, 0x69, 0xc9, 0xba, 0xd6, 0x4e, 0x93, 0x8a, 0x87, 0x87, 0xa1,
		0xe0, 0xf2, 0x99, 0xca, 0x19, 0xf7, 0xb6, 0x41, 0x10, 0x0d, 0x10, 0x0d, 0x10, 0x0d, 0x10, 0x8d,
		0x2d, 0x24, 0x1a, 0x3b, 0xe2, 0x91, 0x9b, 0x69, 0x6c, 0xce, 0xc2, 0xf8, 0xfa, 0x19, 0x4e, 0xb9,
		0x68, 0xf0, 0xb4, 0xc5, 0x1b, 0x27, 0xa4, 0x4d, 0x53, 0xdc, 0x31, 0x2c, 0x26, 0x2c, 0x26, 0x2c,
		0x26, 0x2c, 0xe6, 0x19, 0x4d, 0x66, 0x5b, 0xca, 0xbc, 0xb6, 0xa7, 0x1a, 0xdb, 0xd0, 0x9a, 0x00,
		0x7d, 0xf6, 0x87, 0xc0, 0x3d, 0x47, 0x9c, 0x10, 0x3d, 0x31, 0x47, 0x27, 0x04, 0x6d, 0x51, 0x65,
		0x79, 0x8d, 0x1b, 0xcc, 0x46, 0xa2, 0xf4, 0xd8, 0x3d, 0x42, 0x31, 0x45, 0x94, 0xd9, 0x78, 0xe3,
		0x56, 0xb3, 0x92, 0x40, 0x5d, 0xaf, 0x23, 0x4b, 0xb3, 0xf9, 0x31, 0xa3, 0xec, 0xca, 0x50, 0x76,
		0x4a, 0x95, 0x1d, 0x32, 0x5b, 0x67, 0x29, 0xf1, 0xfa, 0xce, 0xa8, 0x7e, 0x88, 0x6d, 0xa6, 0x12,
		0xb2, 0x13, 0x19, 0x42, 0xec, 0x44, 0xe9, 0xf0, 0xa4, 0x3d, 0x49, 0x97, 0x7c, 0x37, 0x6a, 0x59,
		0xa3, 0xf0, 0xaf, 0xc1, 0xbf, 0x06, 0xff, 0x1a, 0xfc, 0x6b, 0x5b, 0xe8, 0x5f, 0xdb, 0x91, 0x1d,
		0xa9, 0x79, 0xad, 0xcd, 0x59, 0xb8, 0xf0, 0x6f, 0xec, 0x4c, 0x4d, 0x07, 0x91, 0x8b, 0x47, 0xaf,
		0xcf, 0xbb, 0x6e, 0xc0, 0xbc, 0xd0, 0x17, 0xfa, 0x4d, 0xe9, 0x9b, 0xf6, 0x60, 0x45, 0x61, 0x45,
		0x61, 0x45, 0x61, 0x45, 0xb7, 0xd0, 0x8a, 0xf2, 0x2e, 0x13, 0x92, 0xcb, 0x67, 0x22, 0x4b, 0xaa,
		0x31, 0x22, 0xd4, 0xa9, 0x4f, 0x5f, 0xe5, 0x93, 0x17, 0x12, 0x2c, 0xd1, 0xd9, 0x00, 0xd6, 0x2f,
		0xfe, 0xa8, 0x9e, 0xd7, 0xbf, 0xb4, 0x9b, 0x8d, 0x9b, 0xeb, 0x5a, 0xbb, 0x59, 0xab, 0x5e, 0x35,
		0x2e, 0x74, 0xaf, 0xd6, 0x49, 0xa0, 0x6d, 0x48, 0xe2, 0x40, 0x22, 0x8a, 0x54, 0x7e, 0x3b, 0x9a,
		0x9f, 0xcf, 0x6f, 0xae, 0xae, 0x6b, 0xcd, 0xf6, 0x79, 0xa3, 0x71, 0xe9, 0x64, 0x21, 0xf0, 0xdb,
		0xd4, 0x38, 0x36, 0x2e, 0xbe, 0xd6, 0xbe, 0x60, 0x04, 0xd3, 0x8f, 0x60, 0xf5, 0x0a, 0x42, 0xb8,
		0xe1, 0x10, 0x36, 0x9a, 0xf5, 0xdf, 0xea, 0x17, 0xd5, 0xeb, 0x46, 0xd3, 0xd9, 0xf2, 0xb8, 0xfc,
		0xd6, 0xb6, 0xe1, 0x93, 0xad, 0x60, 0x6f, 0x7d, 0x2f, 0x94, 0xee, 0x83, 0xdf, 0xe5, 0x3d, 0xce,
		0xba, 0xfa, 0xc9, 0xdb, 0x62, 0x73, 0xe0, 0x6e, 0xe0, 0x6e, 0xe0, 0x6e, 0xe0, 0x6e, 0x5b, 0xc8,
		0xdd, 0x24, 0x7f, 0x60, 0x92, 0x77, 0xfe, 0x09, 0xcb, 0x45, 0x02, 0xee, 0xa6, 0xb3, 0x72, 0xfe,
		0x8d, 0x88, 0xce, 0xed, 0x39, 0xc2, 0x13, 0x7e, 0xc8, 0x3a, 0xbe, 0xe8, 0x6a, 0x8d, 0x9a, 0xc4,
		0x89, 0x63, 0xfb, 0x6c, 0xda, 0x72, 0x96, 0x8b, 0x13, 0xc7, 0x1b, 0x8b, 0xc8, 0x0e, 0x9c, 0x38,
		0xd6, 0x53, 0x0d, 0xda, 0x5a, 0xa9, 0x41, 0xc4, 0xc7, 0xd6, 0x71, 0x1c, 0x5d, 0x19, 0xb3, 0x13,
		0xa0, 0x40, 0x4f, 0xe6, 0xec, 0xb8, 0x99, 0x2f, 0xac, 0xe7, 0x0d, 0xfb, 0x13, 0xe8, 0x97, 0x03,
		0x77, 0x02, 0x77, 0x02, 0x77, 0x02, 0x77, 0xda, 0x46, 0xee, 0x84, 0xc4, 0x49, 0xa0, 0x31, 0xa0,
		0x31, 0xa0, 0x31, 0x56, 0x89, 0x08, 0x12, 0x27, 0x81, 0xbc, 0xd8, 0x48, 0x5e, 0xa6, 0xc1, 0x6e,
		0x4a, 0xcb, 0x25, 0xaf, 0xb4, 0xcc, 0xf3, 0x8d, 0x81, 0x60, 0x80, 0x60, 0x80, 0x60, 0x80, 0x60,
		0x6c, 0x21, 0xc1, 0xb8, 0xf3, 0xfd, 0x3e, 0xf3, 0x04, 0x45, 0x50, 0x5d, 0x7e, 0x5b, 0x4c, 0x93,
		0xd5, 0xe5, 0x3f, 0xaa, 0x42, 0xf8, 0xd2, 0x1b, 0xa3, 0x21, 0x3d, 0x55, 0x40, 0xc2, 0xce, 0x77,
		0xf6, 0xe0, 0x0d, 0xa6, 0xe1, 0xfe, 0x47, 0xfe, 0x80, 0x89, 0xce, 0xc4, 0x50, 0x8c, 0xd7, 0xe7,
		0xd1, 0xf8, 0xbf, 0x80, 0xdf, 0x1d, 0x79, 0x3d, 0xee, 0x86, 0x5e, 0x8f, 0x87, 0xf1, 0xd5, 0xd1,
		0xe4, 0x04, 0x77, 0x18, 0x48, 0xe6, 0x0e, 0xfc, 0x3e, 0xef, 0x3c, 0x1f, 0xf5, 0xa3, 0x75, 0x7d,
		0x34, 0xb1, 0x91, 0x61, 0xf4, 0x23, 0x3a, 0x09, 0xb0, 0x0b, 0x45, 0xa0, 0x86, 0xe2, 0x1f, 0xe1,
		0xff, 0x2b, 0x5c, 0x4f, 0xca, 0x80, 0xdf, 0x8d, 0x47, 0x40, 0x5f, 0x45, 0xa8, 0x25, 0x6d, 0xa1,
		0x3c, 0x14, 0xca, 0x43, 0x59, 0x01, 0x31, 0x50, 0x1e, 0x8a, 0xd6, 0x3e, 0x68, 0x2b, 0x0f, 0x95,
		0x50, 0x32, 0xfa, 0x39, 0x56, 0xb2, 0x49, 0xbd, 0x4c, 0x2b, 0x0f, 0xa6, 0x05, 0xa6, 0x05, 0xa6,
		0xb5, 0x4b, 0x4c, 0x4b, 0x97, 0xba, 0x8c, 0x1b, 0x98, 0x94, 0x4c, 0x92, 0xba, 0xf9, 0xdc, 0x7e,
		0xa2, 0xb8, 0xde, 0xa4, 0x49, 0xcd, 0xa2, 0x45, 0xe3, 0x7f, 0xd6, 0xae, 0x3e, 0x29, 0xd5, 0xa8,
		0x19, 0x75, 0x4a, 0xad, 0x56, 0x8d, 0xa9, 0x57, 0x63, 0x6a, 0xd6, 0x98, 0xba, 0xd5, 0xab, 0x76,
		0x35, 0xab, 0x5f, 0x3a, 0x87, 0x57, 0x62, 0xdd, 0xe9, 0xcf, 0xcb, 0x90, 0x40, 0x97, 0x15, 0x9a,
		0x5c, 0x73, 0x8b, 0x75, 0xb7, 0x5f, 0x8d, 0xc1, 0x96, 0xee, 0x68, 0x69, 0x14, 0x3d, 0x4d, 0x95,
		0xba, 0x57, 0xca, 0x9c, 0x8e, 0xca, 0xdd, 0xc4, 0x5c, 0x06, 0x46, 0x19, 0x46, 0x19, 0x46, 0x79,
		0x37, 0x8c, 0xb2, 0x6e, 0x6e, 0xb4, 0xc8, 0x91, 0xfa, 0x8c, 0x30, 0xb8, 0x6a, 0x81, 0x2a, 0x8d,
		0x5b, 0xfe, 0x90, 0xc9, 0x88, 0x1d, 0x2a, 0x25, 0x6d, 0x42, 0x59, 0x9b, 0x55, 0xda, 0xa6, 0x94,
		0xb7, 0x71, 0x25, 0x6e, 0x5c, 0x99, 0x1b, 0x57, 0xea, 0x34, 0xca, 0x9d, 0x48, 0xc9, 0xd3, 0x33,
		0xb0, 0xc4, 0xba, 0x1d, 0x72, 0x21, 0xf3, 0x65, 0xca, 0x35, 0x3b, 0xd5, 0xc2, 0x65, 0xc2, 0x26,
		0x69, 0x62, 0xa0, 0xdf, 0xfe, 0xa1, 0xd5, 0x49, 0xfb, 0xd4, 0x31, 0xd2, 0x86, 0xcd, 0x6b, 0xa2,
		0x79, 0xe2, 0x18, 0xea, 0x44, 0xfb, 0x06, 0xe2, 0x64, 0x0d, 0xa9, 0xab, 0x45, 0x91, 0xf3, 0x9e,
		0x76, 0x5e, 0xe4, 0xca, 0xa5, 0xd2, 0x71, 0x69, 0x87, 0xc5, 0x6e, 0x2f, 0x9b, 0xad, 0xb5, 0xf6,
		0xb2, 0xf1, 0x3e, 0x14, 0x47, 0x2f, 0xe8, 0x76, 0xda, 0x96, 0xd3, 0x48, 0x82, 0x1d, 0x37, 0xf0,
		0x48, 0xf0, 0x48, 0xf0, 0x48, 0xf0, 0x48, 0xf0, 0xc8, 0x15, 0x3c, 0xf2, 0xc4, 0x00, 0x8d, 0x2c,
		0x81, 0x46, 0x82, 0x46, 0x82, 0x46, 0x82, 0x46, 0x66, 0x40, 0xe4, 0x0a, 0x25, 0x90, 0x48, 0x90,
		0xc8, 0x5d, 0x27, 0x91, 0x8f, 0xd3, 0xd5, 0x60, 0x82, 0x45, 0x46, 0x6d, 0x83, 0x46, 0x82, 0x46,
		0x82, 0x46, 0x82, 0x46, 0x82, 0x46, 0x92, 0xaf, 0xdb, 0x3b, 0x2e, 0xbc, 0xe0, 0xd9, 0x00, 0x8f,
		0x3c, 0x25, 0x6c, 0xf2, 0x9c, 0x89, 0xfb, 0x49, 0xa0, 0x28, 0x88, 0xe4, 0x0e, 0xa0, 0xfa, 0x3c,
		0x88, 0x24, 0x88, 0x24, 0xad, 0xc8, 0x61, 0x3f, 0x12, 0x54, 0x72, 0xc7, 0xa9, 0x24, 0x7b, 0x92,
		0x4c, 0x74, 0x35, 0x96, 0x0a, 0x59, 0x09, 0x61, 0xe2, 0x96, 0x41, 0x23, 0x41, 0x23, 0x41, 0x23,
		0x41, 0x23, 0x41, 0x23, 0xe9, 0x69, 0xa4, 0xf6, 0xc4, 0x5a, 0xab, 0xd4, 0xb0, 0xa6, 0x44, 0x5b,
		0xd9, 0x34, 0xd2, 0xfe, 0x60, 0x8c, 0x14, 0xbd, 0x3e, 0xbd, 0x91, 0x8e, 0x5b, 0x86, 0x91, 0x86,
		0x91, 0x86, 0x91, 0x86, 0x91, 0x86, 0x91, 0x86, 0x91, 0x86, 0x91, 0x5e, 0x36, 0x66, 0x03, 0x2f,
		0x90, 0xdc, 0x84, 0x8d, 0x9e, 0x35, 0x0c, 0x13, 0x0d, 0x13, 0x0d, 0x13, 0x0d, 0x13, 0x0d, 0x13,
		0x0d, 0x13, 0x0d, 0x13, 0xbd, 0x6c, 0xcc, 0x64, 0xe0, 0x89, 0x90, 0x4b, 0xfe, 0x68, 0x20, 0x6e,
		0x6a, 0xae, 0x6d, 0x18, 0x6a, 0x18, 0x6a, 0x18, 0x6a, 0x18, 0x6a, 0x18, 0x6a, 0x18, 0xea, 0x2d,
		0x34, 0xd4, 0x5b, 0x9d, 0x2e, 0x4a, 0x73, 0x65, 0x8a, 0x44, 0x7b, 0x9a, 0x2b, 0x55, 0x24, 0x8b,
		0x2a, 0x24, 0x3f, 0xd2, 0x51, 0xce, 0x82, 0x4e, 0x28, 0xb6, 0x2b, 0x53, 0xf3, 0xef, 0xec, 0x99,
		0xe2, 0xa8, 0xb5, 0x73, 0xce, 0x43, 0x59, 0x95, 0x52, 0x73, 0x5a, 0xe8, 0x6f, 0x5c, 0xd4, 0xfa,
		0x6c, 0x6c, 0xf7, 0x42, 0xbd, 0xb8, 0xce, 0xf9, 0xe6, 0x3d, 0xcd, 0xb5, 0x44, 0x5b, 0x82, 0xdc,
		0x69, 0x04, 0x5d, 0x16, 0xb0, 0xee, 0xa7, 0xf1, 0xd4, 0x89, 0x61, 0xbf, 0xbf, 0x55, 0x12, 0x47,
		0xa4, 0xd0, 0x6c, 0x50, 0x64, 0x8e, 0xd6, 0x24, 0xab, 0xc1, 0xb0, 0x23, 0xc5, 0x14, 0x26, 0x7c,
		0xba, 0x1f, 0xb4, 0x9b, 0xfc, 0xae, 0x5d, 0xed, 0xf1, 0x2b, 0xaf, 0xc7, 0xdb, 0xf5, 0xc1, 0x63,
		0xf9, 0x2a, 0x90, 0xec, 0x72, 0xf2, 0x06, 0xed, 0x73, 0xbf, 0x33, 0xfe, 0x6d, 0x73, 0xdc, 0xf3,
		0xf6, 0x4d, 0xd4, 0xcd, 0x6a, 0xdc, 0x4b, 0x54, 0x90, 0xb2, 0x5f, 0xac, 0xe9, 0xc5, 0xd9, 0xda,
		0x72, 0x52, 0x7b, 0x16, 0x4d, 0xff, 0xcc, 0x7e, 0x4e, 0x0b, 0xef, 0xef, 0x33, 0xd1, 0x1d, 0xf8,
		0x5c, 0xc8, 0xfd, 0x8e, 0xdf, 0xf7, 0x03, 0x45, 0xeb, 0x5f, 0x8f, 0xf1, 0xd4, 0x67, 0x2c, 0x49,
		0x8d, 0xa3, 0x1e, 0x63, 0xa8, 0x4a, 0x3c, 0x34, 0x69, 0x05, 0xcd, 0xda, 0x40, 0xa1, 0xdd, 0x4a,
		0x6f, 0xa7, 0xd4, 0xe8, 0x9f, 0xcd, 0xb5, 0xc5, 0x66, 0x4f, 0xd8, 0x50, 0x90, 0x54, 0x0b, 0x90,
		0x36, 0xc1, 0xd9, 0x6c, 0xb6, 0xd2, 0x8f, 0x71, 0xba, 0x3b, 0x53, 0xce, 0x8a, 0xaa, 0xd9, 0x50,
		0x3f, 0x0b, 0x1b, 0xac, 0xd8, 0x34, 0x2b, 0x34, 0xdd, 0x6c, 0xaf, 0x3f, 0x57, 0x29, 0xe6, 0xc9,
		0x11, 0x8c, 0xdf, 0x7f, 0xbf, 0xf3, 0x83, 0xf4, 0x95, 0x21, 0x63, 0xe7, 0xdb, 0xeb, 0xa3, 0x52,
		0xca, 0xcb, 0x66, 0x55, 0x03, 0x36, 0xde, 0xa1, 0x50, 0xb1, 0xe3, 0xa0, 0x76, 0x07, 0x41, 0xd5,
		0x8e, 0x80, 0x72, 0x0f, 0xbf, 0x72, 0x8f, 0xbd, 0x72, 0x0f, 0x3c, 0xad, 0xa6, 0xdb, 0x34, 0x4b,
		0x7d, 0xbc, 0x76, 0x36, 0x9f, 0xea, 0xb7, 0xab, 0x71, 0xd3, 0x99, 0x56, 0x53, 0xca, 0x43, 0xd9,
		0xf6, 0xa1, 0xca, 0x6d, 0x41, 0x3d, 0xdb, 0x7d, 0xaa, 0xb7, 0xf1, 0xb4, 0x6d, 0xcf, 0x69, 0xdb,
		0x76, 0xd3, 0xb6, 0x9d, 0x66, 0x16, 0x5c, 0xaa, 0x2a, 0x45, 0xe1, 0x78, 0xdd, 0xbf, 0x27, 0x63,
		0xc2, 0x85, 0x3b, 0xf0, 0x43, 0xa9, 0x4e, 0x52, 0xe2, 0x24, 0x2e, 0x6f, 0x1a, 0x50, 0xc5, 0xde,
		0x95, 0x56, 0xf5, 0x51, 0x1e, 0x51, 0xa0, 0x23, 0x62, 0x40, 0x6f, 0x44, 0x80, 0xae, 0x1d, 0x7f,
		0xed, 0x3b, 0xfa, 0xda, 0x77, 0xec, 0xb5, 0xef, 0xc8, 0xdb, 0xe5, 0x17, 0x53, 0x5d, 0xe5, 0xc6,
		0x99, 0xd2, 0x4c, 0x6d, 0xd5, 0xde, 0xa7, 0xcf, 0x47, 0x85, 0x77, 0x54, 0x78, 0x37, 0xaa, 0x88,
		0xc8, 0x14, 0x12, 0x99, 0x62, 0x52, 0xab, 0xa0, 0x14, 0x2b, 0x2a, 0x6d, 0x0a, 0x6b, 0x51, 0x71,
		0xe9, 0xaf, 0xea, 0xae, 0xda, 0x71, 0x4b, 0xa0, 0xc6, 0xb4, 0xab, 0x33, 0x0a, 0xb5, 0x46, 0xab,
		0xde, 0xa8, 0xd4, 0x1c, 0xb9, 0xba, 0x23, 0x57, 0x7b, 0xe4, 0xea, 0x4f, 0x8f, 0x1a, 0xd4, 0xa4,
		0x0e, 0xb5, 0xab, 0xc5, 0xb8, 0x81, 0x68, 0xa3, 0x94, 0xac, 0x58, 0xac, 0xca, 0x7d, 0xd9, 0x5f,
		0xa9, 0x4b, 0x54, 0x70, 0xb7, 0x5d, 0x8d, 0x52, 0xab, 0x53, 0x63, 0x6a, 0xd5, 0x98, 0x7a, 0x35,
		0xa6, 0x66, 0xf5, 0xaa, 0x5b, 0xcd, 0x6a, 0x37, 0x1e, 0x35, 0x54, 0x70, 0x57, 0xa5, 0xc2, 0xde,
		0x56, 0x70, 0x8f, 0x0c, 0x01, 0xaa, 0xb7, 0x27, 0x46, 0x6a, 0x16, 0xc2, 0x44, 0x67, 0x93, 0xe3,
		0x16, 0x61, 0x96, 0x61, 0x96, 0x61, 0x96, 0x61, 0x96, 0x61, 0x96, 0x77, 0xd6, 0x2c, 0xc7, 0xb6,
		0x00, 0x96, 0x39, 0x31, 0x58, 0xd3, 0x20, 0x63, 0x3a, 0xc3, 0x3c, 0x6b, 0x10, 0x76, 0x19, 0x76,
		0x19, 0x76, 0x19, 0x76, 0x19, 0x76, 0x79, 0x67, 0xed, 0xf2, 0xcc, 0x14, 0xc0, 0x2c, 0x27, 0xc6,
		0x2a, 0x3a, 0xad, 0x4c, 0x66, 0x94, 0xa3, 0xe6, 0x68, 0x4c, 0x72, 0x1e, 0x26, 0x19, 0x26, 0x19,
		0x26, 0x19, 0x26, 0x39, 0xfd, 0xa8, 0xe9, 0xde, 0x40, 0x8c, 0x1b, 0x9a, 0xa4, 0x30, 0xe0, 0xa2,
		0xcb, 0x9e, 0x0c, 0xd5, 0x18, 0x8c, 0xda, 0x46, 0xae, 0xac, 0x6d, 0x53, 0xd8, 0x66, 0x15, 0xb7,
		0x29, 0x05, 0x6e, 0x5c, 0x91, 0x1b, 0x57, 0xe8, 0xc6, 0x15, 0x3b, 0x8d, 0x82, 0x27, 0x52, 0xf4,
		0xf4, 0x1c, 0xcc, 0x20, 0x17, 0x33, 0xc1, 0xc9, 0x96, 0x71, 0xb3, 0x9f, 0xfc, 0x9d, 0x98, 0xa4,
		0x90, 0xc9, 0x30, 0xbe, 0x9a, 0x32, 0xb9, 0xc8, 0x4c, 0x21, 0x09, 0xe7, 0xbb, 0xc7, 0xfb, 0x8e,
		0x85, 0xd2, 0x9d, 0x9e, 0xd5, 0x25, 0xc6, 0x15, 0xaf, 0x4d, 0x03, 0x56, 0x00, 0x56, 0x00, 0x56,
		0x00, 0x56, 0x00, 0x56, 0x90, 0xaf, 0x5b, 0xa4, 0xe0, 0xdc, 0x0a, 0x33, 0x4d, 0x13, 0x48, 0x9c,
		0x90, 0x0e, 0x8a, 0x80, 0x62, 0x98, 0x67, 0x98, 0x67, 0x98, 0x67, 0x98, 0x67, 0x98, 0xe7, 0x25,
		0xeb, 0x76, 0xc8, 0x85, 0x3c, 0x2e, 0x18, 0xb0, 0xce, 0x94, 0x9c, 0xbf, 0xe9, 0x89, 0xfb, 0xf1,
		0xdb, 0xde, 0x92, 0xae, 0x91, 0x1f, 0x06, 0xaa, 0xbc, 0x73, 0xb1, 0xf3, 0x55, 0xde, 0x73, 0x3b,
		0x5c, 0xe1, 0xfd, 0x83, 0x01, 0x91, 0xf3, 0x9e, 0x76, 0x5e, 0xe4, 0x8a, 0x85, 0xd3, 0xe2, 0x69,
		0xb9, 0x52, 0x38, 0x2d, 0xed, 0xb0, 0xec, 0xed, 0x65, 0xb3, 0xb5, 0x16, 0x48, 0xe4, 0x1a, 0x24,
		0xf2, 0xe1, 0x61, 0x28, 0xb8, 0x7c, 0x36, 0xb5, 0x93, 0xfc, 0xb6, 0x03, 0x20, 0x96, 0x20, 0x96,
		0x20, 0x96, 0x20, 0x96, 0x20, 0x96, 0xe4, 0xeb, 0x16, 0xdb, 0xc9, 0x73, 0x7f, 0x67, 0x76, 0x89,
		0xb3, 0x30, 0xbe, 0x7e, 0xc6, 0x8e, 0x72, 0xba, 0x21, 0x27, 0x3b, 0x62, 0x9b, 0x90, 0x69, 0xa2,
		0xa3, 0xb6, 0xc0, 0x15, 0xc0, 0x15, 0xc0, 0x15, 0xc0, 0x15, 0xc0, 0x15, 0x4b, 0xd6, 0x2d, 0x1f,
		0xb8, 0x5e, 0xb7, 0x1b, 0xb0, 0x30, 0x34, 0x01, 0x2d, 0x4e, 0x09, 0xdb, 0x9c, 0x8e, 0x71, 0xe6,
		0x9d, 0xd6, 0xaf, 0x33, 0xfb, 0x58, 0x34, 0x30, 0xb7, 0x89, 0x39, 0x3e, 0x31, 0xd0, 0xf6, 0xa5,
		0x27, 0x25, 0x0b, 0x04, 0xf9, 0x74, 0xc7, 0x1d, 0x38, 0x38, 0xb8, 0xcd, 0xb9, 0xa7, 0xad, 0x97,
		0xdb, 0xbc, 0x7b, 0xda, 0x8a, 0x2e, 0xf3, 0x93, 0x1f, 0xd1, 0x75, 0xe1, 0x36, 0xe7, 0x16, 0x67,
		0xd7, 0xa5, 0xdb, 0x9c, 0x5b, 0x6a, 0x1d, 0xfe, 0xf9, 0xe7, 0xc7, 0xc3, 0x1f, 0xc7, 0xa3, 0xf5,
		0x6f, 0x74, 0xc8, 0x5f, 0xb1, 0x65, 0x62, 0x4a, 0x1b, 0x57, 0xf5, 0xff, 0x1a, 0x9f, 0xd7, 0xbf,
		0x28, 0x27, 0xf6, 0x3f, 0x06, 0x66, 0x96, 0xd6, 0xed, 0xfc, 0x61, 0x87, 0x94, 0x71, 0x19, 0xca,
		0xd8, 0xa8, 0x32, 0xf6, 0xdc, 0x5e, 0xd5, 0xfd, 0xda, 0xfa, 0x91, 0xff, 0x50, 0x1c, 0x9d, 0x1d,
		0xfe, 0xa8, 0x8c, 0xde, 0x7e, 0xf8, 0xb2, 0xec, 0x6b, 0xf9, 0x0f, 0x95, 0xd1, 0xd9, 0x8a, 0xdf,
		0x94, 0x47, 0x67, 0xef, 0x7c, 0x46, 0x69, 0x74, 0x90, 0xf8, 0xea, 0xf8, 0xf3, 0xc2, 0xaa, 0x1b,
		0x8a, 0x2b, 0x6e, 0x38, 0x5e, 0x75, 0xc3, 0xf1, 0x8a, 0x1b, 0x56, 0x76, 0xa9, 0xb0, 0xe2, 0x86,
		0xd2, 0xe8, 0x25, 0xf1, 0xfd, 0x83, 0xe5, 0x5f, 0x2d, 0x8f, 0x0e, 0x5f, 0x56, 0xfd, 0xae, 0x32,
		0x7a, 0x39, 0x3b, 0x84, 0x69, 0xa2, 0x37, 0x4d, 0x10, 0x73, 0x7a, 0x31, 0xcf, 0xbe, 0xa1, 0xc6,
		0xfe, 0xb0, 0x8d, 0x9e, 0xdb, 0x27, 0xe9, 0x1a, 0xdf, 0x23, 0x5e, 0xd6, 0x09, 0xf8, 0x73, 0xe1,
		0xcf, 0x85, 0x3f, 0x17, 0xfe, 0x5c, 0xf8, 0x73, 0xc9, 0xd7, 0x2d, 0xf6, 0x89, 0xe7, 0xfe, 0xce,
		0xdb, 0x26, 0xce, 0xc2, 0x85, 0x7f, 0x63, 0xbf, 0x38, 0xe5, 0xd0, 0x73, 0xf1, 0xe8, 0xf5, 0x79,
		0xd7, 0x0d, 0x98, 0x17, 0xfa, 0x82, 0x1e, 0x70, 0xbc, 0x69, 0x1f, 0x58, 0x03, 0x58, 0x03, 0x58,
		0x03, 0x58, 0x03, 0x58, 0x83, 0x7c, 0xdd, 0xf2, 0x2e, 0x13, 0x92, 0xcb, 0x67, 0x43, 0x78, 0x83,
		0xf0, 0x74, 0x80, 0x53, 0x9f, 0xbe, 0xea, 0x27, 0x2f, 0x34, 0xa0, 0x32, 0x66, 0x03, 0x5e, 0xbf,
		0xf8, 0xa3, 0x7a, 0x5e, 0xff, 0xd2, 0x6e, 0x36, 0x6e, 0xae, 0x6b, 0xed, 0x66, 0xad, 0x7a, 0xd5,
		0xb8, 0xa0, 0xd6, 0x1e, 0x93, 0x43, 0x1a, 0xa1, 0x11, 0x37, 0xa7, 0xa1, 0x53, 0x31, 0x6f, 0x47,
		0xff, 0xf3, 0xf9, 0xcd, 0xd5, 0x75, 0xad, 0xd9, 0x3e, 0x6f, 0x34, 0x2e, 0x9d, 0x5d, 0x38, 0x94,
		0x64, 0xcb, 0xb8, 0x37, 0x2e, 0xbe, 0xd6, 0xbe, 0x60, 0xc4, 0xe9, 0x46, 0xbc, 0x7a, 0x05, 0x21,
		0x27, 0x1e, 0xf2, 0x46, 0xb3, 0xfe, 0x5b, 0xfd, 0xa2, 0x7a, 0xdd, 0x68, 0x3a, 0x19, 0x3f, 0x73,
		0xd6, 0xca, 0x1a, 0xde, 0xcb, 0x04, 0xbb, 0xef, 0x7b, 0xa1, 0x74, 0x1f, 0xfc, 0x2e, 0xef, 0x71,
		0xd6, 0xa5, 0x27, 0xf7, 0x8b, 0xcd, 0x83, 0xdb, 0x83, 0xdb, 0x83, 0xdb, 0x83, 0xdb, 0x83, 0xdb,
		0x93, 0xaf, 0x5b, 0xc9, 0x1f, 0x98, 0xe4, 0x9d, 0x7f, 0xc2, 0x72, 0xd1, 0x00, 0xb7, 0x27, 0x0c,
		0x53, 0x73, 0x6e, 0x44, 0x74, 0xc6, 0xdf, 0x11, 0x9e, 0xf0, 0x43, 0xd6, 0xf1, 0x45, 0x97, 0x34,
		0x16, 0x1e, 0xd9, 0x54, 0xb2, 0x67, 0xe3, 0x97, 0x7b, 0x4d, 0x90, 0x4d, 0x85, 0x5c, 0xe4, 0x90,
		0x4d, 0x65, 0x3f, 0x7f, 0x52, 0x2c, 0x96, 0x2b, 0xc5, 0x62, 0xae, 0x72, 0x5c, 0xc9, 0x9d, 0x96,
		0x4a, 0xf9, 0x72, 0x1e, 0x79, 0x55, 0x32, 0xd7, 0x1a, 0xe2, 0xe6, 0xde, 0x2f, 0x86, 0x54, 0xa5,
		0x0b, 0x13, 0xa0, 0x8a, 0xa6, 0x84, 0x61, 0xdc, 0xec, 0x17, 0xd6, 0xf3, 0x86, 0xfd, 0x09, 0x14,
		0xcf, 0x81, 0x4b, 0x83, 0x4b, 0x83, 0x4b, 0x83, 0x4b, 0x83, 0x4b, 0x23, 0x29, 0x28, 0x68, 0x2c,
		0x68, 0x2c, 0x68, 0x2c, 0x68, 0xec, 0x56, 0x89, 0x1c, 0x92, 0x82, 0x82, 0xbc, 0x82, 0xbc, 0xee,
		0x3b, 0xd3, 0xe0, 0x67, 0x7f, 0x28, 0x19, 0x3d, 0x81, 0x9d, 0x6f, 0x1c, 0x84, 0x12, 0x84, 0x12,
		0x84, 0x12, 0x84, 0x12, 0x84, 0x92, 0x7c, 0xdd, 0xa2, 0x08, 0x94, 0xe5, 0x2d, 0xe8, 0xae, 0x63,
		0x5d, 0x15, 0xc2, 0x97, 0xde, 0x18, 0x8d, 0xd2, 0x94, 0xb3, 0x0e, 0x3b, 0xdf, 0xd9, 0x83, 0x37,
		0x2d, 0x3b, 0xe9, 0x1c, 0xf9, 0x03, 0x26, 0x3a, 0x13, 0x43, 0x39, 0xd6, 0x1f, 0x47, 0xe3, 0xff,
		0x02, 0x7e, 0x77, 0xe4, 0xf5, 0xb8, 0x1b, 0x7a, 0x3d, 0x1e, 0xc6, 0x57, 0x47, 0x93, 0xbc, 0x37,
		0x61, 0x20, 0x99, 0x3b, 0xf0, 0xfb, 0xbc, 0xf3, 0x7c, 0x24, 0x18, 0xbf, 0xff, 0x7e, 0xe7, 0x07,
		0x61, 0x7c, 0x75, 0xe4, 0x75, 0xff, 0x9e, 0xa8, 0x22, 0x2e, 0xdc, 0x81, 0x1f, 0xca, 0xa3, 0x09,
		0xbc, 0x08, 0xa3, 0x1f, 0xd1, 0x21, 0x3d, 0xbd, 0x1a, 0x4a, 0x9f, 0x28, 0x68, 0x14, 0x03, 0x67,
		0x28, 0xfe, 0x11, 0xfe, 0xbf, 0xc2, 0xf5, 0xa4, 0x0c, 0xf8, 0xdd, 0x78, 0xc4, 0xb4, 0x8b, 0xc2,
		0xab, 0x43, 0x2b, 0xd9, 0xb6, 0x66, 0x81, 0x9f, 0xa9, 0x1f, 0xcd, 0xcd, 0x50, 0xa1, 0x3f, 0x4a,
		0xd4, 0x67, 0x06, 0xed, 0x51, 0xa3, 0x3c, 0x63, 0xe8, 0xce, 0x18, 0xaa, 0x33, 0x86, 0xe6, 0xb6,
		0xdb, 0x74, 0x7e, 0xe1, 0x34, 0x75, 0x19, 0x93, 0x4a, 0x92, 0x9e, 0xae, 0x27, 0xbb, 0x40, 0x4b,
		0xda, 0xf3, 0x20, 0xed, 0x20, 0xed, 0x20, 0xed, 0x20, 0xed, 0xf6, 0x90, 0x76, 0x2a, 0xf5, 0x1f,
		0x37, 0x38, 0xd6, 0xbd, 0xae, 0xa4, 0x76, 0x15, 0x2c, 0x68, 0x8c, 0xd7, 0x2e, 0x10, 0x8b, 0xae,
		0x99, 0xad, 0x23, 0x72, 0x73, 0x60, 0xd2, 0x2c, 0xd8, 0x61, 0x1e, 0x4c, 0x9b, 0x09, 0x6b, 0xcc,
		0x85, 0x35, 0x66, 0xc3, 0x1a, 0xf3, 0x41, 0x6b, 0x46, 0x88, 0xcd, 0x49, 0x3c, 0xca, 0xd7, 0x26,
		0x14, 0xfc, 0xbe, 0xd9, 0xc4, 0x5f, 0x09, 0xb4, 0x5f, 0x31, 0x93, 0x5c, 0x7a, 0x96, 0x08, 0x2c,
		0xca, 0xe7, 0xf5, 0x6a, 0xec, 0x32, 0xba, 0x59, 0x4e, 0x28, 0xda, 0x4e, 0xe4, 0x7d, 0x35, 0x06,
		0x5c, 0xa2, 0xe6, 0xcd, 0x80, 0x96, 0x3c, 0x40, 0x0b, 0x40, 0x0b, 0x40, 0x0b, 0x40, 0x4b, 0x76,
		0x41, 0x0b, 0x35, 0x17, 0x5e, 0xe4, 0xc4, 0x7d, 0x66, 0x30, 0x8e, 0x76, 0x81, 0x1a, 0x8f, 0x7b,
		0xf2, 0x61, 0x27, 0x83, 0x2b, 0x4d, 0x19, 0x1d, 0x1b, 0x8c, 0x8f, 0x5d, 0x46, 0xc8, 0x16, 0x63,
		0x64, 0x9d, 0x51, 0xb2, 0xce, 0x38, 0x59, 0x67, 0xa4, 0xcc, 0x18, 0x2b, 0x43, 0x46, 0xcb, 0x3c,
		0xe3, 0x4e, 0xe8, 0x8d, 0x21, 0x17, 0x32, 0x5f, 0x36, 0xa9, 0x33, 0xa6, 0x56, 0xa4, 0x6c, 0xb0,
		0x0b, 0x66, 0x8e, 0xff, 0xbc, 0xfd, 0x63, 0x56, 0x67, 0xee, 0x9b, 0x3e, 0x1e, 0x64, 0x19, 0xbc,
		0x48, 0x74, 0xc7, 0xf0, 0xf1, 0xa1, 0x44, 0x7f, 0x2c, 0x38, 0xd2, 0x61, 0x89, 0x3a, 0x5d, 0x14,
		0x61, 0xef, 0x09, 0x22, 0xfc, 0x0b, 0x11, 0x2e, 0x97, 0x4a, 0xc7, 0x25, 0x88, 0xb1, 0x5d, 0x58,
		0xc4, 0x7c, 0xeb, 0xad, 0xbd, 0xdd, 0x78, 0x5f, 0x13, 0xa7, 0x20, 0xcd, 0xed, 0xa4, 0x2f, 0x77,
		0x1b, 0x18, 0xd8, 0x51, 0x87, 0xdf, 0x00, 0x7e, 0x03, 0xf8, 0x0d, 0xe0, 0x37, 0x80, 0xdf, 0x20,
		0x23, 0x7e, 0x83, 0x13, 0x0b, 0xdc, 0x06, 0x25, 0xb8, 0x0d, 0xe0, 0x36, 0x80, 0xdb, 0x00, 0x6e,
		0x03, 0xb8, 0x0d, 0xb4, 0x8b, 0x70, 0xa1, 0x04, 0xa7, 0x01, 0x9c, 0x06, 0x70, 0x1a, 0xd0, 0x3a,
		0x0d, 0x1e, 0xa7, 0xab, 0xcf, 0x06, 0xaf, 0x41, 0xd4, 0x17, 0xb8, 0x0d, 0xe0, 0x36, 0x80, 0xdb,
		0x00, 0x6e, 0x03, 0xb8, 0x0d, 0xe0, 0x36, 0x58, 0x53, 0x6f, 0xdc, 0x71, 0xe1, 0x05, 0xcf, 0x16,
		0xf8, 0x0d, 0x4e, 0x0d, 0x76, 0xe1, 0x9c, 0x89, 0xfb, 0x49, 0xe0, 0x3f, 0x1c, 0x07, 0x70, 0x1c,
		0xfc, 0x92, 0x75, 0xe5, 0xc1, 0xb9, 0xe0, 0x38, 0xd8, 0x6e, 0x11, 0x46, 0xbc, 0x01, 0x5c, 0x07,
		0x70, 0x1d, 0x90, 0x8a, 0x39, 0x7b, 0x92, 0x4c, 0x74, 0x09, 0xab, 0x60, 0xae, 0x84, 0x7c, 0x71,
		0x4f, 0xe0, 0x36, 0x80, 0xdb, 0x00, 0x6e, 0x03, 0xb8, 0x0d, 0xe0, 0x36, 0x80, 0xdb, 0x60, 0x5d,
		0xb7, 0x01, 0x79, 0xce, 0xd8, 0x55, 0x66, 0x84, 0x28, 0x87, 0xec, 0x6e, 0x82, 0x16, 0x7f, 0x30,
		0x46, 0xe6, 0x5e, 0xdf, 0x3c, 0x68, 0x89, 0x7b, 0x02, 0xd0, 0x02, 0xd0, 0x02, 0xd0, 0x02, 0xd0,
		0x02, 0xd0, 0x02, 0xd0, 0x02, 0xd0, 0x02, 0xd0, 0x92, 0x1c, 0xe3, 0x81, 0x17, 0x48, 0x6e, 0x03,
		0x66, 0x99, 0x75, 0x04, 0x90, 0x05, 0x90, 0x05, 0x90, 0x05, 0x90, 0x05, 0x90, 0x05, 0x90, 0x05,
		0x90, 0x05, 0x90, 0x25, 0x39, 0xc6, 0x32, 0xf0, 0x44, 0xc8, 0x25, 0x7f, 0xb4, 0x20, 0xae, 0x74,
		0xae, 0x2f, 0x00, 0x2e, 0x00, 0x2e, 0x00, 0x2e, 0x00, 0x2e, 0x00, 0x2e, 0x00, 0x2e, 0x00, 0x2e,
		0xd6, 0x03, 0x97, 0x4c, 0xa7, 0x17, 0x25, 0x2e, 0x52, 0x98, 0x68, 0xdf, 0x5c, 0xd1, 0xc2, 0x64,
		0x7d, 0xbc, 0xe4, 0x47, 0x14, 0x95, 0x0d, 0xcd, 0xc9, 0x5b, 0xb6, 0x8a, 0xc6, 0xfc, 0xce, 0x9e,
		0x4d, 0x64, 0x7d, 0x71, 0xce, 0x79, 0x28, 0xab, 0x52, 0x12, 0x57, 0xac, 0xf9, 0xc6, 0x45, 0xad,
		0xcf, 0xc6, 0x90, 0x20, 0xa4, 0x85, 0xd4, 0xce, 0x37, 0xef, 0x69, 0xae, 0xe5, 0xfc, 0x49, 0xb1,
		0x58, 0xae, 0x14, 0x8b, 0xb9, 0xca, 0x71, 0x25, 0x77, 0x5a, 0x2a, 0xe5, 0xcb, 0x79, 0xc2, 0x08,
		0x58, 0xa7, 0x11, 0x74, 0x59, 0xc0, 0xba, 0x9f, 0xc6, 0x53, 0x2f, 0x86, 0xfd, 0x7e, 0xa6, 0x24,
		0xda, 0x90, 0x6e, 0xb6, 0x5c, 0x27, 0x3b, 0xa4, 0xa5, 0x15, 0x82, 0x61, 0x47, 0x8a, 0x29, 0xf8,
		0xfa, 0x74, 0x3f, 0x68, 0x37, 0xf9, 0x5d, 0xbb, 0xda, 0xe3, 0x57, 0x5e, 0x8f, 0xb7, 0xeb, 0x83,
		0xc7, 0xf2, 0x55, 0x20, 0xd9, 0xe5, 0xe4, 0x65, 0xdb, 0x17, 0xd3, 0x57, 0x6c, 0x57, 0xbb, 0x7f,
		0x37, 0xf9, 0x5d, 0x5d, 0x5c, 0xfa, 0xa1, 0x6c, 0x37, 0xc7, 0x2f, 0xd6, 0xbe, 0x89, 0xde, 0xa2,
		0x1a, 0xbf, 0x04, 0x2a, 0x34, 0x9b, 0x5f, 0x68, 0x3b, 0x54, 0xa1, 0x79, 0x49, 0x31, 0xe0, 0x6d,
		0x2d, 0xd7, 0xbc, 0xb7, 0x45, 0x92, 0x36, 0x03, 0x25, 0xe3, 0x29, 0x77, 0x79, 0x77, 0x9f, 0x89,
		0xee, 0xc0, 0xe7, 0x42, 0xee, 0x77, 0xfc, 0xbe, 0x1f, 0x68, 0xd2, 0x64, 0x34, 0x88, 0x84, 0x0e,
		0x81, 0x18, 0x45, 0x1c, 0x34, 0x08, 0x43, 0x97, 0xf8, 0x11, 0x29, 0x38, 0x73, 0x8a, 0x4d, 0x23,
		0x18, 0x50, 0x66, 0xfc, 0xf5, 0x68, 0x5a, 0xf5, 0x7a, 0x50, 0xed, 0x13, 0x15, 0x8b, 0xb4, 0x6e,
		0x51, 0x36, 0x21, 0xc2, 0x6a, 0x05, 0x43, 0xdd, 0xf4, 0xa9, 0x79, 0x92, 0x22, 0x01, 0xd0, 0x35,
		0xf1, 0xa4, 0x13, 0xae, 0x50, 0x4d, 0x29, 0x50, 0x4b, 0x6a, 0xe4, 0x6e, 0x73, 0x29, 0x51, 0x20,
		0x21, 0xce, 0xfc, 0x40, 0x07, 0xea, 0x9c, 0xf4, 0xaf, 0xe9, 0x80, 0x16, 0x9f, 0xaf, 0x48, 0xa6,
		0xd5, 0x96, 0xaf, 0x53, 0xbe, 0xb5, 0xaa, 0x63, 0xab, 0x54, 0xef, 0xd6, 0xa7, 0xae, 0xad, 0x4c,
		0xed, 0x5b, 0x93, 0xda, 0xb7, 0x1a, 0xb5, 0x6f, 0x1d, 0xda, 0x65, 0x2d, 0x54, 0x97, 0x4b, 0x73,
		0xa6, 0xa6, 0x5a, 0xb9, 0x60, 0xcd, 0x96, 0xc3, 0xf4, 0xf9, 0x8a, 0x27, 0x5d, 0x4f, 0x7d, 0x4c,
		0x6d, 0x31, 0x1c, 0x3a, 0x63, 0x33, 0x68, 0x62, 0x2e, 0x74, 0xc7, 0x52, 0x90, 0xc5, 0x48, 0x90,
		0xc5, 0x3e, 0x90, 0xc5, 0x34, 0xd8, 0xcd, 0x6b, 0x74, 0xd5, 0x77, 0x8c, 0x14, 0x8b, 0x3e, 0x79,
		0x5c, 0xd0, 0x5f, 0xba, 0x64, 0x51, 0x6f, 0x99, 0x5f, 0xed, 0x21, 0x69, 0x14, 0x21, 0x67, 0xb4,
		0x21, 0x65, 0x54, 0x21, 0x63, 0xe4, 0x21, 0x61, 0xe4, 0x21, 0x5f, 0xe4, 0x21, 0x5d, 0xdb, 0xe5,
		0x38, 0xd7, 0x5d, 0xf6, 0xd6, 0x89, 0x3c, 0xf0, 0xda, 0xe5, 0x78, 0xb6, 0x3a, 0x75, 0x3a, 0xfc,
		0xdf, 0xaa, 0x4b, 0xcd, 0xd1, 0x00, 0x64, 0x91, 0xbc, 0x94, 0x11, 0xbb, 0x66, 0x22, 0x73, 0xa9,
		0x23, 0x70, 0x8d, 0x45, 0xda, 0x1a, 0x8b, 0xa8, 0x35, 0x16, 0x39, 0xbb, 0xdd, 0x3b, 0xe3, 0x64,
		0x11, 0xaf, 0xf1, 0xba, 0xeb, 0x33, 0xaf, 0x17, 0xb0, 0x1e, 0xc5, 0xa2, 0x9b, 0xa1, 0xca, 0x0a,
		0x41, 0x5b, 0x97, 0x53, 0xff, 0xf2, 0xc7, 0x8f, 0x51, 0x2c, 0xe1, 0x51, 0x64, 0x08, 0xb6, 0x75,
		0xf3, 0x5d, 0x23, 0xb2, 0x9c, 0xed, 0x8d, 0xd3, 0xd9, 0xe4, 0xb8, 0x45, 0x98, 0x65, 0x98, 0x65,
		0x98, 0x65, 0x98, 0x65, 0x98, 0xe5, 0x9d, 0x35, 0xcb, 0xb1, 0x2d, 0x80, 0x65, 0x4e, 0x0c, 0xd6,
		0x34, 0x7a, 0x8d, 0xce, 0x30, 0xcf, 0x1a, 0x84, 0x5d, 0x86, 0x5d, 0x86, 0x5d, 0x86, 0x5d, 0x86,
		0x5d, 0xde, 0x59, 0xbb, 0x3c, 0x33, 0x05, 0x30, 0xcb, 0x89, 0xb1, 0x8a, 0xce, 0x26, 0x92, 0x19,
		0xe5, 0xa8, 0x39, 0x1a, 0x93, 0x9c, 0x87, 0x49, 0x86, 0x49, 0x86, 0x49, 0x86, 0x49, 0x4e, 0x3f,
		0x6a, 0xba, 0x37, 0x10, 0xe3, 0x86, 0x26, 0x07, 0x8e, 0xb9, 0xe8, 0x32, 0xba, 0xd4, 0x32, 0x8b,
		0xc5, 0x2a, 0xa3, 0xb6, 0xa9, 0x4e, 0x59, 0x93, 0x26, 0x11, 0x22, 0x4f, 0x1a, 0x64, 0x22, 0x49,
		0x90, 0xd9, 0xa4, 0x40, 0xa6, 0x92, 0x00, 0x19, 0x4f, 0xfa, 0x63, 0x3c, 0xc9, 0x8f, 0xf1, 0xa4,
		0x3e, 0xd9, 0xca, 0xff, 0x40, 0x9e, 0xa4, 0xc7, 0x00, 0x17, 0x33, 0xc1, 0xc9, 0x96, 0x71, 0xb3,
		0x9f, 0xfc, 0x9d, 0x98, 0xa4, 0x90, 0xc9, 0x30, 0xbe, 0x9a, 0x32, 0xb9, 0xc8, 0x4c, 0x65, 0xe5,
		0xdc, 0x3b, 0x01, 0xb2, 0xa6, 0x89, 0x50, 0x4a, 0x48, 0x33, 0x45, 0xa4, 0x12, 0xe0, 0x04, 0xe0,
		0x04, 0xe0, 0x04, 0xe0, 0x04, 0xe0, 0xc4, 0x92, 0x75, 0x3b, 0xe4, 0x42, 0x1e, 0x17, 0x0c, 0xa0,
		0x09, 0x4a, 0x30, 0xd1, 0xf4, 0xc4, 0x3d, 0x23, 0x2f, 0x0d, 0x6d, 0x20, 0xc1, 0x9d, 0xc9, 0xd2,
		0xcf, 0xa6, 0x53, 0xfe, 0xce, 0xea, 0xe2, 0x9a, 0x6a, 0xdf, 0x82, 0x1a, 0xb8, 0x26, 0xd2, 0x5e,
		0x9b, 0x2c, 0xd5, 0x6c, 0x8b, 0xc8, 0x15, 0x0b, 0xa7, 0xc5, 0xd3, 0x72, 0xa5, 0x70, 0x5a, 0xda,
		0x61, 0xd9, 0xcb, 0x68, 0xde, 0xca, 0x16, 0x48, 0xe4, 0x1a, 0x24, 0xf2, 0xe1, 0x61, 0x28, 0xb8,
		0x7c, 0x36, 0xe5, 0xa2, 0x7e, 0xdb, 0x01, 0x10, 0x4b, 0x10, 0x4b, 0x10, 0x4b, 0x10, 0x4b, 0x10,
		0x4b, 0xf2, 0x75, 0x0b, 0x3f, 0xf5, 0xdc, 0xdf, 0x99, 0x5d, 0xe2, 0x2c, 0x8c, 0xaf, 0x9f, 0xe1,
		0xaa, 0x4e, 0x37, 0xe4, 0x64, 0x67, 0x77, 0x12, 0x32, 0x4d, 0x74, 0x86, 0x07, 0xb8, 0x02, 0xb8,
		0x02, 0xb8, 0x02, 0xb8, 0x02, 0xb8, 0x62, 0xc9, 0xba, 0xe5, 0x03, 0xd7, 0xeb, 0x76, 0x03, 0x16,
		0x86, 0x26, 0xa0, 0xc5, 0x29, 0x61, 0x9b, 0xd3, 0x31, 0xce, 0xbc, 0xd3, 0xfa, 0x75, 0x66, 0x1f,
		0x8b, 0x06, 0xe6, 0x36, 0x31, 0xc7, 0x27, 0x06, 0xda, 0xbe, 0xf4, 0xa4, 0x64, 0x81, 0x20, 0x9f,
		0xee, 0xb8, 0x03, 0x07, 0x07, 0xb7, 0x39, 0xf7, 0xb4, 0xf5, 0x72, 0x9b, 0x77, 0x4f, 0x5b, 0xd1,
		0x65, 0x7e, 0xf2, 0x23, 0xba, 0x2e, 0xdc, 0xe6, 0xdc, 0xe2, 0xec, 0xba, 0x74, 0x9b, 0x73, 0x4b,
		0xad, 0xc3, 0x3f, 0xff, 0xfc, 0x78, 0xf8, 0xe3, 0x78, 0xb4, 0xfe, 0x8d, 0xf4, 0x95, 0xc4, 0x5a,
		0x26, 0xa6, 0xb4, 0x71, 0x55, 0xff, 0xaf, 0xf1, 0x79, 0xfd, 0x8b, 0x72, 0x62, 0xff, 0x63, 0x60,
		0x66, 0xb3, 0x5c, 0x30, 0xcb, 0xac, 0x32, 0x2e, 0x43, 0x19, 0x1b, 0x55, 0xc6, 0x9e, 0xdb, 0xab,
		0xba, 0x5f, 0x5b, 0x3f, 0xf2, 0x1f, 0x8a, 0xa3, 0xb3, 0xc3, 0x1f, 0x95, 0xd1, 0xdb, 0x0f, 0x5f,
		0x96, 0x7d, 0x2d, 0xff, 0xa1, 0x32, 0x3a, 0x5b, 0xf1, 0x9b, 0xf2, 0xe8, 0xec, 0x9d, 0xcf, 0x28,
		0x8d, 0x0e, 0x12, 0x5f, 0x1d, 0x7f, 0x5e, 0x58, 0x75, 0x43, 0x71, 0xc5, 0x0d, 0xc7, 0xab, 0x6e,
		0x38, 0x5e, 0x71, 0xc3, 0xca, 0x2e, 0x15, 0x56, 0xdc, 0x50, 0x1a, 0xbd, 0x24, 0xbe, 0x7f, 0xb0,
		0xfc, 0xab, 0xe5, 0xd1, 0xe1, 0xcb, 0xaa, 0xdf, 0x55, 0x46, 0x2f, 0x67, 0x87, 0x30, 0x4d, 0xf4,
		0xa6, 0x09, 0x62, 0x4e, 0x2f, 0xe6, 0xd9, 0x37, 0xd4, 0xd8, 0x1f, 0xb6, 0xd1, 0x73, 0xfb, 0x24,
		0x5d, 0xe3, 0x7b, 0xc4, 0xcb, 0x3a, 0x01, 0x7f, 0x2e, 0xfc, 0xb9, 0xf0, 0xe7, 0xc2, 0x9f, 0x0b,
		0x7f, 0x2e, 0xf9, 0xba, 0xc5, 0x3e, 0xf1, 0xdc, 0xdf, 0x79, 0xdb, 0xc4, 0x59, 0xb8, 0xf0, 0x6f,
		0xec, 0x17, 0xa7, 0x1c, 0x7a, 0x2e, 0x1e, 0xbd, 0x3e, 0xef, 0xba, 0x01, 0xf3, 0x42, 0xc2, 0xea,
		0xb6, 0xaf, 0xae, 0x94, 0xc5, 0xf6, 0x81, 0x35, 0x80, 0x35, 0x80, 0x35, 0x80, 0x35, 0x80, 0x35,
		0xc8, 0xd7, 0x2d, 0xef, 0x32, 0x21, 0xb9, 0x7c, 0x36, 0x84, 0x37, 0x28, 0x6b, 0xd5, 0xd7, 0xa7,
		0xaf, 0xfa, 0xc9, 0x0b, 0x0d, 0xa8, 0x8c, 0xd9, 0x80, 0xd7, 0x2f, 0xfe, 0xa8, 0x9e, 0xd7, 0xbf,
		0xb4, 0x9b, 0x8d, 0x9b, 0xeb, 0x5a, 0xbb, 0x59, 0xab, 0x5e, 0x35, 0x2e, 0xa8, 0xb5, 0xc7, 0xe4,
		0x90, 0x46, 0x68, 0xc4, 0xcd, 0x69, 0xe8, 0x54, 0xcc, 0xdb, 0xd1, 0xff, 0x7c, 0x7e, 0x73, 0x75,
		0x5d, 0x6b, 0xb6, 0xcf, 0x1b, 0x8d, 0x4b, 0x67, 0x17, 0x0e, 0x25, 0xd9, 0x32, 0xee, 0x8d, 0x8b,
		0xaf, 0xb5, 0x2f, 0x18, 0x71, 0xba, 0x11, 0xaf, 0x5e, 0x41, 0xc8, 0x89, 0x87, 0xbc, 0xd1, 0xac,
		0xff, 0x56, 0xbf, 0xa8, 0x5e, 0x37, 0x9a, 0x4e, 0xc6, 0xcf, 0x9c, 0xb5, 0xb2, 0x86, 0xf7, 0x32,
		0xc1, 0xee, 0xfb, 0x5e, 0x28, 0xdd, 0x07, 0xbf, 0xcb, 0x7b, 0x9c, 0x75, 0xe9, 0xc9, 0xfd, 0x62,
		0xf3, 0xe0, 0xf6, 0xe0, 0xf6, 0xe0, 0xf6, 0xe0, 0xf6, 0xe0, 0xf6, 0xe4, 0xeb, 0x56, 0xf2, 0x07,
		0x26, 0x79, 0xe7, 0x9f, 0xb0, 0x5c, 0x34, 0xc0, 0xed, 0x09, 0xc3, 0xd4, 0x9c, 0x1b, 0x11, 0x9d,
		0xf1, 0x77, 0x84, 0x27, 0xfc, 0x90, 0x75, 0x7c, 0xd1, 0x25, 0x8d, 0x85, 0x47, 0x36, 0x95, 0xec,
		0xd9, 0xf8, 0xe5, 0x5e, 0x13, 0x64, 0x53, 0x21, 0x17, 0x39, 0x64, 0x53, 0xd9, 0xcf, 0x9f, 0x14,
		0x8b, 0xe5, 0x4a, 0xb1, 0x98, 0xab, 0x1c, 0x57, 0x72, 0xa7, 0xa5, 0x52, 0xbe, 0x9c, 0x47, 0x5e,
		0x95, 0xcc, 0xb5, 0x86, 0xb8, 0xb9, 0xf7, 0x8b, 0x21, 0x55, 0x4d, 0xa4, 0x04, 0xa8, 0xa2, 0xa9,
		0x8d, 0x14, 0x37, 0xfb, 0x85, 0xf5, 0xbc, 0x61, 0x7f, 0x02, 0xc5, 0x73, 0xe0, 0xd2, 0xe0, 0xd2,
		0xe0, 0xd2, 0xe0, 0xd2, 0xe0, 0xd2, 0x48, 0x0a, 0x0a, 0x1a, 0x0b, 0x1a, 0x0b, 0x1a, 0x0b, 0x1a,
		0xbb, 0x55, 0x22, 0x87, 0xa4, 0xa0, 0x20, 0xaf, 0x20, 0xaf, 0xfb, 0xce, 0x34, 0xf8, 0xd9, 0x1f,
		0x4a, 0x46, 0x4f, 0x60, 0xe7, 0x1b, 0x07, 0xa1, 0x04, 0xa1, 0x04, 0xa1, 0x04, 0xa1, 0x04, 0xa1,
		0x24, 0x5f, 0xb7, 0x77, 0xbe, 0xdf, 0x67, 0x9e, 0x30, 0x11, 0x74, 0x9d, 0xcf, 0x8a, 0xa9, 0xde,
		0xea, 0x02, 0x99, 0x55, 0x21, 0x7c, 0xe9, 0x8d, 0xd1, 0x28, 0x4d, 0x9d, 0xcc, 0xb0, 0xf3, 0x9d,
		0x3d, 0x78, 0x83, 0xe9, 0xa1, 0xbb, 0x23, 0x7f, 0xc0, 0x44, 0x67, 0x62, 0x28, 0xc7, 0xfa, 0xe3,
		0x68, 0xfc, 0x5f, 0xc0, 0xef, 0x8e, 0xbc, 0x1e, 0x77, 0x43, 0xaf, 0xc7, 0xc3, 0xf8, 0xea, 0x68,
		0x92, 0xf7, 0x26, 0x0c, 0x24, 0x73, 0x07, 0x7e, 0x9f, 0x77, 0x9e, 0x8f, 0x04, 0xe3, 0xf7, 0xdf,
		0xef, 0xfc, 0x20, 0x8c, 0xaf, 0x8e, 0xbc, 0xee, 0xdf, 0x13, 0x55, 0xc4, 0x85, 0x3b, 0x08, 0xd8,
		0xd1, 0x04, 0x5d, 0x84, 0xd1, 0x8f, 0xe8, 0x8c, 0x1e, 0x0a, 0x48, 0x27, 0x67, 0x64, 0x28, 0xfe,
		0x11, 0xfe, 0xbf, 0xc2, 0xf5, 0xa4, 0x0c, 0xf8, 0xdd, 0x78, 0xc4, 0xe8, 0xaa, 0x49, 0x2f, 0x69,
		0x1b, 0xa5, 0xa5, 0x6d, 0x05, 0x7d, 0x28, 0x2d, 0x9d, 0x4d, 0x50, 0x87, 0xd2, 0xd2, 0xa9, 0x46,
		0x8d, 0xac, 0xb4, 0x74, 0x42, 0x49, 0xd2, 0xb3, 0xf5, 0x64, 0x17, 0x68, 0x39, 0x7b, 0x1e, 0x9c,
		0x1d, 0x9c, 0x1d, 0x9c, 0x1d, 0x9c, 0xdd, 0x1e, 0xce, 0x4e, 0xa5, 0xfe, 0xe3, 0x06, 0x27, 0x85,
		0x94, 0x25, 0xb5, 0xa7, 0x60, 0x41, 0x63, 0xbc, 0x76, 0x81, 0x58, 0x74, 0xcd, 0xec, 0x1c, 0x91,
		0x9b, 0x03, 0x93, 0x66, 0xc1, 0x0e, 0xf3, 0x60, 0xda, 0x4c, 0x58, 0x63, 0x2e, 0xac, 0x31, 0x1b,
		0xd6, 0x98, 0x0f, 0x5a, 0x33, 0x42, 0x6c, 0x4e, 0xe2, 0x51, 0xbe, 0x36, 0xa1, 0xe0, 0xf7, 0xcd,
		0xe6, 0xfd, 0x4a, 0xa0, 0xfd, 0x8a, 0x99, 0xdc, 0xd2, 0xb3, 0x3c, 0x60, 0x51, 0x3a, 0xaf, 0x57,
		0x63, 0x97, 0xd1, 0xbd, 0x72, 0x42, 0xd1, 0x76, 0x22, 0xef, 0xab, 0x31, 0xe0, 0x12, 0x35, 0x6f,
		0x06, 0xb4, 0xe4, 0x01, 0x5a, 0x00, 0x5a, 0x00, 0x5a, 0x00, 0x5a, 0xb2, 0x0b, 0x5a, 0xa8, 0xb9,
		0xf0, 0x22, 0x27, 0xee, 0x33, 0x83, 0x61, 0xb4, 0x0b, 0xd4, 0x78, 0xdc, 0x93, 0x0f, 0x3b, 0x19,
		0x5b, 0x69, 0xca, 0xe8, 0xd8, 0x60, 0x7c, 0xec, 0x32, 0x42, 0xb6, 0x18, 0x23, 0xeb, 0x8c, 0x92,
		0x75, 0xc6, 0xc9, 0x3a, 0x23, 0x65, 0xc6, 0x58, 0x19, 0x32, 0x5a, 0xe6, 0x19, 0x77, 0x42, 0x6f,
		0x0c, 0xb9, 0x90, 0xf9, 0xb2, 0x49, 0x9d, 0x31, 0xb5, 0x22, 0x65, 0x83, 0x5d, 0x30, 0x73, 0xfa,
		0xe7, 0xed, 0x1f, 0xb3, 0x3a, 0x73, 0xdf, 0xf4, 0xe9, 0x20, 0xcb, 0xe0, 0x45, 0xa2, 0x3b, 0x86,
		0x4f, 0x0f, 0x25, 0xfa, 0x63, 0xc1, 0x89, 0x0e, 0x4b, 0xd4, 0xe9, 0xa2, 0x08, 0x7b, 0x4f, 0x10,
		0xe1, 0x5f, 0x88, 0x70, 0xb9, 0x54, 0x3a, 0x2e, 0x41, 0x8c, 0xed, 0xc2, 0x22, 0xe6, 0x5b, 0x6f,
		0xed, 0xed, 0xc6, 0xfb, 0x9a, 0x38, 0x04, 0x69, 0x6e, 0x27, 0x7d, 0xb9, 0xdb, 0xc0, 0xc0, 0x8e,
		0x3a, 0xfc, 0x06, 0xf0, 0x1b, 0xc0, 0x6f, 0x00, 0xbf, 0x01, 0xfc, 0x06, 0x19, 0xf1, 0x1b, 0x9c,
		0x58, 0xe0, 0x36, 0x28, 0xc1, 0x6d, 0x00, 0xb7, 0x01, 0xdc, 0x06, 0x70, 0x1b, 0xc0, 0x6d, 0xa0,
		0x5d, 0x84, 0x0b, 0x25, 0x38, 0x0d, 0xe0, 0x34, 0x80, 0xd3, 0x80, 0xd6, 0x69, 0xf0, 0x38, 0x5d,
		0x7d, 0x36, 0x78, 0x0d, 0xa2, 0xbe, 0xc0, 0x6d, 0x00, 0xb7, 0x01, 0xdc, 0x06, 0x70, 0x1b, 0xc0,
		0x6d, 0x00, 0xb7, 0xc1, 0x9a, 0x7a, 0xe3, 0x8e, 0x0b, 0x2f, 0x78, 0xb6, 0xc0, 0x6f, 0x70, 0x6a,
		0xb0, 0x0b, 0xe7, 0x4c, 0xdc, 0x4f, 0x02, 0xff, 0xe1, 0x38, 0x80, 0xe3, 0xe0, 0x97, 0xac, 0x2b,
		0x0f, 0xce, 0x05, 0xc7, 0xc1, 0x76, 0x8b, 0x30, 0xe2, 0x0d, 0xe0, 0x3a, 0x80, 0xeb, 0x80, 0x54,
		0xcc, 0xd9, 0x93, 0x64, 0xa2, 0x4b, 0x58, 0x04, 0x73, 0x25, 0xe4, 0x8b, 0x7b, 0x02, 0xb7, 0x01,
		0xdc, 0x06, 0x70, 0x1b, 0xc0, 0x6d, 0x00, 0xb7, 0x01, 0xdc, 0x06, 0xeb, 0xba, 0x0d, 0xc8, 0x53,
		0xc6, 0xae, 0x32, 0x23, 0x44, 0x29, 0x64, 0x77, 0x13, 0xb4, 0xf8, 0x83, 0x31, 0x32, 0xf7, 0xfa,
		0xe6, 0x41, 0x4b, 0xdc, 0x13, 0x80, 0x16, 0x80, 0x16, 0x80, 0x16, 0x80, 0x16, 0x80, 0x16, 0x80,
		0x16, 0x80, 0x16, 0x80, 0x96, 0xe4, 0x18, 0x0f, 0xbc, 0x40, 0x72, 0x1b, 0x30, 0xcb, 0xac, 0x23,
		0x80, 0x2c, 0x80, 0x2c, 0x80, 0x2c, 0x80, 0x2c, 0x80, 0x2c, 0x80, 0x2c, 0x80, 0x2c, 0x80, 0x2c,
		0xc9, 0x31, 0x96, 0x81, 0x27, 0x42, 0x2e, 0xf9, 0xa3, 0x05, 0x71, 0xa5, 0x73, 0x7d, 0x01, 0x70,
		0x01, 0x70, 0x01, 0x70, 0x01, 0x70, 0x01, 0x70, 0x01, 0x70, 0x01, 0x70, 0xb1, 0x1e, 0xb8, 0x64,
		0x3a, 0xbd, 0x28, 0x71, 0x8d, 0xc2, 0x44, 0xfb, 0xc6, 0x6a, 0x16, 0x26, 0xcb, 0xe3, 0x25, 0x3f,
		0xa2, 0x28, 0x6c, 0x68, 0x4e, 0xdc, 0xb2, 0x55, 0x33, 0xe6, 0x77, 0xf6, 0x6c, 0x22, 0xe9, 0x8b,
		0x73, 0xce, 0x43, 0x59, 0x95, 0x92, 0xb8, 0x60, 0xcd, 0x37, 0x2e, 0x6a, 0x7d, 0x36, 0x46, 0x04,
		0x21, 0x2d, 0xa2, 0x76, 0xbe, 0x79, 0x4f, 0x73, 0x2d, 0xe7, 0x4f, 0x8a, 0xc5, 0x72, 0xa5, 0x58,
		0xcc, 0x55, 0x8e, 0x2b, 0xb9, 0xd3, 0x52, 0x29, 0x5f, 0xce, 0x13, 0x06, 0xc0, 0x3a, 0x8d, 0xa0,
		0xcb, 0x02, 0xd6, 0xfd, 0x34, 0x9e, 0x7a, 0x31, 0xec, 0xf7, 0x33, 0x25, 0xd1, 0x86, 0x54, 0xb3,
		0xdd, 0x2a, 0xd9, 0x21, 0x2d, 0xac, 0x10, 0x0c, 0x3b, 0x52, 0x4c, 0xa1, 0xd7, 0xa7, 0xfb, 0x41,
		0xbb, 0xc9, 0xef, 0xda, 0xd5, 0x1e, 0xbf, 0xf2, 0x7a, 0xbc, 0x5d, 0x1f, 0x3c, 0x96, 0xaf, 0x02,
		0xc9, 0x2e, 0x27, 0xef, 0xda, 0xbe, 0x98, 0xbe, 0x61, 0xbb, 0xda, 0xfd, 0xbb, 0xc9, 0xef, 0xea,
		0xe2, 0x32, 0x60, 0xed, 0xe6, 0xf8, 0xbd, 0xda, 0x37, 0xd1, 0x4b, 0x54, 0xe3, 0x77, 0x40, 0x75,
		0x66, 0xf3, 0xcb, 0x6c, 0x77, 0xaa, 0x33, 0x2f, 0x29, 0x04, 0xbc, 0xad, 0xa5, 0x9a, 0xf7, 0xb6,
		0x48, 0xd0, 0x66, 0x88, 0x64, 0x3c, 0xe3, 0x2e, 0xef, 0xee, 0x33, 0xd1, 0x1d, 0xf8, 0x5c, 0xc8,
		0xfd, 0x8e, 0xdf, 0xf7, 0x03, 0x4d, 0x7a, 0x8c, 0x06, 0x8e, 0xd0, 0xc1, 0x0f, 0xa3, 0x70, 0x83,
		0x06, 0x5e, 0xe8, 0x12, 0x3f, 0x22, 0xfd, 0x66, 0x4c, 0xaf, 0x69, 0x44, 0x02, 0xaa, 0x2c, 0xbf,
		0x1e, 0x3d, 0xab, 0x5e, 0x0b, 0xaa, 0x7d, 0xa2, 0x62, 0x81, 0xd6, 0x2d, 0xc8, 0x06, 0x04, 0x58,
		0xad, 0x5c, 0xa8, 0x9b, 0x3d, 0x35, 0x4f, 0x52, 0x34, 0xff, 0xba, 0xe6, 0x9d, 0x72, 0xbe, 0x15,
		0xea, 0xa8, 0xcd, 0x75, 0x92, 0x1a, 0xa9, 0xdb, 0x5c, 0x46, 0x14, 0xc8, 0x87, 0x33, 0x1b, 0x66,
		0x7f, 0x28, 0xdd, 0x81, 0x1f, 0x4a, 0x65, 0x12, 0xf2, 0x9a, 0x07, 0xe8, 0x6d, 0x0b, 0x8a, 0xa4,
		0x5a, 0x6d, 0xe5, 0x3a, 0xe5, 0xbb, 0xaa, 0x3a, 0x76, 0x49, 0xf5, 0xee, 0x7a, 0xea, 0xda, 0xc5,
		0xd4, 0xbe, 0x2b, 0xa9, 0x7d, 0x97, 0x51, 0xfb, 0xae, 0xa1, 0x5d, 0xf6, 0x42, 0x75, 0xa5, 0x34,
		0x67, 0x6a, 0xac, 0x95, 0x0b, 0xd6, 0x6c, 0x39, 0x4c, 0x9f, 0xaf, 0x78, 0xd2, 0xf5, 0x94, 0xc6,
		0xd4, 0x16, 0xbe, 0xa1, 0x33, 0x2c, 0x83, 0x26, 0xdc, 0x42, 0x77, 0x18, 0x05, 0x59, 0x78, 0x04,
		0x59, 0xd8, 0x03, 0x59, 0x38, 0x83, 0xdd, 0xc4, 0x46, 0x57, 0x69, 0xc7, 0x48, 0xb1, 0xe8, 0x93,
		0xc7, 0x05, 0xfd, 0xa5, 0x4b, 0x16, 0xf5, 0x56, 0xf8, 0xd5, 0x1e, 0x8d, 0x46, 0x11, 0x6d, 0x46,
		0x1b, 0x4d, 0x46, 0x15, 0x2d, 0x46, 0x1e, 0x0d, 0x46, 0x1e, 0xed, 0x45, 0x1e, 0xcd, 0xb5, 0x5d,
		0x7e, 0x73, 0xdd, 0x15, 0x6f, 0x9d, 0xc8, 0x01, 0xaf, 0x5d, 0x8e, 0x67, 0xab, 0x53, 0xa7, 0xbf,
		0xff, 0xad, 0xba, 0xd4, 0x1c, 0x09, 0x40, 0x16, 0xc4, 0x4b, 0x19, 0xac, 0x6b, 0x26, 0x28, 0x97,
		0x3a, 0xf8, 0xd6, 0x58, 0x90, 0xad, 0xb1, 0x60, 0x5a, 0x63, 0x41, 0xb3, 0xdb, 0xbd, 0x2f, 0x4e,
		0x16, 0xec, 0x1a, 0xaf, 0xbb, 0x3e, 0xf3, 0x7a, 0x01, 0xeb, 0x51, 0x2c, 0xba, 0x19, 0xaa, 0xac,
		0x10, 0xb4, 0x75, 0x39, 0xf5, 0x30, 0x7f, 0xfc, 0x18, 0xc5, 0x11, 0x1e, 0x45, 0x86, 0x60, 0x5b,
		0xf7, 0xde, 0x35, 0x22, 0xcb, 0xd9, 0xd6, 0x38, 0x9d, 0x4d, 0x8e, 0x5b, 0x84, 0x59, 0x86, 0x59,
		0x86, 0x59, 0x86, 0x59, 0x86, 0x59, 0xde, 0x59, 0xb3, 0x1c, 0xdb, 0x02, 0x58, 0xe6, 0xc4, 0x60,
		0x4d, 0x83, 0xd7, 0xe8, 0x0c, 0xf3, 0xac, 0x41, 0xd8, 0x65, 0xd8, 0x65, 0xd8, 0x65, 0xd8, 0x65,
		0xd8, 0xe5, 0x9d, 0xb5, 0xcb, 0x33, 0x53, 0x00, 0xb3, 0x9c, 0x18, 0xab, 0xe8, 0x5c, 0x22, 0x99,
		0x51, 0x8e, 0x9a, 0xa3, 0x31, 0xc9, 0x79, 0x98, 0x64, 0x98, 0x64, 0x98, 0x64, 0x98, 0xe4, 0xf4,
		0xa3, 0xa6, 0x7b, 0x03, 0x31, 0x6e, 0x68, 0x72, 0xd8, 0x98, 0x8b, 0x2e, 0xa3, 0xcb, 0x2a, 0xb3,
		0x58, 0xa7, 0x32, 0x6a, 0x9b, 0xea, 0x84, 0x35, 0x69, 0xfe, 0x20, 0xf2, 0x7c, 0x41, 0x26, 0xf2,
		0x03, 0x99, 0xcd, 0x07, 0x64, 0x2a, 0xff, 0x8f, 0xf1, 0x7c, 0x3f, 0xc6, 0xf3, 0xfb, 0x18, 0xcf,
		0xe7, 0x93, 0xad, 0xdc, 0x0f, 0xe4, 0xf9, 0x79, 0x0c, 0x70, 0x31, 0x13, 0x9c, 0x6c, 0x19, 0x37,
		0xfb, 0xc9, 0xdf, 0x89, 0x49, 0x0a, 0x99, 0x0c, 0xe3, 0xab, 0x29, 0x93, 0x8b, 0xcc, 0x54, 0x56,
		0x4e, 0xbd, 0x13, 0x20, 0x6b, 0x9a, 0x08, 0xa5, 0x84, 0x34, 0x53, 0x44, 0x2a, 0x01, 0x4e, 0x00,
		0x4e, 0x00, 0x4e, 0x00, 0x4e, 0x00, 0x4e, 0x2c, 0x59, 0xb7, 0x43, 0x2e, 0xe4, 0x71, 0xc1, 0x00,
		0x9a, 0xa0, 0x04, 0x13, 0x4d, 0x4f, 0xdc, 0x33, 0xf2, 0xaa, 0xd0, 0x06, 0x72, 0xdb, 0x99, 0xac,
		0xfa, 0x6c, 0x3a, 0xdb, 0xef, 0xac, 0x24, 0xae, 0xa9, 0xf6, 0x2d, 0x28, 0x7f, 0x6b, 0x22, 0xe3,
		0xb5, 0xc9, 0x2a, 0xcd, 0xb6, 0x88, 0x5c, 0xb1, 0x70, 0x5a, 0x3c, 0x2d, 0x57, 0x0a, 0xa7, 0xa5,
		0x1d, 0x96, 0xbd, 0x8c, 0xe6, 0xac, 0x6c, 0x81, 0x44, 0xae, 0x41, 0x22, 0x1f, 0x1e, 0x86, 0x82,
		0xcb, 0x67, 0x53, 0x2e, 0xea, 0xb7, 0x1d, 0x00, 0xb1, 0x04, 0xb1, 0x04, 0xb1, 0x04, 0xb1, 0x04,
		0xb1, 0x24, 0x5f, 0xb7, 0xf0, 0x53, 0xcf, 0xfd, 0x9d, 0xd9, 0x25, 0xce, 0xc2, 0xf8, 0xfa, 0x19,
		0xae, 0xea, 0x74, 0x43, 0x4e, 0x76, 0x76, 0x27, 0x21, 0xd3, 0x44, 0x67, 0x78, 0x80, 0x2b, 0x80,
		0x2b, 0x80, 0x2b, 0x80, 0x2b, 0x80, 0x2b, 0x96, 0xac, 0x5b, 0x3e, 0x70, 0xbd, 0x6e, 0x37, 0x60,
		0x61, 0x68, 0x02, 0x5a, 0x9c, 0x12, 0xb6, 0x39, 0x1d, 0xe3, 0xcc, 0x3b, 0xad, 0x5f, 0x67, 0xf6,
		0xb1, 0x68, 0x60, 0x6e, 0x13, 0x73, 0x7c, 0x62, 0xa0, 0xed, 0x4b, 0x4f, 0x4a, 0x16, 0x08, 0xf2,
		0xe9, 0x8e, 0x3b, 0x70, 0x70, 0x70, 0x9b, 0x73, 0x4f, 0x5b, 0x2f, 0xb7, 0x79, 0xf7, 0xb4, 0x15,
		0x5d, 0xe6, 0x27, 0x3f, 0xa2, 0xeb, 0xc2, 0x6d, 0xce, 0x2d, 0xce, 0xae, 0x4b, 0xb7, 0x39, 0xb7,
		0xd4, 0x3a, 0xfc, 0xf3, 0xcf, 0x8f, 0x87, 0x3f, 0x8e, 0x47, 0xeb, 0xdf, 0x48, 0x5f, 0x44, 0xac,
		0x65, 0x62, 0x4a, 0x1b, 0x57, 0xf5, 0xff, 0x1a, 0x9f, 0xd7, 0xbf, 0x28, 0x27, 0xf6, 0x3f, 0x06,
		0x66, 0x36, 0xcb, 0xb5, 0xb2, 0xcc, 0x2a, 0xe3, 0x32, 0x94, 0xb1, 0x51, 0x65, 0xec, 0xb9, 0xbd,
		0xaa, 0xfb, 0xb5, 0xf5, 0x23, 0xff, 0xa1, 0x38, 0x3a, 0x3b, 0xfc, 0x51, 0x19, 0xbd, 0xfd, 0xf0,
		0x65, 0xd9, 0xd7, 0xf2, 0x1f, 0x2a, 0xa3, 0xb3, 0x15, 0xbf, 0x29, 0x8f, 0xce, 0xde, 0xf9, 0x8c,
		0xd2, 0xe8, 0x20, 0xf1, 0xd5, 0xf1, 0xe7, 0x85, 0x55, 0x37, 0x14, 0x57, 0xdc, 0x70, 0xbc, 0xea,
		0x86, 0xe3, 0x15, 0x37, 0xac, 0xec, 0x52, 0x61, 0xc5, 0x0d, 0xa5, 0xd1, 0x4b, 0xe2, 0xfb, 0x07,
		0xcb, 0xbf, 0x5a, 0x1e, 0x1d, 0xbe, 0xac, 0xfa, 0x5d, 0x65, 0xf4, 0x72, 0x76, 0x08, 0xd3, 0x44,
		0x6f, 0x9a, 0x20, 0xe6, 0xf4, 0x62, 0x9e, 0x7d, 0x43, 0x8d, 0xfd, 0x61, 0x1b, 0x3d, 0xb7, 0x4f,
		0xd2, 0x35, 0xbe, 0x47, 0xbc, 0xac, 0x13, 0xf0, 0xe7, 0xc2, 0x9f, 0x0b, 0x7f, 0x2e, 0xfc, 0xb9,
		0xf0, 0xe7, 0x92, 0xaf, 0x5b, 0xec, 0x13, 0xcf, 0xfd, 0x9d, 0xb7, 0x4d, 0x9c, 0x85, 0x0b, 0xff,
		0xc6, 0x7e, 0x71, 0xca, 0xa1, 0xe7, 0xe2, 0xd1, 0xeb, 0xf3, 0xae, 0x1b, 0x30, 0x2f, 0x24, 0xac,
		0x6c, 0xfb, 0xea, 0x4a, 0x59, 0x6c, 0x1f, 0x58, 0x03, 0x58, 0x03, 0x58, 0x03, 0x58, 0x03, 0x58,
		0x83, 0x7c, 0xdd, 0xf2, 0x2e, 0x13, 0x92, 0xcb, 0x67, 0x43, 0x78, 0x83, 0xb2, 0x4e, 0x7d, 0x7d,
		0xfa, 0xaa, 0x9f, 0xbc, 0xd0, 0x80, 0xca, 0x98, 0x0d, 0x78, 0xfd, 0xe2, 0x8f, 0xea, 0x79, 0xfd,
		0x4b, 0xbb, 0xd9, 0xb8, 0xb9, 0xae, 0xb5, 0x9b, 0xb5, 0xea, 0x55, 0xe3, 0x82, 0x5a, 0x7b, 0x4c,
		0x0e, 0x69, 0x84, 0x46, 0xdc, 0x9c, 0x86, 0x4e, 0xc5, 0xbc, 0x1d, 0xfd, 0xcf, 0xe7, 0x37, 0x57,
		0xd7, 0xb5, 0x66, 0xfb, 0xbc, 0xd1, 0xb8, 0x74, 0x76, 0xe1, 0x50, 0x92, 0x2d, 0xe3, 0xde, 0xb8,
		0xf8, 0x5a, 0xfb, 0x82, 0x11, 0xa7, 0x1b, 0xf1, 0xea, 0x15, 0x84, 0x9c, 0x78, 0xc8, 0x1b, 0xcd,
		0xfa, 0x6f, 0xf5, 0x8b, 0xea, 0x75, 0xa3, 0xe9, 0x64, 0xfc, 0xcc, 0x59, 0x2b, 0x6b, 0x78, 0x2f,
		0x13, 0xec, 0xbe, 0xef, 0x85, 0xd2, 0x7d, 0xf0, 0xbb, 0xbc, 0xc7, 0x59, 0x97, 0x9e, 0xdc, 0x2f,
		0x36, 0x0f, 0x6e, 0x0f, 0x6e, 0x0f, 0x6e, 0x0f, 0x6e, 0x0f, 0x6e, 0x4f, 0xbe, 0x6e, 0x25, 0x7f,
		0x60, 0x92, 0x77, 0xfe, 0x09, 0xcb, 0x45, 0x03, 0xdc, 0x9e, 0x30, 0x4c, 0xcd, 0xb9, 0x11, 0xd1,
		0x19, 0x7f, 0x47, 0x78, 0xc2, 0x0f, 0x59, 0xc7, 0x17, 0x5d, 0xd2, 0x58, 0x78, 0x64, 0x53, 0xc9,
		0x9e, 0x8d, 0x5f, 0xee, 0x35, 0x41, 0x36, 0x15, 0x72, 0x91, 0x43, 0x36, 0x95, 0xfd, 0xfc, 0x49,
		0xb1, 0x58, 0xae, 0x14, 0x8b, 0xb9, 0xca, 0x71, 0x25, 0x77, 0x5a, 0x2a, 0xe5, 0xcb, 0x79, 0xe4,
		0x55, 0xc9, 0x5c, 0x6b, 0x88, 0x9b, 0x7b, 0xbf, 0x18, 0x52, 0xd5, 0x44, 0x4a, 0x80, 0x2a, 0x9a,
		0xda, 0x48, 0x71, 0xb3, 0x5f, 0x58, 0xcf, 0x1b, 0xf6, 0x27, 0x50, 0x3c, 0x07, 0x2e, 0x0d, 0x2e,
		0x0d, 0x2e, 0x0d, 0x2e, 0x0d, 0x2e, 0x8d, 0xa4, 0xa0, 0xa0, 0xb1, 0xa0, 0xb1, 0xa0, 0xb1, 0xa0,
		0xb1, 0x5b, 0x25, 0x72, 0x48, 0x0a, 0x0a, 0xf2, 0x0a, 0xf2, 0xba, 0xef, 0x4c, 0x83, 0x9f, 0xfd,
		0xa1, 0x64, 0xf4, 0x04, 0x76, 0xbe, 0x71, 0x10, 0x4a, 0x10, 0x4a, 0x10, 0x4a, 0x10, 0x4a, 0x10,
		0x4a, 0xf2, 0x75, 0x7b, 0xe7, 0xfb, 0x7d, 0xe6, 0x09, 0x13, 0x41, 0xd7, 0xf9, 0xac, 0x98, 0xea,
		0xad, 0x2e, 0x90, 0x59, 0x15, 0xc2, 0x97, 0xde, 0x18, 0x8d, 0xd2, 0xd4, 0xc9, 0x0c, 0x3b, 0xdf,
		0xd9, 0x83, 0x37, 0x98, 0x1e, 0xba, 0x3b, 0xf2, 0x07, 0x4c, 0x74, 0x26, 0x86, 0x72, 0xac, 0x3f,
		0x8e, 0xc6, 0xff, 0x05, 0xfc, 0xee, 0xc8, 0xeb, 0x71, 0x37, 0xf4, 0x7a, 0x3c, 0x8c, 0xaf, 0x8e,
		0x26, 0x79, 0x6f, 0xc2, 0x40, 0x32, 0x77, 0xe0, 0xf7, 0x79, 0xe7, 0xf9, 0x48, 0x30, 0x7e, 0xff,
		0xfd, 0xce, 0x0f, 0xc2, 0xf8, 0xea, 0xc8, 0xeb, 0xfe, 0x3d, 0x51, 0x45, 0xfe, 0x50, 0xba, 0x03,
		0x3f, 0x94, 0x47, 0x13, 0x7c, 0x11, 0x46, 0x3f, 0xa2, 0x53, 0x7a, 0x28, 0x21, 0x9d, 0x9c, 0x93,
		0xa1, 0xf8, 0x47, 0xf8, 0xff, 0x0a, 0xd7, 0x93, 0x32, 0xe0, 0x77, 0xe3, 0x11, 0xa3, 0xab, 0x27,
		0xbd, 0xa4, 0x6d, 0x14, 0x97, 0xb6, 0x15, 0xf6, 0xa1, 0xb8, 0x74, 0x36, 0x61, 0x1d, 0x8a, 0x4b,
		0xa7, 0x1a, 0x35, 0xb2, 0xe2, 0xd2, 0x09, 0x25, 0x49, 0xcf, 0xd7, 0x93, 0x5d, 0xa0, 0x65, 0xed,
		0x79, 0xb0, 0x76, 0xb0, 0x76, 0xb0, 0x76, 0xb0, 0x76, 0x7b, 0x58, 0x3b, 0x95, 0xfa, 0x8f, 0x1b,
		0x9c, 0x94, 0x52, 0x96, 0xd4, 0xbe, 0x82, 0x05, 0x8d, 0xf1, 0xda, 0x05, 0x62, 0xd1, 0x35, 0xb3,
		0x77, 0x44, 0x6e, 0x0e, 0x4c, 0x9a, 0x05, 0x3b, 0xcc, 0x83, 0x69, 0x33, 0x61, 0x8d, 0xb9, 0xb0,
		0xc6, 0x6c, 0x58, 0x63, 0x3e, 0x68, 0xcd, 0x08, 0xb1, 0x39, 0x89, 0x47, 0xf9, 0xda, 0x84, 0x82,
		0xdf, 0x37, 0x9b, 0xf9, 0x2b, 0x81, 0xf6, 0x2b, 0x66, 0xb2, 0x4b, 0xcf, 0x32, 0x81, 0x45, 0x09,
		0xbd, 0x5e, 0x8d, 0x5d, 0x46, 0x77, 0xcb, 0x09, 0x45, 0xdb, 0x89, 0xbc, 0xaf, 0xc6, 0x80, 0x4b,
		0xd4, 0xbc, 0x19, 0xd0, 0x92, 0x07, 0x68, 0x01, 0x68, 0x01, 0x68, 0x01, 0x68, 0xc9, 0x2e, 0x68,
		0xa1, 0xe6, 0xc2, 0x8b, 0x9c, 0xb8, 0xcf, 0x0c, 0x06, 0xd2, 0x2e, 0x50, 0xe3, 0x71, 0x4f, 0x3e,
		0xec, 0x64, 0x74, 0xa5, 0x29, 0xa3, 0x63, 0x83, 0xf1, 0xb1, 0xcb, 0x08, 0xd9, 0x62, 0x8c, 0xac,
		0x33, 0x4a, 0xd6, 0x19, 0x27, 0xeb, 0x8c, 0x94, 0x19, 0x63, 0x65, 0xc8, 0x68, 0x99, 0x67, 0xdc,
		0x09, 0xbd, 0x31, 0xe4, 0x42, 0xe6, 0xcb, 0x26, 0x75, 0xc6, 0xd4, 0x8a, 0x94, 0x0d, 0x76, 0xc1,
		0xcc, 0xf9, 0x9f, 0xb7, 0x7f, 0xcc, 0xea, 0xcc, 0x7d, 0xd3, 0xe7, 0x83, 0x2c, 0x83, 0x17, 0x89,
		0xee, 0x18, 0x3e, 0x3f, 0x94, 0xe8, 0x8f, 0x05, 0x67, 0x3a, 0x2c, 0x51, 0xa7, 0x8b, 0x22, 0xec,
		0x3d, 0x41, 0x84, 0x7f, 0x21, 0xc2, 0xe5, 0x52, 0xe9, 0xb8, 0x04, 0x31, 0xb6, 0x0b, 0x8b, 0x98,
		0x6f, 0xbd, 0xb5, 0xb7, 0x1b, 0xef, 0x6b, 0xe2, 0x18, 0xa4, 0xb9, 0x9d, 0xf4, 0xe5, 0x6e, 0x03,
		0x03, 0x3b, 0xea, 0xf0, 0x1b, 0xc0, 0x6f, 0x00, 0xbf, 0x01, 0xfc, 0x06, 0xf0, 0x1b, 0x64, 0xc4,
		0x6f, 0x70, 0x62, 0x81, 0xdb, 0xa0, 0x04, 0xb7, 0x01, 0xdc, 0x06, 0x70, 0x1b, 0xc0, 0x6d, 0x00,
		0xb7, 0x81, 0x76, 0x11, 0x2e, 0x94, 0xe0, 0x34, 0x80, 0xd3, 0x00, 0x4e, 0x03, 0x5a, 0xa7, 0xc1,
		0xe3, 0x74, 0xf5, 0xd9, 0xe0, 0x35, 0x88, 0xfa, 0x02, 0xb7, 0x01, 0xdc, 0x06, 0x70, 0x1b, 0xc0,
		0x6d, 0x00, 0xb7, 0x01, 0xdc, 0x06, 0x6b, 0xea, 0x8d, 0x3b, 0x2e, 0xbc, 0xe0, 0xd9, 0x02, 0xbf,
		0xc1, 0xa9, 0xc1, 0x2e, 0x9c, 0x33, 0x71, 0x3f, 0x09, 0xfc, 0x87, 0xe3, 0x00, 0x8e, 0x83, 0x5f,
		0xb2, 0xae, 0x3c, 0x38, 0x17, 0x1c, 0x07, 0xdb, 0x2d, 0xc2, 0x88, 0x37, 0x80, 0xeb, 0x00, 0xae,
		0x03, 0x52, 0x31, 0x67, 0x4f, 0x92, 0x89, 0x2e, 0x61, 0x19, 0xcc, 0x95, 0x90, 0x2f, 0xee, 0x09,
		0xdc, 0x06, 0x70, 0x1b, 0xc0, 0x6d, 0x00, 0xb7, 0x01, 0xdc, 0x06, 0x70, 0x1b, 0xac, 0xeb, 0x36,
		0x20, 0x4f, 0x1a, 0xbb, 0xca, 0x8c, 0x10, 0x25, 0x91, 0xdd, 0x4d, 0xd0, 0xe2, 0x0f, 0xc6, 0xc8,
		0xdc, 0xeb, 0x9b, 0x07, 0x2d, 0x71, 0x4f, 0x00, 0x5a, 0x00, 0x5a, 0x00, 0x5a, 0x00, 0x5a, 0x00,
		0x5a, 0x00, 0x5a, 0x00, 0x5a, 0x00, 0x5a, 0x92, 0x63, 0x3c, 0xf0, 0x02, 0xc9, 0x6d, 0xc0, 0x2c,
		0xb3, 0x8e, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2,
		0x00, 0xb2, 0x24, 0xc7, 0x58, 0x06, 0x9e, 0x08, 0xb9, 0xe4, 0x8f, 0x16, 0xc4, 0x95, 0xce, 0xf5,
		0x05, 0xc0, 0x05, 0xc0, 0x05, 0xc0, 0x05, 0xc0, 0x05, 0xc0, 0x05, 0xc0, 0x05, 0xc0, 0xc5, 0x7a,
		0xe0, 0x92, 0xe9, 0xf4, 0xa2, 0xc4, 0x55, 0x0a, 0x13, 0xed, 0x1b, 0xac, 0x5a, 0x98, 0x2c, 0x90,
		0x97, 0xfc, 0x88, 0xa2, 0xb4, 0xa1, 0x39, 0x81, 0xcb, 0x56, 0xd5, 0x98, 0xdf, 0xd9, 0xb3, 0x89,
		0xb4, 0x2f, 0xce, 0x39, 0x0f, 0x65, 0x55, 0x4a, 0xe2, 0x92, 0x35, 0xdf, 0xb8, 0xa8, 0xf5, 0xd9,
		0x18, 0x13, 0x84, 0xb4, 0x98, 0xda, 0xf9, 0xe6, 0x3d, 0xcd, 0xb5, 0x9c, 0x3f, 0x29, 0x16, 0xcb,
		0x95, 0x62, 0x31, 0x57, 0x39, 0xae, 0xe4, 0x4e, 0x4b, 0xa5, 0x7c, 0x39, 0x4f, 0x18, 0x02, 0xeb,
		0x34, 0x82, 0x2e, 0x0b, 0x58, 0xf7, 0xd3, 0x78, 0xea, 0xc5, 0xb0, 0xdf, 0xcf, 0x94, 0x44, 0x1b,
		0x52, 0xce, 0xb6, 0x2b, 0x65, 0x87, 0xb4, 0xb8, 0x42, 0x30, 0xec, 0x48, 0x31, 0x85, 0x5f, 0x9f,
		0xee, 0x07, 0xed, 0x26, 0xbf, 0x6b, 0x57, 0x7b, 0xfc, 0xca, 0xeb, 0xf1, 0x76, 0x7d, 0xf0, 0x58,
		0xbe, 0x0a, 0x24, 0xbb, 0x9c, 0xbc, 0x6d, 0xfb, 0x62, 0xfa, 0x8e, 0xed, 0x6a, 0xf7, 0xef, 0x26,
		0xbf, 0x6b, 0x0c, 0xe5, 0xa5, 0x1f, 0xca, 0x76, 0x73, 0xfc, 0x66, 0xed, 0x9b, 0xe8, 0x35, 0xaa,
		0xf1, 0x5b, 0xa0, 0x4a, 0xb3, 0xf9, 0xa5, 0xb6, 0x4b, 0x55, 0x9a, 0x97, 0x14, 0x04, 0xde, 0xd6,
		0x92, 0xcd, 0x7b, 0x5b, 0x24, 0x6a, 0x33, 0x5c, 0x32, 0x9e, 0x73, 0x97, 0x77, 0xf7, 0x99, 0xe8,
		0x0e, 0x7c, 0x2e, 0xe4, 0x7e, 0xc7, 0xef, 0xfb, 0x81, 0x26, 0x5d, 0x46, 0x03, 0x4a, 0xe8, 0x40,
		0x88, 0x51, 0xd0, 0x41, 0x03, 0x32, 0x74, 0x89, 0x1f, 0x91, 0x86, 0x33, 0xa8, 0xd9, 0x34, 0xe2,
		0x01, 0x75, 0xf6, 0x5f, 0x8f, 0xae, 0x55, 0xaf, 0x09, 0xd5, 0x3e, 0x51, 0xb1, 0x50, 0xeb, 0x16,
		0x66, 0x23, 0x42, 0xac, 0x56, 0x32, 0xd4, 0xcd, 0x9f, 0x9a, 0x27, 0x29, 0x92, 0x00, 0x5d, 0x33,
		0x4f, 0x3b, 0xe3, 0x0a, 0x35, 0x95, 0x0a, 0xcd, 0xa4, 0x46, 0xf2, 0x36, 0x97, 0x13, 0x05, 0x32,
		0xe2, 0x2c, 0x0c, 0x75, 0xa0, 0xce, 0x5d, 0xff, 0x9a, 0x18, 0xe8, 0x4d, 0x03, 0x8a, 0xe4, 0x5a,
		0x6d, 0x25, 0x3b, 0xe5, 0xbb, 0xac, 0x3a, 0x76, 0x4d, 0xf5, 0xee, 0x82, 0xea, 0xda, 0xd5, 0xd4,
		0xbe, 0x4b, 0xa9, 0x7d, 0xd7, 0x51, 0xfb, 0x2e, 0xa2, 0x5d, 0x16, 0x43, 0x75, 0xe5, 0x34, 0x67,
		0x6a, 0xae, 0x95, 0x0b, 0xd6, 0x6c, 0x39, 0x4c, 0x9f, 0xaf, 0x78, 0xd2, 0xf5, 0x94, 0xca, 0xd4,
		0x16, 0xce, 0xa1, 0x33, 0x4c, 0x83, 0x26, 0xfc, 0x42, 0x77, 0x58, 0x05, 0x59, 0xb8, 0x04, 0x59,
		0x18, 0x04, 0x59, 0x78, 0x83, 0xdd, 0xe4, 0x46, 0x57, 0xa9, 0xc7, 0x48, 0xb1, 0xe8, 0x93, 0xc7,
		0x05, 0xfd, 0xa5, 0x4b, 0x16, 0xf5, 0x56, 0xfc, 0xd5, 0x1e, 0x9d, 0x46, 0x11, 0x7d, 0x46, 0x1b,
		0x5d, 0x46, 0x15, 0x3d, 0x46, 0x1e, 0x1d, 0x46, 0x1e, 0xfd, 0x45, 0x1e, 0xdd, 0xb5, 0x5d, 0xfe,
		0x73, 0xdd, 0x15, 0x70, 0x9d, 0xc8, 0x11, 0xaf, 0x5d, 0x8e, 0x67, 0xab, 0x53, 0xa7, 0xdf, 0xff,
		0xad, 0xba, 0xd4, 0x1c, 0x17, 0x40, 0x16, 0xd4, 0x4b, 0x19, 0xbc, 0x6b, 0x26, 0x48, 0x97, 0x3a,
		0x18, 0xd7, 0x58, 0xd0, 0xad, 0xb1, 0xe0, 0x5a, 0x63, 0x41, 0xb4, 0xdb, 0xbd, 0x43, 0x4e, 0x16,
		0xfc, 0x1a, 0xaf, 0xbb, 0x3e, 0xf3, 0x7a, 0x01, 0xeb, 0x51, 0x2c, 0xba, 0x19, 0xaa, 0xac, 0x10,
		0xb4, 0x75, 0x39, 0xf5, 0x31, 0x7f, 0xfc, 0x18, 0x45, 0x15, 0x1e, 0x45, 0x86, 0x60, 0x5b, 0xf7,
		0xe0, 0x35, 0x22, 0xcb, 0xd9, 0x16, 0x39, 0x9d, 0x4d, 0x8e, 0x5b, 0x84, 0x59, 0x86, 0x59, 0x86,
		0x59, 0x86, 0x59, 0x86, 0x59, 0xde, 0x59, 0xb3, 0x1c, 0xdb, 0x02, 0x58, 0xe6, 0xc4, 0x60, 0x4d,
		0x83, 0xd8, 0xe8, 0x0c, 0xf3, 0xac, 0x41, 0xd8, 0x65, 0xd8, 0x65, 0xd8, 0x65, 0xd8, 0x65, 0xd8,
		0xe5, 0x9d, 0xb5, 0xcb, 0x33, 0x53, 0x00, 0xb3, 0x9c, 0x18, 0xab, 0xe8, 0x94, 0x22, 0x99, 0x51,
		0x8e, 0x9a, 0xa3, 0x31, 0xc9, 0x79, 0x98, 0x64, 0x98, 0x64, 0x98, 0x64, 0x98, 0xe4, 0xf4, 0xa3,
		0xa6, 0x7b, 0x03, 0x31, 0x6e, 0x68, 0x72, 0xf4, 0x98, 0x8b, 0x2e, 0xa3, 0xcb, 0x32, 0xb3, 0x58,
		0xb7, 0x32, 0x6a, 0x9b, 0xea, 0xbc, 0x35, 0x69, 0x3e, 0x21, 0xf2, 0xfc, 0x41, 0x26, 0xf2, 0x05,
		0x99, 0xcd, 0x0f, 0x64, 0x2a, 0x1f, 0x90, 0xf1, 0xfc, 0x3f, 0xc6, 0xf3, 0xfd, 0x18, 0xcf, 0xef,
		0x93, 0xad, 0x4c, 0x10, 0xe4, 0xf9, 0x7a, 0x0c, 0x70, 0x31, 0x13, 0x9c, 0x6c, 0x19, 0x37, 0xfb,
		0xc9, 0xdf, 0x89, 0x49, 0x0a, 0x99, 0x0c, 0xe3, 0xab, 0x29, 0x93, 0x8b, 0xcc, 0x54, 0x56, 0xce,
		0xbf, 0x13, 0x20, 0x6b, 0x9a, 0x08, 0xa5, 0x84, 0x34, 0x53, 0x44, 0x2a, 0x01, 0x4e, 0x00, 0x4e,
		0x00, 0x4e, 0x00, 0x4e, 0x00, 0x4e, 0x2c, 0x59, 0xb7, 0x43, 0x2e, 0xe4, 0x71, 0xc1, 0x00, 0x9a,
		0xa0, 0x04, 0x13, 0x4d, 0x4f, 0xdc, 0x33, 0xf2, 0x2a, 0xd1, 0x06, 0x72, 0xdd, 0x99, 0xac, 0x02,
		0x6d, 0x3a, 0xfb, 0xef, 0xac, 0x44, 0xae, 0xa9, 0xf6, 0x2d, 0x28, 0x87, 0x6b, 0x22, 0x03, 0xb6,
		0xc9, 0xaa, 0xcd, 0xb6, 0x88, 0x5c, 0xb1, 0x70, 0x5a, 0x3c, 0x2d, 0x57, 0x0a, 0xa7, 0xa5, 0x1d,
		0x96, 0xbd, 0x8c, 0x66, 0xb0, 0x6c, 0x81, 0x44, 0xae, 0x41, 0x22, 0x1f, 0x1e, 0x86, 0x82, 0xcb,
		0x67, 0x53, 0x2e, 0xea, 0xb7, 0x1d, 0x00, 0xb1, 0x04, 0xb1, 0x04, 0xb1, 0x04, 0xb1, 0x04, 0xb1,
		0x24, 0x5f, 0xb7, 0xf0, 0x53, 0xcf, 0xfd, 0x9d, 0xd9, 0x25, 0xce, 0xc2, 0xf8, 0xfa, 0x19, 0xae,
		0xea, 0x74, 0x43, 0x4e, 0x76, 0x76, 0x27, 0x21, 0xd3, 0x44, 0x67, 0x78, 0x80, 0x2b, 0x80, 0x2b,
		0x80, 0x2b, 0x80, 0x2b, 0x80, 0x2b, 0x96, 0xac, 0x5b, 0x3e, 0x70, 0xbd, 0x6e, 0x37, 0x60, 0x61,
		0x68, 0x02, 0x5a, 0x9c, 0x12, 0xb6, 0x39, 0x1d, 0xe3, 0xcc, 0x3b, 0xad, 0x5f, 0x67, 0xf6, 0xb1,
		0x68, 0x60, 0x6e, 0x13, 0x73, 0x7c, 0x62, 0xa0, 0xed, 0x4b, 0x4f, 0x4a, 0x16, 0x08, 0xf2, 0xe9,
		0x8e, 0x3b, 0x70, 0x70, 0x70, 0x9b, 0x73, 0x4f, 0x5b, 0x2f, 0xb7, 0x79, 0xf7, 0xb4, 0x15, 0x5d,
		0xe6, 0x27, 0x3f, 0xa2, 0xeb, 0xc2, 0x6d, 0xce, 0x2d, 0xce, 0xae, 0x4b, 0xb7, 0x39, 0xb7, 0xd4,
		0x3a, 0xfc, 0xf3, 0xcf, 0x8f, 0x87, 0x3f, 0x8e, 0x47, 0xeb, 0xdf, 0x48, 0x5f, 0x54, 0xac, 0x65,
		0x62, 0x4a, 0x1b, 0x57, 0xf5, 0xff, 0x1a, 0x9f, 0xd7, 0xbf, 0x28, 0x27, 0xf6, 0x3f, 0x06, 0x66,
		0x36, 0xcb, 0xb5, 0xb3, 0xcc, 0x2a, 0xe3, 0x32, 0x94, 0xb1, 0x51, 0x65, 0xec, 0xb9, 0xbd, 0xaa,
		0xfb, 0xb5, 0xf5, 0x23, 0xff, 0xa1, 0x38, 0x3a, 0x3b, 0xfc, 0x51, 0x19, 0xbd, 0xfd, 0xf0, 0x65,
		0xd9, 0xd7, 0xf2, 0x1f, 0x2a, 0xa3, 0xb3, 0x15, 0xbf, 0x29, 0x8f, 0xce, 0xde, 0xf9, 0x8c, 0xd2,
		0xe8, 0x20, 0xf1, 0xd5, 0xf1, 0xe7, 0x85, 0x55, 0x37, 0x14, 0x57, 0xdc, 0x70, 0xbc, 0xea, 0x86,
		0xe3, 0x15, 0x37, 0xac, 0xec, 0x52, 0x61, 0xc5, 0x0d, 0xa5, 0xd1, 0x4b, 0xe2, 0xfb, 0x07, 0xcb,
		0xbf, 0x5a, 0x1e, 0x1d, 0xbe, 0xac, 0xfa, 0x5d, 0x65, 0xf4, 0x72, 0x76, 0x08, 0xd3, 0x44, 0x6f,
		0x9a, 0x20, 0xe6, 0xf4, 0x62, 0x9e, 0x7d, 0x43, 0x8d, 0xfd, 0x61, 0x1b, 0x3d, 0xb7, 0x4f, 0xd2,
		0x35, 0xbe, 0x47, 0xbc, 0xac, 0x13, 0xf0, 0xe7, 0xc2, 0x9f, 0x0b, 0x7f, 0x2e, 0xfc, 0xb9, 0xf0,
		0xe7, 0x92, 0xaf, 0x5b, 0xec, 0x13, 0xcf, 0xfd, 0x9d, 0xb7, 0x4d, 0x9c, 0x85, 0x0b, 0xff, 0xc6,
		0x7e, 0x71, 0xca, 0xa1, 0xe7, 0xe2, 0xd1, 0xeb, 0xf3, 0xae, 0x1b, 0x30, 0x2f, 0x24, 0xac, 0x73,
		0xfb, 0xea, 0x4a, 0x59, 0x6c, 0x1f, 0x58, 0x03, 0x58, 0x03, 0x58, 0x03, 0x58, 0x03, 0x58, 0x83,
		0x7c, 0xdd, 0xf2, 0x2e, 0x13, 0x92, 0xcb, 0x67, 0x43, 0x78, 0x83, 0xb2, 0x6a, 0x7d, 0x7d, 0xfa,
		0xaa, 0x9f, 0xbc, 0xd0, 0x80, 0xca, 0x98, 0x0d, 0x78, 0xfd, 0xe2, 0x8f, 0xea, 0x79, 0xfd, 0x4b,
		0xbb, 0xd9, 0xb8, 0xb9, 0xae, 0xb5, 0x9b, 0xb5, 0xea, 0x55, 0xe3, 0x82, 0x5a, 0x7b, 0x4c, 0x0e,
		0x69, 0x84, 0x46, 0xdc, 0x9c, 0x86, 0x4e, 0xc5, 0xbc, 0x1d, 0xfd, 0xcf, 0xe7, 0x37, 0x57, 0xd7,
		0xb5, 0x66, 0xfb, 0xbc, 0xd1, 0xb8, 0x74, 0x76, 0xe1, 0x50, 0x92, 0x2d, 0xe3, 0xde, 0xb8, 0xf8,
		0x5a, 0xfb, 0x82, 0x11, 0xa7, 0x1b, 0xf1, 0xea, 0x15, 0x84, 0x9c, 0x78, 0xc8, 0x1b, 0xcd, 0xfa,
		0x6f, 0xf5, 0x8b, 0xea, 0x75, 0xa3, 0xe9, 0x64, 0xfc, 0xcc, 0x59, 0x2b, 0x6b, 0x78, 0x2f, 0x13,
		0xec, 0xbe, 0xef, 0x85, 0xd2, 0x7d, 0xf0, 0xbb, 0xbc, 0xc7, 0x59, 0x97, 0x9e, 0xdc, 0x2f, 0x36,
		0x0f, 0x6e, 0x0f, 0x6e, 0x0f, 0x6e, 0x0f, 0x6e, 0x0f, 0x6e, 0x4f, 0xbe, 0x6e, 0x25, 0x7f, 0x60,
		0x92, 0x77, 0xfe, 0x09, 0xcb, 0x45, 0x03, 0xdc, 0x9e, 0x30, 0x4c, 0xcd, 0xb9, 0x11, 0xd1, 0x19,
		0x7f, 0x47, 0x78, 0xc2, 0x0f, 0x59, 0xc7, 0x17, 0x5d, 0xd2, 0x58, 0x78, 0x64, 0x53, 0xc9, 0x9e,
		0x8d, 0x5f, 0xee, 0x35, 0x41, 0x36, 0x15, 0x72, 0x91, 0x43, 0x36, 0x95, 0xfd, 0xfc, 0x49, 0xb1,
		0x58, 0xae, 0x14, 0x8b, 0xb9, 0xca, 0x71, 0x25, 0x77, 0x5a, 0x2a, 0xe5, 0xcb, 0x79, 0xe4, 0x55,
		0xc9, 0x5c, 0x6b, 0x88, 0x9b, 0x7b, 0xbf, 0x18, 0x52, 0xd5, 0x44, 0x4a, 0x80, 0x2a, 0x9a, 0xda,
		0x48, 0x71, 0xb3, 0x5f, 0x58, 0xcf, 0x1b, 0xf6, 0x27, 0x50, 0x3c, 0x07, 0x2e, 0x0d, 0x2e, 0x0d,
		0x2e, 0x0d, 0x2e, 0x0d, 0x2e, 0x8d, 0xa4, 0xa0, 0xa0, 0xb1, 0xa0, 0xb1, 0xa0, 0xb1, 0xa0, 0xb1,
		0x5b, 0x25, 0x72, 0x48, 0x0a, 0x0a, 0xf2, 0x0a, 0xf2, 0xba, 0xef, 0x4c, 0x83, 0x9f, 0xfd, 0xa1,
		0x64, 0xf4, 0x04, 0x76, 0xbe, 0x71, 0x10, 0x4a, 0x10, 0x4a, 0x10, 0x4a, 0x10, 0x4a, 0x10, 0x4a,
		0xf2, 0x75, 0x7b, 0xe7, 0xfb, 0x7d, 0xe6, 0x09, 0x13, 0x41, 0xd7, 0xf9, 0xac, 0x98, 0xea, 0xad,
		0x2e, 0x90, 0x59, 0x15, 0xc2, 0x97, 0xde, 0x18, 0x8d, 0xd2, 0xd4, 0xc9, 0x0c, 0x3b, 0xdf, 0xd9,
		0x83, 0x37, 0x98, 0x1e, 0xba, 0x3b, 0xf2, 0x07, 0x4c, 0x74, 0x26, 0x86, 0x72, 0xac, 0x3f, 0x8e,
		0xc6, 0xff, 0x05, 0xfc, 0xee, 0xc8, 0xeb, 0x71, 0x37, 0xf4, 0x7a, 0x3c, 0x8c, 0xaf, 0x8e, 0x26,
		0x79, 0x6f, 0xc2, 0x40, 0x32, 0x77, 0xe0, 0xf7, 0x79, 0xe7, 0xf9, 0x48, 0x30, 0x7e, 0xff, 0xfd,
		0xce, 0x0f, 0xc2, 0xf8, 0xea, 0xc8, 0xeb, 0xfe, 0x3d, 0x51, 0x45, 0xfe, 0x50, 0xba, 0x83, 0x80,
		0x1d, 0x4d, 0xe0, 0x45, 0x18, 0xfd, 0x88, 0x0e, 0xe9, 0xa1, 0x82, 0x74, 0x72, 0x4a, 0x86, 0xe2,
		0x1f, 0xe1, 0xff, 0x2b, 0x5c, 0x4f, 0xca, 0x80, 0xdf, 0x8d, 0x47, 0x8c, 0xae, 0x9c, 0xf4, 0x92,
		0xb6, 0x51, 0x5b, 0xda, 0x56, 0xd4, 0x87, 0xda, 0xd2, 0xd9, 0x44, 0x75, 0xa8, 0x2d, 0x9d, 0x6a,
		0xd4, 0xc8, 0x6a, 0x4b, 0x27, 0x94, 0x24, 0x3d, 0x5d, 0x4f, 0x76, 0x81, 0x96, 0xb4, 0xe7, 0x41,
		0xda, 0x41, 0xda, 0x41, 0xda, 0x41, 0xda, 0xed, 0x21, 0xed, 0x54, 0xea, 0x3f, 0x6e, 0x70, 0x52,
		0x49, 0x59, 0x52, 0xbb, 0x0a, 0x16, 0x34, 0xc6, 0x6b, 0x17, 0x88, 0x45, 0xd7, 0xcc, 0xd6, 0x11,
		0xb9, 0x39, 0x30, 0x69, 0x16, 0xec, 0x30, 0x0f, 0xa6, 0xcd, 0x84, 0x35, 0xe6, 0xc2, 0x1a, 0xb3,
		0x61, 0x8d, 0xf9, 0xa0, 0x35, 0x23, 0xc4, 0xe6, 0x24, 0x1e, 0xe5, 0x6b, 0x13, 0x0a, 0x7e, 0xdf,
		0x6c, 0xe2, 0xaf, 0x04, 0xda, 0xaf, 0x98, 0x49, 0x2e, 0x3d, 0x4b, 0x04, 0x16, 0xe5, 0xf3, 0x7a,
		0x35, 0x76, 0x19, 0xdd, 0x2c, 0x27, 0x14, 0x6d, 0x27, 0xf2, 0xbe, 0x1a, 0x03, 0x2e, 0x51, 0xf3,
		0x66, 0x40, 0x4b, 0x1e, 0xa0, 0x05, 0xa0, 0x05, 0xa0, 0x05, 0xa0, 0x25, 0xbb, 0xa0, 0x85, 0x9a,
		0x0b, 0x2f, 0x72, 0xe2, 0x3e, 0x33, 0x18, 0x47, 0xbb, 0x40, 0x8d, 0xc7, 0x3d, 0xf9, 0xb0, 0x93,
		0xc1, 0x95, 0xa6, 0x8c, 0x8e, 0x0d, 0xc6, 0xc7, 0x2e, 0x23, 0x64, 0x8b, 0x31, 0xb2, 0xce, 0x28,
		0x59, 0x67, 0x9c, 0xac, 0x33, 0x52, 0x66, 0x8c, 0x95, 0x21, 0xa3, 0x65, 0x9e, 0x71, 0x27, 0xf4,
		0xc6, 0x90, 0x0b, 0x99, 0x2f, 0x9b, 0xd4, 0x19, 0x53, 0x2b, 0x52, 0x36, 0xd8, 0x05, 0x33, 0xc7,
		0x7f, 0xde, 0xfe, 0x31, 0xab, 0x33, 0xf7, 0x4d, 0x1f, 0x0f, 0xb2, 0x0c, 0x5e, 0x24, 0xba, 0x63,
		0xf8, 0xf8, 0x50, 0xa2, 0x3f, 0x16, 0x1c, 0xe9, 0xb0, 0x44, 0x9d, 0x2e, 0x8a, 0xb0, 0xf7, 0x04,
		0x11, 0xfe, 0x85, 0x08, 0x97, 0x4b, 0xa5, 0xe3, 0x12, 0xc4, 0xd8, 0x2e, 0x2c, 0x62, 0xbe, 0xf5,
		0xd6, 0xde, 0x6e, 0xbc, 0xaf, 0x89, 0x53, 0x90, 0xe6, 0x76, 0xd2, 0x97, 0xbb, 0x0d, 0x0c, 0xec,
		0xa8, 0xc3, 0x6f, 0x00, 0xbf, 0x01, 0xfc, 0x06, 0xf0, 0x1b, 0xc0, 0x6f, 0x90, 0x11, 0xbf, 0xc1,
		0x89, 0x05, 0x6e, 0x83, 0x12, 0xdc, 0x06, 0x70, 0x1b, 0xc0, 0x6d, 0x00, 0xb7, 0x01, 0xdc, 0x06,
		0xda, 0x45, 0xb8, 0x50, 0x82, 0xd3, 0x00, 0x4e, 0x03, 0x38, 0x0d, 0x68, 0x9d, 0x06, 0x8f, 0xd3,
		0xd5, 0x67, 0x83, 0xd7, 0x20, 0xea, 0x0b, 0xdc, 0x06, 0x70, 0x1b, 0xc0, 0x6d, 0x00, 0xb7, 0x01,
		0xdc, 0x06, 0x70, 0x1b, 0xac, 0xa9, 0x37, 0xee, 0xb8, 0xf0, 0x82, 0x67, 0x0b, 0xfc, 0x06, 0xa7,
		0x06, 0xbb, 0x70, 0xce, 0xc4, 0xfd, 0x24, 0xf0, 0x1f, 0x8e, 0x03, 0x38, 0x0e, 0x7e, 0xc9, 0xba,
		0xf2, 0xe0, 0x5c, 0x70, 0x1c, 0x6c, 0xb7, 0x08, 0x23, 0xde, 0x00, 0xae, 0x03, 0xb8, 0x0e, 0x48,
		0xc5, 0x9c, 0x3d, 0x49, 0x26, 0xba, 0x84, 0x55, 0x30, 0x57, 0x42, 0xbe, 0xb8, 0x27, 0x70, 0x1b,
		0xc0, 0x6d, 0x00, 0xb7, 0x01, 0xdc, 0x06, 0x70, 0x1b, 0xc0, 0x6d, 0xb0, 0xae, 0xdb, 0x80, 0x3c,
		0x67, 0xec, 0x2a, 0x33, 0x42, 0x94, 0x43, 0x76, 0x37, 0x41, 0x8b, 0x3f, 0x18, 0x23, 0x73, 0xaf,
		0x6f, 0x1e, 0xb4, 0xc4, 0x3d, 0x01, 0x68, 0x01, 0x68, 0x01, 0x68, 0x01, 0x68, 0x01, 0x68, 0x01,
		0x68, 0x01, 0x68, 0x01, 0x68, 0x49, 0x8e, 0xf1, 0xc0, 0x0b, 0x24, 0xb7, 0x01, 0xb3, 0xcc, 0x3a,
		0x02, 0xc8, 0x02, 0xc8, 0x02, 0xc8, 0x02, 0xc8, 0x02, 0xc8, 0x02, 0xc8, 0x02, 0xc8, 0x02, 0xc8,
		0x92, 0x1c, 0x63, 0x19, 0x78, 0x22, 0xe4, 0x92, 0x3f, 0x5a, 0x10, 0x57, 0x3a, 0xd7, 0x17, 0x00,
		0x17, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0xeb, 0x81, 0x4b,
		0xa6, 0xd3, 0x8b, 0x12, 0x17, 0x29, 0x4c, 0xb4, 0x6f, 0xae, 0x68, 0x61, 0xb2, 0x3e, 0x5e, 0xf2,
		0x23, 0x8a, 0xca, 0x86, 0xe6, 0xe4, 0x2d, 0x5b, 0x45, 0x63, 0x7e, 0x67, 0xcf, 0x26, 0xb2, 0xbe,
		0x38, 0xe7, 0x3c, 0x94, 0x55, 0x29, 0x89, 0x2b, 0xd6, 0x7c, 0xe3, 0xa2, 0xd6, 0x67, 0x63, 0x48,
		0x10, 0xd2, 0x42, 0x6a, 0xe7, 0x9b, 0xf7, 0x34, 0xd7, 0x72, 0xfe, 0xa4, 0x58, 0x2c, 0x57, 0x8a,
		0xc5, 0x5c, 0xe5, 0xb8, 0x92, 0x3b, 0x2d, 0x95, 0xf2, 0xe5, 0x3c, 0x61, 0x04, 0xac, 0xd3, 0x08,
		0xba, 0x2c, 0x60, 0xdd, 0x4f, 0xe3, 0xa9, 0x17, 0xc3, 0x7e, 0x3f, 0x53, 0x12, 0x6d, 0x48, 0x37,
		0x5b, 0xae, 0x93, 0x1d, 0xd2, 0xd2, 0x0a, 0xc1, 0xb0, 0x23, 0xc5, 0x14, 0x7c, 0x7d, 0xba, 0x1f,
		0xb4, 0x9b, 0xfc, 0xae, 0x5d, 0xed, 0xf1, 0x2b, 0xaf, 0xc7, 0xdb, 0xf5, 0xc1, 0x63, 0xf9, 0x2a,
		0x90, 0xec, 0x72, 0xf2, 0xb2, 0xed, 0x8b, 0xe9, 0x2b, 0xb6, 0xab, 0xdd, 0xbf, 0x9b, 0xfc, 0xae,
		0x31, 0x94, 0x97, 0x01, 0x6b, 0x37, 0xc7, 0x2f, 0xd6, 0xbe, 0x89, 0xde, 0xa2, 0x1a, 0xbf, 0x04,
		0x2a, 0x34, 0x9b, 0x5f, 0x68, 0x3b, 0x54, 0xa1, 0x79, 0x49, 0x31, 0xe0, 0x6d, 0x2d, 0xd7, 0xbc,
		0xb7, 0x45, 0x92, 0x36, 0x03, 0x25, 0xe3, 0x29, 0x77, 0x79, 0x77, 0x9f, 0x89, 0xee, 0xc0, 0xe7,
		0x42, 0xee, 0x77, 0xfc, 0xbe, 0x1f, 0x68, 0xd2, 0x64, 0x34, 0x88, 0x84, 0x0e, 0x81, 0x18, 0x45,
		0x1c, 0x34, 0x08, 0x43, 0x97, 0xf8, 0x11, 0x29, 0x38, 0x73, 0x8a, 0x4d, 0x23, 0x18, 0x50, 0x66,
		0xfc, 0xf5, 0x68, 0x5a, 0xf5, 0x7a, 0x50, 0xed, 0x13, 0x15, 0x8b, 0xb4, 0x6e, 0x51, 0x36, 0x21,
		0xc2, 0x6a, 0x05, 0x43, 0xdd, 0xf4, 0xa9, 0x79, 0x92, 0x22, 0x01, 0xd0, 0x35, 0xf1, 0xa4, 0x13,
		0xae, 0x50, 0x4d, 0x29, 0x50, 0x4b, 0x6a, 0xe4, 0x6e, 0x73, 0x29, 0x51, 0x20, 0x21, 0xce, 0x6c,
		0xc4, 0x5d, 0xaf, 0xdb, 0x0d, 0x58, 0x18, 0x2a, 0x93, 0x91, 0xd8, 0xe5, 0x9e, 0x68, 0x41, 0x91,
		0x5c, 0xab, 0xdd, 0x8e, 0x55, 0xbe, 0xbd, 0xaa, 0x63, 0xbb, 0x54, 0xef, 0xf6, 0xa7, 0xae, 0xed,
		0x4c, 0xed, 0xdb, 0x93, 0xda, 0xb7, 0x1b, 0xb5, 0x6f, 0x1f, 0xda, 0x65, 0x31, 0x94, 0x6f, 0xd7,
		0x69, 0xac, 0xdf, 0xaa, 0xa3, 0x2e, 0x6b, 0xb2, 0xde, 0x6a, 0x42, 0x87, 0x65, 0xc8, 0x02, 0xa8,
		0x2d, 0x7f, 0xaa, 0xa5, 0xac, 0xa9, 0xe2, 0x72, 0xa5, 0xd0, 0xf5, 0xd0, 0xf5, 0xd0, 0xf5, 0xd1,
		0xdb, 0xaa, 0x2e, 0x8f, 0xa9, 0x0f, 0x50, 0x52, 0x01, 0x4b, 0x4d, 0x00, 0x53, 0x9b, 0xf2, 0xd1,
		0xa9, 0x84, 0x68, 0x94, 0x91, 0x6e, 0xa5, 0x44, 0xa6, 0x9c, 0xc8, 0x94, 0x14, 0x99, 0xb2, 0xda,
		0x0e, 0xdf, 0x96, 0xb6, 0xf8, 0xb2, 0x58, 0xee, 0xf9, 0x40, 0x93, 0x96, 0x59, 0x80, 0x37, 0x1a,
		0x92, 0x0d, 0xce, 0xc6, 0x46, 0x4f, 0x0a, 0x41, 0x8d, 0x2e, 0xf1, 0xd7, 0x91, 0x7f, 0x2c, 0x6a,
		0x1c, 0xfb, 0xc4, 0x1c, 0x9c, 0x68, 0x6c, 0xe3, 0xd2, 0x93, 0x92, 0x05, 0x42, 0x7b, 0x46, 0x47,
		0xe7, 0xe0, 0xe0, 0x36, 0xe7, 0x9e, 0xb6, 0x5e, 0x6e, 0xf3, 0xee, 0x69, 0x2b, 0xba, 0xcc, 0x4f,
		0x7e, 0x44, 0xd7, 0x85, 0xdb, 0x9c, 0x5b, 0x9c, 0x5d, 0x97, 0x6e, 0x73, 0x6e, 0xa9, 0x75, 0xf8,
		0xe7, 0x9f, 0x1f, 0x0f, 0x7f, 0x1c, 0x8f, 0xd6, 0xbf, 0x51, 0xdf, 0x46, 0x68, 0x4b, 0xe7, 0x54,
		0x34, 0xae, 0xea, 0xff, 0x25, 0x9b, 0x8f, 0xbf, 0x28, 0x27, 0xe4, 0x3f, 0x1a, 0x67, 0x64, 0x9b,
		0x76, 0xef, 0x68, 0x94, 0x53, 0x19, 0xca, 0x29, 0x95, 0x72, 0xf2, 0xdc, 0x5e, 0xd5, 0xfd, 0xda,
		0xfa, 0x91, 0xff, 0x50, 0x1c, 0x9d, 0x1d, 0xfe, 0xa8, 0x8c, 0xde, 0x7e, 0xf8, 0xb2, 0xec, 0x6b,
		0xf9, 0x0f, 0x95, 0xd1, 0xd9, 0x8a, 0xdf, 0x94, 0x47, 0x67, 0xef, 0x7c, 0x46, 0x69, 0x74, 0x90,
		0xf8, 0xea, 0xf8, 0xf3, 0xc2, 0xaa, 0x1b, 0x8a, 0x2b, 0x6e, 0x38, 0x5e, 0x75, 0xc3, 0xf1, 0x8a,
		0x1b, 0x56, 0x76, 0xa9, 0xb0, 0xe2, 0x86, 0xd2, 0xe8, 0x25, 0xf1, 0xfd, 0x83, 0xe5, 0x5f, 0x2d,
		0x8f, 0x0e, 0x5f, 0x56, 0xfd, 0xae, 0x32, 0x7a, 0x39, 0x3b, 0x84, 0xaa, 0x7e, 0xbf, 0xaa, 0x86,
		0x78, 0xd2, 0x8b, 0xe7, 0xf6, 0x19, 0xae, 0x3d, 0xbb, 0xfb, 0x89, 0x2d, 0xed, 0xf5, 0x9e, 0xab,
		0x75, 0x4b, 0x5b, 0xe1, 0x51, 0x08, 0x05, 0x1b, 0x07, 0x7b, 0x06, 0xe7, 0x71, 0x16, 0xd5, 0xa7,
		0xd8, 0x81, 0xa7, 0x36, 0x6e, 0x4f, 0x7d, 0x7c, 0x1e, 0x49, 0x1c, 0x9e, 0xda, 0x78, 0xbb, 0x4d,
		0x27, 0x5a, 0xf1, 0x42, 0xd5, 0xba, 0x40, 0x1d, 0x25, 0x7b, 0x69, 0x29, 0x62, 0x4b, 0x36, 0xd3,
		0x09, 0xe9, 0x57, 0x72, 0xba, 0x3b, 0x53, 0x8a, 0x84, 0x2a, 0x51, 0xd0, 0x21, 0x02, 0xe9, 0x26,
		0x60, 0xfd, 0xe1, 0x5b, 0xef, 0x8e, 0x35, 0x07, 0x7a, 0xd3, 0x01, 0x56, 0x37, 0xb0, 0x29, 0x16,
		0xd2, 0x5a, 0x0b, 0x67, 0xbd, 0xe9, 0x7a, 0xff, 0xa0, 0xaf, 0x31, 0xe0, 0x11, 0xf1, 0x1f, 0x0a,
		0xde, 0xf1, 0x42, 0xb9, 0xf6, 0x70, 0x2f, 0xba, 0x0f, 0x66, 0x4f, 0x59, 0x73, 0xba, 0xd3, 0x6d,
		0x89, 0xa7, 0xde, 0x7d, 0xda, 0x64, 0x77, 0x49, 0xcd, 0xee, 0xd1, 0xa6, 0xbb, 0x43, 0xca, 0x76,
		0x7f, 0x94, 0xed, 0xee, 0x28, 0xdb, 0xbd, 0xd1, 0xab, 0x58, 0xd2, 0x6e, 0x11, 0x3b, 0xfd, 0xe8,
		0x9d, 0xd2, 0xcf, 0x58, 0x1c, 0x36, 0x34, 0x7d, 0x50, 0xca, 0x61, 0xde, 0x2c, 0x7a, 0xe4, 0x75,
		0xc9, 0x14, 0x52, 0x3e, 0x40, 0xc1, 0xc6, 0xac, 0xda, 0x0d, 0x58, 0x55, 0x1b, 0xad, 0xca, 0x37,
		0x54, 0x95, 0x6f, 0x9c, 0x2a, 0xdf, 0x20, 0xa5, 0x05, 0x4d, 0x9b, 0x46, 0x67, 0x38, 0xd3, 0x40,
		0xf9, 0x8d, 0x27, 0x7a, 0x26, 0x7e, 0xd3, 0xe7, 0x6d, 0xca, 0xff, 0x94, 0x84, 0x73, 0x29, 0x8b,
		0xa4, 0x50, 0x19, 0x39, 0xa1, 0x27, 0x52, 0x42, 0x75, 0x64, 0x84, 0xb6, 0x48, 0x08, 0x6d, 0x91,
		0x0f, 0xda, 0x22, 0x1d, 0xcc, 0x7a, 0x42, 0x54, 0x85, 0x5f, 0x45, 0x0b, 0x53, 0x7d, 0x14, 0xa7,
		0xca, 0x43, 0x62, 0x88, 0xe2, 0x44, 0x14, 0xa7, 0x6e, 0x35, 0xa1, 0x5d, 0x5d, 0xa8, 0x73, 0xc1,
		0xee, 0xdb, 0x1c, 0xc5, 0xe9, 0x07, 0xfc, 0x5e, 0x43, 0xcd, 0xcd, 0xd7, 0xe5, 0x10, 0x3d, 0x1f,
		0x11, 0x9b, 0x88, 0xd8, 0x34, 0xaa, 0x88, 0xc8, 0x14, 0x12, 0x99, 0x62, 0x52, 0xab, 0xa0, 0x14,
		0x2b, 0xaa, 0x78, 0x14, 0xf4, 0x47, 0x6c, 0xaa, 0x3f, 0x6a, 0x94, 0xc0, 0x31, 0x15, 0x0d, 0xcf,
		0x4e, 0x1c, 0x3d, 0x9a, 0x6a, 0x4a, 0x5b, 0xf7, 0x85, 0x15, 0x82, 0x99, 0x69, 0x92, 0x0f, 0x7d,
		0x46, 0x67, 0xd6, 0x00, 0xac, 0x0e, 0xac, 0x0e, 0xac, 0x0e, 0xac, 0x0e, 0xac, 0xce, 0x4a, 0xab,
		0x33, 0x53, 0x95, 0xbb, 0x60, 0x76, 0xf4, 0xa8, 0xc3, 0x57, 0xab, 0xa3, 0x85, 0x40, 0xc3, 0xe8,
		0xc0, 0xe8, 0xc0, 0xe8, 0xc0, 0xe8, 0x64, 0xca, 0xe8, 0x44, 0x62, 0xbf, 0x03, 0x36, 0x47, 0x6d,
		0xce, 0x85, 0x84, 0x40, 0xa8, 0xcc, 0xbd, 0x90, 0x10, 0x05, 0x58, 0x1c, 0x58, 0x1c, 0x58, 0x1c,
		0x9b, 0x2d, 0x8e, 0xea, 0xdd, 0x80, 0xf8, 0xc1, 0x93, 0xdc, 0xf0, 0x5c, 0x74, 0x99, 0xbe, 0x2a,
		0x40, 0xf1, 0xd2, 0x9a, 0x6b, 0x4b, 0x57, 0x6e, 0x59, 0xad, 0xf5, 0x9c, 0xb4, 0xd7, 0x6b, 0xa2,
		0xa8, 0xc7, 0x44, 0x5b, 0x6f, 0x89, 0xaa, 0x9e, 0x12, 0x79, 0xbd, 0x24, 0xf2, 0x7a, 0x48, 0xe4,
		0xf5, 0x8e, 0xb6, 0x2b, 0xab, 0xb4, 0xf6, 0x7a, 0x44, 0x04, 0xd0, 0x9c, 0x02, 0xa2, 0x2f, 0x83,
		0xea, 0x4b, 0xff, 0x4e, 0x94, 0x75, 0xc8, 0x64, 0x18, 0x5f, 0x4d, 0x21, 0x7d, 0xa4, 0xc0, 0xb7,
		0x25, 0x81, 0xaf, 0x06, 0x0c, 0xd7, 0xf1, 0x1f, 0x1e, 0x86, 0x82, 0xcb, 0x67, 0x2a, 0xbb, 0xf9,
		0xb6, 0x41, 0x18, 0x4f, 0x18, 0x4f, 0x18, 0x4f, 0x18, 0x4f, 0x18, 0x4f, 0x5b, 0x8d, 0xe7, 0x4c,
		0x63, 0x73, 0x16, 0xc6, 0xd7, 0xcf, 0xb0, 0x9f, 0xd1, 0xe0, 0xb1, 0x27, 0xe9, 0x92, 0xdb, 0xd0,
		0x65, 0x8d, 0xc2, 0x8e, 0xc2, 0x8e, 0xc2, 0x8e, 0xc2, 0x8e, 0xc2, 0x8e, 0xda, 0x6a, 0x47, 0xe7,
		0xb5, 0xf6, 0xd8, 0x96, 0x2e, 0x68, 0x71, 0xd8, 0xd3, 0x68, 0x10, 0xb9, 0x78, 0xf4, 0xfa, 0xbc,
		0xeb, 0x06, 0xcc, 0x0b, 0x35, 0x56, 0x35, 0x7a, 0x3d, 0xe2, 0xbc, 0xd8, 0x1e, 0xac, 0x28, 0xac,
		0x28, 0xac, 0x28, 0xac, 0xe8, 0x16, 0x5a, 0x51, 0xde, 0x65, 0x42, 0x72, 0xf9, 0x4c, 0x64, 0x49,
		0x75, 0xd6, 0xe4, 0xab, 0x4f, 0x5f, 0xe5, 0x93, 0x17, 0x12, 0x2c, 0xd1, 0xd9, 0x00, 0xd6, 0x2f,
		0xfe, 0xa8, 0x9e, 0xd7, 0xbf, 0xb4, 0x9b, 0x8d, 0x9b, 0xeb, 0x5a, 0xbb, 0x59, 0xab, 0x5e, 0x35,
		0x2e, 0x74, 0xaf, 0xd6, 0x3f, 0xbc, 0xfe, 0x70, 0x72, 0xfe, 0xf9, 0x56, 0x7b, 0x75, 0x52, 0x9a,
		0x02, 0xc3, 0x89, 0xd1, 0xfc, 0x7c, 0x7e, 0x73, 0x75, 0x5d, 0x6b, 0xb6, 0xcf, 0x1b, 0x8d, 0x4b,
		0xfd, 0x55, 0x71, 0x09, 0x4a, 0x37, 0x9b, 0x1a, 0xc7, 0xc6, 0xc5, 0xd7, 0xda, 0x17, 0x8c, 0x60,
		0xfa, 0x11, 0xac, 0x5e, 0x41, 0x08, 0x37, 0x1c, 0xc2, 0x46, 0xb3, 0xfe, 0x5b, 0xfd, 0xa2, 0x7a,
		0xdd, 0x68, 0x3a, 0x5b, 0x5e, 0x7a, 0xba, 0xb5, 0x6d, 0xf8, 0x64, 0x2b, 0xd8, 0x5b, 0xdf, 0x0b,
		0xa5, 0xfb, 0xe0, 0x77, 0x79, 0x8f, 0xb3, 0xae, 0x7e, 0xf2, 0xb6, 0xd8, 0x1c, 0xb8, 0x1b, 0xb8,
		0x1b, 0xb8, 0x1b, 0xb8, 0xdb, 0x16, 0x72, 0x37, 0xc9, 0x1f, 0x98, 0xe4, 0x9d, 0x7f, 0xc2, 0x72,
		0x91, 0x80, 0xbb, 0xe9, 0xcc, 0xd2, 0x7f, 0x23, 0xf8, 0x24, 0x7b, 0xac, 0x23, 0x3c, 0xe1, 0x87,
		0xac, 0xe3, 0x8b, 0xae, 0xd6, 0xca, 0x03, 0x4d, 0x4f, 0xdc, 0x33, 0xed, 0xfc, 0x49, 0x3f, 0xdc,
		0x72, 0xbe, 0x71, 0xa1, 0x5d, 0xa3, 0x11, 0xd9, 0xb4, 0xe5, 0x2c, 0x97, 0xb0, 0xbd, 0xaf, 0x81,
		0xd7, 0x91, 0xdc, 0x17, 0x5f, 0xf8, 0x7d, 0x24, 0x8d, 0xb9, 0x2c, 0x60, 0x7e, 0xe7, 0x9b, 0xf7,
		0x94, 0x79, 0x11, 0xd1, 0x93, 0x75, 0xda, 0x5a, 0xa9, 0xd9, 0xdb, 0xce, 0xa7, 0xb7, 0x76, 0x98,
		0xe3, 0x68, 0x4a, 0x3d, 0x94, 0xc4, 0xd2, 0x3a, 0x52, 0x10, 0x81, 0xd5, 0x80, 0xd5, 0x80, 0xd5,
		0x80, 0xd5, 0x90, 0xac, 0x9b, 0xa1, 0xe0, 0xda, 0xb6, 0xd4, 0xf7, 0x35, 0xd7, 0xa5, 0x7c, 0x3b,
		0x5c, 0x5b, 0xcf, 0x2f, 0x48, 0x2a, 0x85, 0x9a, 0x98, 0x21, 0xda, 0x99, 0xa2, 0x9b, 0xb1, 0x25,
		0x33, 0x47, 0x52, 0x69, 0x74, 0xe5, 0x1c, 0x9e, 0x10, 0xb6, 0x49, 0x55, 0x4e, 0x2d, 0xd1, 0x70,
		0x36, 0x2a, 0x93, 0x26, 0xf0, 0x3a, 0xe5, 0xd4, 0x51, 0x96, 0xc3, 0x4b, 0xb4, 0x9e, 0x95, 0x4a,
		0xa6, 0x34, 0x8c, 0xcb, 0x80, 0x17, 0xc3, 0x9c, 0xf2, 0x2c, 0x43, 0x79, 0x92, 0x28, 0x4f, 0x94,
		0xa6, 0xcc, 0x52, 0xe5, 0xd4, 0x9d, 0x37, 0x25, 0x10, 0xe7, 0x4c, 0x55, 0x5a, 0x35, 0x64, 0x58,
		0xf7, 0xb6, 0xfb, 0x3d, 0x34, 0x03, 0x03, 0x4a, 0xfe, 0x4b, 0x12, 0x26, 0x9b, 0xb0, 0xff, 0x04,
		0x9b, 0x18, 0xb4, 0x61, 0xb3, 0x89, 0x81, 0xad, 0x5f, 0x5c, 0x5d, 0x57, 0xcf, 0xcf, 0xdb, 0x97,
		0xcd, 0xc6, 0x75, 0xe3, 0x73, 0xe3, 0xbc, 0x7d, 0xfd, 0xbf, 0xcb, 0x9a, 0x43, 0xb9, 0x7d, 0x14,
		0x92, 0xda, 0x88, 0x1f, 0xb4, 0xd6, 0x68, 0x36, 0xcc, 0x5f, 0xea, 0xcd, 0xda, 0xe7, 0xeb, 0xf3,
		0xff, 0xb5, 0x3f, 0x37, 0x2e, 0x2e, 0x6a, 0x9f, 0xaf, 0x29, 0x62, 0x42, 0x89, 0xe9, 0x81, 0xc1,
		0xd1, 0xbd, 0xba, 0xae, 0x5e, 0xd7, 0x3f, 0x63, 0x44, 0xd5, 0x8d, 0xe8, 0x79, 0xe3, 0x73, 0xf5,
		0xbc, 0x5d, 0xfd, 0xed, 0xb7, 0x66, 0xed, 0xb7, 0xea, 0x75, 0x0d, 0x43, 0xab, 0x50, 0xe3, 0xfe,
		0xf6, 0xed, 0x12, 0xe3, 0xa9, 0x6e, 0x3c, 0x3f, 0xfd, 0x86, 0xe1, 0x54, 0x38, 0x9c, 0x8d, 0xab,
		0xcb, 0xaf, 0x18, 0x4f, 0xb5, 0xe3, 0x79, 0x8c, 0x01, 0x55, 0x37, 0xa0, 0x97, 0xf5, 0x6f, 0x18,
		0x4e, 0x85, 0xe6, 0xe8, 0xaa, 0x7e, 0x45, 0x38, 0x9e, 0x7b, 0xd9, 0xf0, 0x0e, 0x20, 0x04, 0x4c,
		0x6f, 0x7f, 0x75, 0x84, 0x80, 0xe9, 0xaa, 0x04, 0x94, 0x58, 0x52, 0x7a, 0x2a, 0x02, 0xc5, 0xcd,
		0x7c, 0x61, 0x3d, 0x6f, 0xd8, 0x9f, 0xc4, 0xc9, 0xe4, 0x10, 0x68, 0xb6, 0xbc, 0x01, 0x04, 0x9a,
		0xa5, 0x9e, 0x79, 0x04, 0x9a, 0x6d, 0x85, 0x36, 0xcf, 0x40, 0xa0, 0x19, 0x17, 0xf2, 0xb8, 0x40,
		0x10, 0x69, 0x56, 0xc1, 0x49, 0x96, 0x5f, 0xbf, 0x08, 0x4e, 0xb2, 0xa8, 0x6b, 0x0f, 0x27, 0x59,
		0xb6, 0x56, 0x44, 0x8a, 0x85, 0xd3, 0xe2, 0x69, 0xb9, 0x52, 0x38, 0xc5, 0xf9, 0x15, 0x90, 0x17,
		0x9b, 0xc8, 0x8b, 0x5e, 0x40, 0xab, 0xb7, 0xae, 0x1c, 0x68, 0x05, 0x68, 0x05, 0x68, 0x05, 0x68,
		0x05, 0x4d, 0x46, 0xb5, 0xc1, 0x63, 0xd9, 0xd5, 0x2e, 0x63, 0x14, 0x21, 0xa2, 0x64, 0x21, 0xa1,
		0x08, 0x01, 0x35, 0x16, 0x33, 0x77, 0x74, 0x90, 0x2f, 0xdc, 0xe6, 0xdc, 0x93, 0x28, 0x6c, 0x3d,
		0xdf, 0x4a, 0x44, 0xb3, 0x4f, 0xfe, 0xaf, 0x31, 0x52, 0xb4, 0xa5, 0x53, 0x7e, 0x29, 0x23, 0x41,
		0x11, 0xf9, 0x69, 0xbd, 0x14, 0x6b, 0x0c, 0x10, 0xdd, 0x65, 0x6e, 0x30, 0xcd, 0x85, 0xec, 0x0f,
		0x25, 0xd3, 0x4f, 0x10, 0xe6, 0x1b, 0x03, 0x4b, 0x00, 0x4b, 0x00, 0x4b, 0x00, 0x4b, 0xd8, 0x42,
		0x96, 0x70, 0xe7, 0xfb, 0x7d, 0xe6, 0x91, 0x9c, 0x73, 0xcf, 0x6f, 0x8b, 0x69, 0xb2, 0xba, 0xfc,
		0x6c, 0x55, 0x08, 0x5f, 0x7a, 0x92, 0x6b, 0x2a, 0x2f, 0xe0, 0x84, 0x9d, 0xef, 0xec, 0xc1, 0x1b,
		0x4c, 0xab, 0x41, 0x1c, 0xf9, 0x03, 0x26, 0x3a, 0x13, 0x43, 0x31, 0x5e, 0x9f, 0x47, 0xe3, 0xff,
		0x02, 0x7e, 0x77, 0xe4, 0xf5, 0xb8, 0x1b, 0x7a, 0x3d, 0x1e, 0xc6, 0x57, 0x47, 0x13, 0xbe, 0x39,
		0x14, 0xbc, 0xe3, 0x85, 0xf2, 0xa8, 0x1f, 0xad, 0xe9, 0xa3, 0x89, 0x7d, 0x0c, 0xa3, 0x1f, 0x51,
		0x91, 0x88, 0x5d, 0x28, 0x40, 0x3e, 0x14, 0xff, 0x08, 0xff, 0x5f, 0xe1, 0x7a, 0x52, 0x06, 0xfc,
		0x6e, 0x3c, 0x02, 0xfa, 0xaa, 0x91, 0x2f, 0x69, 0x0b, 0xa5, 0xc9, 0x51, 0x9a, 0xdc, 0x0a, 0x78,
		0x81, 0xd2, 0xe4, 0xb4, 0xb6, 0x41, 0x5b, 0x69, 0xf2, 0x84, 0x92, 0xd1, 0xcf, 0xaf, 0x92, 0x4d,
		0xea, 0x65, 0x59, 0x79, 0xb0, 0x2c, 0xb0, 0x2c, 0xb0, 0xac, 0x5d, 0x62, 0x59, 0xba, 0xd4, 0x65,
		0xdc, 0xc0, 0xa4, 0x5c, 0xb7, 0xd4, 0xcd, 0xe5, 0x16, 0x56, 0xe8, 0x6b, 0x93, 0x9a, 0x45, 0x8b,
		0x26, 0x2e, 0x45, 0xbb, 0xfa, 0xa4, 0x54, 0xa3, 0x66, 0xd4, 0x29, 0xb5, 0x5a, 0x35, 0xa6, 0x5e,
		0x8d, 0xa9, 0x59, 0x63, 0xea, 0x56, 0xaf, 0xda, 0xd5, 0xac, 0x7e, 0xe9, 0x9c, 0x5d, 0x89, 0x75,
		0xa7, 0xbf, 0x64, 0x67, 0x02, 0x5d, 0x56, 0x08, 0xda, 0x9a, 0x2b, 0xe1, 0x19, 0xd5, 0xe3, 0x7c,
		0x35, 0x06, 0x5b, 0x1a, 0xe9, 0xa6, 0x51, 0xf4, 0x9c, 0xc8, 0x1b, 0x45, 0x66, 0x98, 0xa3, 0xe6,
		0x68, 0x8c, 0x72, 0x1e, 0x46, 0x19, 0x46, 0x19, 0x46, 0x19, 0x46, 0xd9, 0x5e, 0x6e, 0xb4, 0xc8,
		0x91, 0xfa, 0x4c, 0xd0, 0xa7, 0xfc, 0x89, 0x5b, 0xfe, 0x90, 0xc9, 0x48, 0x7e, 0x2a, 0x25, 0x6d,
		0x42, 0x59, 0x9b, 0x55, 0xda, 0xa6, 0x94, 0xb7, 0x71, 0x25, 0x6e, 0x5c, 0x99, 0x1b, 0x57, 0xea,
		0x34, 0xca, 0x9d, 0x48, 0xc9, 0xd3, 0x33, 0xb0, 0xc4, 0xba, 0x1d, 0x72, 0x21, 0xf3, 0x65, 0x03,
		0x29, 0x6d, 0xcb, 0x84, 0x4d, 0xd2, 0x9c, 0x8d, 0x7c, 0xfb, 0x87, 0x56, 0x27, 0xed, 0x53, 0x9f,
		0x9d, 0x34, 0x6c, 0x5e, 0x13, 0xcd, 0x13, 0x9f, 0xad, 0x4c, 0xb4, 0x6f, 0xe0, 0xfc, 0x9c, 0x21,
		0x75, 0xb5, 0x28, 0x72, 0xde, 0xd3, 0xce, 0x8b, 0x5c, 0xb9, 0x54, 0x3a, 0x2e, 0xed, 0xb0, 0xd8,
		0xed, 0x65, 0xb3, 0xb5, 0xac, 0xe4, 0xf6, 0xa5, 0x38, 0x92, 0x4d, 0xb7, 0xd3, 0xb6, 0x9c, 0x46,
		0x12, 0xec, 0xb8, 0x81, 0x47, 0x82, 0x47, 0x82, 0x47, 0x82, 0x47, 0x82, 0x47, 0xae, 0xe0, 0x91,
		0x27, 0x06, 0x68, 0x64, 0x09, 0x34, 0x12, 0x34, 0x12, 0x34, 0x12, 0x34, 0x32, 0x03, 0x22, 0x57,
		0x28, 0x81, 0x44, 0x82, 0x44, 0xee, 0x3a, 0x89, 0x7c, 0x9c, 0xae, 0x06, 0x13, 0x2c, 0x32, 0x6a,
		0x1b, 0x34, 0x12, 0x34, 0x12, 0x34, 0x12, 0x34, 0x12, 0x34, 0x92, 0x7c, 0xdd, 0xde, 0x71, 0xe1,
		0x05, 0xcf, 0x06, 0x78, 0xe4, 0x29, 0x61, 0x93, 0xe7, 0x4c, 0xdc, 0x4f, 0x02, 0x45, 0x41, 0x24,
		0x77, 0x00, 0xd5, 0xe7, 0x41, 0x24, 0x41, 0x24, 0x69, 0x45, 0x0e, 0xfb, 0x91, 0xa0, 0x92, 0x3b,
		0x4e, 0x25, 0xd9, 0x93, 0x64, 0xa2, 0xcb, 0xba, 0xf4, 0x44, 0x32, 0x6e, 0x19, 0x34, 0x12, 0x34,
		0x12, 0x34, 0x12, 0x34, 0x12, 0x34, 0x92, 0x9e, 0x46, 0x6a, 0x4f, 0xaa, 0xb5, 0x4a, 0x0d, 0x6b,
		0x4a, 0xb2, 0x95, 0x4d, 0x23, 0xed, 0x0f, 0xc6, 0x48, 0xd1, 0xeb, 0xd3, 0x1b, 0xe9, 0xb8, 0x65,
		0x18, 0x69, 0x18, 0x69, 0x18, 0x69, 0x18, 0x69, 0x18, 0x69, 0x18, 0x69, 0x18, 0xe9, 0x65, 0x63,
		0x36, 0xf0, 0x02, 0xc9, 0x4d, 0xd8, 0xe8, 0x59, 0xc3, 0x30, 0xd1, 0x30, 0xd1, 0x30, 0xd1, 0x30,
		0xd1, 0x30, 0xd1, 0x30, 0xd1, 0x30, 0xd1, 0xcb, 0xc6, 0x4c, 0x06, 0x9e, 0x08, 0xb9, 0xe4, 0x8f,
		0x06, 0xe2, 0xa6, 0xe6, 0xda, 0x86, 0xa1, 0x86, 0xa1, 0x86, 0xa1, 0x86, 0xa1, 0x86, 0xa1, 0x86,
		0xa1, 0xde, 0x42, 0x43, 0xbd, 0xd5, 0xe9, 0xa2, 0x34, 0x57, 0xa5, 0x48, 0xb4, 0xa7, 0xb1, 0x4a,
		0x45, 0xb2, 0xa0, 0x42, 0xf2, 0x23, 0x1d, 0xa5, 0x2c, 0xe8, 0x04, 0x62, 0xbb, 0xb2, 0x34, 0xff,
		0xce, 0x9e, 0x29, 0x8e, 0x59, 0x3b, 0xe7, 0x3c, 0x94, 0x55, 0x29, 0x35, 0xa7, 0x84, 0xfe, 0xc6,
		0x45, 0xad, 0xcf, 0xc6, 0x36, 0x2f, 0xd4, 0x8b, 0xe9, 0x9c, 0x6f, 0xde, 0xd3, 0x5c, 0x4b, 0xf9,
		0x93, 0x62, 0xb1, 0x5c, 0x29, 0x16, 0x73, 0x95, 0xe3, 0x4a, 0xee, 0xb4, 0x54, 0xca, 0x97, 0xf3,
		0x1a, 0x43, 0xb4, 0x9c, 0x46, 0xd0, 0x65, 0x01, 0xeb, 0x7e, 0x1a, 0x4f, 0x9d, 0x18, 0xf6, 0xfb,
		0x5b, 0x25, 0x71, 0x44, 0xca, 0xcc, 0xb4, 0x12, 0x73, 0xb4, 0x26, 0x57, 0x0d, 0x86, 0x1d, 0x29,
		0xa6, 0xf0, 0xe0, 0xd3, 0xfd, 0xa0, 0xdd, 0xe4, 0x77, 0xed, 0x6a, 0x8f, 0x5f, 0x79, 0x3d, 0xde,
		0xae, 0x0f, 0x1e, 0xcb, 0x37, 0x51, 0xf7, 0xdb, 0xe7, 0x7e, 0x67, 0xfc, 0xab, 0xe6, 0xb8, 0xdb,
		0xed, 0x9b, 0xa8, 0x8f, 0xd5, 0xb8, 0x8b, 0x28, 0x19, 0x65, 0xbf, 0x3c, 0xd3, 0xca, 0xb1, 0xb5,
		0xf5, 0xa3, 0xf6, 0x2c, 0x9a, 0xfa, 0x99, 0xd1, 0x8c, 0x68, 0xe5, 0xbe, 0x1f, 0xf0, 0x7b, 0x2e,
		0xf6, 0xc7, 0x33, 0xe4, 0x72, 0x55, 0x91, 0x81, 0x7a, 0x0c, 0xa6, 0x3e, 0x03, 0x49, 0x6a, 0x10,
		0xf5, 0x18, 0x40, 0x55, 0xd2, 0xa1, 0x49, 0x21, 0x68, 0x54, 0x04, 0x0a, 0x6d, 0x55, 0x4a, 0xdb,
		0xa4, 0x46, 0xef, 0x6c, 0xae, 0x25, 0x36, 0x7b, 0xc2, 0x86, 0x12, 0xa4, 0x5a, 0x72, 0xb4, 0x48,
		0xcc, 0x66, 0x33, 0x95, 0x7e, 0x7c, 0x37, 0x18, 0x5b, 0x45, 0xc9, 0xe8, 0x95, 0x26, 0x9b, 0x57,
		0x94, 0x4c, 0xfe, 0xd5, 0x81, 0x5d, 0xd8, 0xf0, 0x41, 0x0a, 0x1d, 0xd3, 0x7a, 0x1c, 0xce, 0xaa,
		0x1d, 0xc9, 0xda, 0x1c, 0xc4, 0xda, 0x1c, 0xbf, 0xda, 0x1c, 0xba, 0xd0, 0x7a, 0xab, 0xb5, 0x9e,
		0x02, 0x5f, 0xd4, 0x06, 0x4a, 0x6f, 0x8f, 0x70, 0x42, 0x54, 0x4d, 0x84, 0xda, 0x09, 0x70, 0x36,
		0xd2, 0xfb, 0xeb, 0x61, 0x91, 0x74, 0xd3, 0xbc, 0xfe, 0x24, 0xa5, 0x98, 0x20, 0x47, 0x30, 0x7e,
		0xff, 0xfd, 0xce, 0x0f, 0xd2, 0x17, 0xbb, 0x8d, 0xd5, 0xf2, 0xeb, 0xa3, 0x52, 0x0a, 0xca, 0x66,
		0xb6, 0x6b, 0x63, 0x9b, 0xa5, 0xc2, 0x56, 0xa9, 0xb5, 0x51, 0xaa, 0x6c, 0x93, 0x72, 0x9b, 0xa4,
		0xdc, 0x16, 0x29, 0xb7, 0x41, 0xb4, 0x2a, 0x6e, 0xd3, 0xc2, 0x1b, 0xf1, 0xda, 0x51, 0x87, 0x26,
		0xe3, 0x27, 0x5a, 0x06, 0x28, 0x73, 0x00, 0x94, 0x00, 0x94, 0x5b, 0x09, 0x28, 0x55, 0x55, 0xd7,
		0x71, 0xbc, 0xee, 0xdf, 0x93, 0x31, 0xe1, 0xc2, 0x1d, 0xf8, 0xa1, 0x54, 0x27, 0x29, 0x71, 0x5e,
		0xaa, 0x37, 0x0d, 0xa8, 0xf2, 0x4f, 0x2a, 0x2d, 0x54, 0xa6, 0x3c, 0x48, 0x4a, 0x47, 0x10, 0x94,
		0xde, 0x20, 0x27, 0x5d, 0x41, 0x4c, 0xda, 0x83, 0x94, 0xb4, 0x07, 0x21, 0x69, 0x0f, 0x32, 0xb2,
		0xcb, 0xf3, 0xaf, 0xba, 0x70, 0x97, 0x33, 0x75, 0xaa, 0x29, 0x17, 0xac, 0xd9, 0x72, 0x98, 0x3e,
		0x5f, 0xf1, 0xa4, 0xeb, 0xa9, 0x84, 0xa8, 0xcc, 0x99, 0x45, 0xa1, 0x70, 0x68, 0x14, 0x8f, 0x6e,
		0x05, 0x44, 0xa6, 0x88, 0xc8, 0x14, 0x12, 0x99, 0x62, 0x52, 0xab, 0xa0, 0x14, 0x2b, 0x2a, 0x6d,
		0x0a, 0x6b, 0x51, 0x71, 0xe9, 0x93, 0xc7, 0x05, 0xfd, 0xa5, 0x4b, 0x16, 0xf5, 0x16, 0x74, 0xd5,
		0x1e, 0x5c, 0x4e, 0x11, 0x4c, 0x4e, 0x1b, 0x3c, 0x4e, 0x15, 0x2c, 0x4e, 0x1e, 0x1c, 0x4e, 0x1e,
		0x0c, 0x4e, 0x1e, 0xfc, 0xbd, 0x5d, 0x61, 0x8f, 0xba, 0x0b, 0xb0, 0x3a, 0xb3, 0x68, 0x10, 0xb2,
		0x0a, 0xd8, 0x6a, 0xc3, 0x4f, 0x7e, 0xa5, 0x32, 0x73, 0xa8, 0x81, 0x6d, 0xb9, 0x2a, 0xa5, 0x56,
		0xa9, 0xc6, 0x54, 0xab, 0x31, 0x15, 0x6b, 0x4c, 0xd5, 0xea, 0x55, 0xb9, 0x9a, 0x55, 0x6f, 0x3c,
		0x6a, 0x64, 0xe7, 0x69, 0xe2, 0x75, 0xd7, 0x67, 0x5e, 0x2f, 0x60, 0x3d, 0x8a, 0x45, 0x37, 0x43,
		0x96, 0x15, 0x82, 0xb6, 0x2e, 0xa7, 0x1b, 0xad, 0x1f, 0x3f, 0x46, 0x9b, 0xd5, 0x47, 0x33, 0x53,
		0xb0, 0xad, 0x07, 0x28, 0x34, 0xe2, 0xcb, 0x01, 0x8d, 0xba, 0x7f, 0xb5, 0xca, 0x24, 0xe0, 0x12,
		0x46, 0x19, 0x46, 0x19, 0x46, 0x19, 0x46, 0x19, 0x46, 0xd9, 0x62, 0xa3, 0x1c, 0x2d, 0x3b, 0xd8,
		0xe4, 0xc4, 0x50, 0xa9, 0x89, 0xce, 0x7d, 0xb7, 0xc0, 0xa9, 0x88, 0xde, 0x7d, 0xb7, 0xa8, 0xc1,
		0x22, 0xc3, 0x22, 0xc3, 0x22, 0xc3, 0x22, 0xa7, 0x1f, 0x35, 0xdd, 0x9e, 0xca, 0xb8, 0xa1, 0xc9,
		0x11, 0x70, 0x2e, 0xba, 0xec, 0xc9, 0x50, 0x7d, 0xb6, 0xa8, 0x6d, 0xe4, 0x19, 0xda, 0x36, 0x85,
		0x6d, 0x56, 0x71, 0x9b, 0x52, 0xe0, 0xc6, 0x15, 0xb9, 0x71, 0x85, 0x6e, 0x5c, 0xb1, 0xd3, 0x28,
		0x78, 0x22, 0x45, 0x4f, 0x4f, 0xc1, 0x0c, 0x52, 0x31, 0x13, 0x94, 0x6c, 0x19, 0x35, 0xfb, 0xc9,
		0xdf, 0x89, 0x49, 0x0a, 0x99, 0x0c, 0xe3, 0xab, 0x29, 0x91, 0x8b, 0xcc, 0x14, 0x12, 0x18, 0xbe,
		0x7b, 0xbc, 0xef, 0x58, 0x28, 0xdd, 0xe9, 0x69, 0x20, 0x62, 0x5c, 0xf1, 0xda, 0x34, 0x60, 0x05,
		0x60, 0x05, 0x60, 0x05, 0x60, 0x05, 0x60, 0x05, 0xf9, 0xba, 0x45, 0xfa, 0xc2, 0xad, 0x30, 0xd3,
		0x1d, 0xff, 0xe1, 0x61, 0x28, 0xb8, 0x7c, 0x36, 0xe5, 0x04, 0x78, 0xdb, 0x01, 0x98, 0x6c, 0x98,
		0x6c, 0x98, 0x6c, 0x98, 0x6c, 0x98, 0x6c, 0x78, 0x02, 0x4c, 0x7a, 0x02, 0x66, 0x76, 0x89, 0xb3,
		0x30, 0xbe, 0x7e, 0x86, 0x33, 0x20, 0xdd, 0x90, 0xb3, 0x27, 0xe9, 0x1a, 0x47, 0x1a, 0xcb, 0x3a,
		0x01, 0xb4, 0x01, 0xb4, 0x01, 0xb4, 0x01, 0xb4, 0x01, 0xb4, 0x01, 0xb4, 0x61, 0x12, 0x6d, 0xcc,
		0xdb, 0xa6, 0x31, 0xe2, 0x58, 0xb0, 0x55, 0x40, 0x1d, 0xe9, 0x86, 0x9e, 0x8b, 0x47, 0xaf, 0xcf,
		0xbb, 0x6e, 0xc0, 0xbc, 0x90, 0xa8, 0x88, 0xc2, 0x82, 0x84, 0xbf, 0x69, 0x1f, 0x58, 0x03, 0x58,
		0x03, 0x58, 0x03, 0x58, 0x03, 0x58, 0x83, 0x7c, 0xdd, 0xf2, 0x2e, 0x13, 0x92, 0xcb, 0x67, 0x43,
		0x78, 0xa3, 0x44, 0xd8, 0x66, 0x7d, 0xfa, 0xaa, 0x9f, 0xbc, 0xd0, 0x80, 0xca, 0x98, 0x0d, 0x78,
		0xfd, 0xe2, 0x8f, 0xea, 0x79, 0xfd, 0x4b, 0xbb, 0xd9, 0xb8, 0xb9, 0xae, 0xb5, 0x9b, 0xb5, 0xea,
		0x55, 0xe3, 0x82, 0x5a, 0x7b, 0xfc, 0xe1, 0xf5, 0x87, 0x93, 0x24, 0x3b, 0xb7, 0xa4, 0xed, 0x8e,
		0xff, 0xfc, 0x20, 0x6f, 0x71, 0xe9, 0xe8, 0x7f, 0x3e, 0xbf, 0xb9, 0xba, 0xae, 0x35, 0xdb, 0xe7,
		0x8d, 0xc6, 0xa5, 0x43, 0xde, 0xa5, 0xd1, 0x87, 0x9d, 0x1d, 0xf7, 0xc6, 0xc5, 0xd7, 0xda, 0x17,
		0x8c, 0x38, 0xdd, 0x88, 0x57, 0xaf, 0x20, 0xe4, 0xc4, 0x43, 0xde, 0x68, 0xd6, 0x7f, 0xab, 0x5f,
		0x54, 0xaf, 0x1b, 0x4d, 0x03, 0xa3, 0x4e, 0xda, 0x62, 0x2b, 0x6b, 0x78, 0x2f, 0x13, 0xec, 0xbe,
		0xef, 0x85, 0xd2, 0x7d, 0xf0, 0xbb, 0xbc, 0xc7, 0x59, 0x97, 0x9e, 0xdc, 0x2f, 0x36, 0x0f, 0x6e,
		0x0f, 0x6e, 0x0f, 0x6e, 0x0f, 0x6e, 0x0f, 0x6e, 0x4f, 0xbe, 0x6e, 0x25, 0x7f, 0x60, 0x92, 0x77,
		0xfe, 0x09, 0xcb, 0x45, 0x03, 0xdc, 0xfe, 0x84, 0xb0, 0xc9, 0x1b, 0xc1, 0x27, 0x65, 0xd6, 0x1c,
		0xe1, 0x09, 0x3f, 0x64, 0x1d, 0x5f, 0x74, 0x43, 0xca, 0x57, 0x6e, 0x7a, 0xe2, 0x9e, 0x91, 0xf3,
		0x69, 0x7a, 0xb8, 0xeb, 0x7c, 0xe3, 0x82, 0x5c, 0x23, 0x1b, 0xb2, 0xf1, 0xcb, 0xbd, 0x26, 0x06,
		0xdb, 0xff, 0x1a, 0x78, 0x1d, 0xc9, 0x7d, 0xf1, 0x85, 0xdf, 0x47, 0xd2, 0x9e, 0xdb, 0x05, 0x4e,
		0xe7, 0x7c, 0xf3, 0x9e, 0x76, 0x5e, 0xe4, 0x68, 0xeb, 0x29, 0x5b, 0x2f, 0x85, 0x7b, 0xd9, 0x6c,
		0xad, 0x05, 0x8e, 0xfb, 0x6e, 0x31, 0xa4, 0xca, 0x27, 0x9a, 0x00, 0x55, 0x34, 0x79, 0x45, 0xc1,
		0x6b, 0xc1, 0x6b, 0xc1, 0x6b, 0xc1, 0x6b, 0xc1, 0x6b, 0x97, 0xac, 0xdb, 0x21, 0x17, 0xf2, 0xb8,
		0x60, 0x80, 0xd2, 0x56, 0x40, 0x29, 0x41, 0x29, 0x41, 0x29, 0x41, 0x29, 0x33, 0x20, 0x72, 0xc5,
		0xc2, 0x69, 0xf1, 0xb4, 0x5c, 0x29, 0x9c, 0x82, 0x48, 0x82, 0x48, 0xee, 0x32, 0x91, 0xa4, 0x25,
		0x20, 0xb4, 0x99, 0xb0, 0x41, 0x23, 0x41, 0x23, 0x41, 0x23, 0x41, 0x23, 0x41, 0x23, 0x97, 0xac,
		0xdb, 0x49, 0x75, 0x7d, 0x72, 0x19, 0x8e, 0x43, 0x9f, 0x4f, 0x68, 0x8f, 0x5a, 0x49, 0x16, 0x08,
		0x72, 0x3a, 0xe9, 0x1c, 0x1c, 0xdc, 0xe6, 0xdc, 0x53, 0xcf, 0xed, 0x55, 0xdd, 0xaf, 0xad, 0x1f,
		0xf9, 0x0f, 0xc5, 0xd1, 0xd9, 0xe1, 0x8f, 0xca, 0xe8, 0xed, 0x87, 0x2f, 0xcb, 0xbe, 0x96, 0xff,
		0x50, 0x19, 0x9d, 0xad, 0xf8, 0x4d, 0x79, 0x74, 0xf6, 0xce, 0x67, 0x94, 0x46, 0x07, 0x89, 0xaf,
		0x8e, 0x3f, 0x2f, 0xac, 0xba, 0xa1, 0xb8, 0xe2, 0x86, 0xe3, 0x55, 0x37, 0x1c, 0xaf, 0xb8, 0x61,
		0x65, 0x97, 0x0a, 0x2b, 0x6e, 0x28, 0x8d, 0x5e, 0x12, 0xdf, 0x3f, 0x58, 0xfe, 0xd5, 0xf2, 0xe8,
		0xf0, 0x65, 0xd5, 0xef, 0x2a, 0xa3, 0x97, 0xb3, 0xc3, 0xc3, 0xa3, 0x83, 0x7c, 0xe1, 0x36, 0xe7,
		0x9e, 0xb4, 0x5e, 0xf2, 0xb7, 0x39, 0x37, 0xdf, 0x1a, 0x7f, 0xb3, 0xf5, 0x72, 0x9b, 0x77, 0x4f,
		0x67, 0x97, 0xe3, 0xff, 0x1f, 0xd2, 0xa9, 0xad, 0x16, 0xa5, 0xbc, 0x37, 0xae, 0xea, 0xff, 0x35,
		0x26, 0xf4, 0x7f, 0x41, 0xea, 0x2d, 0x97, 0xfa, 0xff, 0x38, 0xe0, 0x62, 0x16, 0x72, 0xb1, 0xe9,
		0xa1, 0x50, 0xad, 0x95, 0x54, 0x57, 0xc2, 0x81, 0xf9, 0xc6, 0xc1, 0xca, 0xc0, 0xca, 0xc0, 0xca,
		0xc0, 0xca, 0xc0, 0xca, 0xc8, 0xd7, 0x2d, 0xb2, 0x63, 0x5a, 0xde, 0x82, 0xee, 0x02, 0x1f, 0x55,
		0x21, 0x7c, 0xe9, 0x49, 0x4e, 0x94, 0x97, 0xc2, 0x09, 0x3b, 0xdf, 0xd9, 0x83, 0x37, 0xcd, 0xc7,
		0xed, 0x1c, 0xf9, 0x03, 0x26, 0x3a, 0x13, 0x43, 0x39, 0xd6, 0x1f, 0x47, 0xe3, 0xff, 0x02, 0x7e,
		0x77, 0xe4, 0xf5, 0xb8, 0x1b, 0x7a, 0x3d, 0x1e, 0xc6, 0x57, 0x47, 0x13, 0xff, 0xc1, 0x50, 0xf0,
		0x8e, 0x17, 0xca, 0x23, 0xc1, 0xf8, 0xfd, 0xf7, 0x3b, 0x3f, 0x08, 0xe3, 0xab, 0x23, 0xaf, 0xfb,
		0xf7, 0x44, 0x0d, 0x71, 0xe1, 0x0e, 0xfc, 0x50, 0x1e, 0x4d, 0xa0, 0x45, 0x18, 0xfd, 0x88, 0x12,
		0x97, 0xa0, 0xfa, 0x55, 0x72, 0x3a, 0x86, 0xe2, 0x1f, 0xe1, 0xff, 0x2b, 0x5c, 0x4f, 0xca, 0x80,
		0xdf, 0x8d, 0x47, 0x8c, 0xae, 0x14, 0xd6, 0x92, 0xb6, 0x51, 0x17, 0xcb, 0x56, 0xc4, 0x87, 0xba,
		0x58, 0xd9, 0x44, 0x74, 0xa8, 0x8b, 0x95, 0x6a, 0xd4, 0xc8, 0xea, 0x62, 0x25, 0x94, 0x24, 0x3d,
		0x55, 0x4f, 0x76, 0x81, 0x96, 0xb0, 0xe7, 0x41, 0xd8, 0x41, 0xd8, 0x41, 0xd8, 0x41, 0xd8, 0xed,
		0x21, 0xec, 0x54, 0xea, 0x3f, 0x6e, 0x70, 0x52, 0x05, 0x4a, 0x52, 0xbb, 0x09, 0xf6, 0x13, 0x55,
		0x12, 0x27, 0x5d, 0x20, 0x16, 0x5d, 0x33, 0x21, 0x7c, 0xe4, 0xe6, 0xc0, 0xa4, 0x59, 0xb0, 0xc3,
		0x3c, 0x98, 0x36, 0x13, 0xd6, 0x98, 0x0b, 0x6b, 0xcc, 0x86, 0x35, 0xe6, 0x83, 0xd6, 0x8c, 0x10,
		0x9b, 0x93, 0x78, 0x94, 0xaf, 0x4d, 0x28, 0xf8, 0x7d, 0xb3, 0xc9, 0x90, 0x13, 0x68, 0xbf, 0x62,
		0xa0, 0xed, 0x44, 0xbd, 0xfc, 0x57, 0x63, 0x97, 0xd1, 0xa0, 0x65, 0x42, 0xd1, 0x26, 0x2a, 0xb1,
		0xbf, 0x52, 0xa6, 0x29, 0x4a, 0xee, 0x1b, 0xe6, 0xae, 0x00, 0x2d, 0x00, 0x2d, 0x00, 0x2d, 0x00,
		0x2d, 0x26, 0x40, 0x0b, 0x35, 0x17, 0x5e, 0xe4, 0xc4, 0x7d, 0x66, 0xf0, 0x3c, 0xe3, 0x02, 0x35,
		0x1e, 0xf7, 0xe4, 0xc3, 0x4e, 0x1e, 0x72, 0x33, 0x65, 0x74, 0x6c, 0x30, 0x3e, 0x76, 0x19, 0x21,
		0x5b, 0x8c, 0x91, 0x75, 0x46, 0xc9, 0x3a, 0xe3, 0x64, 0x9d, 0x91, 0x32, 0x63, 0xac, 0x0c, 0x19,
		0x2d, 0xf3, 0x8c, 0x3b, 0xa1, 0x37, 0x86, 0x5c, 0xc8, 0x7c, 0xd9, 0xa4, 0xce, 0x98, 0x5a, 0x91,
		0xb2, 0xc1, 0x2e, 0x98, 0x49, 0xc3, 0xf0, 0xf6, 0x8f, 0x59, 0x9d, 0xb9, 0x6f, 0x3a, 0x4d, 0x83,
		0x65, 0xf0, 0x22, 0xd1, 0x1d, 0xc3, 0x69, 0x1c, 0x12, 0xfd, 0xb1, 0xe0, 0x68, 0xbd, 0x25, 0xea,
		0x74, 0x51, 0x84, 0xbd, 0x27, 0x88, 0xf0, 0x2f, 0x44, 0xb8, 0x5c, 0x2a, 0x1d, 0x97, 0x20, 0xc6,
		0x76, 0x61, 0x11, 0xf3, 0xad, 0xb7, 0xf6, 0x76, 0xe3, 0x7d, 0x4d, 0x64, 0xa3, 0x31, 0xb7, 0x93,
		0xbe, 0xdc, 0x6d, 0x60, 0x60, 0x47, 0x1d, 0x7e, 0x03, 0xf8, 0x0d, 0xe0, 0x37, 0x80, 0xdf, 0x00,
		0x7e, 0x83, 0x8c, 0xf8, 0x0d, 0x4e, 0x2c, 0x70, 0x1b, 0x94, 0xe0, 0x36, 0x80, 0xdb, 0x00, 0x6e,
		0x03, 0xb8, 0x0d, 0xe0, 0x36, 0xd0, 0x2e, 0xc2, 0x85, 0x12, 0x9c, 0x06, 0x70, 0x1a, 0xc0, 0x69,
		0x40, 0xeb, 0x34, 0x78, 0x9c, 0xae, 0x3e, 0x1b, 0xbc, 0x06, 0x51, 0x5f, 0xe0, 0x36, 0x80, 0xdb,
		0x00, 0x6e, 0x03, 0xb8, 0x0d, 0xe0, 0x36, 0x80, 0xdb, 0x60, 0x4d, 0xbd, 0x71, 0xc7, 0x85, 0x17,
		0x3c, 0x5b, 0xe0, 0x37, 0x38, 0x35, 0xd8, 0x85, 0x73, 0x26, 0xee, 0x27, 0x81, 0xff, 0x70, 0x1c,
		0xc0, 0x71, 0xf0, 0x4b, 0xd6, 0x95, 0x07, 0xe7, 0x82, 0xe3, 0x60, 0xbb, 0x45, 0x18, 0xf1, 0x06,
		0x70, 0x1d, 0xc0, 0x75, 0x40, 0x2a, 0xe6, 0xec, 0x49, 0x32, 0xd1, 0x65, 0x5d, 0xf3, 0x8e, 0x83,
		0xb8, 0x27, 0x70, 0x1b, 0xc0, 0x6d, 0x00, 0xb7, 0x01, 0xdc, 0x06, 0x70, 0x1b, 0xc0, 0x6d, 0xb0,
		0xae, 0xdb, 0x80, 0x3c, 0x5f, 0xec, 0x2a, 0x33, 0x42, 0x94, 0x3f, 0x76, 0x37, 0x41, 0x8b, 0x3f,
		0x18, 0x23, 0x73, 0xaf, 0x6f, 0x1e, 0xb4, 0xc4, 0x3d, 0x01, 0x68, 0x01, 0x68, 0x01, 0x68, 0x01,
		0x68, 0x01, 0x68, 0x01, 0x68, 0x01, 0x68, 0x01, 0x68, 0x49, 0x8e, 0xf1, 0xc0, 0x0b, 0x24, 0xb7,
		0x01, 0xb3, 0xcc, 0x3a, 0x02, 0xc8, 0x02, 0xc8, 0x02, 0xc8, 0x02, 0xc8, 0x02, 0xc8, 0x02, 0xc8,
		0x02, 0xc8, 0x02, 0xc8, 0x92, 0x1c, 0x63, 0x19, 0x78, 0x22, 0xe4, 0x92, 0x3f, 0x5a, 0x10, 0x57,
		0x3a, 0xd7, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00,
		0x17, 0xeb, 0x81, 0x4b, 0xa6, 0xd3, 0x8b, 0x12, 0x17, 0x28, 0x4c, 0xb4, 0x6f, 0xa6, 0x60, 0x61,
		0xb2, 0x36, 0x5e, 0xf2, 0x23, 0x8a, 0xaa, 0x86, 0xe6, 0x64, 0x2d, 0x5b, 0x05, 0x63, 0x7e, 0x67,
		0xcf, 0x26, 0x32, 0xbe, 0x38, 0xe7, 0x3c, 0x94, 0x55, 0x29, 0x89, 0xab, 0xd5, 0x7c, 0xe3, 0xa2,
		0xd6, 0x67, 0x63, 0x38, 0x10, 0xd2, 0xc2, 0x69, 0xe7, 0x9b, 0xf7, 0x34, 0xd7, 0x72, 0xfe, 0xa4,
		0x58, 0x2c, 0x57, 0x8a, 0xc5, 0x5c, 0xe5, 0xb8, 0x92, 0x3b, 0x2d, 0x95, 0xf2, 0xe5, 0x3c, 0x61,
		0xf4, 0xab, 0xd3, 0x08, 0xba, 0x2c, 0x60, 0xdd, 0x4f, 0xe3, 0xa9, 0x17, 0xc3, 0x7e, 0x3f, 0x53,
		0x12, 0x6d, 0x48, 0x2f, 0x5b, 0xac, 0x8f, 0x1d, 0xd2, 0x92, 0x0a, 0xc1, 0xb0, 0x23, 0xc5, 0x14,
		0x74, 0x7d, 0xba, 0x1f, 0xb4, 0x9b, 0xfc, 0xae, 0x5d, 0xed, 0xf1, 0x2b, 0xaf, 0xc7, 0xdb, 0xf5,
		0xc1, 0x63, 0xf9, 0x26, 0x7a, 0xd3, 0xf6, 0xc5, 0xf4, 0xfd, 0xda, 0xd5, 0xee, 0xdf, 0x4d, 0x7e,
		0x57, 0x17, 0x97, 0x7e, 0x28, 0xdb, 0xcd, 0xf1, 0x5b, 0xb5, 0x6f, 0xa2, 0x57, 0xa8, 0xc6, 0x6f,
		0x80, 0x92, 0xcc, 0xe6, 0x57, 0xd8, 0x8e, 0x94, 0x64, 0x5e, 0x52, 0xfd, 0x77, 0x5b, 0xeb, 0x33,
		0xef, 0x6d, 0x91, 0x94, 0xcd, 0x90, 0x48, 0xe4, 0xc6, 0xd8, 0x1f, 0xcf, 0xba, 0xcb, 0x75, 0x85,
		0x84, 0xd3, 0xc0, 0x0f, 0x3a, 0xb8, 0x61, 0x14, 0x5e, 0xd0, 0xc0, 0x09, 0x5d, 0x62, 0x47, 0xa4,
		0xd4, 0xcc, 0x28, 0x33, 0x8d, 0x96, 0x5f, 0x8d, 0xa5, 0xd7, 0xa3, 0x5a, 0xd5, 0x2b, 0x3e, 0xb5,
		0x4f, 0x54, 0x2c, 0xcb, 0xba, 0x65, 0x98, 0x5a, 0x76, 0xd5, 0x0a, 0x85, 0xba, 0xa9, 0x53, 0xf3,
		0x24, 0x45, 0x93, 0xaf, 0x6b, 0xd2, 0xc9, 0x26, 0x5b, 0xa1, 0x6e, 0xda, 0x54, 0x17, 0xa9, 0x11,
		0xb8, 0xcd, 0xc5, 0x43, 0x81, 0x68, 0x38, 0xf3, 0xa3, 0x1c, 0xa8, 0xf3, 0xbd, 0xbf, 0x66, 0xf9,
		0x59, 0x7c, 0xbe, 0x22, 0x61, 0x56, 0x5b, 0x95, 0x4e, 0xf9, 0x8e, 0xa9, 0x8e, 0x1d, 0x50, 0xbd,
		0x3b, 0x9a, 0xba, 0x76, 0x28, 0xb5, 0xef, 0x38, 0x6a, 0xdf, 0x41, 0xd4, 0xbe, 0x23, 0x68, 0x97,
		0x99, 0x50, 0x5d, 0x05, 0xcd, 0x99, 0xda, 0x68, 0xe5, 0x82, 0x35, 0x5b, 0x0e, 0xd3, 0xe7, 0x2b,
		0x9e, 0x74, 0x3d, 0x65, 0x2f, 0x5f, 0x15, 0x4d, 0x41, 0xf1, 0x83, 0x35, 0x86, 0x5c, 0xd0, 0x84,
		0x52, 0xe8, 0x0e, 0x91, 0x20, 0x0b, 0x7d, 0x20, 0x0b, 0x69, 0x20, 0x0b, 0x55, 0xb0, 0x9b, 0xcc,
		0xe8, 0x2a, 0xdb, 0x18, 0x29, 0x16, 0x7d, 0xf2, 0xb8, 0xa0, 0xbf, 0x74, 0xc9, 0xa2, 0xde, 0xea,
		0xbd, 0xda, 0x23, 0xcd, 0x28, 0x22, 0xc9, 0x68, 0x23, 0xc5, 0xa8, 0x22, 0xc1, 0xc8, 0x23, 0xbd,
		0xc8, 0x23, 0xb9, 0xc8, 0x23, 0xb5, 0xb6, 0xcb, 0x3d, 0xae, 0xbb, 0x9a, 0xad, 0x33, 0xf3, 0xb8,
		0x6b, 0x97, 0xe4, 0xd7, 0xd3, 0x48, 0x3a, 0x5d, 0xfc, 0x6f, 0x55, 0xa6, 0xe6, 0xcd, 0x7e, 0xb2,
		0x20, 0x5d, 0xca, 0x60, 0x5c, 0x33, 0x41, 0xb7, 0xd4, 0xc1, 0xb5, 0xc6, 0x82, 0x68, 0x8d, 0x05,
		0xcb, 0x1a, 0x0b, 0x8a, 0xdd, 0xee, 0xfd, 0x6f, 0xb2, 0x60, 0xd6, 0x78, 0xdd, 0xf5, 0x99, 0xd7,
		0x0b, 0x58, 0x8f, 0x62, 0xd1, 0xcd, 0x90, 0x65, 0x85, 0xa0, 0xad, 0xcb, 0xa9, 0x73, 0xf9, 0xe3,
		0xc7, 0x28, 0x54, 0xf0, 0x68, 0x66, 0x0a, 0xb6, 0x75, 0xa3, 0x5d, 0x23, 0xbe, 0x1c, 0xd0, 0xa8,
		0xfb, 0x57, 0xab, 0x4c, 0x02, 0x2e, 0x61, 0x94, 0x61, 0x94, 0x61, 0x94, 0x61, 0x94, 0x61, 0x94,
		0x2d, 0x36, 0xca, 0xd1, 0xb2, 0x83, 0x4d, 0x4e, 0x0c, 0x55, 0x74, 0xbe, 0x81, 0xcc, 0x24, 0x47,
		0xcd, 0xd1, 0x58, 0xe4, 0x3c, 0x2c, 0x32, 0x2c, 0x32, 0x2c, 0x32, 0x2c, 0x72, 0xfa, 0x51, 0xd3,
		0xed, 0xa9, 0x8c, 0x1b, 0x9a, 0x1c, 0x5a, 0xe2, 0xa2, 0xcb, 0xe8, 0x8e, 0xa6, 0x2f, 0x16, 0xbb,
		0x8a, 0xda, 0xa6, 0x3a, 0xa9, 0x45, 0x9a, 0x84, 0x80, 0x3c, 0xe9, 0x80, 0x89, 0x24, 0x03, 0x66,
		0x93, 0x0a, 0x98, 0x4a, 0x22, 0x60, 0x3c, 0x69, 0x80, 0xf1, 0x24, 0x01, 0xc6, 0x93, 0x02, 0x64,
		0xeb, 0x0c, 0x29, 0xf9, 0x21, 0x7f, 0x03, 0x54, 0xcc, 0x04, 0x25, 0x5b, 0x46, 0xcd, 0x7e, 0xf2,
		0x77, 0x62, 0x92, 0x42, 0x26, 0xc3, 0xf8, 0x6a, 0x4a, 0xe4, 0x22, 0x33, 0x95, 0x95, 0x23, 0x74,
		0x04, 0xc8, 0xba, 0xe3, 0x3f, 0x3c, 0x0c, 0x05, 0x97, 0xcf, 0xa6, 0xd0, 0xc5, 0xdb, 0x0e, 0x00,
		0x62, 0x00, 0x62, 0x00, 0x62, 0x00, 0x62, 0x00, 0x62, 0x00, 0x62, 0x98, 0x84, 0x18, 0x33, 0xbb,
		0xc4, 0x59, 0x18, 0x5f, 0x3f, 0x03, 0x65, 0xa4, 0x1b, 0x72, 0xf6, 0x24, 0x5d, 0xe3, 0x48, 0x63,
		0x59, 0x27, 0x80, 0x36, 0x80, 0x36, 0x80, 0x36, 0x80, 0x36, 0x80, 0x36, 0x80, 0x36, 0x4c, 0xa2,
		0x8d, 0x79, 0xdb, 0x34, 0x46, 0x1c, 0x0b, 0xb6, 0x0a, 0xa8, 0x23, 0xdd, 0xd0, 0x73, 0xf1, 0xe8,
		0xf5, 0x79, 0xd7, 0x0d, 0x98, 0x17, 0x12, 0xa6, 0xc8, 0x8a, 0x25, 0xfc, 0x4d, 0xfb, 0xc0, 0x1a,
		0xc0, 0x1a, 0xc0, 0x1a, 0xc0, 0x1a, 0xc0, 0x1a, 0xe4, 0xeb, 0x96, 0x77, 0x99, 0x90, 0x5c, 0x3e,
		0x1b, 0xc2, 0x1b, 0x94, 0x09, 0x2f, 0xeb, 0xd3, 0x57, 0xfd, 0xe4, 0x85, 0x06, 0x54, 0xc6, 0x6c,
		0xc0, 0xeb, 0x17, 0x7f, 0x54, 0xcf, 0xeb, 0x5f, 0xda, 0xcd, 0xc6, 0xcd, 0x75, 0xad, 0xdd, 0xac,
		0x55, 0xaf, 0x1a, 0x17, 0xd4, 0xda, 0x63, 0x52, 0x70, 0x3f, 0x74, 0xce, 0xf6, 0x6f, 0xc9, 0x33,
		0x16, 0x1b, 0x2e, 0x23, 0x31, 0x1b, 0xfd, 0xcf, 0xe7, 0x37, 0x57, 0xd7, 0xb5, 0x66, 0xfb, 0xbc,
		0xd1, 0xb8, 0x74, 0x76, 0xa1, 0x98, 0x87, 0x2d, 0xe3, 0xde, 0xb8, 0xf8, 0x5a, 0xfb, 0x82, 0x11,
		0xa7, 0x1b, 0xf1, 0xea, 0x15, 0x84, 0x9c, 0x78, 0xc8, 0x1b, 0xcd, 0xfa, 0x6f, 0xf5, 0x8b, 0xea,
		0x75, 0xa3, 0xe9, 0x64, 0x3c, 0xdd, 0x7e, 0x2b, 0x6b, 0x78, 0x2f, 0x13, 0xec, 0xbe, 0xef, 0x85,
		0xd2, 0x7d, 0xf0, 0xbb, 0xbc, 0xc7, 0x59, 0x97, 0x9e, 0xdc, 0x2f, 0x36, 0x0f, 0x6e, 0x0f, 0x6e,
		0x0f, 0x6e, 0x0f, 0x6e, 0x0f, 0x6e, 0x4f, 0xbe, 0x6e, 0x25, 0x7f, 0x60, 0x92, 0x77, 0xfe, 0x09,
		0xcb, 0x45, 0x03, 0xdc, 0xfe, 0x84, 0xb0, 0xc9, 0x1b, 0xc1, 0x27, 0x39, 0xaf, 0x1d, 0xe1, 0x09,
		0x3f, 0x64, 0x1d, 0x5f, 0x74, 0x43, 0xca, 0x57, 0x6e, 0x7a, 0xe2, 0x9e, 0x91, 0xf3, 0x69, 0x03,
		0xf5, 0x86, 0xbe, 0x71, 0x61, 0xae, 0x16, 0xa4, 0xe1, 0x0a, 0x8c, 0x13, 0xaf, 0x89, 0xc1, 0xf6,
		0xbf, 0x06, 0x5e, 0x47, 0x72, 0x5f, 0x7c, 0xe1, 0xf7, 0x91, 0xb4, 0xe7, 0x76, 0xa2, 0x0a, 0xe9,
		0x37, 0xef, 0x69, 0xe7, 0x45, 0xce, 0x6c, 0xa9, 0x20, 0xeb, 0xa4, 0x30, 0xa3, 0x45, 0xc5, 0x5a,
		0xe0, 0xb8, 0xef, 0x16, 0x43, 0xaa, 0x44, 0x65, 0x09, 0x50, 0x45, 0x93, 0xb0, 0x0c, 0xbc, 0x16,
		0xbc, 0x16, 0xbc, 0x16, 0xbc, 0x16, 0xbc, 0x76, 0xc9, 0xba, 0x1d, 0x72, 0x21, 0x8f, 0x0b, 0x06,
		0x28, 0x6d, 0x05, 0x94, 0x12, 0x94, 0x12, 0x94, 0x12, 0x94, 0x32, 0x03, 0x22, 0x57, 0x2c, 0x9c,
		0x16, 0x4f, 0xcb, 0x95, 0xc2, 0x29, 0x88, 0x24, 0x88, 0xe4, 0x2e, 0x13, 0x49, 0x5a, 0x02, 0x42,
		0x9b, 0x62, 0x13, 0x34, 0x12, 0x34, 0x12, 0x34, 0x12, 0x34, 0x12, 0x34, 0x72, 0xc9, 0xba, 0x9d,
		0x94, 0x2a, 0x24, 0x97, 0xe1, 0x38, 0xf4, 0xf9, 0x84, 0xf6, 0xa8, 0x95, 0x64, 0x81, 0x20, 0xa7,
		0x93, 0xce, 0xc1, 0xc1, 0x6d, 0xce, 0x3d, 0xf5, 0xdc, 0x5e, 0xd5, 0xfd, 0xda, 0xfa, 0x91, 0xff,
		0x50, 0x1c, 0x9d, 0x1d, 0xfe, 0xa8, 0x8c, 0xde, 0x7e, 0xf8, 0xb2, 0xec, 0x6b, 0xf9, 0x0f, 0x95,
		0xd1, 0xd9, 0x8a, 0xdf, 0x94, 0x47, 0x67, 0xef, 0x7c, 0x46, 0x69, 0x74, 0x90, 0xf8, 0xea, 0xf8,
		0xf3, 0xc2, 0xaa, 0x1b, 0x8a, 0x2b, 0x6e, 0x38, 0x5e, 0x75, 0xc3, 0xf1, 0x8a, 0x1b, 0x56, 0x76,
		0xa9, 0xb0, 0xe2, 0x86, 0xd2, 0xe8, 0x25, 0xf1, 0xfd, 0x83, 0xe5, 0x5f, 0x2d, 0x8f, 0x0e, 0x5f,
		0x56, 0xfd, 0xae, 0x32, 0x7a, 0x39, 0x3b, 0x3c, 0x3c, 0x3a, 0xc8, 0x17, 0x6e, 0x73, 0xee, 0x49,
		0xeb, 0x25, 0x7f, 0x9b, 0x73, 0xf3, 0xad, 0xf1, 0x37, 0x5b, 0x2f, 0xb7, 0x79, 0xf7, 0x74, 0x76,
		0x39, 0xfe, 0xff, 0x21, 0x9d, 0xda, 0x6a, 0x51, 0xca, 0x7b, 0xe3, 0xaa, 0xfe, 0x5f, 0x63, 0x42,
		0xff, 0x17, 0xa4, 0xde, 0x72, 0xa9, 0xff, 0x8f, 0x03, 0x2e, 0x66, 0x21, 0x17, 0x9b, 0x1e, 0x0a,
		0xd5, 0x5a, 0xa2, 0x6d, 0x25, 0x1c, 0x98, 0x6f, 0x1c, 0xac, 0x0c, 0xac, 0x0c, 0xac, 0x0c, 0xac,
		0x0c, 0xac, 0x8c, 0x7c, 0xdd, 0xde, 0xf9, 0x7e, 0x9f, 0x79, 0xc2, 0x04, 0x23, 0xcb, 0x67, 0xc5,
		0x54, 0x6f, 0x75, 0xe6, 0xf0, 0xaa, 0x10, 0xbe, 0xf4, 0x24, 0x27, 0xca, 0x4b, 0xe1, 0x84, 0x9d,
		0xef, 0xec, 0xc1, 0x1b, 0x4c, 0x93, 0x91, 0x1c, 0xf9, 0x03, 0x26, 0x3a, 0x13, 0x43, 0x39, 0xd6,
		0x1f, 0x47, 0xe3, 0xff, 0x02, 0x7e, 0x77, 0xe4, 0xf5, 0xb8, 0x1b, 0x7a, 0x3d, 0x1e, 0xc6, 0x57,
		0x47, 0x13, 0xff, 0xc1, 0x50, 0xf0, 0x8e, 0x17, 0xca, 0x23, 0xc1, 0xf8, 0xfd, 0xf7, 0x3b, 0x3f,
		0x08, 0xe3, 0xab, 0xa3, 0xc5, 0x22, 0xf9, 0x47, 0x51, 0x49, 0xeb, 0xe8, 0x47, 0x94, 0xb7, 0x04,
		0x55, 0x35, 0x92, 0xb3, 0x31, 0x14, 0xff, 0x08, 0xff, 0x5f, 0xe1, 0x7a, 0x52, 0x06, 0xfc, 0x4e,
		0x4b, 0x91, 0xf1, 0x95, 0xaa, 0x67, 0x49, 0xdb, 0xa8, 0xb7, 0x61, 0x2b, 0xe0, 0x43, 0xbd, 0x8d,
		0x6c, 0x02, 0x3a, 0xd4, 0xdb, 0x48, 0x35, 0x6a, 0x64, 0xf5, 0x36, 0x12, 0x4a, 0x92, 0x9e, 0xa9,
		0x27, 0xbb, 0x40, 0xcb, 0xd7, 0xf3, 0xe0, 0xeb, 0xe0, 0xeb, 0xe0, 0xeb, 0xe0, 0xeb, 0xf6, 0xf0,
		0x75, 0x2a, 0xf5, 0x1f, 0x37, 0x38, 0xa9, 0x2e, 0x21, 0xa9, 0xbd, 0x04, 0xfb, 0x89, 0xea, 0x4b,
		0x93, 0x2e, 0x10, 0x8b, 0xae, 0x99, 0x08, 0x3e, 0x72, 0x73, 0x60, 0xd2, 0x2c, 0xd8, 0x61, 0x1e,
		0x4c, 0x9b, 0x09, 0x6b, 0xcc, 0x85, 0x35, 0x66, 0xc3, 0x1a, 0xf3, 0x41, 0x6b, 0x46, 0x88, 0xcd,
		0x49, 0x3c, 0xca, 0xd7, 0x26, 0x14, 0xfc, 0xbe, 0xd9, 0x5c, 0xc8, 0x09, 0xb4, 0x5f, 0x31, 0xd0,
		0x76, 0xa2, 0x0e, 0xef, 0xab, 0xb1, 0xcb, 0x68, 0xcc, 0x32, 0xa1, 0x68, 0x13, 0x95, 0xee, 0x5d,
		0x29, 0xd3, 0x14, 0xa5, 0x7c, 0x0d, 0x73, 0x57, 0x80, 0x16, 0x80, 0x16, 0x80, 0x16, 0x80, 0x16,
		0x13, 0xa0, 0x85, 0x9a, 0x0b, 0x2f, 0x72, 0xe2, 0x3e, 0x33, 0x78, 0x9c, 0x71, 0x81, 0x1a, 0x8f,
		0x7b, 0xf2, 0x61, 0x27, 0xcf, 0xb8, 0x99, 0x32, 0x3a, 0x36, 0x18, 0x1f, 0xbb, 0x8c, 0x90, 0x2d,
		0xc6, 0xc8, 0x3a, 0xa3, 0x64, 0x9d, 0x71, 0xb2, 0xce, 0x48, 0x99, 0x31, 0x56, 0x86, 0x8c, 0x96,
		0x79, 0xc6, 0x9d, 0xd0, 0x1b, 0x43, 0x2e, 0x64, 0xbe, 0x6c, 0x52, 0x67, 0x4c, 0xad, 0x48, 0xd9,
		0x60, 0x17, 0xcc, 0x64, 0x61, 0x78, 0xfb, 0xc7, 0xac, 0xce, 0xdc, 0x37, 0x9d, 0xa5, 0xc1, 0x32,
		0x78, 0x91, 0xe8, 0x8e, 0xe1, 0x2c, 0x0e, 0x89, 0xfe, 0x58, 0x70, 0xb2, 0xde, 0x12, 0x75, 0xba,
		0x28, 0xc2, 0xde, 0x13, 0x44, 0xf8, 0x17, 0x22, 0x5c, 0x2e, 0x95, 0x8e, 0x4b, 0x10, 0x63, 0xbb,
		0xb0, 0x88, 0xf9, 0xd6, 0x5b, 0x7b, 0xbb, 0xf1, 0xbe, 0x26, 0x92, 0xd1, 0x98, 0xdb, 0x49, 0x5f,
		0xee, 0x36, 0x30, 0xb0, 0xa3, 0x0e, 0xbf, 0x01, 0xfc, 0x06, 0xf0, 0x1b, 0xc0, 0x6f, 0x00, 0xbf,
		0x41, 0x46, 0xfc, 0x06, 0x27, 0x16, 0xb8, 0x0d, 0x4a, 0x70, 0x1b, 0xc0, 0x6d, 0x00, 0xb7, 0x01,
		0xdc, 0x06, 0x70, 0x1b, 0x68, 0x17, 0xe1, 0x42, 0x09, 0x4e, 0x03, 0x38, 0x0d, 0xe0, 0x34, 0xa0,
		0x75, 0x1a, 0x3c, 0x4e, 0x57, 0x9f, 0x0d, 0x5e, 0x83, 0xa8, 0x2f, 0x70, 0x1b, 0xc0, 0x6d, 0x00,
		0xb7, 0x01, 0xdc, 0x06, 0x70, 0x1b, 0xc0, 0x6d, 0xb0, 0xa6, 0xde, 0xb8, 0xe3, 0xc2, 0x0b, 0x9e,
		0x2d, 0xf0, 0x1b, 0x9c, 0x1a, 0xec, 0xc2, 0x39, 0x13, 0xf7, 0x93, 0xc0, 0x7f, 0x38, 0x0e, 0xe0,
		0x38, 0xf8, 0x25, 0xeb, 0xca, 0x83, 0x73, 0xc1, 0x71, 0xb0, 0xdd, 0x22, 0x8c, 0x78, 0x03, 0xb8,
		0x0e, 0xe0, 0x3a, 0x20, 0x15, 0x73, 0xf6, 0x24, 0x99, 0xe8, 0xb2, 0xae, 0x79, 0xc7, 0x41, 0xdc,
		0x13, 0xb8, 0x0d, 0xe0, 0x36, 0x80, 0xdb, 0x00, 0x6e, 0x03, 0xb8, 0x0d, 0xe0, 0x36, 0x58, 0xd7,
		0x6d, 0x40, 0x9e, 0x2e, 0x76, 0x95, 0x19, 0x21, 0x4a, 0x1f, 0xbb, 0x9b, 0xa0, 0xc5, 0x1f, 0x8c,
		0x91, 0xb9, 0xd7, 0x37, 0x0f, 0x5a, 0xe2, 0x9e, 0x00, 0xb4, 0x00, 0xb4, 0x00, 0xb4, 0x00, 0xb4,
		0x00, 0xb4, 0x00, 0xb4, 0x00, 0xb4, 0x00, 0xb4, 0x24, 0xc7, 0x78, 0xe0, 0x05, 0x92, 0xdb, 0x80,
		0x59, 0x66, 0x1d, 0x01, 0x64, 0x01, 0x64, 0x01, 0x64, 0x01, 0x64, 0x01, 0x64, 0x01, 0x64, 0x01,
		0x64, 0x01, 0x64, 0x49, 0x8e, 0xb1, 0x0c, 0x3c, 0x11, 0x72, 0xc9, 0x1f, 0x2d, 0x88, 0x2b, 0x9d,
		0xeb, 0x0b, 0x80, 0x0b, 0x80, 0x0b, 0x80, 0x0b, 0x80, 0x0b, 0x80, 0x0b, 0x80, 0x0b, 0x80, 0x8b,
		0xf5, 0xc0, 0x25, 0xd3, 0xe9, 0x45, 0x89, 0xeb, 0x13, 0x26, 0xda, 0x37, 0x52, 0xaf, 0x30, 0x59,
		0x1a, 0x2f, 0xf9, 0x11, 0x45, 0x51, 0x43, 0x73, 0xa2, 0x96, 0xad, 0x7a, 0x31, 0xbf, 0xb3, 0x67,
		0x13, 0x09, 0x5f, 0x9c, 0x73, 0x1e, 0xca, 0xaa, 0x94, 0xc4, 0xc5, 0x6a, 0xbe, 0x71, 0x51, 0xeb,
		0xb3, 0x31, 0x1a, 0x08, 0x69, 0xd1, 0xb4, 0xf3, 0xcd, 0x7b, 0x9a, 0x6b, 0x39, 0x7f, 0x52, 0x2c,
		0x96, 0x2b, 0xc5, 0x62, 0xae, 0x72, 0x5c, 0xc9, 0x9d, 0x96, 0x4a, 0xf9, 0x72, 0x9e, 0x30, 0xf8,
		0xd5, 0x69, 0x04, 0x5d, 0x16, 0xb0, 0xee, 0xa7, 0xf1, 0xd4, 0x8b, 0x61, 0xbf, 0x9f, 0x29, 0x89,
		0x36, 0xa4, 0x96, 0xed, 0x55, 0xc7, 0x0e, 0x69, 0x41, 0x85, 0x60, 0xd8, 0x91, 0x62, 0x0a, 0xb9,
		0x3e, 0xdd, 0x0f, 0xda, 0x4d, 0x7e, 0xd7, 0xae, 0xf6, 0xf8, 0x95, 0xd7, 0xe3, 0xed, 0xfa, 0xe0,
		0xb1, 0x7c, 0x13, 0xbd, 0x68, 0xfb, 0x62, 0xfa, 0x7a, 0xed, 0x6a, 0xf7, 0xef, 0x26, 0xbf, 0xab,
		0x8b, 0xcb, 0x80, 0xb5, 0x9b, 0xe3, 0x97, 0x6a, 0xdf, 0x44, 0x6f, 0x50, 0x8d, 0x5f, 0x00, 0xe5,
		0x98, 0xcd, 0xaf, 0xaf, 0xdd, 0x28, 0xc7, 0xbc, 0xa4, 0xf2, 0xef, 0xb6, 0xd6, 0x66, 0xde, 0xdb,
		0x22, 0x21, 0x9b, 0xc1, 0x90, 0xc8, 0x85, 0xb1, 0x3f, 0x9e, 0x74, 0x97, 0xeb, 0x0a, 0x07, 0xa7,
		0xc1, 0x1e, 0x74, 0x58, 0xc3, 0x28, 0xb6, 0xa0, 0xc1, 0x12, 0xba, 0xc4, 0x8e, 0x48, 0xa7, 0x19,
		0xd1, 0x65, 0x1a, 0xcd, 0xbe, 0x12, 0x33, 0xaf, 0x47, 0xb1, 0xaa, 0x57, 0x7b, 0x6a, 0x9f, 0xa8,
		0x58, 0x92, 0x75, 0x4b, 0x30, 0xb1, 0xe4, 0xaa, 0x95, 0x09, 0x75, 0x33, 0xa7, 0xe6, 0x49, 0x8a,
		0xe6, 0x5e, 0xd7, 0x9c, 0x53, 0xcd, 0xb5, 0x42, 0xc5, 0xb4, 0xa1, 0x22, 0x52, 0x23, 0x6e, 0x9b,
		0x0b, 0x87, 0x02, 0xc1, 0x70, 0x66, 0x63, 0xec, 0x0f, 0xa5, 0x3b, 0xf0, 0x43, 0xa9, 0x4c, 0x34,
		0x5e, 0xd3, 0xfb, 0xbc, 0x6d, 0x41, 0x91, 0x38, 0xab, 0x2d, 0x48, 0xa7, 0x7c, 0xb3, 0x54, 0xc7,
		0xe6, 0xa7, 0xde, 0xcd, 0x4c, 0x5d, 0x9b, 0x93, 0xda, 0x37, 0x1b, 0xb5, 0x6f, 0x1e, 0x6a, 0xdf,
		0x0c, 0xb4, 0xcb, 0x50, 0xa8, 0x2e, 0x80, 0xe6, 0x4c, 0xad, 0xb4, 0x72, 0xc1, 0x9a, 0x2d, 0x87,
		0xe9, 0xf3, 0x15, 0x4f, 0xba, 0x9e, 0x8a, 0x97, 0xaf, 0x8a, 0xa6, 0xa0, 0xf8, 0xc1, 0x1a, 0xa3,
		0x2d, 0x68, 0xa2, 0x28, 0x74, 0x47, 0x47, 0x90, 0x45, 0x3d, 0x90, 0x45, 0x33, 0x90, 0x45, 0x29,
		0xd8, 0xcd, 0x66, 0x74, 0x55, 0x6c, 0x8c, 0x14, 0x8b, 0x3e, 0x79, 0x5c, 0xd0, 0x5f, 0xba, 0x64,
		0x51, 0x6f, 0xe1, 0x5e, 0xed, 0x41, 0x66, 0x14, 0x41, 0x64, 0xb4, 0x41, 0x62, 0x54, 0x41, 0x60,
		0xe4, 0x41, 0x5e, 0xe4, 0x41, 0x5c, 0xe4, 0x41, 0x5a, 0xdb, 0xe5, 0x1d, 0xd7, 0x5d, 0xc8, 0xd6,
		0x99, 0x39, 0xdc, 0xb5, 0x4b, 0xf2, 0xeb, 0x41, 0x24, 0x9d, 0x1e, 0xfe, 0xb7, 0x2a, 0x53, 0xf3,
		0x46, 0x3f, 0x59, 0x7c, 0x2e, 0x65, 0x1c, 0xae, 0x99, 0x78, 0x5b, 0xea, 0xb8, 0x5a, 0x63, 0xf1,
		0xb3, 0xc6, 0xe2, 0x64, 0x8d, 0xc5, 0xc3, 0x6e, 0xf7, 0xee, 0x37, 0x59, 0x1c, 0x6b, 0xbc, 0xee,
		0xfa, 0xcc, 0xeb, 0x05, 0xac, 0x47, 0xb1, 0xe8, 0x66, 0xc8, 0xb2, 0x42, 0xd0, 0xd6, 0xe5, 0xd4,
		0xbd, 0xfc, 0xf1, 0x63, 0x14, 0x26, 0x78, 0x34, 0x33, 0x05, 0xdb, 0xba, 0xcf, 0xae, 0x11, 0x5f,
		0x0e, 0x68, 0xd4, 0xfd, 0xab, 0x55, 0x26, 0x01, 0x97, 0x30, 0xca, 0x30, 0xca, 0x30, 0xca, 0x30,
		0xca, 0x30, 0xca, 0x16, 0x1b, 0xe5, 0x68, 0xd9, 0xc1, 0x26, 0x27, 0x86, 0x2a, 0x3a, 0xdb, 0x40,
		0x66, 0x92, 0xa3, 0xe6, 0x68, 0x2c, 0x72, 0x1e, 0x16, 0x19, 0x16, 0x19, 0x16, 0x19, 0x16, 0x39,
		0xfd, 0xa8, 0xe9, 0xf6, 0x54, 0xc6, 0x0d, 0x4d, 0x0e, 0x2c, 0x71, 0xd1, 0x65, 0x74, 0xa7, 0xd2,
		0x17, 0xeb, 0x5c, 0x45, 0x6d, 0x53, 0x9d, 0xd2, 0x22, 0xcd, 0x3f, 0x40, 0x9e, 0x6f, 0xc0, 0x44,
		0x7e, 0x01, 0xb3, 0xf9, 0x04, 0x4c, 0xe5, 0x0f, 0x30, 0x9e, 0x2f, 0xc0, 0x78, 0x7e, 0x00, 0xe3,
		0xf9, 0x00, 0xb2, 0x75, 0x7e, 0x94, 0xfc, 0x7c, 0xbf, 0x01, 0x2a, 0x66, 0x82, 0x92, 0x2d, 0xa3,
		0x66, 0x3f, 0xf9, 0x3b, 0x31, 0x49, 0x21, 0x93, 0x61, 0x7c, 0x35, 0x25, 0x72, 0x91, 0x99, 0xca,
		0xca, 0x01, 0x3a, 0x02, 0x64, 0xdd, 0xf1, 0x1f, 0x1e, 0x86, 0x82, 0xcb, 0x67, 0x53, 0xe8, 0xe2,
		0x6d, 0x07, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x00, 0x31, 0x4c, 0x42,
		0x8c, 0x99, 0x5d, 0xe2, 0x2c, 0x8c, 0xaf, 0x9f, 0x81, 0x32, 0xd2, 0x0d, 0x39, 0x7b, 0x92, 0xae,
		0x71, 0xa4, 0xb1, 0xac, 0x13, 0x40, 0x1b, 0x40, 0x1b, 0x40, 0x1b, 0x40, 0x1b, 0x40, 0x1b, 0x40,
		0x1b, 0x26, 0xd1, 0xc6, 0xbc, 0x6d, 0x1a, 0x23, 0x8e, 0x05, 0x5b, 0x05, 0xd4, 0x91, 0x6e, 0xe8,
		0xb9, 0x78, 0xf4, 0xfa, 0xbc, 0xeb, 0x06, 0xcc, 0x0b, 0x09, 0xd3, 0x63, 0xc5, 0x12, 0xfe, 0xa6,
		0x7d, 0x60, 0x0d, 0x60, 0x0d, 0x60, 0x0d, 0x60, 0x0d, 0x60, 0x0d, 0xf2, 0x75, 0xcb, 0xbb, 0x4c,
		0x48, 0x2e, 0x9f, 0x0d, 0xe1, 0x0d, 0xca, 0x64, 0x97, 0xf5, 0xe9, 0xab, 0x7e, 0xf2, 0x42, 0x03,
		0x2a, 0x63, 0x36, 0xe0, 0xf5, 0x8b, 0x3f, 0xaa, 0xe7, 0xf5, 0x2f, 0xed, 0x66, 0xe3, 0xe6, 0xba,
		0xd6, 0x6e, 0xd6, 0xaa, 0x57, 0x8d, 0x0b, 0x6a, 0xed, 0x31, 0xa9, 0xb5, 0x1f, 0x3a, 0x67, 0xfb,
		0xb7, 0xe4, 0xc9, 0x8a, 0x0d, 0x57, 0x90, 0x98, 0x8d, 0xfe, 0xe7, 0xf3, 0x9b, 0xab, 0xeb, 0x5a,
		0xb3, 0x7d, 0xde, 0x68, 0x5c, 0x3a, 0xbb, 0x50, 0xc7, 0xc3, 0x96, 0x71, 0x6f, 0x5c, 0x7c, 0xad,
		0x7d, 0xc1, 0x88, 0xd3, 0x8d, 0x78, 0xf5, 0x0a, 0x42, 0x4e, 0x3c, 0xe4, 0x8d, 0x66, 0xfd, 0xb7,
		0xfa, 0x45, 0xf5, 0xba, 0xd1, 0x74, 0x32, 0x9e, 0x69, 0xbf, 0x95, 0x35, 0xbc, 0x97, 0x09, 0x76,
		0xdf, 0xf7, 0x42, 0xe9, 0x3e, 0xf8, 0x5d, 0xde, 0xe3, 0xac, 0x4b, 0x4f, 0xee, 0x17, 0x9b, 0x07,
		0xb7, 0x07, 0xb7, 0x07, 0xb7, 0x07, 0xb7, 0x07, 0xb7, 0x27, 0x5f, 0xb7, 0x92, 0x3f, 0x30, 0xc9,
		0x3b, 0xff, 0x84, 0xe5, 0xa2, 0x01, 0x6e, 0x7f, 0x42, 0xd8, 0xe4, 0x8d, 0xe0, 0x93, 0x94, 0xd7,
		0x8e, 0xf0, 0x84, 0x1f, 0xb2, 0x8e, 0x2f, 0xba, 0x21, 0xe5, 0x2b, 0x37, 0x3d, 0x71, 0xcf, 0xc8,
		0xf9, 0xb4, 0x81, 0x52, 0x43, 0xdf, 0xb8, 0x30, 0x57, 0x06, 0xd2, 0x70, 0xf1, 0xc5, 0x89, 0xd7,
		0xc4, 0x60, 0xfb, 0x5f, 0x03, 0xaf, 0x23, 0xb9, 0x2f, 0xbe, 0xf0, 0xfb, 0x48, 0xda, 0x73, 0x3b,
		0x51, 0x80, 0xf4, 0x9b, 0xf7, 0xb4, 0xf3, 0x22, 0x67, 0xb6, 0x4c, 0x90, 0x75, 0x52, 0x98, 0xd1,
		0x82, 0x62, 0x2d, 0x70, 0xdc, 0x77, 0x8b, 0x21, 0x55, 0xa2, 0xb2, 0x04, 0xa8, 0xa2, 0x49, 0x58,
		0x06, 0x5e, 0x0b, 0x5e, 0x0b, 0x5e, 0x0b, 0x5e, 0x0b, 0x5e, 0xbb, 0x64, 0xdd, 0x0e, 0xb9, 0x90,
		0xc7, 0x05, 0x03, 0x94, 0xb6, 0x02, 0x4a, 0x09, 0x4a, 0x09, 0x4a, 0x09, 0x4a, 0x99, 0x01, 0x91,
		0x2b, 0x16, 0x4e, 0x8b, 0xa7, 0xe5, 0x4a, 0xe1, 0x14, 0x44, 0x12, 0x44, 0x72, 0x97, 0x89, 0x24,
		0x2d, 0x01, 0xa1, 0x4d, 0xb1, 0x09, 0x1a, 0x09, 0x1a, 0x09, 0x1a, 0x09, 0x1a, 0x09, 0x1a, 0xb9,
		0x64, 0xdd, 0x4e, 0x8a, 0x15, 0x92, 0xcb, 0x70, 0x1c, 0xfa, 0x7c, 0x42, 0x7b, 0xd4, 0x4a, 0xb2,
		0x40, 0x90, 0xd3, 0x49, 0xe7, 0xe0, 0xe0, 0x36, 0xe7, 0x9e, 0x7a, 0x6e, 0xaf, 0xea, 0x7e, 0x6d,
		0xfd, 0xc8, 0x7f, 0x28, 0x8e, 0xce, 0x0e, 0x7f, 0x54, 0x46, 0x6f, 0x3f, 0x7c, 0x59, 0xf6, 0xb5,
		0xfc, 0x87, 0xca, 0xe8, 0x6c, 0xc5, 0x6f, 0xca, 0xa3, 0xb3, 0x77, 0x3e, 0xa3, 0x34, 0x3a, 0x48,
		0x7c, 0x75, 0xfc, 0x79, 0x61, 0xd5, 0x0d, 0xc5, 0x15, 0x37, 0x1c, 0xaf, 0xba, 0xe1, 0x78, 0xc5,
		0x0d, 0x2b, 0xbb, 0x54, 0x58, 0x71, 0x43, 0x69, 0xf4, 0x92, 0xf8, 0xfe, 0xc1, 0xf2, 0xaf, 0x96,
		0x47, 0x87, 0x2f, 0xab, 0x7e, 0x57, 0x19, 0xbd, 0x9c, 0x1d, 0x1e, 0x1e, 0x1d, 0xe4, 0x0b, 0xb7,
		0x39, 0xf7, 0xa4, 0xf5, 0x92, 0xbf, 0xcd, 0xb9, 0xf9, 0xd6, 0xf8, 0x9b, 0xad, 0x97, 0xdb, 0xbc,
		0x7b, 0x3a, 0xbb, 0x1c, 0xff, 0xff, 0x90, 0x4e, 0x6d, 0xb5, 0x28, 0xe5, 0xbd, 0x71, 0x55, 0xff,
		0xaf, 0x31, 0xa1, 0xff, 0x0b, 0x52, 0x6f, 0xb9, 0xd4, 0xff, 0xc7, 0x01, 0x17, 0xb3, 0x90, 0x8b,
		0x4d, 0x0f, 0x85, 0x6a, 0x2d, 0xd1, 0xb6, 0x12, 0x0e, 0xcc, 0x37, 0x0e, 0x56, 0x06, 0x56, 0x06,
		0x56, 0x06, 0x56, 0x06, 0x56, 0x46, 0xbe, 0x6e, 0xef, 0x7c, 0xbf, 0xcf, 0x3c, 0x61, 0x82, 0x91,
		0xe5, 0xb3, 0x62, 0xaa, 0xb7, 0x3a, 0x73, 0x78, 0x55, 0x08, 0x5f, 0x7a, 0x92, 0x13, 0xe5, 0xa5,
		0x70, 0xc2, 0xce, 0x77, 0xf6, 0xe0, 0x0d, 0xa6, 0xc9, 0x48, 0x8e, 0xfc, 0x01, 0x13, 0x9d, 0x89,
		0xa1, 0x1c, 0xeb, 0x8f, 0xa3, 0xf1, 0x7f, 0x01, 0xbf, 0x3b, 0xf2, 0x7a, 0xdc, 0x0d, 0xbd, 0x1e,
		0x0f, 0xe3, 0xab, 0xa3, 0x89, 0xff, 0x60, 0x28, 0x78, 0xc7, 0x0b, 0xe5, 0x91, 0x60, 0xfc, 0xfe,
		0xfb, 0x9d, 0x1f, 0x84, 0xf1, 0xd5, 0xd1, 0xdb, 0x32, 0xf9, 0x47, 0x51, 0x51, 0xeb, 0xe8, 0x47,
		0x94, 0xb9, 0x04, 0x75, 0x35, 0x92, 0xf3, 0x31, 0x14, 0xff, 0x08, 0xff, 0x5f, 0xe1, 0x7a, 0x52,
		0x06, 0xfc, 0x4e, 0x4b, 0x99, 0xf1, 0x95, 0xca, 0x67, 0x49, 0xdb, 0xa8, 0xb8, 0x61, 0x2b, 0xe4,
		0x43, 0xc5, 0x8d, 0x6c, 0x42, 0x3a, 0x54, 0xdc, 0x48, 0x35, 0x6a, 0x64, 0x15, 0x37, 0x12, 0x4a,
		0x92, 0x9e, 0xab, 0x27, 0xbb, 0x40, 0xcb, 0xd8, 0xf3, 0x60, 0xec, 0x60, 0xec, 0x60, 0xec, 0x60,
		0xec, 0xf6, 0x30, 0x76, 0x2a, 0xf5, 0x1f, 0x37, 0x38, 0xa9, 0x2f, 0x21, 0xa9, 0xfd, 0x04, 0xfb,
		0x89, 0xfa, 0x4b, 0x93, 0x2e, 0x10, 0x8b, 0xae, 0x99, 0x18, 0x3e, 0x72, 0x73, 0x60, 0xd2, 0x2c,
		0xd8, 0x61, 0x1e, 0x4c, 0x9b, 0x09, 0x6b, 0xcc, 0x85, 0x35, 0x66, 0xc3, 0x1a, 0xf3, 0x41, 0x6b,
		0x46, 0x88, 0xcd, 0x49, 0x3c, 0xca, 0xd7, 0x26, 0x14, 0xfc, 0xbe, 0xd9, 0x6c, 0xc8, 0x09, 0xb4,
		0x5f, 0x31, 0xd0, 0x76, 0xa2, 0x12, 0xef, 0xab, 0xb1, 0xcb, 0x68, 0xd4, 0x32, 0xa1, 0x68, 0x13,
		0x15, 0xef, 0x5d, 0x29, 0xd3, 0x14, 0xc5, 0x7c, 0x0d, 0x73, 0x57, 0x80, 0x16, 0x80, 0x16, 0x80,
		0x16, 0x80, 0x16, 0x13, 0xa0, 0x85, 0x9a, 0x0b, 0x2f, 0x72, 0xe2, 0x3e, 0x33, 0x78, 0xa0, 0x71,
		0x81, 0x1a, 0x8f, 0x7b, 0xf2, 0x61, 0x27, 0x4f, 0xb9, 0x99, 0x32, 0x3a, 0x36, 0x18, 0x1f, 0xbb,
		0x8c, 0x90, 0x2d, 0xc6, 0xc8, 0x3a, 0xa3, 0x64, 0x9d, 0x71, 0xb2, 0xce, 0x48, 0x99, 0x31, 0x56,
		0x86, 0x8c, 0x96, 0x79, 0xc6, 0x9d, 0xd0, 0x1b, 0x43, 0x2e, 0x64, 0xbe, 0x6c, 0x52, 0x67, 0x4c,
		0xad, 0x48, 0xd9, 0x60, 0x17, 0xcc, 0xe4, 0x61, 0x78, 0xfb, 0xc7, 0xac, 0xce, 0xdc, 0x37, 0x9d,
		0xa7, 0xc1, 0x32, 0x78, 0x91, 0xe8, 0x8e, 0xe1, 0x3c, 0x0e, 0x89, 0xfe, 0x58, 0x70, 0xb6, 0xde,
		0x12, 0x75, 0xba, 0x28, 0xc2, 0xde, 0x13, 0x44, 0xf8, 0x17, 0x22, 0x5c, 0x2e, 0x95, 0x8e, 0x4b,
		0x10, 0x63, 0xbb, 0xb0, 0x88, 0xf9, 0xd6, 0x5b, 0x7b, 0xbb, 0xf1, 0xbe, 0x26, 0xd2, 0xd1, 0x98,
		0xdb, 0x49, 0x5f, 0xee, 0x36, 0x30, 0xb0, 0xa3, 0x0e, 0xbf, 0x01, 0xfc, 0x06, 0xf0, 0x1b, 0xc0,
		0x6f, 0x00, 0xbf, 0x41, 0x46, 0xfc, 0x06, 0x27, 0x16, 0xb8, 0x0d, 0x4a, 0x70, 0x1b, 0xc0, 0x6d,
		0x00, 0xb7, 0x01, 0xdc, 0x06, 0x70, 0x1b, 0x68, 0x17, 0xe1, 0x42, 0x09, 0x4e, 0x03, 0x38, 0x0d,
		0xe0, 0x34, 0xa0, 0x75, 0x1a, 0x3c, 0x4e, 0x57, 0x9f, 0x0d, 0x5e, 0x83, 0xa8, 0x2f, 0x70, 0x1b,
		0xc0, 0x6d, 0x00, 0xb7, 0x01, 0xdc, 0x06, 0x70, 0x1b, 0xc0, 0x6d, 0xb0, 0xa6, 0xde, 0xb8, 0xe3,
		0xc2, 0x0b, 0x9e, 0x2d, 0xf0, 0x1b, 0x9c, 0x1a, 0xec, 0xc2, 0x39, 0x13, 0xf7, 0x93, 0xc0, 0x7f,
		0x38, 0x0e, 0xe0, 0x38, 0xf8, 0x25, 0xeb, 0xca, 0x83, 0x73, 0xc1, 0x71, 0xb0, 0xdd, 0x22, 0x8c,
		0x78, 0x03, 0xb8, 0x0e, 0xe0, 0x3a, 0x20, 0x15, 0x73, 0xf6, 0x24, 0x99, 0xe8, 0xb2, 0xae, 0x79,
		0xc7, 0x41, 0xdc, 0x13, 0xb8, 0x0d, 0xe0, 0x36, 0x80, 0xdb, 0x00, 0x6e, 0x03, 0xb8, 0x0d, 0xe0,
		0x36, 0x58, 0xd7, 0x6d, 0x40, 0x9e, 0x30, 0x76, 0x95, 0x19, 0x21, 0x4a, 0x20, 0xbb, 0x9b, 0xa0,
		0xc5, 0x1f, 0x8c, 0x91, 0xb9, 0xd7, 0x37, 0x0f, 0x5a, 0xe2, 0x9e, 0x00, 0xb4, 0x00, 0xb4, 0x00,
		0xb4, 0x00, 0xb4, 0x00, 0xb4, 0x00, 0xb4, 0x00, 0xb4, 0x00, 0xb4, 0x24, 0xc7, 0x78, 0xe0, 0x05,
		0x92, 0xdb, 0x80, 0x59, 0x66, 0x1d, 0x01, 0x64, 0x01, 0x64, 0x01, 0x64, 0x01, 0x64, 0x01, 0x64,
		0x01, 0x64, 0x01, 0x64, 0x01, 0x64, 0x49, 0x8e, 0xb1, 0x0c, 0x3c, 0x11, 0x72, 0xc9, 0x1f, 0x2d,
		0x88, 0x2b, 0x9d, 0xeb, 0x0b, 0x80, 0x0b, 0x80, 0x0b, 0x80, 0x0b, 0x80, 0x0b, 0x80, 0x0b, 0x80,
		0x0b, 0x80, 0x8b, 0xf5, 0xc0, 0x25, 0xd3, 0xe9, 0x45, 0x89, 0x2b, 0x14, 0x26, 0xda, 0x37, 0x54,
		0xb1, 0x30, 0x59, 0x1c, 0x2f, 0xf9, 0x11, 0x45, 0x59, 0x43, 0x73, 0xc2, 0x96, 0xad, 0x8a, 0x31,
		0xbf, 0xb3, 0x67, 0x13, 0x29, 0x5f, 0x9c, 0x73, 0x1e, 0xca, 0xaa, 0x94, 0xc4, 0xe5, 0x6a, 0xbe,
		0x71, 0x51, 0xeb, 0xb3, 0x31, 0x1e, 0x08, 0x69, 0xf1, 0xb4, 0xf3, 0xcd, 0x7b, 0x9a, 0x6b, 0x39,
		0x7f, 0x52, 0x2c, 0x96, 0x2b, 0xc5, 0x62, 0xae, 0x72, 0x5c, 0xc9, 0x9d, 0x96, 0x4a, 0xf9, 0x72,
		0x9e, 0x30, 0xfc, 0xd5, 0x69, 0x04, 0x5d, 0x16, 0xb0, 0xee, 0xa7, 0xf1, 0xd4, 0x8b, 0x61, 0xbf,
		0x9f, 0x29, 0x89, 0x36, 0xa4, 0x98, 0x6d, 0x56, 0xc8, 0x0e, 0x69, 0x51, 0x85, 0x60, 0xd8, 0x91,
		0x62, 0x0a, 0xbb, 0x3e, 0xdd, 0x0f, 0xda, 0x4d, 0x7e, 0xd7, 0xae, 0xf6, 0xf8, 0x95, 0xd7, 0xe3,
		0xed, 0xfa, 0xe0, 0xb1, 0x7c, 0x13, 0xbd, 0x6a, 0xfb, 0x62, 0xfa, 0x82, 0xed, 0x6a, 0xf7, 0xef,
		0x26, 0xbf, 0x6b, 0x0c, 0xe5, 0xa5, 0x1f, 0xca, 0x76, 0x73, 0xfc, 0x5a, 0xed, 0x9b, 0xe8, 0x1d,
		0xaa, 0xf1, 0x2b, 0xa0, 0x2c, 0xb3, 0xf9, 0x35, 0xb6, 0x2b, 0x65, 0x99, 0x97, 0x54, 0x00, 0xde,
		0xd6, 0x1a, 0xcd, 0x7b, 0x5b, 0x24, 0x66, 0x33, 0x30, 0x12, 0xb9, 0x32, 0xf6, 0xc7, 0xd3, 0xee,
		0x72, 0x5d, 0x61, 0xe1, 0x34, 0x08, 0x84, 0x0e, 0x71, 0x18, 0x45, 0x18, 0x34, 0x88, 0x42, 0x97,
		0xd8, 0x11, 0x69, 0x35, 0x43, 0xda, 0x4c, 0xa3, 0xf1, 0x57, 0x64, 0xec, 0xf5, 0x28, 0x57, 0xf5,
		0xaa, 0x4f, 0xed, 0x13, 0x15, 0x4b, 0xb3, 0x6e, 0x29, 0x26, 0x97, 0x5e, 0xb5, 0x52, 0xa1, 0x6e,
		0xee, 0xd4, 0x3c, 0x49, 0xd1, 0xec, 0xeb, 0x9a, 0x75, 0xba, 0xd9, 0x56, 0xa8, 0x9e, 0x36, 0x56,
		0x47, 0x6a, 0x44, 0x6e, 0x73, 0x01, 0x51, 0x20, 0x1c, 0xce, 0xc2, 0x38, 0x07, 0xea, 0xbc, 0xf0,
		0xaf, 0xf9, 0x7e, 0xde, 0x34, 0xa0, 0x48, 0xa0, 0xd5, 0x16, 0xa8, 0x53, 0xbe, 0x79, 0xaa, 0x63,
		0x33, 0x54, 0xef, 0xe6, 0xa6, 0xae, 0xcd, 0x4a, 0xed, 0x9b, 0x8f, 0xda, 0x37, 0x13, 0xb5, 0x6f,
		0x0e, 0xda, 0x65, 0x2a, 0x54, 0x17, 0x44, 0x73, 0xa6, 0x76, 0x5a, 0xb9, 0x60, 0xcd, 0x96, 0xc3,
		0xf4, 0xf9, 0x8a, 0x27, 0x5d, 0x4f, 0x05, 0xcc, 0x57, 0x45, 0x53, 0x50, 0xfc, 0x60, 0x8d, 0xd1,
		0x17, 0x34, 0x51, 0x15, 0xba, 0xa3, 0x25, 0xc8, 0xa2, 0x20, 0xc8, 0xa2, 0x1b, 0xc8, 0xa2, 0x16,
		0xec, 0x66, 0x34, 0xba, 0x2a, 0x38, 0x46, 0x8a, 0x45, 0x9f, 0x3c, 0x2e, 0xe8, 0x2f, 0x5d, 0xb2,
		0xa8, 0xb7, 0x90, 0xaf, 0xf6, 0xa0, 0x33, 0x8a, 0xa0, 0x32, 0xda, 0xa0, 0x31, 0xaa, 0xa0, 0x30,
		0xf2, 0xa0, 0x2f, 0xf2, 0xa0, 0x2e, 0xf2, 0xa0, 0xad, 0xed, 0xf2, 0x92, 0xeb, 0x2e, 0x6c, 0xeb,
		0xcc, 0x1c, 0xef, 0xda, 0x25, 0xf9, 0xf5, 0x60, 0x92, 0x4e, 0x4f, 0xff, 0x5b, 0x95, 0xa9, 0x79,
		0xdb, 0x9f, 0x2c, 0x5e, 0x97, 0x32, 0x2e, 0xd7, 0x4c, 0xfc, 0x2d, 0x75, 0x9c, 0xad, 0xb1, 0x78,
		0x5a, 0x63, 0x71, 0xb3, 0xc6, 0xe2, 0x63, 0xb7, 0x7b, 0x1f, 0x9c, 0x2c, 0xae, 0x35, 0x5e, 0x77,
		0x7d, 0xe6, 0xf5, 0x02, 0xd6, 0xa3, 0x58, 0x74, 0x33, 0x64, 0x59, 0x21, 0x68, 0xeb, 0x72, 0xea,
		0x60, 0xfe, 0xf8, 0x31, 0x0a, 0x1a, 0x3c, 0x9a, 0x99, 0x82, 0x6d, 0xdd, 0x6f, 0xd7, 0x88, 0x2f,
		0x07, 0x34, 0xea, 0xfe, 0xd5, 0x2a, 0x93, 0x80, 0x4b, 0x18, 0x65, 0x18, 0x65, 0x18, 0x65, 0x18,
		0x65, 0x18, 0x65, 0x8b, 0x8d, 0x72, 0xb4, 0xec, 0x60, 0x93, 0x13, 0x43, 0x15, 0x9d, 0x74, 0x20,
		0x33, 0xc9, 0x51, 0x73, 0x34, 0x16, 0x39, 0x0f, 0x8b, 0x0c, 0x8b, 0x0c, 0x8b, 0x0c, 0x8b, 0x9c,
		0x7e, 0xd4, 0x74, 0x7b, 0x2a, 0xe3, 0x86, 0x26, 0xc7, 0x97, 0xb8, 0xe8, 0x32, 0xba, 0x53, 0xea,
		0x8b, 0x75, 0xaf, 0xa2, 0xb6, 0xa9, 0xce, 0x6c, 0x91, 0xe6, 0x23, 0x20, 0xcf, 0x3f, 0x60, 0x22,
		0xdf, 0x80, 0xd9, 0xfc, 0x02, 0xa6, 0xf2, 0x09, 0x18, 0xcf, 0x1f, 0x60, 0x3c, 0x5f, 0x80, 0xf1,
		0xfc, 0x00, 0xd9, 0x3a, 0x4d, 0x4a, 0x7e, 0xde, 0xdf, 0x00, 0x15, 0x33, 0x41, 0xc9, 0x96, 0x51,
		0xb3, 0x9f, 0xfc, 0x9d, 0x98, 0xa4, 0x90, 0xc9, 0x30, 0xbe, 0x9a, 0x12, 0xb9, 0xc8, 0x4c, 0x65,
		0xe5, 0x28, 0x1d, 0x01, 0xb2, 0xee, 0xf8, 0x0f, 0x0f, 0x43, 0xc1, 0xe5, 0xb3, 0x29, 0x74, 0xf1,
		0xb6, 0x03, 0x80, 0x18, 0x80, 0x18, 0x80, 0x18, 0x80, 0x18, 0x80, 0x18, 0x80, 0x18, 0x26, 0x21,
		0xc6, 0xcc, 0x2e, 0x71, 0x16, 0xc6, 0xd7, 0xcf, 0x40, 0x19, 0xe9, 0x86, 0x9c, 0x3d, 0x49, 0xd7,
		0x38, 0xd2, 0x58, 0xd6, 0x09, 0xa0, 0x0d, 0xa0, 0x0d, 0xa0, 0x0d, 0xa0, 0x0d, 0xa0, 0x0d, 0xa0,
		0x0d, 0x93, 0x68, 0x63, 0xde, 0x36, 0x8d, 0x11, 0xc7, 0x82, 0xad, 0x02, 0xea, 0x48, 0x37, 0xf4,
		0x5c, 0x3c, 0x7a, 0x7d, 0xde, 0x75, 0x03, 0xe6, 0x85, 0x84, 0xc9, 0xb2, 0x62, 0x09, 0x7f, 0xd3,
		0x3e, 0xb0, 0x06, 0xb0, 0x06, 0xb0, 0x06, 0xb0, 0x06, 0xb0, 0x06, 0xf9, 0xba, 0xe5, 0x5d, 0x26,
		0x24, 0x97, 0xcf, 0x86, 0xf0, 0x06, 0x65, 0xea, 0xcb, 0xfa, 0xf4, 0x55, 0x3f, 0x79, 0xa1, 0x01,
		0x95, 0x31, 0x1b, 0xf0, 0xfa, 0xc5, 0x1f, 0xd5, 0xf3, 0xfa, 0x97, 0x76, 0xb3, 0x71, 0x73, 0x5d,
		0x6b, 0x37, 0x6b, 0xd5, 0xab, 0xc6, 0x05, 0xb5, 0xf6, 0x98, 0xd4, 0xde, 0x0f, 0x9d, 0xb3, 0xfd,
		0x5b, 0xf2, 0xe4, 0xc5, 0x86, 0x2b, 0x4a, 0xcc, 0x46, 0xff, 0xf3, 0xf9, 0xcd, 0xd5, 0x75, 0xad,
		0xd9, 0x3e, 0x6f, 0x34, 0x2e, 0x9d, 0x5d, 0xa8, 0xeb, 0x61, 0xcb, 0xb8, 0x37, 0x2e, 0xbe, 0xd6,
		0xbe, 0x60, 0xc4, 0xe9, 0x46, 0xbc, 0x7a, 0x05, 0x21, 0x27, 0x1e, 0xf2, 0x46, 0xb3, 0xfe, 0x5b,
		0xfd, 0xa2, 0x7a, 0xdd, 0x68, 0x3a, 0x19, 0xcf, 0xbc, 0xdf, 0xca, 0x1a, 0xde, 0xcb, 0x04, 0xbb,
		0xef, 0x7b, 0xa1, 0x74, 0x1f, 0xfc, 0x2e, 0xef, 0x71, 0xd6, 0xa5, 0x27, 0xf7, 0x8b, 0xcd, 0x83,
		0xdb, 0x83, 0xdb, 0x83, 0xdb, 0x83, 0xdb, 0x83, 0xdb, 0x93, 0xaf, 0x5b, 0xc9, 0x1f, 0x98, 0xe4,
		0x9d, 0x7f, 0xc2, 0x72, 0xd1, 0x00, 0xb7, 0x3f, 0x21, 0x6c, 0xf2, 0x46, 0xf0, 0x49, 0xea, 0x6b,
		0x47, 0x78, 0xc2, 0x0f, 0x59, 0xc7, 0x17, 0xdd, 0x90, 0xf2, 0x95, 0x9b, 0x9e, 0xb8, 0x67, 0xe4,
		0x7c, 0xda, 0x40, 0xe9, 0xa1, 0x6f, 0x5c, 0x98, 0x2b, 0x0b, 0x69, 0xb8, 0x18, 0xe3, 0xc4, 0x6b,
		0x62, 0xb0, 0xfd, 0xaf, 0x81, 0xd7, 0x91, 0xdc, 0x17, 0x5f, 0xf8, 0x7d, 0x24, 0xed, 0xb9, 0x9d,
		0x28, 0x48, 0xfa, 0xcd, 0x7b, 0xda, 0x79, 0x91, 0x33, 0x5b, 0x34, 0xc8, 0x3a, 0x29, 0xcc, 0x68,
		0x79, 0xb1, 0x16, 0x38, 0xee, 0xbb, 0xc5, 0x90, 0x2a, 0x51, 0x59, 0x02, 0x54, 0xd1, 0x24, 0x2c,
		0x03, 0xaf, 0x05, 0xaf, 0x05, 0xaf, 0x05, 0xaf, 0x05, 0xaf, 0x5d, 0xb2, 0x6e, 0x87, 0x5c, 0xc8,
		0xe3, 0x82, 0x01, 0x4a, 0x5b, 0x01, 0xa5, 0x04, 0xa5, 0x04, 0xa5, 0x04, 0xa5, 0xcc, 0x80, 0xc8,
		0x15, 0x0b, 0xa7, 0xc5, 0xd3, 0x72, 0xa5, 0x70, 0x0a, 0x22, 0x09, 0x22, 0xb9, 0xcb, 0x44, 0x92,
		0x96, 0x80, 0xd0, 0xa6, 0xd8, 0x04, 0x8d, 0x04, 0x8d, 0x04, 0x8d, 0x04, 0x8d, 0x04, 0x8d, 0x5c,
		0xb2, 0x6e, 0x27, 0xe5, 0x0a, 0xc9, 0x65, 0x38, 0x0e, 0x7d, 0x3e, 0xa1, 0x3d, 0x6a, 0x25, 0x59,
		0x20, 0xc8, 0xe9, 0xa4, 0x73, 0x70, 0x70, 0x9b, 0x73, 0x4f, 0x3d, 0xb7, 0x57, 0x75, 0xbf, 0xb6,
		0x7e, 0xe4, 0x3f, 0x14, 0x47, 0x67, 0x87, 0x3f, 0x2a, 0xa3, 0xb7, 0x1f, 0xbe, 0x2c, 0xfb, 0x5a,
		0xfe, 0x43, 0x65, 0x74, 0xb6, 0xe2, 0x37, 0xe5, 0xd1, 0xd9, 0x3b, 0x9f, 0x51, 0x1a, 0x1d, 0x24,
		0xbe, 0x3a, 0xfe, 0xbc, 0xb0, 0xea, 0x86, 0xe2, 0x8a, 0x1b, 0x8e, 0x57, 0xdd, 0x70, 0xbc, 0xe2,
		0x86, 0x95, 0x5d, 0x2a, 0xac, 0xb8, 0xa1, 0x34, 0x7a, 0x49, 0x7c, 0xff, 0x60, 0xf9, 0x57, 0xcb,
		0xa3, 0xc3, 0x97, 0x55, 0xbf, 0xab, 0x8c, 0x5e, 0xce, 0x0e, 0x0f, 0x8f, 0x0e, 0xf2, 0x85, 0xdb,
		0x9c, 0x7b, 0xd2, 0x7a, 0xc9, 0xdf, 0xe6, 0xdc, 0x7c, 0x6b, 0xfc, 0xcd, 0xd6, 0xcb, 0x6d, 0xde,
		0x3d, 0x9d, 0x5d, 0x8e, 0xff, 0x7f, 0x48, 0xa7, 0xb6, 0x5a, 0x94, 0xf2, 0xde, 0xb8, 0xaa, 0xff,
		0xd7, 0x98, 0xd0, 0xff, 0x05, 0xa9, 0xb7, 0x5c, 0xea, 0xff, 0xe3, 0x80, 0x8b, 0x59, 0xc8, 0xc5,
		0xa6, 0x87, 0x42, 0xb5, 0x96, 0x68, 0x5b, 0x09, 0x07, 0xe6, 0x1b, 0x07, 0x2b, 0x03, 0x2b, 0x03,
		0x2b, 0x03, 0x2b, 0x03, 0x2b, 0x23, 0x5f, 0xb7, 0x77, 0xbe, 0xdf, 0x67, 0x9e, 0x30, 0xc1, 0xc8,
		0xf2, 0x59, 0x31, 0xd5, 0x5b, 0x9d, 0x39, 0xbc, 0x2a, 0x84, 0x2f, 0x3d, 0xc9, 0x89, 0xf2, 0x52,
		0x38, 0x61, 0xe7, 0x3b, 0x7b, 0xf0, 0x06, 0xd3, 0x64, 0x24, 0x47, 0xfe, 0x80, 0x89, 0xce, 0xc4,
		0x50, 0x8e, 0xf5, 0xc7, 0xd1, 0xf8, 0xbf, 0x80, 0xdf, 0x1d, 0x79, 0x3d, 0xee, 0x86, 0x5e, 0x8f,
		0x87, 0xf1, 0xd5, 0xd1, 0xc4, 0x7f, 0x30, 0x14, 0xbc, 0xe3, 0x85, 0xf2, 0x48, 0x30, 0x7e, 0xff,
		0xfd, 0xce, 0x0f, 0xc2, 0xf8, 0xea, 0xe8, 0x4d, 0x95, 0xfc, 0xa3, 0xa8, 0xa6, 0x75, 0xf4, 0x23,
		0x4a, 0x5c, 0x82, 0xb2, 0x1a, 0xc9, 0xe9, 0x18, 0x8a, 0x7f, 0x84, 0xff, 0xaf, 0x70, 0x3d, 0x29,
		0x03, 0x7e, 0xa7, 0xa5, 0xca, 0xf8, 0x4a, 0xdd, 0xb3, 0xa4, 0x6d, 0x14, 0xdc, 0xb0, 0x15, 0xf1,
		0xa1, 0xe0, 0x46, 0x36, 0x11, 0x1d, 0x0a, 0x6e, 0xa4, 0x1a, 0x35, 0xb2, 0x82, 0x1b, 0x09, 0x25,
		0x49, 0x4f, 0xd5, 0x93, 0x5d, 0xa0, 0x25, 0xec, 0x79, 0x10, 0x76, 0x10, 0x76, 0x10, 0x76, 0x10,
		0x76, 0x7b, 0x08, 0x3b, 0x95, 0xfa, 0x8f, 0x1b, 0x9c, 0x94, 0x97, 0x90, 0xd4, 0x6e, 0x82, 0xfd,
		0x44, 0xf9, 0xa5, 0x49, 0x17, 0x88, 0x45, 0xd7, 0x4c, 0x08, 0x1f, 0xb9, 0x39, 0x30, 0x69, 0x16,
		0xec, 0x30, 0x0f, 0xa6, 0xcd, 0x84, 0x35, 0xe6, 0xc2, 0x1a, 0xb3, 0x61, 0x8d, 0xf9, 0xa0, 0x35,
		0x23, 0xc4, 0xe6, 0x24, 0x1e, 0xe5, 0x6b, 0x13, 0x0a, 0x7e, 0xdf, 0x6c, 0x32, 0xe4, 0x04, 0xda,
		0xaf, 0x18, 0x68, 0x3b, 0x51, 0x88, 0xf7, 0xd5, 0xd8, 0x65, 0x34, 0x68, 0x99, 0x50, 0xb4, 0x89,
		0x6a, 0xf7, 0xae, 0x94, 0x69, 0x8a, 0x5a, 0xbe, 0x86, 0xb9, 0x2b, 0x40, 0x0b, 0x40, 0x0b, 0x40,
		0x0b, 0x40, 0x8b, 0x09, 0xd0, 0x42, 0xcd, 0x85, 0x17, 0x39, 0x71, 0x9f, 0x19, 0x3c, 0xcf, 0xb8,
		0x40, 0x8d, 0xc7, 0x3d, 0xf9, 0xb0, 0x93, 0x87, 0xdc, 0x4c, 0x19, 0x1d, 0x1b, 0x8c, 0x8f, 0x5d,
		0x46, 0xc8, 0x16, 0x63, 0x64, 0x9d, 0x51, 0xb2, 0xce, 0x38, 0x59, 0x67, 0xa4, 0xcc, 0x18, 0x2b,
		0x43, 0x46, 0xcb, 0x3c, 0xe3, 0x4e, 0xe8, 0x8d, 0x21, 0x17, 0x32, 0x5f, 0x36, 0xa9, 0x33, 0xa6,
		0x56, 0xa4, 0x6c, 0xb0, 0x0b, 0x66, 0xd2, 0x30, 0xbc, 0xfd, 0x63, 0x56, 0x67, 0xee, 0x9b, 0x4e,
		0xd3, 0x60, 0x19, 0xbc, 0x48, 0x74, 0xc7, 0x70, 0x1a, 0x87, 0x44, 0x7f, 0x2c, 0x38, 0x5a, 0x6f,
		0x89, 0x3a, 0x5d, 0x14, 0x61, 0xef, 0x09, 0x22, 0xfc, 0x0b, 0x11, 0x2e, 0x97, 0x4a, 0xc7, 0x25,
		0x88, 0xb1, 0x5d, 0x58, 0xc4, 0x7c, 0xeb, 0xad, 0xbd, 0xdd, 0x78, 0x5f, 0x13, 0xd9, 0x68, 0xcc,
		0xed, 0xa4, 0x2f, 0x77, 0x1b, 0x18, 0xd8, 0x51, 0x87, 0xdf, 0x00, 0x7e, 0x03, 0xf8, 0x0d, 0xe0,
		0x37, 0x80, 0xdf, 0x20, 0x23, 0x7e, 0x83, 0x13, 0x0b, 0xdc, 0x06, 0x25, 0xb8, 0x0d, 0xe0, 0x36,
		0x80, 0xdb, 0x00, 0x6e, 0x03, 0xb8, 0x0d, 0xb4, 0x8b, 0x70, 0xa1, 0x04, 0xa7, 0x01, 0x9c, 0x06,
		0x70, 0x1a, 0xd0, 0x3a, 0x0d, 0x1e, 0xa7, 0xab, 0xcf, 0x06, 0xaf, 0x41, 0xd4, 0x17, 0xb8, 0x0d,
		0xe0, 0x36, 0x80, 0xdb, 0x00, 0x6e, 0x03, 0xb8, 0x0d, 0xe0, 0x36, 0x58, 0x53, 0x6f, 0xdc, 0x71,
		0xe1, 0x05, 0xcf, 0x16, 0xf8, 0x0d, 0x4e, 0x0d, 0x76, 0xe1, 0x9c, 0x89, 0xfb, 0x49, 0xe0, 0x3f,
		0x1c, 0x07, 0x70, 0x1c, 0xfc, 0x92, 0x75, 0xe5, 0xc1, 0xb9, 0xe0, 0x38, 0xd8, 0x6e, 0x11, 0x46,
		0xbc, 0x01, 0x5c, 0x07, 0x70, 0x1d, 0x90, 0x8a, 0x39, 0x7b, 0x92, 0x4c, 0x74, 0x59, 0xd7, 0xbc,
		0xe3, 0x20, 0xee, 0x09, 0xdc, 0x06, 0x70, 0x1b, 0xc0, 0x6d, 0x00, 0xb7, 0x01, 0xdc, 0x06, 0x70,
		0x1b, 0xac, 0xeb, 0x36, 0x20, 0xcf, 0x17, 0xbb, 0xca, 0x8c, 0x10, 0xe5, 0x8f, 0xdd, 0x4d, 0xd0,
		0xe2, 0x0f, 0xc6, 0xc8, 0xdc, 0xeb, 0x9b, 0x07, 0x2d, 0x71, 0x4f, 0x00, 0x5a, 0x00, 0x5a, 0x00,
		0x5a, 0x00, 0x5a, 0x00, 0x5a, 0x00, 0x5a, 0x00, 0x5a, 0x00, 0x5a, 0x92, 0x63, 0x3c, 0xf0, 0x02,
		0xc9, 0x6d, 0xc0, 0x2c, 0xb3, 0x8e, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2,
		0x00, 0xb2, 0x00, 0xb2, 0x00, 0xb2, 0x24, 0xc7, 0x58, 0x06, 0x9e, 0x08, 0xb9, 0xe4, 0x8f, 0x16,
		0xc4, 0x95, 0xce, 0xf5, 0x05, 0xc0, 0x05, 0xc0, 0x05, 0xc0, 0x05, 0xc0, 0x05, 0xc0, 0x05, 0xc0,
		0x05, 0xc0, 0xc5, 0x7a, 0xe0, 0x92, 0xe9, 0xf4, 0xa2, 0xc4, 0x05, 0x0a, 0x13, 0xed, 0x9b, 0x29,
		0x58, 0x98, 0xac, 0x8d, 0x97, 0xfc, 0x88, 0xa2, 0xaa, 0xa1, 0x39, 0x59, 0xcb, 0x56, 0xc1, 0x98,
		0xdf, 0xd9, 0xb3, 0x89, 0x8c, 0x2f, 0xce, 0x39, 0x0f, 0x65, 0x55, 0x4a, 0xe2, 0x6a, 0x35, 0xdf,
		0xb8, 0xa8, 0xf5, 0xd9, 0x18, 0x0e, 0x84, 0xb4, 0x70, 0xda, 0xf9, 0xe6, 0x3d, 0xcd, 0xb5, 0x9c,
		0x3f, 0x29, 0x16, 0xcb, 0x95, 0x62, 0x31, 0x57, 0x39, 0xae, 0xe4, 0x4e, 0x4b, 0xa5, 0x7c, 0x39,
		0x4f, 0x18, 0xfd, 0xea, 0x34, 0x82, 0x2e, 0x0b, 0x58, 0xf7, 0xd3, 0x78, 0xea, 0xc5, 0xb0, 0xdf,
		0xcf, 0x94, 0x44, 0x1b, 0xd2, 0xcb, 0x16, 0xeb, 0x63, 0x87, 0xb4, 0xa4, 0x42, 0x30, 0xec, 0x48,
		0x31, 0x05, 0x5d, 0x9f, 0xee, 0x07, 0xed, 0x26, 0xbf, 0x6b, 0x57, 0x7b, 0xfc, 0xca, 0xeb, 0xf1,
		0x76, 0x7d, 0xf0, 0x58, 0xbe, 0x89, 0xde, 0xb4, 0x7d, 0x31, 0x7d, 0xbf, 0x76, 0xb5, 0xfb, 0x77,
		0x93, 0xdf, 0x35, 0x86, 0xf2, 0x32, 0x60, 0xed, 0xe6, 0xf8, 0xad, 0xda, 0x37, 0xd1, 0x2b, 0x54,
		0xe3, 0x37, 0x40, 0x49, 0x66, 0xf3, 0x2b, 0x6c, 0x47, 0x4a, 0x32, 0x2f, 0xa9, 0xfe, 0xbb, 0xad,
		0xf5, 0x99, 0xf7, 0xb6, 0x48, 0xca, 0x66, 0x48, 0x24, 0x72, 0x63, 0xec, 0x8f, 0x67, 0xdd, 0xe5,
		0xba, 0x42, 0xc2, 0x69, 0xe0, 0x07, 0x1d, 0xdc, 0x30, 0x0a, 0x2f, 0x68, 0xe0, 0x84, 0x2e, 0xb1,
		0x23, 0x52, 0x6a, 0x66, 0x94, 0x99, 0x46, 0xcb, 0xaf, 0xc6, 0xd2, 0xeb, 0x51, 0xad, 0xea, 0x15,
		0x9f, 0xda, 0x27, 0x2a, 0x96, 0x65, 0xdd, 0x32, 0x4c, 0x2d, 0xbb, 0x6a, 0x85, 0x42, 0xdd, 0xd4,
		0xa9, 0x79, 0x92, 0xa2, 0xc9, 0xd7, 0x35, 0xe9, 0x64, 0x93, 0xad, 0x50, 0x37, 0x6d, 0xaa, 0x8b,
		0xd4, 0x08, 0xdc, 0xe6, 0xe2, 0xa1, 0x40, 0x34, 0x9c, 0xd9, 0x70, 0xbb, 0x5e, 0xb7, 0x1b, 0xb0,
		0x30, 0x54, 0x26, 0x1c, 0xb1, 0x27, 0x3d, 0xd1, 0x82, 0x22, 0x81, 0x56, 0xbb, 0xcb, 0xaa, 0x7c,
		0xd7, 0x54, 0xc7, 0x2e, 0xa8, 0xde, 0x5d, 0x4d, 0x5d, 0xbb, 0x94, 0xda, 0x77, 0x1d, 0xb5, 0xef,
		0x22, 0x6a, 0xdf, 0x15, 0xb4, 0xcb, 0x54, 0x28, 0xdf, 0x85, 0xd3, 0x58, 0x96, 0x55, 0x47, 0xb9,
		0xd5, 0x64, 0x19, 0xd5, 0x84, 0x0e, 0xcb, 0x90, 0x05, 0x50, 0x5b, 0xd5, 0x54, 0x4b, 0xb5, 0x52,
		0xc5, 0x55, 0x48, 0xa1, 0xeb, 0xa1, 0xeb, 0xa1, 0xeb, 0xa3, 0xb7, 0x55, 0x5d, 0xf5, 0x52, 0x1f,
		0xa0, 0xa4, 0x02, 0x96, 0x9a, 0x00, 0xa6, 0x36, 0xe5, 0xa3, 0x53, 0x09, 0xd1, 0x28, 0x23, 0xdd,
		0x4a, 0x89, 0x4c, 0x39, 0x91, 0x29, 0x29, 0x32, 0x65, 0xb5, 0x1d, 0x0e, 0x2d, 0x6d, 0x61, 0x63,
		0xb1, 0xdc, 0xf3, 0x81, 0x26, 0x2d, 0xb3, 0x00, 0x6f, 0x34, 0xe4, 0x10, 0x9c, 0x8d, 0x8d, 0x9e,
		0xcc, 0x80, 0x1a, 0x1d, 0xe0, 0xaf, 0x23, 0xff, 0x58, 0xd4, 0x38, 0xf6, 0x89, 0x39, 0x38, 0xd1,
		0xd8, 0xc6, 0xa5, 0x27, 0x25, 0x0b, 0x84, 0xf6, 0x44, 0x8d, 0xce, 0xc1, 0xc1, 0x6d, 0xce, 0x3d,
		0x6d, 0xbd, 0xdc, 0xe6, 0xdd, 0xd3, 0x56, 0x74, 0x99, 0x9f, 0xfc, 0x88, 0xae, 0x0b, 0xb7, 0x39,
		0xb7, 0x38, 0xbb, 0x2e, 0xdd, 0xe6, 0xdc, 0x52, 0xeb, 0xf0, 0xcf, 0x3f, 0x3f, 0x1e, 0xfe, 0x38,
		0x1e, 0xad, 0x7f, 0xa3, 0xbe, 0xed, 0xce, 0x96, 0xce, 0xa9, 0x68, 0x5c, 0xd5, 0xff, 0x4b, 0x36,
		0x1f, 0x7f, 0x51, 0x4e, 0xc8, 0x7f, 0x34, 0xce, 0xc8, 0x36, 0xed, 0xd5, 0xd1, 0x28, 0xa7, 0x32,
		0x94, 0x53, 0x2a, 0xe5, 0xe4, 0xb9, 0xbd, 0xaa, 0xfb, 0xb5, 0xf5, 0x23, 0xff, 0xa1, 0x38, 0x3a,
		0x3b, 0xfc, 0x51, 0x19, 0xbd, 0xfd, 0xf0, 0x65, 0xd9, 0xd7, 0xf2, 0x1f, 0x2a, 0xa3, 0xb3, 0x15,
		0xbf, 0x29, 0x8f, 0xce, 0xde, 0xf9, 0x8c, 0xd2, 0xe8, 0x20, 0xf1, 0xd5, 0xf1, 0xe7, 0x85, 0x55,
		0x37, 0x14, 0x57, 0xdc, 0x70, 0xbc, 0xea, 0x86, 0xe3, 0x15, 0x37, 0xac, 0xec, 0x52, 0x61, 0xc5,
		0x0d, 0xa5, 0xd1, 0x4b, 0xe2, 0xfb, 0x07, 0xcb, 0xbf, 0x5a, 0x1e, 0x1d, 0xbe, 0xac, 0xfa, 0x5d,
		0x65, 0xf4, 0x72, 0x76, 0x08, 0x55, 0xfd, 0x7e, 0x55, 0x0d, 0xf1, 0xa4, 0x17, 0xcf, 0xed, 0x33,
		0x5c, 0x7b, 0x76, 0xf7, 0x13, 0x7b, 0xd9, 0xeb, 0x3d, 0x57, 0xdb, 0x5e, 0xb6, 0xc2, 0x13, 0x0e,
		0x0a, 0x36, 0x0d, 0xf6, 0x0c, 0xce, 0xe1, 0x2c, 0x6e, 0x4f, 0xb1, 0xf3, 0x4e, 0x6d, 0x84, 0x9e,
		0xfa, 0x48, 0x3c, 0x92, 0x88, 0x3b, 0xb5, 0x91, 0x75, 0x9b, 0x4e, 0xb4, 0xe2, 0x45, 0xaa, 0x6d,
		0x71, 0x3a, 0x4a, 0xf6, 0xd0, 0xd6, 0x0d, 0x28, 0xd9, 0x4c, 0x19, 0xa4, 0x5f, 0xc2, 0xe9, 0xee,
		0x4c, 0x29, 0x0b, 0xaa, 0x64, 0x40, 0xf5, 0xdc, 0xa7, 0x1b, 0xfc, 0xf5, 0x87, 0x6e, 0xbd, 0x3b,
		0xd6, 0x1c, 0xe4, 0x4d, 0x07, 0x57, 0xcd, 0xa0, 0xa6, 0x58, 0x3d, 0xef, 0x5f, 0x2d, 0xeb, 0xcd,
		0xd3, 0xfb, 0x47, 0x7b, 0x8d, 0x91, 0x4e, 0xb9, 0x3d, 0xbe, 0xd1, 0x36, 0x78, 0xca, 0xed, 0xee,
		0xd7, 0x9d, 0xa5, 0xc2, 0x9a, 0x37, 0x6e, 0xb0, 0x73, 0xa4, 0x66, 0x67, 0x68, 0xd3, 0x9d, 0x1f,
		0x65, 0x3b, 0x3b, 0xca, 0x76, 0x6e, 0x94, 0xed, 0xcc, 0xe8, 0xd5, 0x21, 0x69, 0xb7, 0x7f, 0x9d,
		0x99, 0x32, 0x70, 0xa7, 0xcb, 0x38, 0xe5, 0xbc, 0xc5, 0xc5, 0x00, 0x17, 0x1e, 0x97, 0x72, 0xc8,
		0x37, 0xdb, 0xb0, 0xdd, 0x78, 0x63, 0x56, 0xc5, 0x06, 0xac, 0xda, 0x8d, 0x56, 0x55, 0x1b, 0xaa,
		0xca, 0x37, 0x4e, 0x95, 0x6f, 0x90, 0x2a, 0xdf, 0x08, 0xa5, 0xc5, 0x49, 0x1b, 0x6f, 0x60, 0xbe,
		0x7a, 0xa4, 0xbb, 0x4c, 0x48, 0x2e, 0x9f, 0x37, 0x8b, 0xb2, 0x8b, 0x2d, 0xd0, 0x06, 0xac, 0xc4,
		0xa9, 0x4f, 0xbb, 0xf2, 0xc9, 0x0b, 0x15, 0x88, 0xe0, 0xec, 0x05, 0xab, 0x5f, 0xeb, 0xed, 0xab,
		0xf1, 0xff, 0xae, 0xff, 0x77, 0x59, 0xdb, 0x54, 0x0c, 0x27, 0xf5, 0x84, 0x42, 0x25, 0x4e, 0x45,
		0xc5, 0xe1, 0x73, 0xe7, 0xc7, 0x7f, 0x5c, 0x5e, 0xb4, 0xeb, 0x97, 0x7f, 0x94, 0xdb, 0x37, 0x17,
		0xf5, 0xcf, 0xd5, 0xab, 0x6b, 0xc7, 0x86, 0x68, 0x41, 0xd5, 0x6f, 0x59, 0xbf, 0xf8, 0xfd, 0xea,
		0xba, 0x7a, 0x5d, 0x6b, 0x5f, 0x5d, 0x7e, 0xcd, 0xe4, 0x0b, 0xce, 0xa6, 0xb1, 0x98, 0xe9, 0x69,
		0x7c, 0x15, 0xd6, 0x6f, 0x37, 0xe7, 0xd7, 0x99, 0x7d, 0xcf, 0x9d, 0x59, 0x8e, 0x99, 0x9d, 0xbc,
		0xf3, 0xea, 0xa7, 0xda, 0x79, 0xed, 0x4b, 0x96, 0x27, 0xf1, 0xaa, 0x79, 0x5d, 0x6b, 0x5f, 0x36,
		0xce, 0xeb, 0x9f, 0xff, 0x37, 0x59, 0x92, 0x99, 0x14, 0xd4, 0xc2, 0x58, 0xe1, 0xfc, 0x71, 0x79,
		0x7e, 0x95, 0x51, 0x49, 0x2d, 0xee, 0x82, 0xa4, 0x4e, 0xde, 0xf3, 0xeb, 0x79, 0xe3, 0xff, 0xae,
		0x2e, 0x6b, 0x9f, 0x77, 0x60, 0x29, 0x16, 0xb3, 0x0d, 0xe1, 0xfe, 0xb8, 0xbc, 0xc8, 0xac, 0x94,
		0x66, 0x78, 0x15, 0xfe, 0x71, 0x79, 0x91, 0xf1, 0x65, 0x18, 0x59, 0x8b, 0x5a, 0x46, 0xe5, 0x73,
		0x8e, 0x62, 0xa8, 0x04, 0xdf, 0x1b, 0x3d, 0xa1, 0x45, 0xed, 0x77, 0xc1, 0xd6, 0x4c, 0xb4, 0x35,
		0x93, 0x22, 0xd0, 0x60, 0x8d, 0x6d, 0x93, 0x3d, 0x85, 0x63, 0x15, 0xa7, 0x12, 0x4c, 0xe1, 0xf9,
		0x4d, 0xb7, 0xdb, 0x9f, 0x7e, 0x57, 0x5f, 0xe9, 0xee, 0x7d, 0xba, 0x5d, 0xfa, 0xf7, 0x8e, 0x6a,
		0x4a, 0xc9, 0x4b, 0x2d, 0x71, 0xce, 0x5a, 0x5b, 0x69, 0x3f, 0xd9, 0xf7, 0x7b, 0x9f, 0xd0, 0xfe,
		0x5a, 0x04, 0x7f, 0xfe, 0x8d, 0x5f, 0x0c, 0xe3, 0xba, 0xc3, 0xb7, 0xee, 0xb0, 0xfd, 0xfc, 0x25,
		0x57, 0x77, 0xfd, 0x27, 0xdd, 0x8e, 0x72, 0x71, 0x86, 0x4c, 0xfe, 0xfa, 0xa4, 0xdd, 0xeb, 0x6e,
		0x4b, 0x7c, 0xcb, 0x2f, 0x86, 0xe3, 0x7d, 0x1b, 0x91, 0xef, 0xde, 0x39, 0x59, 0x67, 0x87, 0x24,
		0xdd, 0x4e, 0xc8, 0xba, 0x3b, 0x1e, 0xa9, 0x77, 0x36, 0x52, 0xef, 0x60, 0xa4, 0xde, 0xa9, 0xd8,
		0x4c, 0xb0, 0xdf, 0xbb, 0xd1, 0x17, 0xcb, 0xc6, 0xfb, 0x87, 0xf0, 0xad, 0x54, 0xbd, 0x77, 0x04,
		0xd7, 0xdb, 0xe5, 0x5e, 0x7b, 0x7b, 0x2e, 0xcd, 0x76, 0xdc, 0x66, 0xdb, 0x6f, 0x69, 0xb7, 0xdb,
		0x36, 0xde, 0x5e, 0xdb, 0x78, 0x3b, 0x6d, 0xe3, 0xed, 0x33, 0xb5, 0xd0, 0x60, 0xdd, 0x5d, 0x69,
		0xc7, 0xbb, 0xbf, 0x0f, 0xd8, 0xbd, 0x27, 0xfd, 0x20, 0x7d, 0xa4, 0xc6, 0xdc, 0x33, 0x88, 0xc3,
		0x35, 0x72, 0x08, 0xd7, 0x40, 0xb8, 0x86, 0x96, 0x85, 0x31, 0x07, 0xbd, 0x36, 0x49, 0xf2, 0xa1,
		0x24, 0xa9, 0xc7, 0x86, 0x49, 0x3c, 0x52, 0x47, 0x37, 0xa9, 0x58, 0x36, 0x6a, 0x97, 0x8f, 0xaa,
		0x65, 0xa4, 0x7c, 0x39, 0x29, 0x5f, 0x56, 0xca, 0x97, 0xd7, 0x86, 0x6e, 0x82, 0x94, 0x92, 0xb3,
		0x69, 0x92, 0x0c, 0x47, 0x55, 0x2e, 0x8c, 0x57, 0x63, 0xa5, 0x26, 0x6a, 0x5e, 0x4d, 0x8a, 0x0b,
		0x65, 0x29, 0x2d, 0x54, 0xa6, 0xb0, 0xd0, 0x93, 0xb2, 0x42, 0x75, 0x8a, 0x0a, 0x6d, 0x29, 0x29,
		0xb4, 0xa5, 0xa0, 0xd0, 0x96, 0x72, 0xc2, 0xec, 0xb1, 0x14, 0x65, 0x29, 0x24, 0x74, 0x25, 0x2e,
		0x50, 0x79, 0x06, 0x58, 0xf9, 0x59, 0xdf, 0x2d, 0x4b, 0x38, 0xd0, 0x52, 0x31, 0x84, 0x3a, 0x4e,
		0xa5, 0x6e, 0x5d, 0xa2, 0x80, 0x96, 0xa9, 0x63, 0x2c, 0x1b, 0xa0, 0x2e, 0x4f, 0xa5, 0x1d, 0x86,
		0x09, 0x86, 0x09, 0x86, 0x09, 0xb6, 0xd4, 0x04, 0x7b, 0xa1, 0x2b, 0x86, 0x0f, 0x77, 0x2c, 0x50,
		0x68, 0x7f, 0x15, 0xe4, 0x19, 0x75, 0x9a, 0x9e, 0xb8, 0x57, 0x97, 0x94, 0x49, 0xe1, 0x01, 0xe8,
		0x6f, 0x5c, 0x68, 0x48, 0x09, 0xa9, 0x27, 0x8f, 0xde, 0x24, 0x76, 0x5b, 0xc3, 0x73, 0xbf, 0x06,
		0x5e, 0x47, 0x72, 0x5f, 0x7c, 0xe1, 0xf7, 0x3c, 0xda, 0x28, 0x54, 0x77, 0x8a, 0x5e, 0x61, 0x02,
		0xcf, 0x6f, 0xde, 0xd3, 0xd6, 0x4d, 0x55, 0xb1, 0x70, 0x5a, 0x3c, 0x2d, 0x57, 0x0a, 0xa7, 0xa5,
		0x2d, 0x9a, 0x33, 0x4b, 0x4e, 0xed, 0x6f, 0x27, 0xd2, 0x2a, 0xaa, 0x84, 0x5a, 0x45, 0x60, 0x2d,
		0x60, 0x2d, 0x60, 0x2d, 0x60, 0x2d, 0x60, 0x2d, 0x60, 0x2d, 0x60, 0x2d, 0x60, 0xad, 0xcc, 0x61,
		0xad, 0x2c, 0x27, 0x67, 0x99, 0xc5, 0x9c, 0xc5, 0x57, 0x47, 0xaf, 0x11, 0x17, 0x9b, 0x24, 0xc8,
		0xda, 0xd1, 0xd8, 0xdf, 0x9f, 0x0d, 0xa7, 0xc2, 0xa4, 0x2c, 0x52, 0x06, 0x57, 0x4c, 0xb6, 0xab,
		0xaf, 0xcf, 0xb6, 0x20, 0x27, 0x8b, 0x17, 0xba, 0xd3, 0xf1, 0x49, 0x1b, 0xeb, 0x33, 0x7d, 0x00,
		0x02, 0x7d, 0xf4, 0xe2, 0x7f, 0x04, 0xfa, 0xa4, 0x54, 0x22, 0xe9, 0xf3, 0xb2, 0x84, 0x6e, 0xc8,
		0xee, 0xa7, 0x2f, 0xb8, 0x69, 0x52, 0x96, 0xd7, 0x67, 0x19, 0x0e, 0xf9, 0x41, 0x46, 0x16, 0xdd,
		0x44, 0x1a, 0x21, 0x3f, 0x6a, 0x16, 0xe0, 0x9c, 0x3d, 0x55, 0x51, 0x56, 0x4b, 0x69, 0x39, 0x2d,
		0x45, 0x65, 0xb4, 0x36, 0x8e, 0xc4, 0x83, 0xff, 0x0b, 0xfe, 0x2f, 0xc3, 0xfe, 0x2f, 0x55, 0x65,
		0xaf, 0x9c, 0x07, 0x36, 0xf1, 0x79, 0x29, 0x2f, 0x9f, 0x37, 0x7d, 0x2e, 0x6a, 0xa5, 0xda, 0xa5,
		0x10, 0x74, 0x29, 0x06, 0xed, 0x0a, 0x42, 0xbb, 0xa2, 0xd0, 0xae, 0x30, 0x14, 0x3b, 0x89, 0xac,
		0xaf, 0x95, 0xaa, 0xd2, 0xa1, 0xfe, 0x56, 0x11, 0xa8, 0x2c, 0x96, 0xaa, 0xd6, 0xc1, 0x3e, 0xfb,
		0xa3, 0xa1, 0x96, 0x97, 0x0e, 0x87, 0xbb, 0x26, 0x0d, 0x9b, 0x78, 0xbc, 0x26, 0x07, 0x7c, 0xfc,
		0x7c, 0x8d, 0x4e, 0x5d, 0xc5, 0x2b, 0x6e, 0x71, 0x4a, 0xbd, 0xa7, 0xad, 0x9f, 0x52, 0x5d, 0x8e,
		0x7a, 0xd2, 0xb9, 0xb5, 0xb4, 0x6c, 0x45, 0xcb, 0x2a, 0x5b, 0xa1, 0xb4, 0x46, 0xc1, 0xbc, 0x5a,
		0x53, 0x5b, 0xab, 0x60, 0x7e, 0x75, 0x69, 0xaf, 0x59, 0x10, 0x37, 0xa6, 0xb4, 0x76, 0x81, 0x3a,
		0x49, 0x52, 0x51, 0x61, 0x5b, 0xaa, 0xc4, 0x08, 0x31, 0x3e, 0x98, 0x3c, 0x15, 0xfc, 0x00, 0xfc,
		0x00, 0xfc, 0x60, 0x57, 0xf9, 0xc1, 0xc0, 0x93, 0xdf, 0x67, 0x2e, 0x7a, 0x57, 0xa1, 0x3e, 0x98,
		0xd7, 0x09, 0xf9, 0xa2, 0xc2, 0x67, 0xd6, 0xc4, 0xf0, 0x61, 0x3c, 0x1a, 0x23, 0x94, 0x42, 0x32,
		0x57, 0x21, 0x67, 0xc9, 0xce, 0x71, 0x24, 0x4a, 0x47, 0xaf, 0x1b, 0x3e, 0x2a, 0x2a, 0x56, 0x6d,
		0x4b, 0x1c, 0x84, 0x12, 0x58, 0xa6, 0x0e, 0x86, 0x69, 0x85, 0x5d, 0x6a, 0x60, 0xd6, 0xf6, 0x46,
		0x9c, 0x24, 0x04, 0x7d, 0x93, 0xbd, 0xbc, 0x5f, 0x84, 0x4c, 0x84, 0x57, 0xd3, 0x26, 0x10, 0xd6,
		0xa2, 0x60, 0xce, 0xec, 0x88, 0x3b, 0x29, 0x6e, 0x1c, 0x78, 0x52, 0x44, 0xe4, 0x09, 0x05, 0x80,
		0x46, 0xe4, 0x49, 0xca, 0x75, 0xbe, 0x41, 0xe4, 0x49, 0x51, 0x65, 0xe8, 0x49, 0x11, 0xb1, 0x27,
		0x88, 0x3d, 0xb1, 0x85, 0x63, 0x22, 0xf6, 0x04, 0xb1, 0x27, 0xd4, 0xae, 0x24, 0xc4, 0x9e, 0x20,
		0xf6, 0xe4, 0xe7, 0x0f, 0x42, 0xec, 0x89, 0x8a, 0x07, 0xc2, 0xb7, 0xac, 0x5b, 0x41, 0x68, 0x57,
		0x14, 0xda, 0x15, 0x86, 0x3a, 0x8f, 0xe3, 0x3e, 0x62, 0x4f, 0x10, 0x7b, 0xa2, 0xf8, 0xe1, 0x88,
		0x3d, 0x21, 0x5a, 0x71, 0x8b, 0x53, 0x8a, 0xd8, 0x13, 0x3b, 0xe6, 0x16, 0xb1, 0x27, 0xef, 0x98,
		0x08, 0xc4, 0x9e, 0xfc, 0xa4, 0x31, 0xc4, 0x9e, 0xac, 0x89, 0x0f, 0x10, 0x7b, 0x02, 0x7e, 0x00,
		0x7e, 0xb0, 0xd3, 0xfc, 0x00, 0xb1, 0x27, 0x5b, 0xed, 0x84, 0xb2, 0x28, 0xf6, 0xa4, 0x38, 0xdb,
		0x93, 0x2f, 0x22, 0xfa, 0xc4, 0x38, 0x10, 0x43, 0xf4, 0x09, 0xad, 0xa8, 0xeb, 0x8c, 0x3f, 0x29,
		0x22, 0x00, 0x45, 0xe5, 0xb4, 0xd9, 0x10, 0x81, 0xc2, 0x45, 0x97, 0x3d, 0xa5, 0x0f, 0x3f, 0x89,
		0x6e, 0x4f, 0x17, 0x7b, 0x92, 0x43, 0xec, 0x09, 0x35, 0x50, 0xde, 0xb5, 0xd8, 0x93, 0xd4, 0x80,
		0x35, 0x9e, 0xf7, 0x3e, 0xf3, 0x7a, 0x01, 0xeb, 0xa5, 0x99, 0xf4, 0x19, 0xe6, 0x4c, 0xe1, 0x9f,
		0x76, 0x2e, 0xa7, 0x5a, 0xe5, 0xe3, 0xc7, 0x08, 0xba, 0x1c, 0x45, 0x0b, 0xcd, 0x02, 0x85, 0x91,
		0x2e, 0x14, 0x60, 0xa3, 0xad, 0xff, 0x8d, 0x83, 0xd5, 0x0a, 0x50, 0x18, 0x50, 0x18, 0xef, 0xea,
		0x65, 0xfa, 0x60, 0x35, 0x7e, 0x3f, 0x50, 0x10, 0xa5, 0xc6, 0x53, 0x3b, 0x6e, 0x36, 0x74, 0x7b,
		0x21, 0x3c, 0x8d, 0xce, 0x4d, 0x85, 0xf0, 0x34, 0xc5, 0x6e, 0xa5, 0x58, 0x6e, 0x86, 0x5c, 0xc8,
		0xf2, 0x26, 0x59, 0xbd, 0x67, 0xab, 0x68, 0x83, 0x9a, 0x48, 0x8a, 0xf6, 0x90, 0x15, 0xb8, 0x50,
		0x54, 0xee, 0x11, 0xab, 0xf6, 0xaa, 0x2b, 0xde, 0x03, 0xd6, 0xb1, 0x2f, 0xa8, 0x62, 0xb7, 0x44,
		0xe5, 0x9e, 0xae, 0xae, 0x29, 0xd0, 0xb7, 0x17, 0xa6, 0x65, 0x56, 0x0c, 0x39, 0xf1, 0x5a, 0x54,
		0x3e, 0x8f, 0x14, 0x68, 0xd1, 0x93, 0xfe, 0x03, 0xef, 0xb8, 0xb3, 0x7c, 0xad, 0x0a, 0xea, 0xb2,
		0x26, 0x9e, 0x08, 0x50, 0x02, 0x50, 0x02, 0x50, 0x92, 0x4a, 0x6e, 0xee, 0x7c, 0xbf, 0xcf, 0x3c,
		0xa1, 0x00, 0x95, 0xe4, 0xf3, 0x16, 0x2b, 0xa1, 0x4e, 0x7f, 0x18, 0x4a, 0x16, 0xb8, 0x7d, 0x1e,
		0x2a, 0x38, 0xaf, 0xb3, 0xf0, 0x34, 0x28, 0x1f, 0x28, 0x1f, 0x28, 0x9f, 0x54, 0x72, 0xa3, 0xa8,
		0x68, 0xac, 0x8a, 0x62, 0xb1, 0xca, 0x8a, 0xc4, 0x6e, 0x49, 0x71, 0xd8, 0xd6, 0x26, 0x43, 0xa5,
		0xb2, 0x18, 0xec, 0xd6, 0x14, 0x81, 0x6d, 0x61, 0xa3, 0xdc, 0xee, 0x8d, 0x72, 0x12, 0x20, 0x91,
		0x6e, 0x4b, 0x32, 0xa9, 0xf9, 0x52, 0x6c, 0x4d, 0x02, 0x3a, 0x00, 0x3a, 0x00, 0x3a, 0xc0, 0x99,
		0x0a, 0x67, 0x2a, 0x9c, 0xa9, 0x70, 0xa6, 0xee, 0xa6, 0x33, 0xb5, 0xef, 0x77, 0xbc, 0xbe, 0x3b,
		0xb6, 0x4d, 0x9b, 0x63, 0x90, 0xb9, 0x67, 0x01, 0x88, 0x00, 0x88, 0x00, 0x88, 0xa4, 0x06, 0x22,
		0xc7, 0x05, 0x05, 0x40, 0xa4, 0x02, 0x20, 0x02, 0x20, 0xb2, 0x23, 0x40, 0x44, 0xf5, 0x49, 0x5c,
		0xc0, 0x0f, 0x1a, 0xf8, 0xf1, 0xc0, 0xba, 0x9b, 0xe3, 0x8e, 0xf1, 0x43, 0x00, 0x38, 0x00, 0x38,
		0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x56, 0x0d, 0xb3, 0x60,
		0x4f, 0xd2, 0xfd, 0xee, 0x2b, 0x88, 0x5e, 0x8f, 0x9f, 0x04, 0xe8, 0x01, 0xe8, 0x01, 0xe8, 0x91,
		0x4a, 0x6e, 0xf8, 0x40, 0x65, 0xb4, 0xc6, 0xe9, 0x06, 0xcf, 0x98, 0xbe, 0x93, 0x71, 0xf8, 0xa1,
		0x38, 0x92, 0x25, 0x31, 0x46, 0x27, 0x0a, 0x9e, 0xa5, 0x2a, 0x52, 0x23, 0x7e, 0xe0, 0x76, 0x44,
		0xb8, 0xc4, 0xe6, 0x4d, 0xc5, 0x10, 0xaa, 0x8c, 0x78, 0x89, 0x9f, 0xba, 0x2d, 0x91, 0x2f, 0x9b,
		0x01, 0x05, 0x45, 0x50, 0x53, 0xed, 0x62, 0x2d, 0xef, 0xd8, 0x62, 0xf5, 0xdc, 0x5e, 0xd5, 0xfd,
		0xda, 0xfa, 0x91, 0xff, 0x50, 0x1c, 0x9d, 0x1d, 0xfe, 0xa8, 0x8c, 0xde, 0x7e, 0xf8, 0xb2, 0xec,
		0x6b, 0xf9, 0x0f, 0x95, 0xd1, 0xd9, 0x8a, 0xdf, 0x94, 0x47, 0x67, 0xef, 0x7c, 0x46, 0x69, 0x74,
		0x90, 0xf8, 0xea, 0xf8, 0xf3, 0xc2, 0xaa, 0x1b, 0x8a, 0x2b, 0x6e, 0x38, 0x5e, 0x75, 0xc3, 0xf1,
		0x8a, 0x1b, 0x56, 0x76, 0xa9, 0xb0, 0xe2, 0x86, 0xd2, 0xe8, 0x25, 0xf1, 0xfd, 0x83, 0xe5, 0x5f,
		0x2d, 0x8f, 0x0e, 0x5f, 0x56, 0xfd, 0xae, 0x32, 0x7a, 0x39, 0x3b, 0xdc, 0x05, 0xd5, 0x05, 0xb1,
		0xa2, 0x17, 0x2b, 0xf3, 0x8a, 0x3c, 0x93, 0x4c, 0xd3, 0x0f, 0xf8, 0xfd, 0x06, 0xbe, 0xa4, 0x57,
		0x6e, 0x15, 0x3d, 0x07, 0x2c, 0x13, 0x2c, 0x13, 0x2c, 0x33, 0x95, 0xdc, 0xdc, 0xdd, 0x0f, 0xdc,
		0x68, 0x15, 0xb9, 0x93, 0xac, 0x44, 0x1b, 0xa6, 0xdb, 0x53, 0x91, 0x5e, 0x6f, 0xc3, 0x74, 0x7a,
		0x94, 0x1a, 0xcc, 0x93, 0x7e, 0xe0, 0xf2, 0xae, 0x2a, 0x45, 0x36, 0x7b, 0x1c, 0xf4, 0x19, 0xf4,
		0x19, 0xf4, 0x99, 0x49, 0xdf, 0x10, 0x4e, 0x39, 0x91, 0x12, 0x28, 0x9c, 0x72, 0xd2, 0x6b, 0xe0,
		0xb2, 0x99, 0x3d, 0x31, 0x45, 0x2a, 0x57, 0x3d, 0x99, 0xd0, 0xe4, 0x50, 0x08, 0xd6, 0x77, 0x99,
		0xe8, 0x78, 0x83, 0x70, 0xd8, 0x4f, 0x37, 0x16, 0xaf, 0x19, 0xd0, 0x97, 0x3d, 0x0d, 0x79, 0xd2,
		0xf4, 0x9a, 0x7a, 0xe4, 0x49, 0x4b, 0xb9, 0xfa, 0x53, 0xe7, 0x49, 0x8b, 0xc4, 0x3c, 0xdc, 0x1c,
		0x3b, 0xcf, 0x1e, 0x84, 0x62, 0x9e, 0x40, 0xcd, 0x3b, 0x85, 0x9a, 0x37, 0x2e, 0xe6, 0x19, 0xad,
		0x1c, 0x75, 0xd5, 0x3c, 0xa7, 0xcf, 0xb3, 0xac, 0x9c, 0x67, 0x0e, 0xe5, 0x3c, 0x0d, 0x2f, 0x5c,
		0x6d, 0x0b, 0x58, 0xdb, 0x42, 0xde, 0x6c, 0x41, 0x6f, 0xb8, 0xb0, 0x95, 0x2d, 0xf0, 0x57, 0x88,
		0xad, 0xa4, 0x6a, 0x6f, 0x42, 0x8a, 0x55, 0x54, 0xef, 0x55, 0xbc, 0xec, 0x37, 0x86, 0xb2, 0x14,
		0x6a, 0x40, 0xaf, 0x3a, 0xd0, 0xa5, 0x16, 0xb4, 0xab, 0x07, 0xed, 0x6a, 0x42, 0xbb, 0xba, 0x50,
		0xa3, 0x36, 0x14, 0xa9, 0x0f, 0xe5, 0x6a, 0xe4, 0x15, 0x37, 0xa8, 0xae, 0xfe, 0xb3, 0xaf, 0xa9,
		0x02, 0xd8, 0x5b, 0xe5, 0xa2, 0xb8, 0xe8, 0xa1, 0xf2, 0x8a, 0x60, 0x3a, 0x95, 0x0d, 0x8d, 0xd2,
		0xd1, 0xad, 0x7c, 0xc8, 0x94, 0x10, 0x99, 0x32, 0x22, 0x53, 0x4a, 0x6a, 0x95, 0x93, 0x62, 0x25,
		0x15, 0x8f, 0xc2, 0xb5, 0x0e, 0xdd, 0xb2, 0x20, 0xf7, 0xbc, 0xcb, 0x84, 0xe4, 0xf2, 0x39, 0xfd,
		0x59, 0xfc, 0x77, 0xe1, 0x18, 0x0d, 0x75, 0x4f, 0x9d, 0xfa, 0xb4, 0xeb, 0x9f, 0xbc, 0x50, 0xe3,
		0xd2, 0x9a, 0x0d, 0xd4, 0xf5, 0xcd, 0xc5, 0x45, 0xed, 0xbc, 0x5d, 0xbb, 0xf8, 0x5c, 0xbd, 0xbc,
		0xba, 0x39, 0xaf, 0x5e, 0xd7, 0x1b, 0x17, 0xed, 0xeb, 0xff, 0x5d, 0xd6, 0x1c, 0x9d, 0xb5, 0x63,
		0x43, 0xe5, 0x45, 0x97, 0xe7, 0xff, 0xfc, 0xd0, 0xf6, 0xe4, 0x85, 0xa1, 0xbb, 0x6a, 0x5e, 0xd7,
		0xda, 0x97, 0x8d, 0xf3, 0xfa, 0xe7, 0xff, 0xb5, 0xa3, 0x61, 0x74, 0xb4, 0x35, 0x3c, 0xd2, 0xf2,
		0xe4, 0xd6, 0xce, 0x54, 0xd3, 0xb5, 0x0b, 0xac, 0x29, 0xae, 0x9e, 0xf7, 0x4a, 0x01, 0xd3, 0xee,
		0xb2, 0x2c, 0xdb, 0x8e, 0x98, 0x7e, 0x18, 0x4e, 0x7f, 0xaa, 0x28, 0xaa, 0xa7, 0x6e, 0x36, 0x54,
		0x1c, 0xb3, 0x0b, 0x87, 0x77, 0xb2, 0xff, 0x18, 0x6a, 0xa0, 0xcc, 0xd3, 0x07, 0x5b, 0x4e, 0x9a,
		0x51, 0xe1, 0x16, 0xa4, 0x19, 0xa4, 0x59, 0xad, 0x02, 0x9e, 0xac, 0x7c, 0x7d, 0xb4, 0x79, 0xfa,
		0x7c, 0x3d, 0xc4, 0x39, 0x0f, 0xe2, 0x0c, 0xe2, 0x0c, 0xe2, 0x6c, 0x33, 0x71, 0x56, 0xad, 0xb0,
		0xe2, 0x07, 0x07, 0xec, 0xc1, 0x97, 0xcc, 0x65, 0xa2, 0x3b, 0xf0, 0x79, 0x94, 0x92, 0x58, 0x33,
		0xf1, 0x4c, 0xb4, 0xa8, 0x49, 0x70, 0xf4, 0x28, 0x37, 0xed, 0x4a, 0x8e, 0x42, 0xd9, 0xd1, 0x2a,
		0x3d, 0x2a, 0xe5, 0x47, 0xae, 0x04, 0xc9, 0x95, 0x21, 0xb9, 0x52, 0xd4, 0xeb, 0x85, 0x18, 0x69,
		0x5a, 0x39, 0xba, 0x94, 0xe5, 0x2a, 0xa5, 0xa9, 0x5f, 0xa2, 0x57, 0xe8, 0x4e, 0xdd, 0x72, 0xad,
		0x57, 0x85, 0x92, 0xa9, 0x52, 0x4a, 0x95, 0x6a, 0x46, 0xb5, 0x52, 0xab, 0x58, 0x63, 0xaa, 0xd6,
		0x98, 0xca, 0x35, 0xa6, 0x7a, 0xf5, 0xaa, 0x60, 0xcd, 0xaa, 0x98, 0x4c, 0x25, 0xc7, 0x0d, 0x91,
		0xe9, 0xe4, 0xc4, 0x42, 0x27, 0x52, 0xca, 0x6f, 0x95, 0x73, 0x8e, 0xa8, 0x39, 0x2a, 0x25, 0x6d,
		0x42, 0x59, 0x9b, 0x55, 0xda, 0xa6, 0x94, 0xb7, 0x71, 0x25, 0x6e, 0x5c, 0x99, 0x1b, 0x57, 0xea,
		0x34, 0xca, 0x9d, 0x48, 0xc9, 0xc7, 0xa3, 0xa9, 0x6d, 0x97, 0xff, 0x97, 0xeb, 0xb6, 0xcf, 0xbc,
		0x9e, 0x9e, 0x9d, 0xff, 0x5f, 0x62, 0xe4, 0x0a, 0x61, 0x9b, 0x97, 0xd3, 0x8d, 0xbe, 0x8f, 0x1f,
		0xa3, 0xcd, 0xb9, 0xa3, 0xd8, 0xf6, 0xec, 0x65, 0x43, 0x5a, 0x09, 0x24, 0x55, 0x71, 0xd8, 0xec,
		0xbb, 0x45, 0x54, 0x65, 0x58, 0xad, 0x25, 0x04, 0x2e, 0x89, 0x11, 0x0a, 0xc0, 0x08, 0xc0, 0x08,
		0xc0, 0x08, 0xc0, 0x08, 0xc6, 0x09, 0x61, 0xdc, 0xa0, 0x17, 0xd2, 0x2f, 0x9a, 0xb8, 0xcc, 0x7a,
		0x48, 0xbd, 0x5a, 0x68, 0xc9, 0xa1, 0x31, 0x92, 0x68, 0xd2, 0x10, 0xd8, 0x61, 0x10, 0x4c, 0x1b,
		0x06, 0x6b, 0x0c, 0x84, 0x35, 0x86, 0xc2, 0x1a, 0x83, 0x41, 0x6b, 0x38, 0x88, 0x0d, 0x88, 0x39,
		0xb2, 0xb9, 0x44, 0xbb, 0xbb, 0x62, 0xf8, 0x70, 0xc7, 0x02, 0x13, 0xcb, 0x7e, 0xf3, 0x0a, 0x14,
		0xa9, 0x9b, 0x56, 0x53, 0xb9, 0x22, 0xed, 0x1f, 0x33, 0x6a, 0x6e, 0x5f, 0x75, 0xa5, 0x8c, 0x2d,
		0xb3, 0xf0, 0x89, 0x6e, 0x28, 0xae, 0xcc, 0x91, 0xba, 0x1f, 0x1a, 0xaa, 0x48, 0x6c, 0x89, 0x06,
		0x5c, 0x14, 0x4d, 0xef, 0x09, 0xa2, 0xf9, 0x46, 0x34, 0x55, 0x57, 0x2c, 0xc9, 0x84, 0x8c, 0xee,
		0xed, 0x46, 0xab, 0xad, 0xbd, 0x6c, 0xbe, 0x1f, 0xa1, 0x8e, 0xa1, 0xdf, 0x52, 0x4d, 0x20, 0x2c,
		0xe2, 0xad, 0x55, 0xb0, 0x68, 0xb0, 0x68, 0xb0, 0x68, 0xb0, 0x68, 0xb0, 0x68, 0xc2, 0x75, 0xaf,
		0xa4, 0x22, 0xd2, 0xa6, 0x9a, 0x7e, 0x93, 0x4a, 0x4a, 0x9b, 0x8e, 0xfd, 0xce, 0xd1, 0x68, 0x4d,
		0x15, 0x9f, 0x36, 0x96, 0x81, 0x13, 0x83, 0x7d, 0x50, 0x5d, 0x5e, 0x24, 0x75, 0x47, 0xb6, 0xab,
		0x32, 0x55, 0x6a, 0x7a, 0x60, 0x72, 0xaa, 0x75, 0x94, 0x93, 0x49, 0xdd, 0x9b, 0x6d, 0xab, 0xa0,
		0xb5, 0x1d, 0x84, 0xd0, 0xb0, 0x4b, 0xc8, 0x0e, 0xe5, 0x5e, 0x86, 0x72, 0xb7, 0x52, 0xb9, 0xa3,
		0xe4, 0xd4, 0x36, 0x56, 0x32, 0x83, 0xa9, 0x53, 0x64, 0xea, 0x20, 0xfe, 0x5b, 0x59, 0x71, 0x6d,
		0xcb, 0x0c, 0x3f, 0x3c, 0xde, 0x5b, 0xd5, 0x12, 0x55, 0xf8, 0x9b, 0xa6, 0x44, 0x50, 0xbf, 0x6c,
		0x57, 0x6f, 0xa2, 0xa8, 0x28, 0xfd, 0xd1, 0xf4, 0xe7, 0xd1, 0xdb, 0x83, 0xfe, 0x6f, 0x3f, 0x50,
		0x99, 0x58, 0xca, 0xbc, 0xf4, 0x6c, 0xf7, 0xf9, 0xbc, 0xdf, 0xd9, 0x33, 0xe1, 0x46, 0x8b, 0x73,
		0xce, 0x43, 0x59, 0x95, 0x92, 0xe8, 0x4c, 0xe0, 0x37, 0x2e, 0x6a, 0x7d, 0xf6, 0xc0, 0xa2, 0xf4,
		0x16, 0x04, 0x9b, 0x2a, 0xce, 0x37, 0xef, 0x69, 0xae, 0xc5, 0xfc, 0x49, 0xb1, 0x58, 0xae, 0x14,
		0x8b, 0xb9, 0xca, 0x71, 0x25, 0x77, 0x5a, 0x2a, 0xe5, 0xcb, 0x79, 0x82, 0xad, 0x68, 0xa7, 0x11,
		0x74, 0x59, 0xc0, 0xba, 0x9f, 0xc6, 0x33, 0x2b, 0x86, 0xfd, 0xfe, 0x56, 0x0b, 0x28, 0xb1, 0xc2,
		0xb4, 0x4a, 0x51, 0x3a, 0x24, 0xa7, 0x61, 0x82, 0x61, 0x47, 0x8a, 0x29, 0x6b, 0xff, 0x74, 0x3f,
		0x68, 0x37, 0xf9, 0x5d, 0x7b, 0xbc, 0x46, 0xaf, 0x98, 0x6c, 0x5f, 0x4f, 0xfa, 0x5d, 0x9b, 0x7f,
		0xa7, 0xe9, 0x67, 0xed, 0xab, 0xc9, 0x3b, 0xb4, 0x9b, 0x93, 0x2e, 0xd7, 0x48, 0xce, 0x21, 0x8d,
		0x90, 0xe7, 0x82, 0x72, 0x4d, 0x18, 0x5d, 0x0b, 0x7a, 0x24, 0x49, 0xfd, 0x3c, 0x6b, 0x98, 0x63,
		0x27, 0x64, 0xf7, 0x63, 0x13, 0xe2, 0xf6, 0x79, 0x48, 0x91, 0x98, 0x69, 0xb1, 0x39, 0x64, 0x65,
		0x5a, 0xee, 0xca, 0x40, 0x56, 0xa6, 0xf4, 0x10, 0x13, 0x59, 0x99, 0x76, 0xd8, 0x5a, 0x69, 0xcf,
		0xca, 0x34, 0xaf, 0xbf, 0xe8, 0x52, 0x32, 0x2d, 0xb4, 0x8a, 0x7c, 0x4c, 0xb6, 0x29, 0x53, 0x33,
		0x4a, 0x95, 0x5a, 0xb9, 0x1a, 0x53, 0xb2, 0xc6, 0x94, 0xad, 0x31, 0xa5, 0x9b, 0x0d, 0x7f, 0x0f,
		0x59, 0x3e, 0x26, 0x2e, 0x42, 0xe9, 0x89, 0x0e, 0xdb, 0xa4, 0x90, 0x7e, 0xea, 0xb5, 0x3e, 0xdf,
		0x38, 0xb2, 0x32, 0x6d, 0x9b, 0xca, 0x36, 0xab, 0xba, 0x4d, 0xa9, 0x70, 0xe3, 0xaa, 0xdc, 0xb8,
		0x4a, 0x37, 0xae, 0xda, 0x69, 0x54, 0x3c, 0x91, 0xaa, 0x8f, 0x47, 0x13, 0x59, 0x99, 0x74, 0xab,
		0xc6, 0xb7, 0x59, 0x99, 0xe6, 0xcd, 0x0f, 0x12, 0x33, 0xad, 0xcb, 0xe3, 0x42, 0x03, 0xb9, 0x99,
		0x66, 0x2d, 0x67, 0x3c, 0x3d, 0x13, 0xc0, 0x02, 0xc0, 0x02, 0xc0, 0x02, 0xc0, 0x82, 0x79, 0x7e,
		0xf8, 0x56, 0xe9, 0x9b, 0x3b, 0x63, 0x3a, 0xeb, 0x80, 0x99, 0x23, 0xa6, 0x79, 0x1c, 0x31, 0xcd,
		0xb8, 0x69, 0x30, 0x6d, 0x22, 0xac, 0x31, 0x15, 0xd6, 0x98, 0x0c, 0x6b, 0x4c, 0x07, 0xad, 0x09,
		0x21, 0x36, 0x25, 0xc6, 0x4c, 0x4a, 0xdc, 0x30, 0x17, 0x5d, 0x66, 0x2e, 0x2b, 0xca, 0x9c, 0x33,
		0x72, 0xdc, 0x0d, 0x43, 0x22, 0x6e, 0x36, 0x25, 0x8b, 0x31, 0x73, 0x63, 0x83, 0xd9, 0xb1, 0xcb,
		0xfc, 0xd8, 0x62, 0x86, 0xac, 0x33, 0x47, 0xd6, 0x99, 0x25, 0xeb, 0xcc, 0x93, 0x19, 0x33, 0x65,
		0xc8, 0x5c, 0xc5, 0xa3, 0x6f, 0x2c, 0x33, 0x42, 0x42, 0x6f, 0xd0, 0xbb, 0x51, 0x57, 0xb2, 0x95,
		0x8a, 0xd9, 0x53, 0x94, 0x6f, 0xdd, 0xac, 0x63, 0xc3, 0xba, 0x23, 0xc7, 0x7b, 0x0c, 0x2c, 0x03,
		0xe2, 0x4c, 0xf9, 0xab, 0x19, 0x3a, 0x61, 0xe6, 0x7c, 0x4b, 0x78, 0x7a, 0x12, 0x40, 0x15, 0x00,
		0xa0, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0xa0, 0xb6, 0x06, 0x40, 0x99, 0xe2, 0xfd, 0x96, 0xf0, 0x7f,
		0xab, 0xfc, 0x00, 0x96, 0xf8, 0x03, 0xac, 0xf1, 0x0b, 0xd8, 0x64, 0xde, 0xec, 0x34, 0x73, 0xb6,
		0x99, 0x3b, 0x6b, 0xcd, 0x9e, 0xb5, 0xe6, 0xcf, 0x5a, 0x33, 0x68, 0xd6, 0x1c, 0x1a, 0x36, 0x8b,
		0xf6, 0xf8, 0x17, 0x12, 0x7a, 0x67, 0xc8, 0x85, 0x2c, 0x17, 0x6d, 0xd0, 0x39, 0x53, 0x2b, 0x75,
		0x62, 0x41, 0x57, 0xcc, 0x16, 0x3b, 0x78, 0xfb, 0xc7, 0x0e, 0x1d, 0xbc, 0x6f, 0x4b, 0x31, 0x04,
		0x4b, 0xe1, 0x4d, 0xa2, 0x5b, 0x96, 0x14, 0x4b, 0x48, 0xf4, 0xcb, 0xa2, 0xc4, 0xf4, 0x96, 0xa9,
		0xe7, 0x45, 0x51, 0xf7, 0x9e, 0x20, 0xea, 0x6b, 0x8a, 0xba, 0x99, 0xdc, 0x17, 0x99, 0x91, 0xfe,
		0x3d, 0xf4, 0x62, 0xdf, 0x58, 0xf2, 0x2e, 0xf3, 0xef, 0x6f, 0xb2, 0x94, 0x4c, 0xdf, 0xef, 0x78,
		0x7d, 0x97, 0x0b, 0xc9, 0x82, 0x9e, 0x47, 0x7b, 0x80, 0xeb, 0x97, 0x10, 0x75, 0x49, 0xdf, 0xe0,
		0x50, 0x81, 0x43, 0x05, 0x0e, 0x15, 0x38, 0x54, 0xe0, 0x50, 0x81, 0x43, 0xc5, 0x42, 0x87, 0xca,
		0x71, 0xc1, 0x22, 0x87, 0x4a, 0x05, 0x0e, 0x15, 0x38, 0x54, 0xe0, 0x50, 0x81, 0x43, 0x05, 0x0e,
		0x95, 0xad, 0x13, 0x75, 0x5b, 0xaa, 0x59, 0xc2, 0x8d, 0x02, 0x37, 0x0a, 0xdc, 0x28, 0xef, 0x76,
		0xa3, 0xcc, 0xd7, 0xb8, 0xb2, 0xcd, 0x8d, 0x62, 0x47, 0xfd, 0x2d, 0xb8, 0x51, 0xe0, 0x46, 0x81,
		0x1b, 0x05, 0x6e, 0x14, 0xb8, 0x51, 0xe0, 0x46, 0x59, 0xaa, 0x77, 0x2c, 0xb2, 0x53, 0xfb, 0x96,
		0x94, 0x14, 0x7b, 0xb5, 0x13, 0x96, 0x14, 0x57, 0x8a, 0x3b, 0xb4, 0x1b, 0xf5, 0x23, 0x63, 0x60,
		0x6d, 0x83, 0x08, 0xd8, 0x54, 0x64, 0x2b, 0xee, 0xd5, 0xae, 0xd4, 0x95, 0x04, 0xc5, 0xb2, 0x80,
		0x62, 0x95, 0x2d, 0xa6, 0x58, 0x65, 0x50, 0x2c, 0x50, 0x2c, 0x50, 0x2c, 0x50, 0x2c, 0x50, 0x2c,
		0x50, 0x2c, 0x8b, 0x29, 0x56, 0x19, 0x14, 0x6b, 0xab, 0x28, 0x16, 0xca, 0xd8, 0xee, 0x52, 0x15,
		0x67, 0x10, 0xce, 0x77, 0x12, 0x4e, 0x2c, 0x8b, 0x9d, 0xaa, 0xee, 0x0c, 0xfa, 0x6d, 0x8e, 0x7e,
		0x3f, 0x0c, 0xfa, 0xa1, 0x7b, 0xe7, 0x5b, 0x44, 0xba, 0xe3, 0x1e, 0x81, 0x6a, 0x83, 0x6a, 0x83,
		0x6a, 0x83, 0x6a, 0x83, 0x6a, 0x83, 0x6a, 0x5b, 0x46, 0xb5, 0xef, 0x7c, 0xbf, 0xcf, 0x3c, 0x61,
		0x13, 0xcb, 0xce, 0x03, 0x3c, 0x99, 0x01, 0x4f, 0xb2, 0x63, 0x19, 0x76, 0x92, 0x1d, 0x40, 0x27,
		0x40, 0x27, 0x40, 0x27, 0x40, 0x27, 0x40, 0x27, 0x40, 0x27, 0x1b, 0xcf, 0xd3, 0x9d, 0x58, 0x04,
		0x9c, 0x4a, 0x38, 0x4e, 0xf7, 0xe6, 0x0f, 0x8e, 0xd3, 0x6d, 0x03, 0xba, 0x49, 0x74, 0x0b, 0xc7,
		0xe9, 0xb6, 0x4d, 0x3b, 0x2f, 0x8a, 0x3a, 0x8e, 0xd3, 0xad, 0x2d, 0xea, 0x15, 0x88, 0xfa, 0x76,
		0xc0, 0x20, 0x7b, 0x7a, 0x81, 0x3d, 0x26, 0x53, 0x6e, 0x12, 0xd9, 0xb7, 0xcd, 0x4f, 0x22, 0xfb,
		0x70, 0x94, 0xc0, 0x51, 0x02, 0x47, 0x09, 0x1c, 0x25, 0x70, 0x94, 0xc0, 0x51, 0x02, 0x47, 0x09,
		0x1c, 0x25, 0x70, 0x94, 0xc0, 0x51, 0x02, 0xf6, 0x08, 0x47, 0x49, 0xd6, 0x44, 0xbd, 0x50, 0x42,
		0xc2, 0x21, 0xb8, 0x4a, 0xe0, 0x2a, 0xb1, 0xde, 0x55, 0x12, 0xb0, 0x07, 0x5f, 0x32, 0x4b, 0x33,
		0x0e, 0x2d, 0xeb, 0x1c, 0x1c, 0x28, 0x70, 0xa0, 0xc0, 0x81, 0x02, 0x07, 0x0a, 0x1c, 0x28, 0x70,
		0xa0, 0x20, 0xe5, 0xd0, 0x7b, 0x6c, 0x15, 0xce, 0xc3, 0x2e, 0xeb, 0x10, 0x52, 0x0e, 0x91, 0x8b,
		0x00, 0x52, 0x0e, 0xe1, 0xcc, 0xe3, 0x8e, 0x93, 0xac, 0xb2, 0xcd, 0x24, 0x0b, 0x49, 0x87, 0x40,
		0xb2, 0x40, 0xb2, 0x40, 0xb2, 0x40, 0xb2, 0x40, 0xb2, 0x6c, 0x26, 0x59, 0x48, 0x3a, 0xb4, 0x5d,
		0x24, 0x0b, 0xd9, 0x55, 0x90, 0x74, 0x08, 0x94, 0x33, 0x41, 0x39, 0xb1, 0x2c, 0x90, 0x74, 0x08,
		0x04, 0x9c, 0x64, 0xc5, 0x85, 0x36, 0x95, 0xa3, 0x0d, 0x51, 0x7f, 0x16, 0x04, 0x1b, 0x04, 0x1b,
		0x04, 0x1b, 0x04, 0x1b, 0x04, 0xdb, 0x3e, 0x82, 0x1d, 0x06, 0x6e, 0xc8, 0xbb, 0xae, 0x1c, 0x77,
		0xcc, 0x22, 0x7e, 0x7d, 0x6a, 0x41, 0x5f, 0xa6, 0x93, 0x85, 0x60, 0xf0, 0x15, 0xa2, 0x33, 0x39,
		0xe5, 0xd6, 0xf7, 0xee, 0x58, 0xdf, 0xb1, 0x28, 0x7e, 0xd7, 0x22, 0x09, 0xb2, 0x53, 0x92, 0xec,
		0x93, 0xa8, 0x84, 0x64, 0x59, 0x53, 0x14, 0x7b, 0x95, 0x74, 0x55, 0x2c, 0xec, 0x9a, 0x5d, 0x87,
		0x57, 0xec, 0x97, 0xb6, 0x78, 0xe0, 0x6c, 0x3c, 0xdc, 0x62, 0x29, 0x87, 0xfb, 0x65, 0x37, 0x67,
		0x27, 0x02, 0xf2, 0x65, 0xcb, 0x3b, 0x6a, 0xf1, 0x01, 0x01, 0xcb, 0x40, 0xeb, 0xcf, 0xd7, 0x8e,
		0x85, 0xa7, 0x65, 0xb6, 0x7e, 0xed, 0xe4, 0x8a, 0x27, 0xa5, 0x4a, 0x09, 0x0b, 0x28, 0x1b, 0x9c,
		0x73, 0x7b, 0x7a, 0xd5, 0xda, 0x83, 0xda, 0xdb, 0x46, 0xb8, 0xcc, 0xc4, 0xf0, 0x81, 0x05, 0xde,
		0x78, 0x35, 0x5a, 0x8c, 0x99, 0xf3, 0x45, 0x0b, 0xfb, 0x56, 0x13, 0xc3, 0x87, 0xb1, 0x01, 0xb3,
		0x6b, 0x31, 0xda, 0xd3, 0x1b, 0x3b, 0x54, 0x82, 0x25, 0xaa, 0xc0, 0x42, 0x1f, 0x8c, 0x65, 0xf1,
		0x31, 0x89, 0x35, 0x7f, 0x62, 0x51, 0x9f, 0x6c, 0x8b, 0x0c, 0x88, 0x3b, 0x86, 0x00, 0x81, 0xdd,
		0x8d, 0x9b, 0x89, 0x15, 0xad, 0x4d, 0x0b, 0xc5, 0xc6, 0x38, 0x9a, 0xb8, 0x77, 0x88, 0xa7, 0xd9,
		0xe5, 0x78, 0x1a, 0xcb, 0x80, 0x09, 0xe2, 0x8b, 0x76, 0x0f, 0x12, 0x3a, 0xd2, 0x86, 0x5d, 0xdc,
		0x18, 0x02, 0x5a, 0xb0, 0x75, 0x8b, 0x08, 0xa3, 0xb7, 0x16, 0x14, 0x11, 0x46, 0xbf, 0xe8, 0x15,
		0x22, 0x8c, 0xde, 0xd9, 0x31, 0x44, 0x18, 0x6d, 0x95, 0x4d, 0x46, 0x84, 0xd1, 0x5b, 0xbd, 0x63,
		0x97, 0x77, 0xd2, 0x26, 0x6f, 0xa4, 0x25, 0xde, 0x47, 0x83, 0x20, 0x6e, 0x6f, 0x87, 0x96, 0xa8,
		0x53, 0x15, 0xc2, 0x97, 0xd1, 0x3a, 0x30, 0xb9, 0x40, 0x9d, 0xb0, 0xf3, 0x9d, 0x3d, 0x78, 0x03,
		0x4f, 0x7e, 0x1f, 0x2f, 0xcf, 0x23, 0x7f, 0xc0, 0x44, 0x67, 0x02, 0x9c, 0xc6, 0xfa, 0xfb, 0x68,
		0xfc, 0x5f, 0xc0, 0xef, 0x8e, 0x3c, 0x29, 0x03, 0x37, 0x64, 0x32, 0x8c, 0xaf, 0x8e, 0xe4, 0x50,
		0x08, 0xd6, 0x77, 0x99, 0xe8, 0x78, 0x83, 0x70, 0xd8, 0x9f, 0xbc, 0xca, 0xf4, 0xc3, 0x70, 0xfa,
		0xf3, 0x28, 0x1c, 0xde, 0xc9, 0xfe, 0x63, 0x38, 0xfd, 0x79, 0x14, 0xb2, 0xfb, 0xb1, 0x8d, 0x70,
		0xfb, 0x3c, 0x94, 0xe1, 0xc2, 0xbf, 0x66, 0xff, 0x88, 0x3f, 0x3d, 0x0a, 0xa5, 0x27, 0x99, 0x19,
		0xfb, 0x41, 0x2f, 0x88, 0xb4, 0x2d, 0x12, 0x8b, 0xfc, 0x18, 0x4d, 0x4d, 0xbc, 0xd3, 0xa2, 0xcb,
		0xa8, 0x81, 0x94, 0x73, 0xce, 0x43, 0x59, 0x95, 0x32, 0x30, 0xb2, 0xc8, 0x9c, 0x6f, 0x5c, 0xd4,
		0xfa, 0x6c, 0x22, 0xd8, 0x66, 0x78, 0x88, 0xf3, 0xcd, 0x7b, 0x9a, 0xeb, 0x41, 0xfe, 0xa4, 0x58,
		0x2c, 0x57, 0x8a, 0xc5, 0x5c, 0xe5, 0xb8, 0x92, 0x3b, 0x2d, 0x95, 0xf2, 0xe5, 0xbc, 0x81, 0xc8,
		0x02, 0xa7, 0x11, 0x74, 0x59, 0xc0, 0xba, 0x9f, 0xc6, 0x62, 0x21, 0x86, 0xfd, 0x7e, 0xa6, 0xa5,
		0xdf, 0xb0, 0xa2, 0xb7, 0x55, 0xc1, 0x1b, 0x40, 0x7f, 0x4e, 0x28, 0x83, 0x61, 0x47, 0x8a, 0x29,
		0x14, 0xfd, 0x74, 0x3f, 0x68, 0x37, 0xf9, 0x5d, 0x7b, 0xac, 0x1e, 0xae, 0x98, 0x6c, 0x5f, 0x4f,
		0x5e, 0xa9, 0x36, 0xff, 0xba, 0xd3, 0xcf, 0xda, 0x57, 0x93, 0xd7, 0x6b, 0x5f, 0x45, 0x5d, 0x1f,
		0xeb, 0x94, 0xd9, 0x35, 0xad, 0x85, 0xa2, 0xb3, 0x13, 0x34, 0x2d, 0x11, 0xad, 0x45, 0x53, 0x6b,
		0xd0, 0xb6, 0xb5, 0x47, 0x23, 0xac, 0xfa, 0x45, 0x87, 0x40, 0x6c, 0x9c, 0x08, 0x7f, 0x52, 0x49,
		0xcb, 0xeb, 0x09, 0x9c, 0x49, 0xb3, 0x44, 0xcb, 0x62, 0xc6, 0x7e, 0x89, 0x9a, 0x8b, 0x1d, 0xb2,
		0x05, 0xa2, 0x06, 0x0d, 0x38, 0x5e, 0xcd, 0x3a, 0x58, 0x4d, 0x39, 0x52, 0x8d, 0x3b, 0x4c, 0x8d,
		0x3b, 0x46, 0x8d, 0x3b, 0x40, 0xb3, 0x65, 0xb0, 0xbf, 0x70, 0x5a, 0xc6, 0xe6, 0x70, 0x11, 0x4a,
		0x4f, 0x74, 0x98, 0x6b, 0x20, 0x5b, 0xc0, 0x6b, 0xfc, 0xd6, 0x5c, 0x27, 0xa8, 0x39, 0xba, 0x91,
		0x3d, 0x3b, 0x63, 0x7b, 0x74, 0x26, 0xf7, 0xe4, 0xec, 0xd8, 0x83, 0x33, 0xbd, 0xe7, 0x66, 0xcd,
		0x1e, 0x9b, 0x35, 0x7b, 0x6a, 0xd6, 0xec, 0xa1, 0x65, 0xdb, 0x1b, 0x69, 0x6c, 0x4f, 0x6c, 0xe1,
		0x40, 0x6b, 0xb9, 0x68, 0x62, 0xcd, 0x4f, 0xb5, 0xbc, 0x81, 0x38, 0x5c, 0xc3, 0x07, 0x52, 0x0d,
		0x6e, 0xb0, 0xd8, 0x70, 0xa0, 0xd4, 0x96, 0x90, 0x1c, 0x4b, 0xaa, 0xa1, 0xd9, 0x74, 0x5c, 0xcd,
		0x64, 0xe8, 0x9a, 0x0d, 0xe7, 0x35, 0x6d, 0x13, 0x4d, 0x3b, 0xb6, 0x48, 0xac, 0x95, 0xd6, 0x1d,
		0xd9, 0x90, 0x6d, 0x65, 0xd5, 0xad, 0x4f, 0xe8, 0x8b, 0xfa, 0x97, 0xf1, 0xfb, 0xef, 0xd2, 0x1c,
		0x9b, 0x9e, 0xb6, 0x0f, 0x22, 0x0d, 0x22, 0x0d, 0x22, 0x0d, 0x22, 0x0d, 0x22, 0x9d, 0x49, 0x22,
		0x6d, 0x24, 0x33, 0x94, 0xc1, 0xcc, 0x4f, 0x20, 0xd2, 0x60, 0x2b, 0x20, 0xd2, 0x20, 0xd2, 0xd6,
		0x8b, 0x66, 0xb1, 0x70, 0x5a, 0x3c, 0x2d, 0x57, 0x0a, 0xa7, 0xa0, 0xcf, 0xa0, 0xcf, 0x59, 0xa1,
		0xcf, 0x88, 0x8a, 0x53, 0xd0, 0xae, 0x2d, 0x51, 0x71, 0x74, 0x27, 0x0c, 0x08, 0x42, 0xe2, 0xf6,
		0xb6, 0x58, 0x22, 0x5f, 0x4f, 0x08, 0x50, 0xc5, 0x3f, 0xd0, 0x9e, 0x0b, 0xa0, 0x3f, 0x07, 0x60,
		0x45, 0xdc, 0x3f, 0x6d, 0x9c, 0xbf, 0x6e, 0x19, 0x25, 0xd6, 0x96, 0x96, 0x68, 0x49, 0x87, 0x24,
		0xd4, 0x56, 0x59, 0x58, 0xbe, 0x5e, 0x75, 0xae, 0x4f, 0xc9, 0xea, 0x79, 0xb2, 0xa6, 0x25, 0x41,
		0xb5, 0x14, 0xcc, 0x2d, 0x01, 0x3d, 0x62, 0xa4, 0x7e, 0x92, 0x35, 0x4c, 0xb0, 0xe6, 0xc0, 0x77,
		0x92, 0x40, 0x77, 0xcd, 0x81, 0xed, 0xda, 0x03, 0xd9, 0x29, 0x36, 0x55, 0x68, 0x37, 0x4f, 0xa8,
		0x36, 0x49, 0xc8, 0x37, 0x43, 0xc8, 0x37, 0x3d, 0xc8, 0x37, 0x37, 0xb6, 0xcb, 0x34, 0xe9, 0x0e,
		0x1c, 0x77, 0xee, 0xb8, 0xe8, 0x72, 0x71, 0xef, 0x52, 0x94, 0x95, 0x8b, 0xd7, 0xe8, 0x7c, 0xa3,
		0xba, 0xa9, 0x18, 0x89, 0x17, 0x91, 0x6c, 0xbf, 0x9a, 0x72, 0x7f, 0xda, 0xcc, 0x7e, 0x34, 0xf5,
		0xfe, 0xb3, 0xb1, 0xfd, 0x66, 0x63, 0xfb, 0xcb, 0xc6, 0xf6, 0x93, 0xb7, 0xdb, 0xa9, 0x43, 0xb6,
		0x3f, 0x6c, 0xa8, 0x7c, 0x19, 0x65, 0x71, 0x29, 0xda, 0xa2, 0x51, 0x06, 0x8e, 0x4b, 0x1a, 0x29,
		0x1f, 0x66, 0xa2, 0x3c, 0x98, 0x99, 0xf2, 0x5f, 0x08, 0xd2, 0xa0, 0x6d, 0x1a, 0x41, 0x1a, 0x06,
		0xff, 0x58, 0x17, 0x52, 0x5e, 0xc6, 0x0e, 0x38, 0x11, 0xe8, 0xf8, 0xb9, 0x6c, 0x22, 0x4a, 0x23,
		0x29, 0x9b, 0x36, 0x94, 0x97, 0x42, 0x88, 0x46, 0xe6, 0x43, 0x34, 0x3e, 0xec, 0x0a, 0xdc, 0x31,
		0x9b, 0xe0, 0xd4, 0x64, 0x42, 0x53, 0x43, 0x09, 0x4c, 0xe9, 0x5a, 0x6b, 0x65, 0x29, 0xfa, 0xc7,
		0x00, 0xc7, 0x33, 0x54, 0x9e, 0xc8, 0x44, 0xf9, 0x21, 0x63, 0xe5, 0x85, 0x50, 0x3e, 0x68, 0x07,
		0xca, 0x07, 0xb5, 0x28, 0x05, 0xd9, 0x64, 0xf9, 0x1f, 0x94, 0xf7, 0xd9, 0x89, 0xf2, 0x3e, 0xad,
		0x8c, 0x04, 0x61, 0xb6, 0xb6, 0x35, 0xfa, 0x48, 0xe3, 0xc6, 0x7f, 0xc7, 0xef, 0xfb, 0x41, 0x48,
		0xb7, 0x55, 0x3a, 0x6d, 0x0f, 0xbb, 0xa4, 0xeb, 0x69, 0x79, 0xec, 0x92, 0xaa, 0x96, 0x10, 0xec,
		0x92, 0x62, 0x97, 0xf4, 0x1d, 0xa3, 0x46, 0xbf, 0x4b, 0x4a, 0xb6, 0x21, 0x43, 0xb8, 0x01, 0x43,
		0xbc, 0xe1, 0x42, 0x48, 0x9e, 0x4d, 0x6c, 0xa8, 0x98, 0x4a, 0x62, 0x61, 0xe8, 0x54, 0xab, 0x49,
		0xf7, 0x33, 0x65, 0x42, 0x16, 0x13, 0xfb, 0x1f, 0xa6, 0x45, 0xc9, 0xd4, 0x29, 0x54, 0xa3, 0x32,
		0x05, 0x3a, 0x65, 0x81, 0x61, 0xc7, 0x09, 0xb3, 0xcc, 0x9d, 0x30, 0xdb, 0x4a, 0x02, 0x3e, 0x66,
		0x1f, 0x2c, 0x60, 0x82, 0x22, 0xfa, 0x7e, 0x06, 0x31, 0xe7, 0xda, 0xd4, 0xbc, 0xca, 0xbe, 0xb0,
		0x9e, 0x37, 0xec, 0x4f, 0x38, 0x47, 0x3e, 0x97, 0x03, 0xed, 0x07, 0xed, 0x07, 0xed, 0x07, 0xed,
		0x07, 0xed, 0x07, 0xed, 0x07, 0xed, 0x07, 0xed, 0x07, 0xed, 0x07, 0xed, 0x07, 0xed, 0x07, 0xed,
		0xdf, 0x7a, 0x12, 0x27, 0x29, 0xe0, 0x42, 0x0c, 0x15, 0x08, 0x0e, 0x50, 0x81, 0x4a, 0x81, 0x4a,
		0x81, 0x4a, 0x81, 0x4a, 0x6d, 0x25, 0x95, 0xe2, 0x5d, 0x26, 0x24, 0x97, 0xcf, 0x01, 0xeb, 0x51,
		0x9e, 0x33, 0xa5, 0x70, 0xa8, 0xd6, 0xa7, 0xaf, 0xf6, 0xc9, 0x0b, 0x0d, 0x54, 0x3f, 0xbd, 0xbe,
		0xb9, 0xb8, 0xa8, 0x9d, 0xb7, 0x6b, 0x17, 0x9f, 0xab, 0x97, 0x57, 0x37, 0xe7, 0xd5, 0xeb, 0x7a,
		0xe3, 0xa2, 0x7d, 0x75, 0xf3, 0xe9, 0xfa, 0xfc, 0x8f, 0xf6, 0xf5, 0xff, 0x2e, 0x6b, 0x54, 0x1a,
		0x60, 0x02, 0x23, 0x43, 0xd2, 0x70, 0x47, 0x43, 0x45, 0x12, 0xae, 0x9a, 0xd7, 0xb5, 0xf6, 0x55,
		0xed, 0xb7, 0x6f, 0xb5, 0x8b, 0xeb, 0xf6, 0x79, 0xfd, 0xea, 0xda, 0xc9, 0x22, 0x07, 0x32, 0x34,
		0xb8, 0x53, 0x71, 0x6e, 0xd6, 0xbe, 0x35, 0xae, 0x6b, 0xed, 0xda, 0xc5, 0x97, 0xcb, 0x46, 0xfd,
		0x02, 0x23, 0xac, 0x5a, 0x7c, 0x3f, 0xd5, 0x2f, 0xbe, 0xd4, 0x2f, 0x7e, 0x6b, 0x5f, 0xd5, 0xbf,
		0x60, 0x6c, 0x15, 0x8f, 0xed, 0x65, 0xb3, 0xf6, 0xb5, 0xd6, 0xac, 0x5d, 0x7c, 0xae, 0x61, 0x68,
		0x95, 0x2b, 0x86, 0xcf, 0x8d, 0xf3, 0x46, 0x33, 0x6b, 0x25, 0x82, 0x5b, 0xdb, 0x0e, 0x57, 0x91,
		0x49, 0x6b, 0x3f, 0xb3, 0x49, 0x1e, 0xf5, 0xa5, 0x7c, 0xde, 0x8e, 0xe4, 0x8e, 0x5a, 0xfd, 0x48,
		0x14, 0xfe, 0x23, 0xcd, 0x7e, 0x23, 0xed, 0xfe, 0x22, 0xa4, 0x76, 0xdc, 0x1a, 0x7f, 0x10, 0x52,
		0x3b, 0xda, 0x65, 0x90, 0xb4, 0xfb, 0x79, 0xe2, 0x75, 0xd3, 0x67, 0x5e, 0x4f, 0xaf, 0x6f, 0x27,
		0xf6, 0xe9, 0x68, 0xdc, 0x24, 0x77, 0x2e, 0xa7, 0x36, 0xf5, 0xe3, 0xc7, 0xc8, 0xf0, 0x1d, 0x4d,
		0xf4, 0xf2, 0xb6, 0x58, 0xbf, 0x3d, 0x8b, 0x65, 0x72, 0x56, 0xb0, 0x40, 0x83, 0xa1, 0xd3, 0x1b,
		0x37, 0xaa, 0x3f, 0x4e, 0xd4, 0x48, 0x5c, 0xa8, 0xde, 0x38, 0x50, 0xd5, 0xc2, 0xa3, 0x19, 0x59,
		0x53, 0x22, 0x6a, 0x47, 0x4b, 0x02, 0xf2, 0x8d, 0xca, 0x01, 0xa8, 0x55, 0x70, 0xea, 0xd4, 0x90,
		0x9a, 0x27, 0x29, 0x92, 0x45, 0x5d, 0x32, 0x48, 0x22, 0x7b, 0x6a, 0x66, 0x78, 0xf3, 0xf9, 0x50,
		0x30, 0x17, 0x6a, 0x09, 0x99, 0x0e, 0x02, 0xa6, 0x98, 0x70, 0x29, 0x27, 0x58, 0x3a, 0x08, 0x95,
		0x5e, 0x02, 0xa5, 0x8b, 0x30, 0x69, 0x27, 0x48, 0xda, 0x09, 0x91, 0x76, 0x02, 0x64, 0x97, 0x0e,
		0x56, 0x4e, 0x68, 0x34, 0x12, 0x18, 0x1d, 0x84, 0x45, 0x27, 0x41, 0x51, 0xa0, 0xdd, 0xf7, 0x0c,
		0xca, 0x88, 0x42, 0x82, 0xa1, 0x96, 0x50, 0xa8, 0x27, 0x10, 0x24, 0x84, 0x41, 0x2d, 0x41, 0xd8,
		0x74, 0x72, 0x15, 0x83, 0x2f, 0xad, 0xa0, 0x4b, 0x81, 0x0e, 0x49, 0x8d, 0xe8, 0x37, 0x53, 0x05,
		0xe9, 0x17, 0x70, 0xba, 0x3b, 0x53, 0x4a, 0x85, 0x2a, 0x69, 0xd0, 0x23, 0x05, 0xe9, 0xa6, 0x60,
		0xfd, 0x01, 0x5c, 0xef, 0x8e, 0x35, 0x87, 0x7a, 0xd3, 0x21, 0x56, 0x3b, 0xb4, 0x29, 0x56, 0xd4,
		0xfa, 0x2b, 0x68, 0xbd, 0x79, 0x7b, 0xff, 0xe8, 0xbf, 0xef, 0x9b, 0xef, 0x9c, 0x9f, 0xd7, 0xba,
		0x9f, 0x5d, 0xf6, 0x5e, 0xb0, 0x9a, 0xce, 0x9c, 0xa5, 0x37, 0x5b, 0x4a, 0xcd, 0x53, 0x3a, 0x33,
		0xf4, 0xde, 0xd1, 0x4c, 0x29, 0xe5, 0xa9, 0xa5, 0x7b, 0x0d, 0x41, 0xfe, 0xb9, 0x00, 0xbf, 0x4f,
		0x58, 0x7f, 0x2d, 0x7a, 0x3f, 0xff, 0xc6, 0x2f, 0x86, 0x71, 0xdd, 0xe1, 0x5b, 0x77, 0xd8, 0x7e,
		0xfe, 0x92, 0xab, 0xbb, 0xfe, 0x93, 0x6e, 0x3b, 0x1d, 0xff, 0xe1, 0x61, 0x28, 0xb8, 0xe4, 0xec,
		0xd7, 0x19, 0xd6, 0xe6, 0x32, 0xa4, 0xbd, 0xde, 0xf4, 0x8b, 0x21, 0x79, 0x5f, 0x1d, 0xbd, 0x77,
		0x73, 0xfa, 0x75, 0xb8, 0x7a, 0x3a, 0x0e, 0xbe, 0x2e, 0xb7, 0x4e, 0xcd, 0x99, 0x53, 0x73, 0xe1,
		0xd4, 0x1c, 0x77, 0x33, 0xe1, 0x7e, 0x6f, 0x5d, 0xb4, 0x58, 0x3a, 0x9e, 0xdf, 0x3f, 0x86, 0x6f,
		0x05, 0xeb, 0xf9, 0xbd, 0x63, 0xb8, 0x5e, 0x99, 0xc6, 0xb5, 0x5d, 0x47, 0x69, 0x5c, 0x43, 0x9b,
		0xb9, 0x7e, 0xd2, 0xba, 0x76, 0x36, 0x76, 0xdd, 0x6c, 0xec, 0x9a, 0xd9, 0xd8, 0xf5, 0xa2, 0x16,
		0x18, 0xac, 0x5b, 0xc6, 0x6f, 0x0a, 0x21, 0xd6, 0x1e, 0xf7, 0x38, 0xa2, 0x7f, 0x0d, 0x04, 0xb2,
		0xa1, 0x67, 0x34, 0xb5, 0x07, 0x74, 0x13, 0x4f, 0xa7, 0x1a, 0x8f, 0xe6, 0xa6, 0x9e, 0x4b, 0x65,
		0x1e, 0x4a, 0x65, 0x9e, 0x48, 0x65, 0x1e, 0x47, 0xbd, 0xfc, 0x25, 0xb5, 0xa7, 0x50, 0x81, 0x47,
		0x70, 0x13, 0xcf, 0x5f, 0xd2, 0xc3, 0x17, 0x2d, 0x34, 0x5d, 0xe4, 0x64, 0x2d, 0x40, 0x9a, 0xa6,
		0xcc, 0xf1, 0x46, 0xe5, 0x8b, 0x53, 0x96, 0x25, 0x4e, 0x5d, 0x6e, 0x18, 0x0a, 0x63, 0x67, 0x15,
		0x46, 0xda, 0x32, 0xb8, 0x29, 0xe0, 0x9f, 0x32, 0x38, 0xa8, 0xc8, 0xbe, 0x6e, 0x6c, 0x67, 0x55,
		0x2c, 0x1f, 0xb5, 0xcb, 0x48, 0xd5, 0x72, 0x52, 0xbe, 0xac, 0x94, 0x2f, 0x2f, 0xe5, 0xcb, 0xcc,
		0x8c, 0x4b, 0x77, 0xe3, 0x9d, 0xbd, 0xd7, 0xac, 0x3d, 0x62, 0xb3, 0x42, 0x42, 0x2a, 0x4a, 0x5c,
		0xaa, 0x29, 0x59, 0xa9, 0x60, 0x9f, 0x23, 0x2e, 0x87, 0x7d, 0x3f, 0x70, 0xff, 0x65, 0xfd, 0xbe,
		0xfb, 0x8f, 0xf0, 0xff, 0x15, 0x6e, 0xac, 0x68, 0x54, 0x55, 0x7e, 0x55, 0x79, 0xe2, 0x56, 0xcf,
		0x89, 0xda, 0x78, 0x28, 0x3e, 0xfd, 0x76, 0xd9, 0xfe, 0xbf, 0xda, 0xf9, 0x79, 0xfb, 0xf7, 0x8b,
		0xc6, 0xff, 0x5d, 0xb4, 0xaf, 0xae, 0xbf, 0xb4, 0x3f, 0x37, 0xbe, 0x7d, 0xbb, 0xb9, 0xa8, 0x5f,
		0xff, 0x4f, 0x55, 0x04, 0x88, 0x86, 0xd3, 0xb0, 0x8a, 0x23, 0x1f, 0x66, 0xa3, 0x71, 0xd1, 0x68,
		0x57, 0xbf, 0xfc, 0x51, 0x6b, 0x5e, 0xd7, 0xaf, 0x14, 0x9e, 0x57, 0x53, 0x18, 0xff, 0xa7, 0xef,
		0xbd, 0x6b, 0xff, 0xbd, 0x6c, 0x34, 0xaf, 0x77, 0xeb, 0xa5, 0x2f, 0x6b, 0xb5, 0xe6, 0x4e, 0x4e,
		0x73, 0xfb, 0xea, 0xe6, 0xd3, 0xe7, 0xc6, 0xc5, 0xd7, 0xda, 0x17, 0xdb, 0x62, 0x63, 0x5a, 0xdb,
		0x1d, 0x77, 0xa1, 0xd8, 0x48, 0x85, 0xb2, 0xab, 0xd1, 0x3a, 0x29, 0xa8, 0x5a, 0xad, 0xb6, 0x1a,
		0xb5, 0x86, 0x48, 0x26, 0xe5, 0x59, 0x0b, 0x35, 0x64, 0x27, 0xd4, 0x94, 0x85, 0x50, 0x4f, 0xf4,
		0xbf, 0xbe, 0xd3, 0x7f, 0x9a, 0x4f, 0xe6, 0x69, 0xce, 0x12, 0x48, 0x91, 0xb9, 0x6d, 0xa4, 0xe7,
		0xb8, 0xc5, 0xd6, 0x4f, 0xa9, 0xee, 0x6c, 0x7d, 0x24, 0x73, 0x6b, 0xe9, 0xb1, 0x83, 0x96, 0x4d,
		0x21, 0xaf, 0x1a, 0x0c, 0x44, 0x28, 0x03, 0x2e, 0xee, 0x75, 0x44, 0xba, 0x9e, 0xa8, 0x8d, 0x74,
		0xd5, 0x52, 0x40, 0xd1, 0x39, 0x28, 0x97, 0x4a, 0xc7, 0xb7, 0x39, 0xb7, 0xd4, 0x7a, 0x29, 0x97,
		0x4a, 0xb7, 0x39, 0xb7, 0xd0, 0xba, 0xcd, 0xb9, 0xa7, 0xe3, 0x7f, 0x15, 0x27, 0x17, 0x3f, 0x0a,
		0xa3, 0x97, 0xf2, 0xf8, 0x17, 0xc5, 0xd6, 0xeb, 0xbf, 0xe7, 0xfe, 0x79, 0x3c, 0x7a, 0xb9, 0xcd,
		0xbb, 0xa5, 0xe9, 0xbf, 0x8a, 0x93, 0x7f, 0x9d, 0x4e, 0xff, 0x35, 0xa9, 0x59, 0x38, 0xb9, 0x3c,
		0x3c, 0xa3, 0x6a, 0x48, 0x1d, 0xa0, 0x6d, 0xa9, 0x9c, 0x3f, 0x9d, 0x55, 0x30, 0x9d, 0xbf, 0x32,
		0x37, 0x8b, 0x0a, 0x8b, 0x47, 0xb6, 0x2c, 0x89, 0x07, 0x6f, 0x19, 0x0a, 0x46, 0x6d, 0x91, 0x7a,
		0x2e, 0x95, 0x04, 0x8b, 0xab, 0x0b, 0x12, 0xd7, 0x1a, 0x1c, 0xae, 0x26, 0x28, 0x3c, 0x45, 0xac,
		0x6b, 0x8a, 0x8d, 0xb4, 0x74, 0xf1, 0x0d, 0x09, 0x6b, 0x99, 0x26, 0xce, 0x41, 0x11, 0x1a, 0xc4,
		0x7e, 0xcc, 0x4f, 0x46, 0x16, 0xfb, 0x31, 0x5a, 0xb5, 0x9a, 0xc2, 0xfd, 0x18, 0x2e, 0x64, 0xb9,
		0xa8, 0x60, 0x43, 0x66, 0x03, 0x74, 0xa9, 0xc8, 0xdf, 0xa0, 0xe6, 0x30, 0x90, 0xba, 0x2d, 0x0d,
		0xc5, 0x07, 0x4d, 0x15, 0xfb, 0x0b, 0x74, 0x70, 0xc8, 0x91, 0x9a, 0xd3, 0x53, 0xd6, 0x4f, 0x81,
		0xbe, 0x24, 0x10, 0x5a, 0x66, 0x65, 0xbb, 0x80, 0xde, 0x4e, 0x1e, 0xb5, 0x99, 0x8b, 0x61, 0x8f,
		0xaf, 0x9f, 0xd3, 0xa4, 0x77, 0xc3, 0xc9, 0x17, 0x1a, 0xec, 0xbd, 0xcd, 0x27, 0x5f, 0x96, 0x0a,
		0xdb, 0xe6, 0x87, 0x5f, 0x3e, 0xc7, 0x8f, 0xca, 0xf0, 0xf1, 0x97, 0xf9, 0xc3, 0x26, 0x1a, 0x0e,
		0xc0, 0xb0, 0x27, 0xe9, 0xa6, 0x3a, 0x04, 0xf3, 0xf6, 0x46, 0x1c, 0x84, 0xc1, 0x41, 0x98, 0xd5,
		0xa2, 0x95, 0xe2, 0x30, 0xcc, 0xe2, 0xed, 0x38, 0x10, 0x83, 0x03, 0x31, 0x1b, 0x59, 0x38, 0x1c,
		0x88, 0x51, 0xeb, 0x10, 0x42, 0x7c, 0xbb, 0x66, 0x47, 0x0f, 0x0e, 0xc4, 0x2c, 0x17, 0x59, 0x1c,
		0x88, 0x49, 0x6d, 0xef, 0x92, 0x0a, 0x03, 0x07, 0x62, 0xa0, 0x30, 0xf6, 0xb5, 0xd8, 0xcf, 0x0d,
		0x61, 0xa0, 0x52, 0x58, 0xa8, 0xd8, 0x4d, 0x87, 0x8d, 0x18, 0xfd, 0xcb, 0x4b, 0xf9, 0x32, 0x53,
		0xbe, 0xdc, 0x36, 0xf3, 0x57, 0x9a, 0xdf, 0x88, 0xb9, 0xbb, 0x1f, 0xb8, 0x0b, 0x8b, 0xc9, 0x0d,
		0x58, 0xe7, 0x71, 0xd3, 0x18, 0xdb, 0xcc, 0x1e, 0x97, 0x59, 0x1c, 0x2a, 0x44, 0x22, 0xa7, 0x01,
		0x38, 0x08, 0x34, 0x23, 0x09, 0x51, 0x8a, 0xa3, 0x41, 0xa3, 0xd6, 0x66, 0xff, 0xbc, 0xcd, 0xb9,
		0x27, 0xd3, 0x26, 0xa7, 0x1f, 0xdd, 0xe6, 0xdc, 0xfc, 0x6b, 0x5b, 0xd1, 0x87, 0xb7, 0x39, 0xb7,
		0xfc, 0xda, 0xe0, 0xe4, 0xb3, 0xc9, 0x63, 0xe2, 0x56, 0xc7, 0x1f, 0xbd, 0x3e, 0xea, 0x47, 0x69,
		0xf2, 0xc9, 0x6d, 0xce, 0x3d, 0x9e, 0x7e, 0x50, 0x1e, 0xbd, 0x14, 0xe7, 0x1e, 0x5c, 0x99, 0xf4,
		0x73, 0xf6, 0xcb, 0xd3, 0x37, 0xbd, 0x3e, 0x41, 0xd4, 0x1a, 0x44, 0x62, 0x85, 0x48, 0xd8, 0x17,
		0x02, 0x87, 0x18, 0x5e, 0x4b, 0x55, 0xeb, 0x41, 0x24, 0xc3, 0xaf, 0x72, 0xf4, 0x92, 0x9f, 0xfc,
		0x88, 0xae, 0x0b, 0xaf, 0x2b, 0xe6, 0xa5, 0x50, 0x9a, 0x88, 0xee, 0xe1, 0x9f, 0x7f, 0x7e, 0x3c,
		0xfc, 0x71, 0x3c, 0x5a, 0xff, 0x46, 0xc4, 0xf1, 0x6a, 0xd5, 0x88, 0x59, 0x9c, 0x49, 0x28, 0x32,
		0x28, 0xb2, 0x77, 0x2a, 0xb2, 0x6d, 0xb4, 0xd3, 0xd0, 0x88, 0x5a, 0x35, 0x22, 0x44, 0x02, 0xaa,
		0x15, 0xaa, 0x75, 0xe3, 0x07, 0x07, 0xfe, 0x50, 0xb2, 0x3f, 0xff, 0x74, 0xa5, 0x17, 0xdc, 0x33,
		0x79, 0x06, 0xea, 0x05, 0x36, 0xfe, 0x46, 0xd3, 0x42, 0x42, 0x40, 0xce, 0xa1, 0x78, 0xb5, 0x2b,
		0x5e, 0x70, 0xf5, 0x8c, 0xea, 0x4b, 0x50, 0x77, 0xa8, 0x39, 0xa8, 0xb9, 0xd9, 0x6a, 0x00, 0x6d,
		0x83, 0xbe, 0xfc, 0xb9, 0xbe, 0x84, 0x84, 0x40, 0xf1, 0x42, 0xf1, 0x2a, 0x53, 0xbc, 0x7e, 0xc0,
		0xef, 0xb9, 0x00, 0x6d, 0x03, 0xb1, 0x5f, 0xa5, 0x78, 0x21, 0x21, 0x20, 0xf6, 0x50, 0xbc, 0xda,
		0x14, 0x2f, 0x88, 0x7d, 0x46, 0xf5, 0x25, 0x88, 0x3d, 0xd4, 0x1c, 0xd4, 0xdc, 0x6c, 0x35, 0x80,
		0xb6, 0x41, 0x5f, 0xfe, 0x5c, 0x5f, 0x42, 0x42, 0xa0, 0x78, 0xa1, 0x78, 0x37, 0x7e, 0x70, 0xc7,
		0xef, 0xfb, 0xc1, 0xd9, 0x44, 0x94, 0x7f, 0x14, 0x46, 0xe0, 0xdb, 0x5b, 0xa3, 0x0f, 0xb3, 0x30,
		0x71, 0xc8, 0xbf, 0xaa, 0x56, 0x4d, 0xaa, 0x3c, 0x8d, 0xc5, 0x85, 0x17, 0x3c, 0x2b, 0x3c, 0x7d,
		0xa5, 0xe2, 0xf0, 0xd5, 0x39, 0x13, 0xf7, 0x93, 0x83, 0xe9, 0xd6, 0x1d, 0xbf, 0xd2, 0x51, 0xb2,
		0x40, 0x53, 0x5e, 0xfb, 0x38, 0xdf, 0xdd, 0x89, 0xe2, 0xe7, 0x6a, 0x4c, 0x5f, 0xaf, 0xb0, 0x24,
		0x81, 0x96, 0x52, 0x04, 0x98, 0x2a, 0x85, 0x2a, 0x74, 0x1f, 0x89, 0xb0, 0xdf, 0xaf, 0x11, 0x91,
		0x08, 0x5b, 0xfb, 0xcc, 0x22, 0x11, 0x36, 0xf2, 0x2f, 0xbc, 0x19, 0x59, 0xe4, 0x5f, 0xd0, 0xaa,
		0xd5, 0x90, 0x08, 0x5b, 0x0f, 0xb8, 0x47, 0x22, 0x6c, 0xd3, 0x28, 0x14, 0x89, 0xb0, 0x91, 0x08,
		0x5b, 0xeb, 0x1d, 0x76, 0x26, 0xc2, 0x7e, 0x93, 0xc7, 0x76, 0xe1, 0xdf, 0x48, 0x88, 0xad, 0x16,
		0x93, 0x23, 0x21, 0xf6, 0x7b, 0x84, 0x6e, 0xf3, 0xc4, 0xd8, 0xb5, 0x27, 0xb9, 0x13, 0xb9, 0xb1,
		0xdf, 0xe6, 0xa0, 0x4e, 0x9b, 0x1f, 0x7b, 0x6f, 0x8d, 0x57, 0x7a, 0xef, 0xab, 0xbc, 0xef, 0x15,
		0x7e, 0x32, 0xd7, 0xcb, 0xe7, 0x76, 0xf9, 0x3b, 0x26, 0xdf, 0x60, 0xf1, 0x93, 0x37, 0xef, 0xf2,
		0xab, 0x77, 0xf8, 0x75, 0xdf, 0x97, 0xf4, 0x3b, 0xd9, 0xdf, 0xc5, 0xbe, 0xbe, 0xf6, 0x68, 0xae,
		0x37, 0x0e, 0x17, 0x92, 0x05, 0x3d, 0xaf, 0xb3, 0x24, 0xf5, 0xf8, 0x1c, 0xd5, 0x8c, 0xbf, 0xf3,
		0xe6, 0x3d, 0x96, 0xa7, 0xbf, 0x5c, 0xc9, 0x0f, 0x7f, 0xc6, 0xfb, 0xe6, 0xf9, 0x1c, 0x5f, 0x96,
		0xd5, 0xf4, 0x57, 0x14, 0xed, 0xdd, 0xd4, 0xeb, 0xdd, 0x94, 0xea, 0x2d, 0x55, 0xe2, 0x3d, 0x67,
		0xcd, 0x79, 0x5e, 0x95, 0xb4, 0xf1, 0x75, 0x48, 0x57, 0xbf, 0x4e, 0x62, 0xf4, 0x57, 0xbd, 0xce,
		0xcf, 0x73, 0x90, 0xfe, 0x92, 0xac, 0xbf, 0x87, 0x8c, 0xff, 0x72, 0x72, 0xd6, 0xe5, 0xd1, 0x6b,
		0xf3, 0xe4, 0xb5, 0x79, 0xf0, 0x7b, 0x26, 0x2f, 0x9d, 0x02, 0xfa, 0x55, 0x26, 0x4e, 0xc7, 0xbb,
		0xbf, 0x0f, 0xd8, 0xfd, 0xfb, 0xb4, 0x6d, 0x3c, 0xb2, 0xf3, 0x37, 0x6d, 0x47, 0x2e, 0xff, 0xbe,
		0x77, 0x9f, 0xc9, 0x3c, 0xfe, 0xe3, 0xf7, 0xb2, 0x25, 0x87, 0x7f, 0x67, 0x36, 0x87, 0x6b, 0x26,
		0xef, 0x9f, 0xde, 0x97, 0x8d, 0xac, 0xfd, 0xef, 0x13, 0xb4, 0x4d, 0x5d, 0x79, 0xf6, 0x65, 0xec,
		0x7f, 0x97, 0x20, 0xea, 0x21, 0x33, 0x6b, 0x67, 0xeb, 0xef, 0x7b, 0xf7, 0x51, 0x52, 0xce, 0xd4,
		0xf9, 0xb7, 0xe3, 0x27, 0xec, 0x46, 0xce, 0xfe, 0xf5, 0x84, 0x5a, 0x95, 0x9f, 0xda, 0xfe, 0xf4,
		0xdb, 0x6b, 0x09, 0x3d, 0x8d, 0x23, 0x64, 0xf3, 0x5c, 0xfd, 0x73, 0xc6, 0x3d, 0x6d, 0xea, 0xda,
		0x58, 0x49, 0x17, 0x53, 0xdc, 0x5b, 0x13, 0xc3, 0x87, 0xf1, 0x1b, 0x8c, 0x2c, 0x48, 0xd3, 0xff,
		0xc0, 0x85, 0xdb, 0xe7, 0xe2, 0x9f, 0x30, 0xbd, 0xaa, 0x78, 0x7d, 0x04, 0x74, 0x05, 0x74, 0x45,
		0xc6, 0x74, 0xc5, 0x90, 0x0b, 0x99, 0x2f, 0x6f, 0xa0, 0x21, 0xca, 0x29, 0x6e, 0xdd, 0x6c, 0x1f,
		0x6a, 0xb3, 0xf8, 0x02, 0x05, 0x9b, 0xae, 0x4a, 0x36, 0x3b, 0x54, 0xed, 0x33, 0xa9, 0xdc, 0xc9,
		0x18, 0x6d, 0x16, 0x70, 0x61, 0xdd, 0xd0, 0x96, 0x4b, 0xa5, 0xe3, 0x92, 0x45, 0xc3, 0x4b, 0xb4,
		0x51, 0xd3, 0xda, 0x8a, 0x1d, 0x0c, 0xf5, 0x3e, 0xf7, 0x57, 0xcf, 0xe1, 0xd1, 0xb2, 0xcb, 0xa3,
		0x39, 0x5c, 0x74, 0x34, 0xa5, 0xac, 0xaa, 0xdc, 0xe5, 0xef, 0xf0, 0x4c, 0xac, 0x57, 0x30, 0x28,
		0x55, 0xa1, 0xa0, 0xd4, 0xd4, 0xba, 0x00, 0x6a, 0x0d, 0x6a, 0xfd, 0x4a, 0xad, 0xc3, 0x01, 0x63,
		0xdd, 0xcd, 0xb8, 0x75, 0xf4, 0x08, 0x00, 0x66, 0x00, 0xe6, 0x0c, 0x02, 0xe6, 0xe3, 0xc2, 0x06,
		0x80, 0xb9, 0x02, 0xc0, 0x0c, 0xc0, 0x6c, 0x29, 0x60, 0x8e, 0xcf, 0x6e, 0x01, 0x35, 0x1b, 0xf1,
		0x56, 0xc1, 0xaf, 0x0d, 0xd3, 0x0b, 0xd3, 0xbb, 0x6a, 0xbe, 0xe1, 0xd7, 0x7e, 0xed, 0xcb, 0x03,
		0x7b, 0xb8, 0x63, 0xc1, 0x06, 0x4e, 0xed, 0xe8, 0x7e, 0x68, 0x09, 0x68, 0x89, 0x8c, 0x69, 0x89,
		0x3b, 0x2f, 0x64, 0xaf, 0xae, 0x20, 0xd7, 0x60, 0xd1, 0xea, 0xa3, 0x49, 0x20, 0xd0, 0xd9, 0x9c,
		0x2f, 0xea, 0xcd, 0x07, 0xd3, 0x7f, 0x4f, 0x82, 0xe8, 0xb4, 0x8e, 0xea, 0x46, 0xa7, 0xf3, 0x36,
		0x3f, 0x95, 0xa7, 0xe5, 0x34, 0xde, 0x66, 0xa7, 0xf0, 0xb0, 0xdb, 0x08, 0xdd, 0x0c, 0xdd, 0x8c,
		0xdd, 0x46, 0x38, 0x4f, 0xe0, 0x3c, 0xc1, 0x6e, 0xa3, 0x95, 0x7e, 0x93, 0x0c, 0xed, 0x36, 0xae,
		0x71, 0xb0, 0x4c, 0xd1, 0x66, 0xe3, 0xbf, 0x5c, 0x76, 0xbe, 0xb3, 0xae, 0xfb, 0xd8, 0xf7, 0x44,
		0x8a, 0x4d, 0xc7, 0x85, 0xdb, 0xb3, 0x11, 0xd7, 0xbb, 0xc6, 0xab, 0xec, 0x67, 0x6a, 0xf7, 0x71,
		0xf2, 0xe2, 0xdb, 0xb2, 0xfd, 0xb8, 0x66, 0x08, 0x7a, 0x62, 0xa2, 0xd7, 0x0a, 0x45, 0x4f, 0x29,
		0xba, 0xd6, 0x60, 0xe7, 0x35, 0x45, 0x7a, 0x77, 0xc0, 0xf3, 0x7a, 0x22, 0x4f, 0x83, 0x9e, 0xd7,
		0x5d, 0x0a, 0xf1, 0x8d, 0x5e, 0xa7, 0xc3, 0xc2, 0x70, 0x3d, 0x4d, 0xbe, 0xda, 0x87, 0x3a, 0xf7,
		0x30, 0xa4, 0x73, 0xd9, 0x60, 0x11, 0xa9, 0x5a, 0x4c, 0xca, 0x17, 0x95, 0xf2, 0xc5, 0xa5, 0x76,
		0x91, 0x6d, 0x08, 0x4f, 0x8d, 0x27, 0x72, 0x19, 0xbf, 0xb5, 0xcb, 0xbb, 0x0a, 0x32, 0xb9, 0x94,
		0x91, 0xc9, 0x45, 0x0b, 0x21, 0x4b, 0x10, 0xb3, 0x3c, 0x32, 0xb9, 0x98, 0x9e, 0x82, 0x62, 0xee,
		0xb4, 0x88, 0xcc, 0x2d, 0x9b, 0x51, 0xe7, 0xf4, 0xed, 0xa5, 0x4b, 0x1c, 0x37, 0xdb, 0x41, 0x79,
		0xf0, 0xbb, 0x4c, 0x45, 0x06, 0xb9, 0x85, 0xe7, 0x01, 0x7b, 0x00, 0x7b, 0x00, 0x7b, 0xa4, 0xc1,
		0x1e, 0xe3, 0xe5, 0x93, 0x36, 0xfc, 0x21, 0x41, 0x78, 0x37, 0x50, 0xca, 0x29, 0xc3, 0x21, 0x68,
		0xb5, 0x98, 0xf0, 0x24, 0x7f, 0x64, 0x8a, 0xb8, 0xd3, 0xfc, 0xc3, 0xa0, 0xbf, 0xa0, 0xbf, 0xa0,
		0xbf, 0xc0, 0x9d, 0xc0, 0x9d, 0xc0, 0x9d, 0xc0, 0x9d, 0xc0, 0x9d, 0x16, 0x86, 0x59, 0x06, 0x43,
		0xf1, 0xcf, 0x44, 0xc7, 0x87, 0x9b, 0xa3, 0x8e, 0xf9, 0x87, 0x01, 0x75, 0x00, 0x75, 0x00, 0x75,
		0xac, 0x29, 0x31, 0x43, 0xf1, 0xeb, 0x2c, 0x67, 0xef, 0x22, 0x4b, 0x1b, 0x54, 0x8e, 0x99, 0xbd,
		0xce, 0xad, 0x2d, 0x65, 0x75, 0x36, 0x87, 0x62, 0x0a, 0x21, 0x99, 0x62, 0x68, 0xa6, 0x6e, 0xb8,
		0xb4, 0x40, 0x35, 0x4d, 0x78, 0x41, 0x17, 0x74, 0xd3, 0x09, 0x1e, 0x14, 0x42, 0x39, 0x2d, 0x90,
		0x8e, 0x6a, 0xaa, 0xd4, 0x41, 0x3c, 0x92, 0xd9, 0x42, 0x89, 0x33, 0xf5, 0xba, 0x38, 0x98, 0xa8,
		0x3e, 0x75, 0xea, 0x58, 0x45, 0xd5, 0x47, 0xe5, 0xd5, 0x1e, 0x9d, 0xbf, 0x0e, 0x8a, 0xb9, 0xd3,
		0x49, 0x19, 0xd1, 0x97, 0x62, 0x6e, 0xae, 0x24, 0xe0, 0x5c, 0x91, 0xbe, 0xe3, 0x37, 0x45, 0xfa,
		0x0a, 0xd3, 0x7f, 0x1f, 0xfe, 0xf9, 0xe7, 0xc7, 0x3f, 0xff, 0xfc, 0xb8, 0xc1, 0x03, 0x14, 0x54,
		0xf9, 0x6b, 0xa9, 0x18, 0x54, 0x1d, 0xf5, 0x18, 0xb7, 0x7f, 0x64, 0x51, 0x26, 0x6b, 0x1d, 0x34,
		0x82, 0x32, 0x59, 0x8a, 0xee, 0xb0, 0xa7, 0x4e, 0xc5, 0x5a, 0x01, 0xc5, 0xf3, 0x01, 0xba, 0x6b,
		0x25, 0x33, 0x5a, 0x7f, 0x94, 0x46, 0x6b, 0x55, 0x28, 0x58, 0x27, 0xc9, 0x51, 0xc2, 0x12, 0xae,
		0x93, 0xec, 0x28, 0x61, 0xf0, 0xd2, 0x06, 0x6f, 0x16, 0x10, 0xbc, 0x69, 0xd4, 0x5b, 0x81, 0xe0,
		0xcd, 0xf7, 0x4a, 0x0d, 0x82, 0x37, 0xe1, 0x0a, 0x84, 0x2b, 0xd0, 0xa8, 0xd7, 0x0b, 0x1b, 0x90,
		0x34, 0x2e, 0x12, 0x6c, 0x40, 0xda, 0x33, 0x05, 0xd8, 0x80, 0x54, 0x48, 0x1c, 0x11, 0xbc, 0x09,
		0xec, 0x01, 0xec, 0x81, 0xe0, 0x4d, 0x04, 0x6f, 0xfe, 0xb2, 0x8f, 0x08, 0xde, 0x84, 0xfe, 0x82,
		0xfe, 0x02, 0x77, 0x02, 0x77, 0x02, 0x77, 0x02, 0x77, 0x02, 0x77, 0x42, 0xf0, 0x26, 0x50, 0x07,
		0x50, 0xc7, 0x6e, 0xa1, 0x0e, 0x04, 0x6f, 0x6a, 0x81, 0x62, 0x0a, 0x21, 0x99, 0x62, 0x68, 0xa6,
		0x6e, 0xb8, 0xb4, 0x40, 0x35, 0x4d, 0x78, 0x41, 0x17, 0x74, 0xd3, 0x09, 0x1e, 0x14, 0x42, 0x39,
		0x2d, 0x90, 0x8e, 0x6a, 0xaa, 0x10, 0xbc, 0x49, 0x07, 0x01, 0x15, 0xc9, 0x1c, 0x82, 0x37, 0xd3,
		0x3c, 0x10, 0xc1, 0x9b, 0x08, 0xde, 0xd4, 0xb2, 0x98, 0x11, 0xbc, 0x99, 0xd6, 0x58, 0x22, 0x78,
		0x73, 0x3d, 0x4a, 0x65, 0x61, 0xf0, 0xe6, 0x1a, 0xb9, 0x61, 0xd7, 0x1f, 0xa4, 0x4c, 0x25, 0xd1,
		0x4d, 0x91, 0x94, 0x36, 0x6a, 0x5e, 0x06, 0xc3, 0x8e, 0x14, 0x53, 0x83, 0x5d, 0x9f, 0x3d, 0xbc,
		0x5d, 0x7d, 0x7d, 0x78, 0xfb, 0x6a, 0xfa, 0xf0, 0x3f, 0xde, 0xcd, 0xb2, 0xdf, 0x91, 0xa8, 0x77,
		0x6f, 0x83, 0x41, 0x77, 0xaa, 0xc3, 0xfb, 0xf1, 0xd2, 0x9e, 0x14, 0x62, 0xfc, 0xb5, 0x99, 0x59,
		0x33, 0xc1, 0xef, 0xbb, 0x4a, 0x53, 0xf4, 0xbd, 0xfb, 0xb3, 0xb9, 0x09, 0x78, 0x6f, 0x1e, 0xe0,
		0x2f, 0x2c, 0xec, 0x04, 0x7c, 0x30, 0x15, 0x13, 0xa7, 0xda, 0xed, 0x86, 0xfb, 0x7f, 0x9c, 0x57,
		0x2f, 0xf6, 0x43, 0x26, 0x25, 0x17, 0xf7, 0xe1, 0xbe, 0xf4, 0xf7, 0xbd, 0xfd, 0xf3, 0xea, 0x6f,
		0xfb, 0x71, 0x73, 0xc8, 0x31, 0x4c, 0xea, 0xbc, 0xda, 0xed, 0x1c, 0xc3, 0xe9, 0x92, 0x63, 0x27,
		0xe6, 0x3b, 0xad, 0x3e, 0x5a, 0xb6, 0x48, 0x6a, 0xa2, 0xd3, 0xf7, 0x43, 0x2e, 0xee, 0xf7, 0x3b,
		0xbe, 0x90, 0x1e, 0x17, 0x2c, 0xd8, 0xef, 0xf9, 0x41, 0xb4, 0x6e, 0x5e, 0xa3, 0x6f, 0xc2, 0x01,
		0xeb, 0xf0, 0x1e, 0xef, 0xfc, 0x29, 0xba, 0x9e, 0xf4, 0xf6, 0x7d, 0xb1, 0x5f, 0x93, 0xdf, 0x59,
		0x20, 0x98, 0x7c, 0xfd, 0x52, 0xf8, 0x71, 0x7f, 0xff, 0xfa, 0x3b, 0x0b, 0xd9, 0xbe, 0x17, 0xb0,
		0xc9, 0x43, 0x42, 0xe9, 0x89, 0xae, 0x17, 0x74, 0xff, 0x14, 0xe7, 0x85, 0x0f, 0xfb, 0x71, 0xb7,
		0x43, 0xf9, 0xdc, 0x67, 0x93, 0x16, 0xc2, 0x8f, 0x48, 0x98, 0xac, 0xd3, 0xe9, 0x8c, 0x98, 0x7b,
		0x2d, 0xa8, 0x65, 0x43, 0x03, 0xdc, 0xfa, 0x95, 0x01, 0x5e, 0x0f, 0xed, 0xa8, 0x41, 0x39, 0xce,
		0xbb, 0x2a, 0x89, 0xff, 0x12, 0xcf, 0xfc, 0x7c, 0x2e, 0x57, 0x8f, 0xcb, 0x4f, 0x74, 0xee, 0x7b,
		0x53, 0xb3, 0xaf, 0x97, 0x8a, 0xfd, 0x9d, 0x9a, 0xe4, 0xdd, 0x9a, 0x63, 0x1d, 0x4d, 0x31, 0xaf,
		0x19, 0xf8, 0x7b, 0xaa, 0x84, 0xad, 0xab, 0x07, 0x52, 0xaf, 0xfb, 0xd4, 0xeb, 0xfc, 0xed, 0xba,
		0xe6, 0x3d, 0x47, 0x33, 0x4c, 0x7d, 0xaf, 0xf5, 0x75, 0xba, 0x0b, 0x16, 0x6f, 0x4d, 0xbc, 0x3a,
		0x7f, 0xf3, 0x7a, 0x50, 0x31, 0x67, 0x29, 0x54, 0xe4, 0xbd, 0x9d, 0x04, 0x8a, 0xef, 0x11, 0x48,
		0x3d, 0x30, 0x71, 0xed, 0x3d, 0xc9, 0xb9, 0x53, 0x89, 0x01, 0x17, 0xeb, 0xd4, 0x94, 0x78, 0x75,
		0xe3, 0x12, 0x96, 0x7c, 0x61, 0xc2, 0xbb, 0xeb, 0xaf, 0x51, 0xb6, 0x3f, 0x7e, 0xbd, 0xd9, 0x8d,
		0xef, 0xa6, 0x77, 0x3d, 0x6f, 0xd8, 0x97, 0xd3, 0xe8, 0x06, 0x86, 0xe5, 0x88, 0xe5, 0x48, 0xbb,
		0x1c, 0xef, 0x7c, 0xbf, 0xcf, 0xd6, 0xe3, 0xd9, 0xb3, 0xf5, 0x98, 0x27, 0x5c, 0x8f, 0x7d, 0xdf,
		0x1f, 0xdc, 0x79, 0x9d, 0x7f, 0xd6, 0x3b, 0x82, 0xf1, 0x5a, 0xc8, 0x7b, 0xe1, 0xf6, 0xf5, 0xd7,
		0x66, 0xcf, 0xeb, 0x87, 0x58, 0x9c, 0x58, 0x9c, 0x58, 0x9c, 0xcb, 0xda, 0x7c, 0x90, 0xc3, 0xf5,
		0x97, 0xe4, 0xf8, 0x26, 0x2c, 0x28, 0x2c, 0x28, 0xd2, 0x05, 0xb5, 0x76, 0xc9, 0xd4, 0x14, 0x21,
		0x5d, 0x29, 0x43, 0xb7, 0xd2, 0x95, 0x92, 0xde, 0xc0, 0x8b, 0xb6, 0x59, 0x24, 0xec, 0x86, 0x25,
		0x50, 0x55, 0x04, 0xe5, 0x8c, 0xd2, 0xd5, 0xce, 0x36, 0x3e, 0x64, 0x1b, 0x94, 0x36, 0x55, 0x32,
		0x6c, 0x9a, 0xfc, 0x8c, 0x2d, 0x42, 0x8b, 0x33, 0x75, 0xd7, 0xad, 0x69, 0x72, 0x26, 0x77, 0xc1,
		0xe6, 0xc0, 0xe6, 0xc0, 0xe1, 0x91, 0x68, 0x53, 0x0e, 0x78, 0x0a, 0x6f, 0xc7, 0xe4, 0xae, 0xf5,
		0xe9, 0xd4, 0x74, 0x8f, 0x64, 0x72, 0x76, 0x37, 0x3c, 0xbb, 0xbe, 0xac, 0x7f, 0x69, 0xe7, 0xfe,
		0x7b, 0x92, 0xcf, 0xe5, 0x32, 0xb2, 0x3a, 0xb1, 0x73, 0xbd, 0x55, 0x2b, 0x94, 0x77, 0x99, 0x90,
		0x5c, 0x3e, 0x07, 0xac, 0x97, 0x66, 0x99, 0xae, 0x61, 0xcb, 0x9d, 0xfa, 0xb4, 0xa9, 0x4f, 0x5e,
		0xb8, 0x41, 0x66, 0xb7, 0xc9, 0x8a, 0xb9, 0xfe, 0xdf, 0x65, 0xed, 0x6a, 0xdd, 0x09, 0x9f, 0x60,
		0x90, 0x30, 0x55, 0xac, 0xe5, 0x86, 0x87, 0xb7, 0xa6, 0xab, 0xfc, 0x74, 0xbc, 0xca, 0x29, 0xa0,
		0x9e, 0xa2, 0xee, 0x16, 0xb6, 0xaa, 0xbb, 0x27, 0x27, 0xd5, 0x93, 0xad, 0xe9, 0x6e, 0xf5, 0xe2,
		0x7f, 0xdb, 0x34, 0xb4, 0xe9, 0x04, 0x77, 0xad, 0x3b, 0x5a, 0xf4, 0x9b, 0xfa, 0xef, 0x81, 0x06,
		0xeb, 0x28, 0xd6, 0x57, 0x68, 0xf0, 0xfe, 0xbc, 0x1c, 0x00, 0xdb, 0x00, 0xdb, 0x6f, 0x58, 0xba,
		0xe8, 0x7a, 0xd2, 0x0f, 0x9e, 0xd7, 0x88, 0x4e, 0xdc, 0x21, 0xf3, 0xff, 0xff, 0xec, 0xfd, 0xeb,
		0x53, 0xdb, 0xba, 0x16, 0x37, 0x8e, 0xbf, 0xef, 0x5f, 0x91, 0xc9, 0x9c, 0x17, 0xed, 0x33, 0xcd,
		0x26, 0x77, 0x2e, 0x33, 0xcf, 0x3c, 0x43, 0x0b, 0xf4, 0x30, 0x07, 0x4a, 0x06, 0xd8, 0xdd, 0x3d,
		0xd3, 0x72, 0x3a, 0x8a, 0x2d, 0x27, 0xfa, 0xd5, 0x96, 0xbc, 0x25, 0x39, 0xc0, 0x6f, 0x97, 0xff,
		0xfd, 0x3b, 0x71, 0x2e, 0x04, 0x02, 0x25, 0xb6, 0x25, 0x25, 0xcb, 0x2c, 0xde, 0x34, 0xd0, 0x58,
		0xb2, 0x2d, 0x69, 0xad, 0xcf, 0xfa, 0xac, 0xdb, 0x7d, 0x08, 0x5b, 0x8e, 0xe2, 0x37, 0x6b, 0x84,
		0x00, 0x8c, 0x70, 0x52, 0x2b, 0x74, 0xf3, 0x26, 0x1e, 0xa2, 0xd8, 0xc3, 0x2c, 0x3d, 0x54, 0x2c,
		0x59, 0x44, 0xe4, 0xed, 0xf1, 0xc5, 0xc1, 0xe7, 0x02, 0x09, 0xc5, 0xef, 0xd7, 0xfe, 0x18, 0x2c,
		0x86, 0x7c, 0xfb, 0xbe, 0xf0, 0xd4, 0x47, 0xd2, 0x0f, 0xe9, 0x85, 0xa7, 0x69, 0xa7, 0xe3, 0x37,
		0x8e, 0xae, 0xfd, 0x33, 0xd1, 0x87, 0xfc, 0x48, 0x21, 0x89, 0x7d, 0xc8, 0xf7, 0x3f, 0x14, 0x4a,
		0xf7, 0x08, 0xe8, 0x47, 0x88, 0x7d, 0x9e, 0x86, 0x04, 0x9f, 0x08, 0x11, 0x37, 0x21, 0x3f, 0x08,
		0x09, 0x93, 0xc3, 0x93, 0x1e, 0xe4, 0x27, 0x50, 0xbe, 0xc7, 0x20, 0xdf, 0xff, 0x48, 0x30, 0x8f,
		0x1e, 0x9e, 0x42, 0x7e, 0x84, 0x68, 0x14, 0x42, 0xbe, 0x7d, 0x31, 0x3e, 0xc9, 0xa0, 0x0f, 0xb1,
		0xaf, 0x40, 0x2f, 0xc0, 0x08, 0xf8, 0xfd, 0x47, 0x71, 0xa8, 0x20, 0xdf, 0x3f, 0x53, 0x3e, 0x07,
		0x2f, 0x42, 0xcf, 0x46, 0x54, 0xee, 0xeb, 0x08, 0x34, 0xaa, 0x90, 0x22, 0xfe, 0x8b, 0x49, 0x1a,
		0x52, 0xa5, 0x7a, 0xcd, 0x1e, 0xf0, 0x47, 0xd1, 0x54, 0xf0, 0x46, 0xfd, 0xb4, 0xcf, 0x34, 0x68,
		0x78, 0x11, 0xf9, 0xea, 0xd8, 0x83, 0x6d, 0x03, 0xfd, 0xdd, 0xdc, 0x6d, 0x35, 0x40, 0x0b, 0x58,
		0x05, 0x5c, 0x43, 0x30, 0x1e, 0x30, 0xce, 0xfa, 0x84, 0x83, 0xb6, 0x7a, 0x02, 0x8f, 0xc5, 0x27,
		0x8c, 0xff, 0x04, 0xcd, 0x07, 0xc0, 0x56, 0x11, 0x8a, 0xc5, 0x97, 0x03, 0xc8, 0x0f, 0x70, 0xb3,
		0xd3, 0x3d, 0x21, 0x31, 0x68, 0xb8, 0x24, 0xe9, 0x20, 0x09, 0x89, 0x6c, 0xec, 0x34, 0x41, 0x9b,
		0xfe, 0x31, 0x91, 0x04, 0xb4, 0x4c, 0x8d, 0x27, 0xd5, 0x24, 0x40, 0x5b, 0x6e, 0x3a, 0x3a, 0x11,
		0x03, 0xe6, 0x11, 0xd0, 0xda, 0x8d, 0xa8, 0x5b, 0xee, 0xc1, 0x36, 0x80, 0xc4, 0xce, 0x4e, 0xbd,
		0xd9, 0xb9, 0x14, 0x3f, 0x29, 0x3f, 0x67, 0x7c, 0x00, 0x9c, 0xd2, 0xfb, 0x14, 0x0b, 0xde, 0x1b,
		0xde, 0xaa, 0xf1, 0xc6, 0xfa, 0x93, 0xb3, 0x32, 0xf1, 0xf7, 0xcd, 0x3f, 0x15, 0x70, 0xfa, 0x7e,
		0x6c, 0x51, 0x1c, 0xdc, 0xc0, 0xe7, 0x2c, 0x8f, 0xbe, 0x5e, 0x80, 0x5e, 0x06, 0x19, 0x03, 0x77,
		0x02, 0x81, 0x3e, 0x05, 0xc3, 0x56, 0xb3, 0xd5, 0x93, 0xe2, 0xe6, 0x16, 0xf2, 0x43, 0x68, 0x59,
		0xaf, 0xef, 0x40, 0x97, 0xae, 0x67, 0x81, 0x1f, 0x91, 0x3f, 0x63, 0xa5, 0x25, 0x25, 0xa0, 0x6d,
		0x23, 0x8f, 0xaa, 0x12, 0xe8, 0xed, 0x33, 0x9e, 0xc0, 0x77, 0x67, 0x71, 0x8f, 0xc0, 0x8e, 0x1a,
		0x18, 0xf5, 0xcf, 0x3d, 0xef, 0x94, 0x78, 0x27, 0xe4, 0x16, 0xb6, 0x6f, 0x28, 0x96, 0x22, 0x3e,
		0x10, 0x9e, 0x9a, 0xf1, 0xca, 0x07, 0xe2, 0x9a, 0xc3, 0x3f, 0xea, 0x84, 0x84, 0x1d, 0xd0, 0x06,
		0x07, 0xa5, 0x74, 0xa7, 0xde, 0x6c, 0x80, 0x26, 0x10, 0xc2, 0x16, 0x8b, 0x6f, 0x0a, 0xf6, 0x4b,
		0xd8, 0x04, 0x0b, 0xfc, 0x0b, 0x93, 0x3a, 0x81, 0x6d, 0x81, 0xab, 0x21, 0x70, 0x82, 0x5c, 0xaa,
		0x66, 0x0b, 0x76, 0x20, 0x8d, 0xf4, 0x38, 0xd5, 0xbd, 0x30, 0x01, 0x8d, 0x41, 0x44, 0xac, 0x99,
		0x47, 0xc2, 0x8f, 0x43, 0xc2, 0x39, 0x05, 0xbd, 0xa1, 0x86, 0x2c, 0x8e, 0xd9, 0xbc, 0x68, 0x1b,
		0x70, 0x09, 0x75, 0x94, 0xc0, 0x26, 0x71, 0x64, 0xe0, 0xed, 0x6c, 0x6f, 0xdf, 0x34, 0x41, 0xeb,
		0xec, 0x44, 0x81, 0x36, 0xb8, 0x07, 0xb1, 0xe0, 0xd0, 0x83, 0x9c, 0x40, 0x6b, 0x08, 0x8f, 0xc4,
		0xd7, 0x24, 0xfe, 0x4b, 0xc7, 0x53, 0xbc, 0x71, 0x4e, 0x7c, 0x26, 0xca, 0xc0, 0x9a, 0x1f, 0xb1,
		0x3e, 0x6c, 0x1b, 0x69, 0xb0, 0x5d, 0x6f, 0x11, 0xdd, 0x8c, 0xfa, 0x65, 0x58, 0x8d, 0x8f, 0xe7,
		0x47, 0xbd, 0x63, 0x0e, 0x3a, 0xe6, 0xc6, 0x67, 0x03, 0xa6, 0x49, 0xd8, 0x13, 0xd7, 0x54, 0x86,
		0x8c, 0x83, 0xd6, 0xde, 0x4a, 0x70, 0xaa, 0xbf, 0x5c, 0xc2, 0x76, 0xb4, 0x9e, 0x8d, 0xa8, 0xfc,
		0x18, 0x92, 0x6b, 0xd0, 0x81, 0x07, 0xcd, 0x46, 0x0b, 0xf2, 0xfd, 0xf3, 0x80, 0x80, 0x36, 0x2d,
		0x94, 0xda, 0xbe, 0x60, 0x03, 0xe8, 0xe1, 0x43, 0x04, 0x76, 0xf8, 0x50, 0x40, 0x94, 0x4e, 0x13,
		0x57, 0x8e, 0xbe, 0x82, 0x7e, 0x0c, 0x19, 0x34, 0xba, 0xa7, 0x81, 0xfc, 0x90, 0x70, 0x3f, 0xa4,
		0xa5, 0x70, 0x6f, 0x7f, 0xf6, 0x65, 0x09, 0xb2, 0x58, 0x8e, 0x3e, 0x1d, 0x80, 0x96, 0x51, 0x21,
		0xec, 0x40, 0xdf, 0xa9, 0x5f, 0xfe, 0x0c, 0xf4, 0x1a, 0x68, 0xe2, 0xfd, 0xbc, 0x14, 0x17, 0xe3,
		0x7f, 0x80, 0x3f, 0x87, 0x3c, 0x81, 0xcd, 0x8d, 0xcf, 0x85, 0xd3, 0x29, 0xf1, 0x42, 0xe8, 0x8e,
		0xb0, 0x28, 0xa6, 0x83, 0x4b, 0x49, 0xb8, 0x8a, 0x85, 0x04, 0x6d, 0x1d, 0x0d, 0xfd, 0x21, 0xf4,
		0xd0, 0x53, 0xa6, 0x7c, 0xd8, 0x5e, 0x6e, 0xc5, 0xe2, 0x0b, 0x06, 0x3b, 0x0e, 0xbb, 0x2f, 0x6e,
		0x66, 0x3e, 0xe1, 0x52, 0xe5, 0xf7, 0x9f, 0x53, 0x0d, 0x3c, 0x40, 0x90, 0x51, 0x4a, 0x1b, 0xad,
		0xdd, 0x36, 0xf8, 0x00, 0x0a, 0x75, 0xe9, 0x47, 0x04, 0x3e, 0xaa, 0xfd, 0x00, 0x3a, 0xce, 0x71,
		0xb0, 0xbb, 0xbb, 0xd3, 0x82, 0x5e, 0xa2, 0xa0, 0x3c, 0xf1, 0xcc, 0x1e, 0x53, 0x9e, 0x38, 0xbe,
		0x38, 0x81, 0x1e, 0x37, 0xb1, 0x14, 0x97, 0x7d, 0x00, 0x3d, 0x2e, 0xfb, 0xef, 0x30, 0x04, 0x9d,
		0xc4, 0xd0, 0x1f, 0xc4, 0xb1, 0x08, 0x99, 0x77, 0x4b, 0x3c, 0x4f, 0x24, 0x5c, 0x03, 0x4f, 0x63,
		0xf0, 0x7d, 0xfe, 0x15, 0xb6, 0xc3, 0x78, 0x78, 0x1b, 0x53, 0xe9, 0xc1, 0x0f, 0xa5, 0x20, 0x3a,
		0xfa, 0xe2, 0xb1, 0x43, 0xee, 0xf7, 0x74, 0x09, 0x62, 0x5b, 0x4a, 0x61, 0x03, 0x92, 0x11, 0xf3,
		0xd8, 0xd9, 0xe4, 0x81, 0x0e, 0xc1, 0x97, 0x2f, 0xd1, 0x11, 0xf0, 0x7c, 0x98, 0xc5, 0x72, 0x50,
		0x0d, 0xe0, 0x4b, 0xd1, 0x17, 0xb0, 0x93, 0xd4, 0x27, 0x81, 0x78, 0xa0, 0x11, 0xbb, 0x6c, 0xd5,
		0x5b, 0xe7, 0x07, 0x97, 0xf0, 0x83, 0x5d, 0x0e, 0x84, 0x6e, 0x34, 0x7a, 0x52, 0x04, 0x0c, 0xb6,
		0x97, 0x26, 0x16, 0xbc, 0x0b, 0x9b, 0x71, 0x23, 0x3a, 0xba, 0x48, 0xfa, 0xa5, 0x88, 0x87, 0xf4,
		0x15, 0x68, 0x11, 0x3b, 0x6a, 0x6d, 0x97, 0xa2, 0xd6, 0x52, 0x6a, 0xfc, 0x81, 0x4e, 0x5f, 0x68,
		0x42, 0xb7, 0xc1, 0x6f, 0x9a, 0x9d, 0x61, 0xc2, 0xf5, 0x27, 0x29, 0x92, 0x18, 0x7c, 0x8c, 0xd4,
		0x78, 0x4f, 0x0d, 0x29, 0xf1, 0x4b, 0x10, 0x7b, 0x4e, 0x1b, 0xc0, 0x7d, 0x1b, 0xb0, 0x63, 0x43,
		0x8e, 0x84, 0xbc, 0x26, 0xd2, 0x07, 0x7f, 0x22, 0x7a, 0x44, 0x0f, 0xcb, 0x94, 0x7a, 0x58, 0x06,
		0x2f, 0x72, 0x5f, 0xc1, 0x2e, 0x74, 0x02, 0x3c, 0x4d, 0xcc, 0x1f, 0xf5, 0xf7, 0x15, 0x3b, 0xe6,
		0xc0, 0x93, 0x61, 0x1a, 0x6d, 0xd8, 0x2e, 0x99, 0x69, 0xac, 0x79, 0xeb, 0xa3, 0x8a, 0x88, 0x07,
		0x5a, 0xd0, 0x32, 0xe0, 0x10, 0x90, 0xea, 0x21, 0x95, 0x9c, 0x6a, 0xf8, 0x2b, 0x11, 0x03, 0x2f,
		0xcc, 0xe7, 0xc3, 0xf6, 0x1e, 0x51, 0xd8, 0xd9, 0x61, 0x1a, 0xf8, 0xeb, 0x1f, 0x4d, 0x72, 0xc2,
		0x60, 0xd7, 0x76, 0x54, 0xec, 0xe6, 0x52, 0x1c, 0x89, 0x04, 0x76, 0x32, 0x98, 0x8e, 0xcb, 0x90,
		0x06, 0x76, 0xa0, 0x61, 0xfb, 0x84, 0x3c, 0x4d, 0x43, 0xa6, 0x4e, 0xa9, 0x26, 0x27, 0x67, 0x67,
		0x3d, 0xf0, 0x89, 0xab, 0x31, 0xf0, 0xc2, 0x00, 0xb3, 0x82, 0x25, 0x9d, 0x36, 0xec, 0x4e, 0x0f,
		0xfc, 0xcc, 0x4f, 0x60, 0x17, 0x92, 0xd6, 0x54, 0x86, 0x94, 0x8c, 0x28, 0xfc, 0xf2, 0x4a, 0xe5,
		0x28, 0x45, 0x34, 0x15, 0xb8, 0xdd, 0x53, 0xd8, 0x86, 0x44, 0x12, 0x6a, 0xd8, 0xe5, 0x80, 0x49,
		0x10, 0x12, 0x3e, 0x96, 0x51, 0xa0, 0x2d, 0xeb, 0x51, 0xa3, 0x01, 0xdc, 0x23, 0x11, 0xc3, 0xf6,
		0x0a, 0x0d, 0x95, 0x62, 0xa5, 0xf0, 0xcf, 0x1d, 0xc7, 0xe0, 0x63, 0x20, 0x8e, 0x61, 0xc7, 0x40,
		0xf8, 0xaa, 0x0e, 0x3f, 0x41, 0x35, 0xad, 0xa3, 0x04, 0x9a, 0x6e, 0x25, 0x3e, 0x13, 0xa7, 0xfb,
		0x1f, 0xa1, 0x37, 0x98, 0xba, 0x4c, 0xa0, 0xbb, 0x45, 0x23, 0xe2, 0x5d, 0x50, 0xef, 0xa3, 0xe0,
		0x5a, 0x8a, 0x30, 0xa4, 0xfe, 0xf1, 0x11, 0xe4, 0xa7, 0xb9, 0xbe, 0x26, 0xbc, 0x07, 0xbb, 0x73,
		0xa2, 0x08, 0xf4, 0x35, 0x91, 0xf4, 0x44, 0x88, 0xb8, 0x0f, 0x3c, 0xdb, 0x76, 0x8e, 0xfe, 0x3a,
		0xf0, 0x2b, 0xad, 0x00, 0xef, 0x62, 0xc6, 0x82, 0x2f, 0x01, 0x4b, 0x9b, 0x6e, 0xc3, 0xef, 0x5f,
		0xb6, 0x03, 0xbe, 0x7f, 0x59, 0x09, 0x0a, 0x1a, 0x8c, 0xcf, 0xc4, 0x91, 0x24, 0x11, 0x3d, 0xa7,
		0x21, 0x01, 0x5d, 0x2f, 0xde, 0x13, 0x51, 0x2c, 0x14, 0xd3, 0x14, 0x7a, 0x19, 0x9c, 0x28, 0xf6,
		0x80, 0x37, 0x4f, 0x08, 0x40, 0x7b, 0xbb, 0xc0, 0x63, 0xc1, 0xc1, 0xee, 0xee, 0x0e, 0x68, 0xa6,
		0x83, 0x7a, 0x02, 0x78, 0x9a, 0x01, 0x53, 0xb0, 0xa3, 0x46, 0x3d, 0xd2, 0x0f, 0xe9, 0x3d, 0x87,
		0x7c, 0x1e, 0xf4, 0x80, 0x27, 0x75, 0xdd, 0x34, 0x3b, 0x51, 0x08, 0x7a, 0x49, 0x62, 0xd8, 0x4e,
		0xf8, 0x40, 0x1e, 0x84, 0x25, 0x48, 0x74, 0x9c, 0x26, 0xcc, 0x03, 0x6f, 0x24, 0x32, 0x60, 0x03,
		0xd2, 0x67, 0x93, 0x6a, 0x75, 0xc0, 0x25, 0xed, 0x42, 0x32, 0xd4, 0x07, 0xd8, 0xd5, 0x56, 0x02,
		0xa2, 0x60, 0xa7, 0xd6, 0x41, 0x7f, 0x80, 0xa9, 0xb7, 0xb1, 0x9d, 0x76, 0x2a, 0xfc, 0x00, 0x3b,
		0xa6, 0x20, 0x8e, 0xe3, 0x12, 0x94, 0xc5, 0x05, 0x1e, 0x78, 0x16, 0x4b, 0x11, 0x7f, 0xe4, 0xa1,
		0x82, 0x1f, 0x4e, 0x50, 0x86, 0x16, 0x66, 0x93, 0x02, 0x8e, 0x9f, 0x0e, 0x0e, 0xf7, 0x3f, 0xef,
		0x83, 0x4e, 0x93, 0x20, 0x8a, 0x79, 0xc7, 0x17, 0x07, 0x9f, 0x41, 0x9b, 0x78, 0x71, 0x28, 0x15,
		0xec, 0xf6, 0x84, 0x84, 0xab, 0xf8, 0xdf, 0xc0, 0x25, 0x14, 0x8b, 0x4b, 0x90, 0xd0, 0xe5, 0x71,
		0x09, 0xbd, 0xd5, 0x57, 0x69, 0x2a, 0x56, 0xcd, 0x14, 0x05, 0x7c, 0xc6, 0x60, 0x04, 0xbd, 0x27,
		0xca, 0x18, 0x7d, 0x94, 0xa0, 0xfd, 0xda, 0xa8, 0xd5, 0x05, 0x1e, 0xa8, 0x02, 0xda, 0x19, 0x21,
		0x3c, 0xf2, 0x85, 0x4a, 0xc5, 0x04, 0x6f, 0xc0, 0x36, 0x4e, 0xe3, 0x32, 0xf4, 0x12, 0x2e, 0x47,
		0x58, 0xef, 0xdf, 0xc0, 0x1b, 0xa4, 0x4a, 0xf0, 0x0d, 0x78, 0xf7, 0x15, 0x3b, 0x4b, 0xca, 0x40,
		0xc4, 0x96, 0xc1, 0x20, 0x3d, 0x03, 0x5d, 0x03, 0xb7, 0x04, 0x45, 0x18, 0x59, 0xd0, 0xbb, 0x86,
		0x1e, 0x54, 0xe3, 0x87, 0xea, 0xba, 0x04, 0x7d, 0xc9, 0xfe, 0x92, 0x24, 0x8e, 0xa9, 0x2c, 0x51,
		0xc1, 0x1a, 0x49, 0x89, 0x37, 0x3c, 0xb8, 0x38, 0x01, 0x5e, 0xe1, 0xec, 0x18, 0x76, 0xb5, 0xf1,
		0x21, 0x8b, 0xa9, 0x0c, 0x09, 0x6f, 0x82, 0x57, 0x18, 0x07, 0xc7, 0xa0, 0xdb, 0x00, 0x85, 0xc2,
		0x23, 0xe1, 0x25, 0x09, 0x61, 0x87, 0x68, 0xdd, 0x4a, 0x06, 0xdc, 0x6f, 0x1a, 0x4b, 0x11, 0x7f,
		0xf8, 0x6b, 0x3f, 0x6e, 0x9e, 0x02, 0xaf, 0x48, 0x35, 0x8b, 0x5d, 0xbc, 0xa0, 0x72, 0xc4, 0x60,
		0x57, 0x5f, 0x9c, 0x04, 0xf1, 0xff, 0xc9, 0xbd, 0x92, 0x84, 0xf1, 0x4f, 0x1a, 0x55, 0x9c, 0x12,
		0xef, 0x04, 0x7a, 0x69, 0xaa, 0xc0, 0xf7, 0x61, 0x77, 0x46, 0xe8, 0x87, 0x5f, 0xa8, 0xa7, 0xc9,
		0x85, 0x26, 0xb2, 0x0c, 0xa9, 0xf2, 0xdd, 0xbf, 0x4e, 0xf7, 0x41, 0xfb, 0xbf, 0x46, 0xd1, 0x35,
		0x91, 0x74, 0x4a, 0xcf, 0x7e, 0x66, 0xa0, 0x9d, 0x48, 0x11, 0x13, 0xc0, 0xdb, 0xcf, 0xdf, 0x6b,
		0x91, 0xb4, 0x8a, 0xaf, 0x27, 0x38, 0xa7, 0x1e, 0x78, 0xf5, 0xbe, 0x0f, 0xbd, 0xea, 0x13, 0xec,
		0x7a, 0x7a, 0xf0, 0x33, 0x11, 0x64, 0x0c, 0x5b, 0x59, 0xf4, 0xa3, 0xd6, 0x76, 0x3d, 0x26, 0xf2,
		0xe3, 0x10, 0xb6, 0x77, 0xf5, 0x5e, 0x3c, 0x9d, 0xf6, 0x8e, 0x41, 0x6b, 0x8a, 0xa0, 0x04, 0x6d,
		0xaa, 0x1f, 0x97, 0x5e, 0x2d, 0x43, 0x6c, 0x54, 0xc8, 0x38, 0x1d, 0x40, 0x2f, 0x75, 0x3d, 0x75,
		0x09, 0x9c, 0x88, 0x01, 0xf3, 0x48, 0x58, 0x82, 0x6e, 0xe8, 0xe7, 0xc4, 0x67, 0x02, 0x78, 0x6f,
		0x87, 0x46, 0xa7, 0x24, 0xc8, 0x10, 0xb4, 0x22, 0x57, 0x12, 0x74, 0xfb, 0x38, 0xcf, 0xd3, 0x87,
		0x51, 0x12, 0x96, 0xa3, 0xdf, 0xf3, 0xc7, 0x48, 0xab, 0x72, 0xf8, 0xf1, 0x15, 0xf8, 0x34, 0xbd,
		0xa0, 0x36, 0x50, 0xe5, 0x0a, 0xbc, 0x2b, 0x81, 0xc7, 0x2c, 0x12, 0x3e, 0x8d, 0x60, 0x77, 0x11,
		0x07, 0x1e, 0x3a, 0x48, 0x08, 0xfc, 0xd0, 0xc7, 0x9e, 0x60, 0x5c, 0x5f, 0x8a, 0xf4, 0x9f, 0x0b,
		0x2a, 0x19, 0xec, 0x28, 0xc8, 0x80, 0x28, 0x0d, 0xbe, 0x19, 0xa1, 0x3f, 0xea, 0x5f, 0xfa, 0x51,
		0x09, 0xf8, 0xe7, 0x16, 0xf1, 0x4f, 0x08, 0xe8, 0x72, 0xd2, 0x7d, 0xc9, 0xfc, 0x01, 0x68, 0x67,
		0x59, 0x9f, 0x69, 0xe8, 0x19, 0x7a, 0xa7, 0x49, 0xa8, 0x59, 0xc8, 0xf8, 0x4f, 0xf8, 0xa5, 0xec,
		0xa6, 0x35, 0xd6, 0x8f, 0xe3, 0x7d, 0xdf, 0x97, 0x14, 0x7e, 0x22, 0x2e, 0x70, 0xee, 0x99, 0x03,
		0x6f, 0x34, 0x35, 0x14, 0x11, 0x8d, 0x39, 0x81, 0x5f, 0xc3, 0xae, 0x09, 0xbd, 0xa4, 0xb7, 0x86,
		0x5d, 0xe8, 0x60, 0xbb, 0xde, 0x22, 0xba, 0xdb, 0xfe, 0x59, 0x82, 0xbc, 0xf4, 0x26, 0xf0, 0x1e,
		0xfa, 0x4c, 0xf9, 0x1c, 0xb4, 0x5e, 0x88, 0xa8, 0xcf, 0xc8, 0x29, 0x61, 0x21, 0xfc, 0x12, 0xc0,
		0xbe, 0x6a, 0x41, 0xaf, 0x70, 0xd5, 0x2c, 0x41, 0xbf, 0xfc, 0x29, 0x59, 0x03, 0xbe, 0xc9, 0xe8,
		0x24, 0x9a, 0xe5, 0x33, 0xf3, 0x2e, 0x81, 0x33, 0x9a, 0xbe, 0x07, 0x9a, 0x0d, 0x1c, 0xb6, 0x9a,
		0xad, 0x4f, 0x44, 0xd3, 0x9f, 0x94, 0xc6, 0xb0, 0xa9, 0x82, 0x58, 0xa8, 0x52, 0xd1, 0xb2, 0xa5,
		0x78, 0x98, 0x72, 0x78, 0x2d, 0x46, 0x2d, 0xd0, 0x1e, 0x49, 0xaa, 0x3c, 0xd8, 0x69, 0x6f, 0x92,
		0x00, 0x37, 0xae, 0x03, 0xd6, 0x97, 0xb4, 0x04, 0x7e, 0x16, 0x4f, 0x04, 0x01, 0x85, 0x9d, 0xf4,
		0xa6, 0x1a, 0x47, 0x07, 0x27, 0x65, 0x08, 0x68, 0x06, 0x9d, 0x5c, 0xcf, 0x22, 0x5d, 0x86, 0x3e,
		0xaf, 0x2d, 0xe8, 0xf5, 0xc8, 0x63, 0x29, 0x26, 0x9c, 0x72, 0x1c, 0xd2, 0x1b, 0x01, 0xbb, 0x47,
		0x61, 0xa3, 0x79, 0x1a, 0xc7, 0x17, 0xd7, 0x4c, 0x7b, 0x43, 0xd8, 0x41, 0xc0, 0x32, 0xea, 0x11,
		0x1f, 0xb6, 0x37, 0x1b, 0x36, 0xef, 0x14, 0x46, 0x71, 0x29, 0xd0, 0xf7, 0x67, 0xbf, 0x48, 0x5d,
		0xf5, 0x5c, 0x57, 0x5e, 0xbd, 0x71, 0xf0, 0xbe, 0xf2, 0xbd, 0xa7, 0x05, 0xa1, 0xc7, 0x22, 0x22,
		0x6f, 0xf3, 0x15, 0xc4, 0x5b, 0xc3, 0xed, 0xe6, 0x71, 0xcc, 0xb8, 0xbf, 0xcd, 0xf9, 0xae, 0xbb,
		0xf0, 0x34, 0xed, 0x74, 0xfc, 0xc6, 0xd1, 0xb5, 0x7f, 0x26, 0xfa, 0x10, 0x6e, 0x3d, 0x24, 0xb1,
		0x0f, 0xe1, 0x3e, 0x87, 0x42, 0xe9, 0x5c, 0xaa, 0x61, 0x0d, 0x9b, 0xd6, 0xe7, 0x69, 0xf0, 0xc9,
		0x89, 0x10, 0x71, 0x13, 0xc2, 0x0d, 0x93, 0x30, 0x39, 0x3c, 0xe9, 0x41, 0xb8, 0x53, 0xe5, 0x7b,
		0x0c, 0xc2, 0x7d, 0xa6, 0xb5, 0x07, 0x0e, 0x4f, 0x21, 0xdc, 0x6a, 0x34, 0x0a, 0x21, 0xdc, 0xa6,
		0xc8, 0x17, 0xce, 0xb5, 0x86, 0xc3, 0x94, 0x8b, 0xaf, 0x59, 0xc3, 0x16, 0x05, 0x72, 0x9f, 0x51,
		0x9c, 0xa7, 0x24, 0xb4, 0xfb, 0xfb, 0x64, 0xca, 0xe7, 0x60, 0x44, 0x53, 0xee, 0xe6, 0x6e, 0xeb,
		0x40, 0xac, 0x22, 0x9e, 0x25, 0x8f, 0xf5, 0x9a, 0x3d, 0x20, 0xb7, 0xac, 0xa9, 0xe0, 0x8d, 0x9c,
		0x2d, 0xdb, 0xd6, 0xa0, 0x56, 0x23, 0x5f, 0x1d, 0x7b, 0x30, 0xb0, 0xf6, 0xdf, 0xcd, 0xdd, 0x56,
		0x03, 0x84, 0xe0, 0x52, 0x40, 0x24, 0x2c, 0xe3, 0x01, 0xe3, 0xac, 0x4f, 0x38, 0x08, 0x74, 0x1d,
		0x78, 0x2c, 0xce, 0x97, 0xad, 0xb8, 0x06, 0xbb, 0x10, 0x86, 0x88, 0x55, 0x2c, 0xbe, 0x1c, 0x40,
		0xb8, 0xd1, 0x9b, 0x9d, 0xee, 0x09, 0x89, 0x41, 0xc0, 0x01, 0x49, 0x07, 0x49, 0x48, 0x64, 0x63,
		0xa7, 0x09, 0xc2, 0x04, 0x8c, 0x89, 0x24, 0x20, 0x64, 0x55, 0x6e, 0x96, 0x7b, 0x0d, 0x96, 0x80,
		0x8e, 0xa6, 0xd9, 0xd5, 0x20, 0xee, 0x56, 0xdd, 0x72, 0x0f, 0x06, 0xd0, 0x4e, 0x03, 0x3c, 0x3b,
		0x69, 0xe3, 0xa1, 0x73, 0xc6, 0x07, 0x40, 0x28, 0x96, 0x4f, 0xb1, 0xe0, 0xbd, 0xe1, 0xad, 0x1a,
		0x6f, 0x88, 0x3f, 0x39, 0x83, 0xc8, 0x6b, 0x36, 0xff, 0x54, 0x40, 0x68, 0xcd, 0x31, 0xa2, 0x3d,
		0xb8, 0x81, 0xc3, 0x15, 0x1d, 0x7d, 0xbd, 0x00, 0xf1, 0x5a, 0x65, 0x0c, 0x84, 0xd4, 0x06, 0xb1,
		0x4b, 0x87, 0xad, 0x66, 0xab, 0x27, 0xc5, 0xcd, 0x2d, 0x84, 0x9b, 0xd5, 0xb2, 0x5e, 0xdf, 0x81,
		0x22, 0xb5, 0xce, 0x02, 0x3f, 0x22, 0xf9, 0xc3, 0x09, 0xdd, 0xdf, 0xb4, 0x47, 0x15, 0x20, 0x3d,
		0x96, 0xab, 0xa3, 0xe7, 0xba, 0x68, 0x78, 0xee, 0x11, 0x18, 0x5e, 0xc4, 0xb4, 0x79, 0x5c, 0xfe,
		0x02, 0xa0, 0xeb, 0xe1, 0xe6, 0x16, 0x8b, 0x3b, 0x15, 0x09, 0x79, 0x5d, 0xc3, 0x5e, 0x26, 0x61,
		0x07, 0x04, 0xe0, 0x9d, 0x46, 0xbd, 0x81, 0x30, 0x24, 0xc3, 0x16, 0x8b, 0x6f, 0xf2, 0x35, 0xe8,
		0x5a, 0x8b, 0x85, 0x96, 0xbb, 0xe7, 0xd3, 0x1a, 0xc0, 0xd7, 0x10, 0x08, 0xa1, 0x28, 0x55, 0xb3,
		0x05, 0xc3, 0xf1, 0x2d, 0x3d, 0x4e, 0x75, 0x2f, 0x4c, 0x40, 0xe8, 0xde, 0x87, 0x69, 0x50, 0x20,
		0xf0, 0x2d, 0x8b, 0x63, 0x96, 0x16, 0x89, 0x0d, 0x48, 0x9e, 0x62, 0xe3, 0x6b, 0x91, 0x08, 0x47,
		0x09, 0x0c, 0xe3, 0x5c, 0x06, 0xde, 0xce, 0xf6, 0x76, 0xae, 0x5a, 0xc2, 0xee, 0x6f, 0x36, 0x51,
		0x20, 0x0c, 0xb2, 0x41, 0xae, 0x26, 0x49, 0xeb, 0x09, 0x32, 0x00, 0x21, 0x61, 0x27, 0x0d, 0xe7,
		0xff, 0xd2, 0xb3, 0xde, 0x8a, 0x39, 0x8b, 0x34, 0xae, 0x8f, 0x65, 0x3c, 0x62, 0x7d, 0x18, 0x58,
		0x7c, 0x92, 0xbc, 0xdf, 0x8c, 0xfa, 0x90, 0xde, 0xee, 0xc7, 0xf3, 0xa3, 0xde, 0x31, 0x07, 0xe1,
		0x23, 0x9f, 0xb6, 0x5c, 0xea, 0x89, 0x6b, 0x2a, 0x43, 0xc6, 0x41, 0x68, 0xb3, 0xb4, 0xe4, 0xe0,
		0x97, 0x4b, 0x18, 0x8e, 0x9d, 0xb4, 0x87, 0x7d, 0x48, 0xae, 0x41, 0x38, 0x22, 0x9b, 0x8d, 0x16,
		0x84, 0xfb, 0xe4, 0x01, 0x01, 0x01, 0x6d, 0x95, 0xda, 0xce, 0x5d, 0xeb, 0x7a, 0x2d, 0x20, 0x11,
		0x44, 0xa4, 0xc4, 0xac, 0x0a, 0xde, 0xd1, 0x57, 0x10, 0xb7, 0x2b, 0x83, 0x46, 0xf7, 0x34, 0x90,
		0x79, 0xcb, 0x7b, 0xad, 0xd1, 0x3d, 0xf6, 0xd9, 0x97, 0x80, 0xa2, 0x92, 0x8f, 0x3e, 0x1d, 0x80,
		0x90, 0x09, 0x21, 0x8c, 0x80, 0xb4, 0xa9, 0xff, 0xee, 0x0c, 0xc4, 0x3b, 0xd5, 0xc4, 0xfb, 0x79,
		0x29, 0x2e, 0xc6, 0xff, 0x00, 0xb9, 0x5f, 0x79, 0x02, 0x83, 0x4b, 0xbc, 0x2f, 0x59, 0x4d, 0xbc,
		0x10, 0x0a, 0x81, 0x1f, 0xc5, 0x74, 0x70, 0x29, 0x09, 0x57, 0xb1, 0x90, 0x20, 0x50, 0xf8, 0xd0,
		0x1f, 0x42, 0x09, 0xa9, 0x62, 0xca, 0x87, 0xe1, 0x25, 0x53, 0x2c, 0xbe, 0x60, 0x30, 0xe2, 0xff,
		0xfa, 0xe2, 0x66, 0xe6, 0x6b, 0x02, 0x99, 0x17, 0x78, 0x4e, 0x35, 0x90, 0x00, 0x1a, 0x46, 0x29,
		0x6d, 0xb4, 0x76, 0xdb, 0x60, 0x1c, 0xa7, 0xea, 0xd2, 0x8f, 0x08, 0x1c, 0x14, 0xf6, 0x01, 0x44,
		0xbc, 0xcf, 0x60, 0x77, 0x77, 0xa7, 0x05, 0x25, 0x85, 0x11, 0x5e, 0x7c, 0x9d, 0xc7, 0x94, 0x27,
		0x8e, 0x2f, 0x4e, 0xa0, 0xf8, 0x4b, 0x97, 0xe2, 0x01, 0x0f, 0xa0, 0xc4, 0x03, 0xfe, 0x9d, 0xab,
		0x1c, 0xa8, 0xfb, 0xfb, 0xec, 0x0f, 0xe2, 0x58, 0x84, 0xcc, 0xbb, 0x25, 0x9e, 0x27, 0x12, 0xae,
		0x81, 0x84, 0xb7, 0xfa, 0x3e, 0xff, 0x0a, 0xc3, 0x11, 0x35, 0xbc, 0x8d, 0xa9, 0xf4, 0xe0, 0xb8,
		0x50, 0x89, 0x8e, 0xbe, 0x78, 0xec, 0x90, 0xfb, 0x3d, 0x0d, 0xc8, 0x47, 0x0d, 0xca, 0xa6, 0x20,
		0x23, 0xe6, 0xb1, 0xb3, 0xc9, 0x8d, 0x1f, 0x82, 0x49, 0x33, 0xd6, 0x11, 0x90, 0xf8, 0xe6, 0xc5,
		0x72, 0x08, 0x0d, 0x20, 0xaf, 0xb6, 0x2f, 0x60, 0x24, 0xc3, 0x4d, 0x02, 0x58, 0x40, 0x20, 0x49,
		0xd9, 0xaa, 0xb7, 0xce, 0x0f, 0x2e, 0xe1, 0x38, 0xad, 0x0f, 0x84, 0x6e, 0x34, 0x7a, 0x52, 0x04,
		0x0c, 0x06, 0x1b, 0x1d, 0x0b, 0xde, 0x85, 0xc1, 0x8c, 0x10, 0x1d, 0x5d, 0x24, 0x7d, 0x50, 0x71,
		0x41, 0xbe, 0x02, 0x21, 0xba, 0x46, 0xad, 0x6d, 0x50, 0x35, 0x08, 0x52, 0x63, 0x02, 0x44, 0x58,
		0x6b, 0x13, 0x8a, 0x8d, 0x76, 0xd3, 0xec, 0x0c, 0x13, 0xae, 0x73, 0x56, 0x49, 0x5f, 0x53, 0x8c,
		0xc2, 0x78, 0x2f, 0x0c, 0x29, 0xf1, 0x01, 0xc5, 0x36, 0xd2, 0x06, 0x10, 0x6e, 0x17, 0x86, 0xef,
		0xf7, 0x48, 0xc8, 0x6b, 0x22, 0x7d, 0x30, 0x3b, 0xb6, 0x47, 0xf4, 0x10, 0x62, 0x8a, 0x06, 0x24,
		0xef, 0x54, 0x5f, 0xc1, 0x48, 0x48, 0x06, 0x12, 0x96, 0xef, 0x8f, 0xfa, 0xfb, 0x8a, 0x1d, 0x73,
		0x20, 0xc1, 0xcd, 0x8d, 0x36, 0x0c, 0xea, 0x79, 0x1a, 0xcb, 0xd8, 0xfa, 0xa8, 0x22, 0xe2, 0x81,
		0x10, 0x60, 0x0c, 0x08, 0x94, 0x99, 0x95, 0x9a, 0x86, 0xf3, 0x66, 0x63, 0x20, 0x05, 0x5f, 0x7c,
		0x18, 0x6c, 0x38, 0x85, 0x11, 0x8d, 0xaf, 0x81, 0xbc, 0xce, 0x69, 0xdb, 0x49, 0x18, 0xb5, 0x7e,
		0x14, 0xbb, 0xb9, 0x14, 0x47, 0x22, 0x81, 0x11, 0x7c, 0xaf, 0x63, 0x48, 0x61, 0xf7, 0x07, 0x1a,
		0x06, 0xc7, 0xed, 0x69, 0x1a, 0x32, 0x75, 0x4a, 0x35, 0x39, 0x39, 0x3b, 0xeb, 0x81, 0x49, 0xcc,
		0x89, 0x81, 0x24, 0x14, 0xce, 0x12, 0x8b, 0x3b, 0x6d, 0x18, 0x15, 0x60, 0xf9, 0x99, 0x9f, 0xc0,
		0x28, 0xa8, 0xa7, 0xa9, 0x0c, 0x29, 0x19, 0x51, 0x38, 0x65, 0x07, 0x60, 0xa5, 0xee, 0x4f, 0x05,
		0x59, 0xf7, 0x14, 0x06, 0x90, 0x4d, 0x42, 0x0d, 0xa3, 0xbc, 0x1a, 0x09, 0x42, 0xc2, 0xd3, 0x9e,
		0xed, 0x20, 0xf0, 0x4c, 0xa3, 0x01, 0x84, 0x91, 0x8d, 0x61, 0xb0, 0xdc, 0x43, 0xa5, 0x18, 0x28,
		0xff, 0xc1, 0x71, 0x0c, 0xc6, 0xf7, 0x79, 0x0c, 0xc3, 0xf7, 0xe9, 0xab, 0x3a, 0x9c, 0x04, 0x9c,
		0xb4, 0xbe, 0x00, 0x08, 0x3a, 0x8b, 0xf8, 0x4c, 0x9c, 0xee, 0x7f, 0x84, 0x52, 0x70, 0xfd, 0x32,
		0x81, 0xe2, 0x86, 0x89, 0x88, 0x77, 0x41, 0xbd, 0x8f, 0x82, 0x6b, 0x29, 0xc2, 0x90, 0xfa, 0xc7,
		0x47, 0x10, 0xee, 0x7a, 0xd2, 0xee, 0x1e, 0x86, 0xb3, 0x23, 0xd0, 0xd7, 0x44, 0xd2, 0x13, 0x21,
		0xe2, 0x3e, 0x90, 0xac, 0xa1, 0x39, 0x8a, 0xe9, 0xc0, 0xc9, 0x7c, 0x06, 0x52, 0x8d, 0x9f, 0x05,
		0x5f, 0x02, 0x76, 0x79, 0x1b, 0x53, 0x40, 0x75, 0xf8, 0x77, 0xc0, 0xd4, 0xe1, 0x07, 0x94, 0xf0,
		0x38, 0xde, 0xb3, 0x47, 0x92, 0x44, 0xf4, 0x9c, 0x86, 0x04, 0x44, 0xfd, 0x4a, 0x4f, 0x44, 0xb1,
		0x50, 0x4c, 0x53, 0x28, 0x69, 0xe6, 0x51, 0xec, 0x01, 0x29, 0xb6, 0x1a, 0x80, 0x60, 0xe9, 0xc1,
		0x60, 0x9a, 0xc1, 0xee, 0xee, 0x0e, 0x08, 0xcb, 0x96, 0x7a, 0x02, 0x48, 0xf8, 0x29, 0x53, 0x30,
		0xa2, 0xa1, 0xbc, 0x87, 0x9d, 0xe3, 0xcf, 0x83, 0x1e, 0x90, 0x20, 0xfa, 0x9b, 0x66, 0x27, 0x0a,
		0x41, 0xbc, 0xe2, 0x18, 0x86, 0xb3, 0x2e, 0x90, 0x07, 0x21, 0xa0, 0xc4, 0x8f, 0x69, 0x02, 0x1e,
		0x90, 0xc2, 0xc0, 0x03, 0x36, 0x20, 0x7d, 0x36, 0xa9, 0x8e, 0x02, 0x44, 0x82, 0x2d, 0x04, 0xa5,
		0x7f, 0x80, 0x91, 0xfd, 0x1c, 0x10, 0x05, 0x23, 0x35, 0x01, 0xca, 0x8d, 0x4e, 0xbd, 0x1e, 0xed,
		0xb4, 0xf3, 0xc5, 0x07, 0x18, 0x3e, 0xc6, 0x38, 0x8e, 0x01, 0x95, 0x1f, 0x03, 0x12, 0xc8, 0x11,
		0x4b, 0x11, 0x7f, 0xe4, 0x30, 0xfa, 0x22, 0x4e, 0xdc, 0x8b, 0x90, 0x4a, 0xf1, 0x4f, 0x0a, 0xfa,
		0x7c, 0x3a, 0x38, 0xdc, 0xff, 0xbc, 0x0f, 0x22, 0x4c, 0x96, 0x28, 0xe6, 0x41, 0xe9, 0xe8, 0x4d,
		0xe3, 0x50, 0x2a, 0x18, 0xed, 0x2e, 0x08, 0x57, 0xf1, 0xbf, 0x81, 0x48, 0x04, 0x16, 0x03, 0x0a,
		0xa0, 0xf7, 0xb8, 0x84, 0x52, 0xca, 0x1e, 0x5c, 0x65, 0x86, 0x99, 0xa0, 0x85, 0x63, 0x39, 0x8e,
		0xa0, 0xd4, 0x32, 0x1e, 0x6b, 0x5d, 0x40, 0xed, 0x02, 0x46, 0xad, 0x2e, 0x10, 0x87, 0x33, 0x08,
		0x32, 0x56, 0x78, 0xe4, 0x0b, 0x95, 0x8a, 0x09, 0xde, 0x80, 0x61, 0xd4, 0xc4, 0x90, 0x7a, 0x35,
		0xc1, 0x0a, 0x3f, 0xfb, 0x1b, 0x48, 0x83, 0x1b, 0x09, 0xa6, 0xf1, 0xd1, 0xbe, 0x62, 0x67, 0x09,
		0x24, 0xa2, 0x0b, 0x92, 0x21, 0x73, 0x06, 0xa2, 0xd6, 0x18, 0xa0, 0xa2, 0x3c, 0x2c, 0xe8, 0x5d,
		0x43, 0x71, 0x82, 0xfb, 0xa1, 0xba, 0x06, 0x54, 0x5f, 0xff, 0x2f, 0x49, 0xe2, 0x98, 0x4a, 0x80,
		0x09, 0xe1, 0x92, 0x12, 0x6f, 0x78, 0x70, 0x71, 0x02, 0xa4, 0x02, 0xc7, 0x31, 0x8c, 0x6a, 0x89,
		0x43, 0x16, 0x53, 0x19, 0x12, 0xde, 0x04, 0x23, 0x70, 0x0f, 0x8e, 0x41, 0x94, 0xd7, 0x0e, 0x85,
		0x47, 0xc2, 0x4b, 0x12, 0xc2, 0x08, 0x85, 0xb8, 0x95, 0x0c, 0x88, 0x9f, 0x66, 0x6c, 0x25, 0x7e,
		0xf8, 0x6b, 0x3f, 0x6e, 0x9e, 0x02, 0xa9, 0xbc, 0x30, 0x8b, 0xe1, 0xb9, 0xa0, 0x72, 0xc4, 0x60,
		0x54, 0xe3, 0x99, 0x04, 0x7d, 0xfe, 0xc9, 0x3d, 0x60, 0x61, 0x9f, 0x93, 0x42, 0xb5, 0x90, 0x3a,
		0x7c, 0x06, 0xbe, 0x0f, 0xa3, 0x92, 0x6a, 0x3f, 0xfc, 0x42, 0x3d, 0x4d, 0x2e, 0x34, 0x91, 0x90,
		0x52, 0xef, 0xba, 0x7f, 0x9d, 0xee, 0x83, 0xe0, 0xed, 0x47, 0xd1, 0x35, 0x91, 0x74, 0x4a, 0x7f,
		0x7d, 0x66, 0x20, 0x48, 0xf1, 0x88, 0x09, 0x20, 0xed, 0xf1, 0xee, 0xa5, 0x70, 0x5a, 0x15, 0xcd,
		0x13, 0x9c, 0x53, 0x0f, 0x8c, 0xba, 0xdb, 0x87, 0x52, 0xf5, 0x00, 0x46, 0x9d, 0x16, 0x38, 0x11,
		0xaa, 0x32, 0x86, 0x21, 0x6c, 0xfb, 0x51, 0x6b, 0xbb, 0x1e, 0x13, 0x39, 0xb6, 0x26, 0x61, 0x89,
		0x83, 0xd3, 0xde, 0x31, 0x08, 0x49, 0x1b, 0x00, 0x6a, 0xdf, 0xf5, 0xb8, 0x24, 0x16, 0xa4, 0xd8,
		0x84, 0x90, 0x71, 0x3a, 0x80, 0x52, 0xda, 0x6f, 0x4a, 0x95, 0x9e, 0x88, 0x01, 0xf3, 0x48, 0x08,
		0xa8, 0xbb, 0x1b, 0x98, 0x2e, 0xa5, 0xb1, 0xe0, 0x8d, 0x0e, 0x30, 0x84, 0x03, 0xa3, 0x83, 0xb9,
		0x04, 0xd1, 0xd6, 0xc0, 0xf3, 0xf4, 0x61, 0x94, 0x84, 0xb0, 0xfa, 0x63, 0x7d, 0x8c, 0xb4, 0x82,
		0xe5, 0xef, 0x53, 0x60, 0xd2, 0x1c, 0x82, 0xda, 0x40, 0xc1, 0x0c, 0x58, 0x01, 0xc4, 0xf4, 0x47,
		0xc2, 0xa7, 0x11, 0x8c, 0x6e, 0x69, 0x40, 0x42, 0x6b, 0x08, 0x81, 0x13, 0x02, 0xd4, 0x13, 0x8c,
		0xeb, 0x4b, 0x91, 0xfe, 0x73, 0x41, 0x25, 0x83, 0x11, 0x0d, 0x34, 0x6f, 0x06, 0x0b, 0x84, 0x27,
		0xbd, 0xf4, 0x23, 0x40, 0x3c, 0x5e, 0x8b, 0xf8, 0x27, 0x04, 0x44, 0x59, 0xbd, 0xbe, 0x64, 0xfe,
		0x00, 0x04, 0xc9, 0xdf, 0x67, 0x1a, 0x4a, 0x86, 0xc3, 0x69, 0x12, 0x6a, 0x16, 0x32, 0xfe, 0x13,
		0x4e, 0xe9, 0x94, 0x69, 0x2d, 0xc8, 0xe3, 0x78, 0xdf, 0xf7, 0x25, 0x85, 0x93, 0x50, 0x04, 0x84,
		0xc3, 0xe3, 0x40, 0x0a, 0xaf, 0x0f, 0x45, 0x44, 0x63, 0x4e, 0xe0, 0xd4, 0x4c, 0x69, 0x42, 0x29,
		0x55, 0xa8, 0x61, 0x24, 0x42, 0x6e, 0xd7, 0x5b, 0x44, 0x77, 0xdb, 0x3f, 0x01, 0xe5, 0xbf, 0x35,
		0x81, 0xf4, 0xf2, 0x63, 0xca, 0xe7, 0x20, 0xe4, 0x6a, 0x44, 0x7d, 0x46, 0x4e, 0x09, 0x0b, 0xe1,
		0x94, 0x54, 0xf3, 0x55, 0x0b, 0x4a, 0x25, 0x87, 0x26, 0xa0, 0xbe, 0x7d, 0x53, 0x23, 0x1c, 0x4c,
		0xf3, 0x98, 0x89, 0x57, 0xfa, 0x33, 0xf3, 0x2e, 0x81, 0x30, 0x49, 0xbe, 0x07, 0x82, 0x9d, 0x19,
		0xb6, 0x9a, 0xad, 0x4f, 0x44, 0xd3, 0x9f, 0x94, 0xc6, 0x30, 0x4c, 0xc6, 0x58, 0x28, 0x90, 0xb4,
		0x17, 0xa8, 0x9b, 0x86, 0xc5, 0xda, 0x8e, 0x5a, 0x20, 0x3c, 0x23, 0x54, 0x79, 0x30, 0xd2, 0x09,
		0x24, 0x01, 0x62, 0x7c, 0x05, 0xac, 0x2f, 0x29, 0x20, 0x3e, 0xd9, 0x13, 0x41, 0x40, 0xa1, 0xb4,
		0x41, 0x3c, 0x3a, 0x38, 0x81, 0x14, 0x60, 0x07, 0x22, 0x59, 0x8f, 0x45, 0x1a, 0x52, 0x3f, 0x9e,
		0x16, 0x94, 0x7a, 0x8a, 0xb1, 0x14, 0x13, 0x6e, 0x2e, 0x0e, 0xe9, 0x8d, 0x80, 0xd1, 0xf3, 0xa2,
		0xd1, 0x3c, 0x8d, 0xe3, 0x8b, 0x6b, 0xa6, 0xbd, 0x21, 0x8c, 0x60, 0x35, 0x19, 0xf5, 0x88, 0x0f,
		0xc3, 0x1b, 0x06, 0x83, 0x37, 0x08, 0xa3, 0x18, 0x14, 0x2a, 0xfc, 0xec, 0xe7, 0xa9, 0xff, 0x98,
		0xe9, 0x8a, 0xab, 0x37, 0x66, 0xc7, 0x7d, 0xf9, 0x5b, 0xbf, 0xff, 0xc6, 0x0b, 0x6f, 0xbb, 0x7a,
		0x78, 0xa3, 0x55, 0x75, 0xaf, 0xf2, 0xed, 0x8d, 0x99, 0x35, 0xa8, 0xfe, 0x87, 0xde, 0x5e, 0x0b,
		0xe9, 0xa7, 0x96, 0xba, 0x57, 0xa3, 0x37, 0x7a, 0x4f, 0xd3, 0x90, 0x46, 0x54, 0xcb, 0xdb, 0x9a,
		0xe0, 0x35, 0x6f, 0x48, 0xf8, 0x80, 0x56, 0x57, 0xdb, 0x02, 0xd5, 0x7f, 0x13, 0xb5, 0x2f, 0x07,
		0x49, 0x44, 0xb9, 0xae, 0xee, 0x55, 0x02, 0x12, 0x2a, 0xba, 0xe2, 0x95, 0x0b, 0x97, 0x55, 0xab,
		0x05, 0x5f, 0xe1, 0xd5, 0x0b, 0xaf, 0x70, 0x3f, 0x19, 0x8c, 0xa7, 0xa2, 0xbe, 0xc9, 0xf7, 0x38,
		0xdb, 0xbb, 0x5b, 0xc2, 0xab, 0xb1, 0x60, 0x8f, 0xcd, 0x5a, 0x50, 0xab, 0xc7, 0x7f, 0x98, 0xfe,
		0xee, 0x09, 0x1e, 0xb0, 0xc1, 0xaa, 0x2f, 0xf6, 0x80, 0x2a, 0x4f, 0xb2, 0x58, 0x33, 0xc1, 0xc7,
		0x93, 0xec, 0xfb, 0xbe, 0xaa, 0x5c, 0xf6, 0x8e, 0x0f, 0x2a, 0x5b, 0x95, 0x54, 0x75, 0xea, 0xdb,
		0x98, 0x56, 0x14, 0xd5, 0x9a, 0xf1, 0x41, 0x25, 0x10, 0xb2, 0xa2, 0x87, 0xb4, 0xd2, 0x27, 0x8a,
		0x56, 0xe6, 0xf3, 0xae, 0x3a, 0xd5, 0x7f, 0x18, 0x1f, 0xbf, 0x98, 0xc6, 0x8a, 0x5f, 0xff, 0x38,
		0x79, 0x8e, 0xbd, 0x4a, 0x7d, 0xc5, 0x0b, 0x7a, 0x92, 0x06, 0xec, 0xa6, 0xba, 0x97, 0x41, 0x48,
		0xdc, 0x73, 0x49, 0x5e, 0x2d, 0x2d, 0x9b, 0xb2, 0xba, 0x44, 0xaa, 0x5e, 0x88, 0x44, 0x7a, 0x34,
		0xd3, 0x74, 0x8f, 0xcf, 0x45, 0x3c, 0xb9, 0xe3, 0x6c, 0x62, 0xf0, 0xd1, 0x59, 0xd0, 0x32, 0xa1,
		0x19, 0x07, 0x58, 0x3c, 0x12, 0xb3, 0x07, 0x37, 0x2d, 0xac, 0x56, 0xdd, 0x7e, 0x4c, 0x66, 0x5b,
		0x30, 0x1d, 0x33, 0x3f, 0xfb, 0x3b, 0x9f, 0x6b, 0xfe, 0xf1, 0xd5, 0x19, 0xdf, 0xd6, 0xa3, 0x13,
		0x72, 0x96, 0x7e, 0x22, 0x61, 0x78, 0x3b, 0x3e, 0x16, 0xe9, 0x71, 0xd0, 0x64, 0x50, 0x89, 0xa5,
		0xd0, 0xc2, 0x13, 0x61, 0x85, 0xf9, 0x94, 0x6b, 0x16, 0x30, 0x2a, 0x2b, 0x01, 0xa3, 0xa1, 0x5f,
		0x79, 0x3b, 0x3e, 0x4e, 0xef, 0x2a, 0x7a, 0x48, 0xf4, 0x77, 0xce, 0x54, 0x85, 0x78, 0x1e, 0x8d,
		0x35, 0xf5, 0x2b, 0x82, 0xa7, 0x57, 0x7f, 0x39, 0xd9, 0xff, 0x9c, 0xfd, 0x9e, 0x02, 0x92, 0x84,
		0x8b, 0x0b, 0x58, 0x1b, 0x1f, 0x54, 0xb5, 0x37, 0x9e, 0xeb, 0x47, 0xfd, 0xeb, 0x4e, 0xa3, 0x5e,
		0xcf, 0x3a, 0xe6, 0xf4, 0x78, 0xd6, 0x33, 0x5e, 0x96, 0xf5, 0x98, 0x16, 0x39, 0xae, 0x06, 0x8e,
		0x6d, 0xd1, 0xe3, 0x6b, 0xec, 0x18, 0x1b, 0x3b, 0xce, 0x66, 0x8e, 0x75, 0x3e, 0x8c, 0x93, 0x11,
		0xc1, 0x55, 0xd3, 0x02, 0x04, 0x85, 0x56, 0x7c, 0x72, 0xbc, 0xf4, 0xad, 0xa4, 0x41, 0x9e, 0x55,
		0x9f, 0xe9, 0xa0, 0x4e, 0x8e, 0x6b, 0x8f, 0xa7, 0x53, 0x7f, 0x20, 0xaa, 0xc0, 0xbe, 0x99, 0x3d,
		0x48, 0x7a, 0x52, 0x2f, 0xff, 0xdb, 0x3b, 0xbc, 0xc8, 0xbb, 0x71, 0xbe, 0x90, 0x30, 0xa1, 0xab,
		0x41, 0x36, 0xb3, 0x70, 0xfa, 0xe9, 0x67, 0xa9, 0x7f, 0xdd, 0x1d, 0x4b, 0x9d, 0xdc, 0x23, 0xde,
		0xbd, 0xdf, 0x94, 0xc7, 0x68, 0x96, 0xe2, 0x31, 0x76, 0x76, 0xf6, 0x77, 0xc0, 0x3f, 0xc6, 0xfe,
		0xe7, 0xff, 0x96, 0x61, 0x29, 0x8a, 0x1d, 0x8c, 0x5c, 0x57, 0x5e, 0xd9, 0x16, 0xfd, 0x1b, 0x66,
		0xde, 0xbe, 0x68, 0x9b, 0x71, 0x2e, 0x34, 0x99, 0xa2, 0xb8, 0x97, 0x97, 0xb7, 0xaa, 0xbc, 0x21,
		0x8d, 0x48, 0x4c, 0xf4, 0x70, 0x62, 0x7c, 0xc5, 0x94, 0x4f, 0x2c, 0xab, 0xda, 0x82, 0x05, 0xf6,
		0xd4, 0xc7, 0xad, 0xa9, 0x01, 0xf6, 0x26, 0xdf, 0xb3, 0xfc, 0x66, 0xd3, 0xce, 0xc9, 0xcc, 0x17,
		0x9f, 0x60, 0x89, 0xfe, 0x7c, 0x41, 0xc7, 0xac, 0x68, 0x9b, 0xad, 0x0c, 0xf6, 0xb2, 0x80, 0xbb,
		0x45, 0x30, 0x47, 0xf5, 0x70, 0x05, 0x6d, 0x98, 0x15, 0xbb, 0xe5, 0xc6, 0x6a, 0xb9, 0xb1, 0xd9,
		0x63, 0x2c, 0x36, 0x7e, 0x2e, 0xcb, 0xf4, 0xcd, 0xaa, 0x96, 0x54, 0xd5, 0x9b, 0xad, 0x61, 0x46,
		0xfe, 0x21, 0x1b, 0xaf, 0xb0, 0xe1, 0xc6, 0xfe, 0x6a, 0x1b, 0xad, 0x7c, 0xb6, 0xfe, 0x4a, 0x1b,
		0x71, 0x43, 0x4c, 0x7d, 0x32, 0x18, 0x48, 0x3a, 0x20, 0x9a, 0xd6, 0x8a, 0x98, 0xfc, 0x0f, 0x46,
		0x79, 0x1d, 0x26, 0x71, 0x48, 0x06, 0x68, 0x11, 0x3f, 0xb1, 0xf9, 0xc3, 0x5c, 0xe9, 0x0e, 0x1b,
		0x6e, 0x10, 0x87, 0x94, 0x04, 0x05, 0x8d, 0xe1, 0xed, 0x1c, 0xd7, 0xf6, 0xe6, 0xc0, 0x68, 0x35,
		0x56, 0x9a, 0x8f, 0x6f, 0xd7, 0x16, 0xc0, 0xcc, 0x20, 0xc9, 0x49, 0xa2, 0x45, 0x8d, 0xd3, 0x81,
		0xd0, 0x8c, 0x68, 0x5a, 0x40, 0xac, 0x3c, 0x1c, 0x27, 0x3f, 0x7f, 0x37, 0xde, 0xde, 0xaf, 0x44,
		0x2e, 0x65, 0x53, 0xba, 0xaf, 0x47, 0x2e, 0x65, 0x52, 0xca, 0x50, 0xe4, 0x52, 0x5f, 0x88, 0x90,
		0xe6, 0xa3, 0x66, 0x67, 0x72, 0xa9, 0xb1, 0x01, 0xf2, 0xc2, 0x4f, 0xe2, 0x90, 0xde, 0xd4, 0x22,
		0xe1, 0x17, 0x10, 0x16, 0x8b, 0x83, 0xe0, 0x51, 0xc7, 0xa3, 0x5e, 0xb2, 0xa3, 0x4e, 0x79, 0x12,
		0x51, 0x39, 0xe1, 0x56, 0x0a, 0x1c, 0xf7, 0x76, 0x8e, 0x6b, 0x0f, 0x79, 0x12, 0x8d, 0x6f, 0xfe,
		0x6e, 0x03, 0x44, 0x05, 0xe5, 0xa4, 0x1f, 0xd2, 0x5a, 0x10, 0x8a, 0xeb, 0xda, 0xb4, 0xca, 0x63,
		0x7e, 0x91, 0xf1, 0xd4, 0x60, 0xf9, 0x41, 0x46, 0x1a, 0x30, 0x81, 0xa2, 0x07, 0x45, 0x0f, 0xa2,
		0x8c, 0x8d, 0x44, 0x19, 0x11, 0xf1, 0x6a, 0x64, 0x9a, 0xd4, 0x9c, 0x5b, 0x64, 0x2c, 0x0e, 0x82,
		0x47, 0x1d, 0x8f, 0x7a, 0xc9, 0x8e, 0x7a, 0xfe, 0xed, 0xfd, 0xe0, 0xb8, 0xef, 0xe4, 0x23, 0x3b,
		0x34, 0x95, 0x3c, 0xb7, 0xab, 0xbd, 0xfa, 0xad, 0x5e, 0xdb, 0x25, 0xb5, 0x60, 0xbf, 0x76, 0x74,
		0xf5, 0x4f, 0xf3, 0xee, 0xed, 0xde, 0xc3, 0xdf, 0xdf, 0xfd, 0xd3, 0xb9, 0xcb, 0xbe, 0x5e, 0x57,
		0x79, 0x1e, 0xe4, 0xec, 0xe2, 0xf8, 0x6b, 0xe1, 0xa7, 0xf9, 0xdf, 0xcb, 0x8f, 0xf3, 0xaf, 0x1c,
		0xcf, 0xb3, 0x01, 0x72, 0x38, 0x16, 0x52, 0xd7, 0x54, 0x4c, 0x69, 0x01, 0xc2, 0x79, 0x61, 0x0c,
		0x94, 0xc2, 0x28, 0x85, 0x4b, 0x26, 0x85, 0x4b, 0x13, 0x7f, 0x75, 0x78, 0xf9, 0xef, 0xc3, 0xf3,
		0xcf, 0x87, 0x97, 0x3f, 0x2e, 0x7a, 0x87, 0x87, 0x07, 0xf0, 0x63, 0xb0, 0xd2, 0xc7, 0xf8, 0xb1,
		0x53, 0xaf, 0x7f, 0xfa, 0x00, 0x39, 0x62, 0x66, 0xf2, 0x18, 0x8d, 0xd2, 0x3c, 0xc6, 0x69, 0x09,
		0x1e, 0xa3, 0xd9, 0xf9, 0x54, 0x8a, 0xa7, 0x28, 0xc7, 0x6a, 0x34, 0x4a, 0x71, 0x34, 0xfe, 0xfc,
		0xfc, 0x9f, 0xcf, 0x67, 0x7f, 0x7d, 0x2e, 0xc1, 0x72, 0x94, 0x61, 0x35, 0xda, 0xa5, 0xd8, 0x53,
		0xdd, 0x72, 0x68, 0x8d, 0x76, 0x39, 0x1e, 0xa3, 0x1c, 0x4a, 0xa3, 0x24, 0x6b, 0x51, 0x12, 0x38,
		0x55, 0x48, 0x7f, 0xbf, 0x8e, 0x30, 0xea, 0x55, 0x03, 0x54, 0x33, 0xa5, 0xaa, 0xe6, 0x5b, 0xce,
		0x6c, 0xa9, 0xab, 0x54, 0x0f, 0xf7, 0x66, 0xe1, 0xca, 0xb3, 0xdf, 0x33, 0xc5, 0x9c, 0xce, 0xa7,
		0x7d, 0x2a, 0xa7, 0xf5, 0x64, 0xff, 0xd3, 0x2c, 0x8d, 0x55, 0x55, 0xb4, 0xa8, 0x30, 0xee, 0xb3,
		0x11, 0xf3, 0x13, 0x12, 0x56, 0x0e, 0xa7, 0x93, 0xde, 0x67, 0xb4, 0xe6, 0xe5, 0xcf, 0x1b, 0x18,
		0x28, 0x58, 0x0a, 0xe6, 0x66, 0x03, 0x03, 0x05, 0xb3, 0x46, 0xcf, 0xce, 0x2f, 0x2c, 0x14, 0x45,
		0xbb, 0xb4, 0x69, 0x0a, 0x44, 0xd3, 0x3e, 0x77, 0x3c, 0x2f, 0x62, 0xea, 0xb1, 0xe0, 0x36, 0xcd,
		0x85, 0x0d, 0x27, 0x6d, 0x57, 0x2a, 0xf3, 0x69, 0xee, 0xcf, 0xe4, 0xf8, 0xd0, 0x5e, 0x0f, 0x99,
		0x37, 0xfc, 0xce, 0xf5, 0x90, 0xa9, 0x85, 0xff, 0xe8, 0xd3, 0x50, 0xf0, 0x81, 0xca, 0x7b, 0x3b,
		0xf9, 0x58, 0xd7, 0xc2, 0x67, 0xd8, 0xc4, 0x59, 0x36, 0x77, 0xa6, 0x4d, 0x9d, 0x6d, 0xe3, 0x67,
		0xdc, 0xf8, 0x59, 0x37, 0x7a, 0xe6, 0x8b, 0x61, 0x8b, 0x9c, 0xb8, 0x2a, 0x3f, 0x8b, 0xbb, 0xb4,
		0x5f, 0xf2, 0x07, 0x0f, 0x2f, 0xa9, 0xbe, 0xed, 0x02, 0x63, 0xd8, 0x0f, 0x26, 0xce, 0xbf, 0x50,
		0xeb, 0x85, 0x73, 0x57, 0xab, 0xc2, 0xb9, 0x6c, 0xd9, 0x6d, 0xf3, 0xeb, 0xf2, 0x67, 0xb9, 0xcd,
		0xa1, 0xda, 0x2a, 0xe9, 0x6e, 0xab, 0x3f, 0xf4, 0x0a, 0x67, 0xa2, 0xaa, 0x74, 0x96, 0xd0, 0xed,
		0xfb, 0x8e, 0x38, 0x7a, 0xf5, 0x48, 0xed, 0xdc, 0xf9, 0x4b, 0x4d, 0xcc, 0x5f, 0x32, 0x29, 0xb5,
		0x31, 0x7f, 0x09, 0xf3, 0x97, 0xd0, 0x2c, 0xc1, 0xfc, 0x25, 0xd3, 0xd0, 0x03, 0xf3, 0x97, 0x30,
		0x7f, 0xc9, 0xb2, 0xd2, 0x7d, 0x3d, 0x72, 0x09, 0x23, 0x8b, 0x9f, 0x96, 0x4b, 0x9b, 0x10, 0x59,
		0xec, 0x89, 0x64, 0x2c, 0xc9, 0x0a, 0x84, 0x15, 0xcf, 0x47, 0x78, 0x1d, 0x9c, 0x28, 0x1e, 0x72,
		0x30, 0x87, 0x3c, 0x37, 0x27, 0xca, 0x78, 0x6d, 0xa7, 0xde, 0x6c, 0xfc, 0x5d, 0x4b, 0x3b, 0xfc,
		0xaa, 0xe2, 0xb4, 0xe8, 0xe3, 0x01, 0x91, 0x8a, 0xcc, 0x7f, 0x94, 0x90, 0x8a, 0xcc, 0x75, 0xd4,
		0xa0, 0x53, 0x91, 0x53, 0x35, 0xd3, 0x6d, 0x1b, 0x20, 0x23, 0x77, 0x0a, 0x0c, 0x71, 0x9e, 0x96,
		0x25, 0x2e, 0x12, 0xd0, 0x59, 0x29, 0xec, 0xf7, 0x4e, 0x6f, 0xe4, 0x94, 0xf1, 0xc2, 0x7b, 0xdf,
		0x90, 0x64, 0x59, 0x1a, 0x2e, 0x0d, 0x7b, 0x35, 0x38, 0xde, 0x91, 0x24, 0x9e, 0x66, 0x82, 0x1f,
		0xb0, 0x01, 0x4b, 0xab, 0x50, 0xd7, 0x0b, 0x8f, 0x7b, 0xf7, 0xde, 0xc0, 0x12, 0x90, 0x9b, 0x8d,
		0x5f, 0x82, 0xc6, 0x4e, 0xbb, 0xdd, 0xdd, 0x6e, 0xb7, 0xeb, 0xdb, 0xad, 0xed, 0xfa, 0x6e, 0xa7,
		0xd3, 0xe8, 0xe6, 0x09, 0xae, 0x76, 0xb6, 0x2a, 0x6f, 0xd6, 0x73, 0xf5, 0x95, 0x2b, 0x6f, 0xc1,
		0xfb, 0x5c, 0x68, 0xa4, 0x1f, 0x0a, 0xef, 0x67, 0x8d, 0x4a, 0x29, 0xa4, 0x19, 0x34, 0xf2, 0x60,
		0x40, 0x44, 0x23, 0x88, 0x46, 0x10, 0x8d, 0x20, 0x1a, 0x41, 0x34, 0x82, 0x68, 0x04, 0xd1, 0x08,
		0xa2, 0x91, 0x97, 0xd0, 0x88, 0x47, 0xa4, 0x64, 0x54, 0x9a, 0xc4, 0x23, 0x8f, 0x86, 0x44, 0x44,
		0x82, 0x88, 0x04, 0x11, 0x09, 0x22, 0x12, 0x44, 0x24, 0x88, 0x48, 0x10, 0x91, 0x20, 0x22, 0x79,
		0x11, 0x91, 0x48, 0xcf, 0x28, 0x1a, 0xb9, 0x1f, 0x0e, 0x91, 0x08, 0x22, 0x11, 0x44, 0x22, 0x88,
		0x44, 0x10, 0x89, 0x20, 0x12, 0x41, 0x24, 0x82, 0x48, 0xe4, 0x25, 0x24, 0x12, 0x48, 0x92, 0x26,
		0xce, 0x9a, 0x0c, 0x1d, 0x79, 0x3c, 0x26, 0x62, 0x12, 0xc4, 0x24, 0x88, 0x49, 0x10, 0x93, 0x20,
		0x26, 0x41, 0x4c, 0x82, 0x98, 0x04, 0x31, 0xc9, 0x4b, 0x98, 0x24, 0xcd, 0x55, 0x91, 0x49, 0xac,
		0xa9, 0x5f, 0xd3, 0x37, 0x46, 0x20, 0xc9, 0xa3, 0x21, 0x11, 0x91, 0x20, 0x22, 0x41, 0x44, 0x82,
		0x88, 0x04, 0x11, 0x09, 0x22, 0x12, 0x44, 0x24, 0x88, 0x48, 0x5e, 0x42, 0x24, 0xff, 0x3f, 0xd2,
		0xef, 0x53, 0x69, 0x92, 0x23, 0x79, 0x38, 0x22, 0xe2, 0x11, 0xc4, 0x23, 0x88, 0x47, 0x10, 0x8f,
		0x20, 0x1e, 0x41, 0x3c, 0x82, 0x78, 0x04, 0xf1, 0xc8, 0x4b, 0x78, 0x24, 0x24, 0x9a, 0xd6, 0x3c,
		0x11, 0x86, 0x4c, 0x65, 0x2d, 0x91, 0xf5, 0x1c, 0x20, 0x79, 0x34, 0x24, 0x22, 0x12, 0x44, 0x24,
		0x88, 0x48, 0x10, 0x91, 0x20, 0x22, 0x41, 0x44, 0x82, 0x88, 0x04, 0x11, 0xc9, 0x4b, 0x88, 0x24,
		0x22, 0xde, 0xac, 0xaf, 0xaf, 0x49, 0x9a, 0xe4, 0x89, 0x61, 0x11, 0x99, 0x20, 0x32, 0x41, 0x64,
		0x82, 0xc8, 0x04, 0x91, 0x09, 0x22, 0x13, 0x44, 0x26, 0x88, 0x4c, 0x56, 0x41, 0x26, 0x93, 0xe4,
		0x98, 0x9a, 0xbc, 0x31, 0x06, 0x4a, 0xee, 0x47, 0x44, 0x3c, 0x82, 0x78, 0x04, 0xf1, 0x08, 0xe2,
		0x11, 0xc4, 0x23, 0x88, 0x47, 0x10, 0x8f, 0x20, 0x1e, 0x59, 0x05, 0x8f, 0xc4, 0x24, 0x51, 0xd4,
		0x34, 0x4f, 0xf2, 0x60, 0x50, 0x44, 0x25, 0x88, 0x4a, 0x10, 0x95, 0x20, 0x2a, 0x41, 0x54, 0x82,
		0xa8, 0x04, 0x51, 0x09, 0xa2, 0x92, 0x97, 0x51, 0xc9, 0x8d, 0x62, 0xff, 0x7f, 0x5a, 0xa3, 0x37,
		0x1e, 0xa5, 0x3e, 0xf5, 0x0d, 0xa1, 0x92, 0x47, 0x83, 0x22, 0x2a, 0x41, 0x54, 0x82, 0xa8, 0x04,
		0x51, 0x09, 0xa2, 0x12, 0x44, 0x25, 0x88, 0x4a, 0x10, 0x95, 0xbc, 0x84, 0x4a, 0xc4, 0x88, 0xca,
		0x14, 0x41, 0x18, 0xa4, 0x4a, 0x1e, 0x8f, 0x89, 0x98, 0x04, 0x31, 0x09, 0x62, 0x12, 0xc4, 0x24,
		0x88, 0x49, 0x10, 0x93, 0x20, 0x26, 0x41, 0x4c, 0xf2, 0x12, 0x26, 0x51, 0x8c, 0x0f, 0x42, 0xd3,
		0xd9, 0x37, 0x4b, 0x83, 0x22, 0x2a, 0x41, 0x54, 0x82, 0xa8, 0x04, 0x51, 0x09, 0xa2, 0x12, 0x44,
		0x25, 0x88, 0x4a, 0x10, 0x95, 0xbc, 0x88, 0x4a, 0x6e, 0xa3, 0xbe, 0x08, 0x27, 0x61, 0xa9, 0x66,
		0x10, 0xc9, 0xe2, 0x80, 0x88, 0x46, 0x10, 0x8d, 0x20, 0x1a, 0x41, 0x34, 0x82, 0x68, 0x04, 0xd1,
		0x08, 0xa2, 0x11, 0x44, 0x23, 0x2f, 0xa1, 0x91, 0x84, 0xfb, 0xe6, 0x1d, 0x37, 0x4b, 0x83, 0x22,
		0x2a, 0x41, 0x54, 0x82, 0xa8, 0x04, 0x51, 0x09, 0xa2, 0x12, 0x44, 0x25, 0x88, 0x4a, 0x10, 0x95,
		0xfc, 0xf6, 0x35, 0x8b, 0x44, 0xd7, 0x76, 0xea, 0xcd, 0xc6, 0xdf, 0xc6, 0x20, 0xc9, 0xd2, 0x88,
		0x88, 0x47, 0x10, 0x8f, 0x20, 0x1e, 0x41, 0x3c, 0x82, 0x78, 0x04, 0xf1, 0x08, 0xe2, 0x11, 0xc4,
		0x23, 0x2f, 0xe2, 0x11, 0x1b, 0x45, 0xd3, 0x9e, 0x19, 0x17, 0xb1, 0x09, 0x62, 0x13, 0xc4, 0x26,
		0x88, 0x4d, 0x10, 0x9b, 0x20, 0x36, 0x41, 0x6c, 0x82, 0xd8, 0x64, 0x25, 0x6c, 0x32, 0x2d, 0x72,
		0x66, 0xa2, 0x07, 0xdf, 0xf2, 0x90, 0x88, 0x48, 0x10, 0x91, 0x20, 0x22, 0x41, 0x44, 0x82, 0x88,
		0x04, 0x11, 0x09, 0x22, 0x12, 0x44, 0x24, 0x2b, 0x21, 0x12, 0xb3, 0x85, 0xd3, 0x9e, 0x1c, 0x15,
		0x71, 0x09, 0xe2, 0x12, 0xc4, 0x25, 0x88, 0x4b, 0x10, 0x97, 0x20, 0x2e, 0x41, 0x5c, 0xf2, 0x9a,
		0x70, 0xc9, 0x1b, 0x8b, 0x7b, 0xb4, 0xba, 0xcf, 0xb9, 0xd0, 0x44, 0xe7, 0x4d, 0x18, 0xae, 0x2a,
		0x6f, 0x48, 0x23, 0x12, 0x13, 0x3d, 0x1c, 0x4b, 0xdc, 0x2d, 0x11, 0x53, 0xee, 0xa5, 0x98, 0xa1,
		0xc6, 0xc6, 0xb2, 0x37, 0x20, 0x1e, 0x55, 0x5b, 0x4f, 0x7d, 0xdc, 0xa2, 0x7a, 0x48, 0x25, 0xa7,
		0x7a, 0x4b, 0x69, 0xa2, 0xe9, 0xd6, 0x54, 0x58, 0xe7, 0x01, 0x3a, 0x55, 0xa5, 0x65, 0xe2, 0x69,
		0x3e, 0x15, 0xfb, 0xc7, 0xb3, 0x29, 0x7e, 0x1c, 0x4e, 0xa7, 0xf8, 0xf1, 0x71, 0x36, 0xf8, 0x1b,
		0x3b, 0x6f, 0x3e, 0xc3, 0x5b, 0xaf, 0xfa, 0x49, 0x1c, 0xd2, 0x9b, 0x5a, 0x24, 0xfc, 0xec, 0x6a,
		0x6e, 0xae, 0xda, 0x16, 0x07, 0xc9, 0xb8, 0xe2, 0xf9, 0x84, 0x46, 0x6e, 0x24, 0x58, 0x04, 0x01,
		0x16, 0x47, 0x7e, 0x45, 0x11, 0x9f, 0x31, 0xa4, 0x67, 0x0c, 0xe1, 0x19, 0x41, 0x76, 0x76, 0x65,
		0x4a, 0x6e, 0x04, 0x37, 0x5f, 0x6f, 0xca, 0x93, 0x88, 0xca, 0x89, 0x58, 0xca, 0xb1, 0xe8, 0xd3,
		0x2d, 0xde, 0x68, 0xe7, 0xb8, 0xf6, 0x90, 0x27, 0xd1, 0xf8, 0xe6, 0xef, 0x36, 0x40, 0x54, 0x50,
		0x4e, 0xfa, 0x21, 0xad, 0x05, 0xa1, 0xb8, 0x9e, 0x39, 0xce, 0xf3, 0x8b, 0x8c, 0xa7, 0x06, 0xcb,
		0xb8, 0xb0, 0x07, 0x34, 0x20, 0x49, 0x98, 0xee, 0xbc, 0x80, 0x84, 0x0a, 0x45, 0x0f, 0x8a, 0x9e,
		0xd2, 0x89, 0x9e, 0xbe, 0x10, 0x21, 0x25, 0x85, 0xc4, 0x4e, 0x63, 0x03, 0x44, 0xc7, 0xf0, 0x3a,
		0xa5, 0x90, 0x88, 0xef, 0x4b, 0xaa, 0x54, 0x7e, 0xa9, 0xf1, 0x68, 0x1c, 0x3c, 0xf0, 0x78, 0xe0,
		0x4b, 0x76, 0xe0, 0xf3, 0x6f, 0xef, 0x07, 0x87, 0x3e, 0x07, 0x41, 0x54, 0xed, 0x11, 0xad, 0xa9,
		0xe4, 0xb9, 0xa9, 0xa1, 0xea, 0xb7, 0x7a, 0x6d, 0x97, 0xd4, 0x82, 0xfd, 0xda, 0xd1, 0xd5, 0x3f,
		0xcd, 0xbb, 0xb7, 0x7b, 0x0f, 0x7f, 0x7f, 0xf7, 0x4f, 0xe7, 0x2e, 0xfb, 0x7a, 0x5d, 0xe5, 0x79,
		0x90, 0xb3, 0x8b, 0xe3, 0xaf, 0x85, 0x9f, 0xe6, 0x7f, 0x2f, 0x3f, 0xce, 0xbf, 0x72, 0x3c, 0xcf,
		0x06, 0x48, 0x63, 0x23, 0xa2, 0x18, 0xe5, 0x30, 0xca, 0x61, 0x94, 0xc3, 0x28, 0x87, 0x51, 0x0e,
		0xe7, 0x96, 0xc3, 0x9c, 0x0e, 0x84, 0x66, 0x44, 0x53, 0xbf, 0x66, 0x84, 0x86, 0x7b, 0x66, 0x3c,
		0x94, 0xce, 0x28, 0x9d, 0x91, 0x91, 0x2b, 0x23, 0x23, 0xb7, 0x70, 0xe0, 0x63, 0x21, 0x75, 0x4d,
		0xc5, 0x34, 0x47, 0x53, 0x9a, 0xa7, 0xe4, 0xc7, 0xc2, 0x70, 0x28, 0x3e, 0x50, 0x7c, 0x94, 0x4c,
		0x7c, 0x30, 0x9f, 0x72, 0xcd, 0xf4, 0xad, 0xa4, 0x41, 0x11, 0xf1, 0x91, 0xc3, 0x0d, 0x5d, 0x3d,
		0x9e, 0x4e, 0xfd, 0x81, 0x28, 0x5a, 0x3c, 0x36, 0xeb, 0xf0, 0xf2, 0xdf, 0x87, 0xe7, 0x9f, 0x0f,
		0x2f, 0x7f, 0x5c, 0xf4, 0x0e, 0x0f, 0x0f, 0xf2, 0xee, 0x9d, 0xd4, 0xd3, 0xae, 0x0a, 0x85, 0x84,
		0x14, 0x8c, 0x60, 0x9a, 0x3d, 0x4f, 0xfa, 0x18, 0x3f, 0x76, 0xea, 0xf5, 0x4f, 0x1f, 0x0a, 0x04,
		0x08, 0xbd, 0xdf, 0x8c, 0xc7, 0x68, 0x94, 0xe6, 0x31, 0x4e, 0x4b, 0xf0, 0x18, 0xcd, 0xce, 0xa7,
		0x52, 0x3c, 0x45, 0x39, 0x56, 0xa3, 0x51, 0x8a, 0xa3, 0xf1, 0xe7, 0xe7, 0xff, 0x7c, 0x3e, 0xfb,
		0xeb, 0x73, 0x09, 0x96, 0xa3, 0x0c, 0xab, 0xd1, 0x2e, 0xc5, 0x9e, 0xea, 0x96, 0x43, 0x6b, 0xb4,
		0xcb, 0xf1, 0x18, 0xe5, 0x50, 0x1a, 0x25, 0x59, 0x8b, 0x92, 0xc0, 0xa9, 0x42, 0xfa, 0x3b, 0xd7,
		0x95, 0x57, 0xb6, 0x2d, 0x38, 0x2b, 0xec, 0x86, 0x09, 0x4a, 0x03, 0x79, 0x0c, 0xe4, 0x31, 0x90,
		0xc7, 0x40, 0x1e, 0x03, 0x79, 0x0c, 0xe4, 0x31, 0x90, 0xc7, 0x40, 0x1e, 0x03, 0x79, 0x0c, 0xe4,
		0x31, 0x90, 0xc7, 0x40, 0x1e, 0x03, 0x79, 0x0c, 0xe4, 0x31, 0x90, 0xc7, 0x40, 0x1e, 0x23, 0x37,
		0x8f, 0xf1, 0xc6, 0xe0, 0x5a, 0x55, 0xf7, 0x93, 0xc1, 0xd8, 0x54, 0x4d, 0x89, 0x8e, 0xd5, 0x6d,
		0x97, 0x9c, 0x94, 0xc8, 0x96, 0xf0, 0x6a, 0x2c, 0xd8, 0x5b, 0xc8, 0x82, 0x7d, 0xf4, 0x87, 0xad,
		0x89, 0xb9, 0xbc, 0x37, 0x4f, 0x89, 0x9d, 0xfe, 0x9e, 0x66, 0xc6, 0x66, 0x4f, 0xd2, 0x52, 0x9e,
		0x64, 0xf1, 0x34, 0xa5, 0xb7, 0xba, 0xef, 0xfb, 0xaa, 0x72, 0xb2, 0xff, 0xa9, 0xa2, 0xa8, 0xd6,
		0x8c, 0x0f, 0x54, 0x45, 0x8b, 0x0a, 0xe3, 0x3e, 0x1b, 0x31, 0x3f, 0x21, 0x61, 0x65, 0x96, 0x23,
		0x5b, 0xb9, 0xbf, 0xbd, 0x9c, 0xc4, 0x4d, 0x03, 0x18, 0x71, 0x13, 0x92, 0x01, 0x12, 0x37, 0x4f,
		0x10, 0x37, 0xe3, 0xf7, 0xb2, 0x61, 0xc4, 0xcd, 0x01, 0xcb, 0xd7, 0x3d, 0xb2, 0x4a, 0x06, 0x03,
		0x49, 0x07, 0x44, 0xd3, 0x1a, 0xf3, 0x8b, 0x93, 0x26, 0x0f, 0x46, 0xcb, 0xf9, 0xb2, 0x1f, 0x1d,
		0xcf, 0x8b, 0x98, 0x7a, 0x2c, 0xb8, 0xad, 0xe8, 0x21, 0xad, 0x84, 0x62, 0xc0, 0x3c, 0x12, 0x56,
		0xe6, 0xd3, 0xdc, 0x9f, 0xc9, 0xf1, 0xa1, 0xbd, 0x1e, 0x32, 0x6f, 0xf8, 0x9d, 0xeb, 0x21, 0x53,
		0x0b, 0xff, 0xd1, 0xa7, 0xa1, 0xe0, 0x03, 0xac, 0x0f, 0x54, 0xe4, 0x4c, 0x9b, 0x3a, 0xdb, 0xc6,
		0xcf, 0xb8, 0xf1, 0xb3, 0x6e, 0xf4, 0xcc, 0x17, 0x83, 0x16, 0xeb, 0xaf, 0x0f, 0x14, 0x52, 0x12,
		0xe4, 0x23, 0x72, 0x97, 0x54, 0xdf, 0x76, 0x81, 0x31, 0x7a, 0xf3, 0xe2, 0x19, 0x2b, 0xc0, 0x04,
		0x16, 0xec, 0xa5, 0x75, 0x2e, 0x36, 0xb3, 0xf8, 0x88, 0x61, 0x34, 0x77, 0xb5, 0x2a, 0x9a, 0xcb,
		0x57, 0xc4, 0xc4, 0x58, 0xf1, 0x92, 0xd5, 0x56, 0xe3, 0xe5, 0x67, 0x5e, 0xe1, 0x48, 0x54, 0xd5,
		0x35, 0xd3, 0xde, 0x90, 0xfa, 0xb5, 0x51, 0x48, 0x56, 0x7f, 0xdc, 0xf9, 0x9e, 0x7f, 0x78, 0xf9,
		0x8a, 0xef, 0x37, 0x1b, 0xc0, 0xcb, 0xac, 0x14, 0xf2, 0x28, 0x81, 0x45, 0xa1, 0x9f, 0xe1, 0x51,
		0x8a, 0x48, 0xf9, 0xc2, 0x52, 0xbd, 0xb0, 0x14, 0x7f, 0x2c, 0xb5, 0xd3, 0x07, 0x5f, 0x93, 0x05,
		0x95, 0x15, 0x92, 0x55, 0xbd, 0xd9, 0xae, 0xc8, 0x69, 0x45, 0x4d, 0xaf, 0x7f, 0x1d, 0xb6, 0x49,
		0xc6, 0x2d, 0xfd, 0x7a, 0x8c, 0x93, 0x6c, 0x5b, 0x7e, 0xd3, 0xad, 0x13, 0xcf, 0xa3, 0x4a, 0x65,
		0x93, 0xe4, 0xcf, 0x1b, 0x27, 0x0b, 0x83, 0xa1, 0x31, 0x50, 0xe0, 0x10, 0xa1, 0x35, 0x90, 0xef,
		0x90, 0x41, 0x37, 0x07, 0xc6, 0x4f, 0x9d, 0xdf, 0xb0, 0x5f, 0x3c, 0x40, 0x5d, 0x2c, 0x16, 0x6a,
		0x54, 0xb2, 0x2c, 0x0d, 0x37, 0xaf, 0x54, 0x89, 0xc5, 0x42, 0xd7, 0xbd, 0x04, 0xed, 0xfa, 0x6e,
		0x1b, 0x8b, 0x83, 0x2e, 0x59, 0xae, 0x1b, 0xdd, 0x08, 0x7f, 0x6a, 0xc5, 0xe6, 0x4b, 0x7e, 0x5f,
		0x92, 0x9b, 0x8f, 0xc6, 0x43, 0xec, 0x81, 0xd8, 0x03, 0xb1, 0x47, 0x1e, 0xec, 0x31, 0x3e, 0x3e,
		0x35, 0x3d, 0x1e, 0xd3, 0x00, 0x23, 0x59, 0x40, 0x28, 0xe7, 0xcc, 0xb8, 0x77, 0x2b, 0xc5, 0x38,
		0xd1, 0x6c, 0x44, 0x0d, 0xd9, 0x4e, 0x8b, 0x83, 0xa1, 0xfc, 0x42, 0xf9, 0x85, 0xf2, 0x0b, 0x6d,
		0x27, 0xb4, 0x9d, 0xd0, 0x76, 0x42, 0xdb, 0x09, 0x6d, 0xa7, 0x07, 0xaf, 0x59, 0xcb, 0x84, 0xff,
		0x4c, 0x65, 0xbc, 0x81, 0x3e, 0x4f, 0x8b, 0x83, 0x21, 0xea, 0x40, 0xd4, 0x81, 0xa8, 0x23, 0xe3,
		0x8e, 0x49, 0x78, 0xbe, 0x72, 0x64, 0x4b, 0xc6, 0xd2, 0x6e, 0x81, 0x31, 0xa6, 0x8f, 0xb3, 0x76,
		0xcc, 0x61, 0x0e, 0x8a, 0x19, 0x84, 0x64, 0x86, 0xa1, 0x99, 0xb9, 0xd7, 0x65, 0x05, 0xaa, 0x59,
		0xc2, 0x0b, 0xb6, 0xa0, 0x9b, 0x4d, 0xf0, 0x60, 0x10, 0xca, 0x59, 0x81, 0x74, 0xae, 0x96, 0xca,
		0x1c, 0xc4, 0x73, 0xb2, 0x5a, 0x6f, 0x36, 0x63, 0x94, 0xab, 0x37, 0x6b, 0xdc, 0x73, 0xa6, 0x65,
		0xb1, 0x4c, 0x45, 0x9f, 0x39, 0x71, 0xdc, 0xd8, 0x31, 0x30, 0x56, 0xd1, 0x22, 0xc1, 0x4b, 0x03,
		0xfe, 0xef, 0x6d, 0xbb, 0xbe, 0xfb, 0xad, 0x5e, 0x6b, 0x5f, 0xfd, 0x6a, 0xd7, 0xbf, 0xd5, 0x6b,
		0x3b, 0x57, 0xdf, 0xea, 0xb5, 0xdd, 0xab, 0x5f, 0xdf, 0x1a, 0xb5, 0xd6, 0xe4, 0xe3, 0x3f, 0xad,
		0xbb, 0xf1, 0x6f, 0xbb, 0xd3, 0xdf, 0x1a, 0xef, 0x9b, 0xd3, 0xdf, 0xdf, 0x7d, 0xff, 0xfe, 0xc7,
		0xf7, 0xef, 0x7f, 0x14, 0x18, 0xe0, 0x5f, 0xd5, 0xe2, 0x5b, 0xce, 0xc4, 0x4b, 0x35, 0x51, 0x7e,
		0xb9, 0x7c, 0x6f, 0x16, 0x96, 0x1d, 0x99, 0x13, 0xd5, 0x9e, 0x30, 0xa5, 0xf7, 0xb5, 0x96, 0xc5,
		0x90, 0xed, 0x29, 0xe3, 0x87, 0x21, 0x1d, 0x03, 0x7b, 0x55, 0x4c, 0x29, 0x8d, 0x95, 0xe5, 0xc2,
		0x48, 0x66, 0x5b, 0x3a, 0x56, 0xcf, 0xa4, 0x4f, 0x25, 0xf5, 0x3f, 0xdc, 0x56, 0xf7, 0x2a, 0x3c,
		0x09, 0x43, 0x6c, 0x85, 0x68, 0x28, 0x9a, 0x78, 0x31, 0x3a, 0x77, 0x6b, 0x1a, 0xf1, 0xb8, 0x01,
		0x85, 0x81, 0x26, 0x51, 0xce, 0xb9, 0x43, 0x37, 0x73, 0xe5, 0xb1, 0x15, 0x8d, 0xdc, 0x6c, 0x62,
		0xe4, 0xe6, 0x5a, 0xa9, 0x0a, 0x8c, 0xdc, 0x5c, 0x75, 0xd7, 0x60, 0xe4, 0x26, 0xf2, 0x80, 0xc8,
		0x03, 0xae, 0x95, 0xf2, 0x42, 0xef, 0xa3, 0x1b, 0x7e, 0x04, 0xbd, 0x8f, 0x9b, 0xb3, 0x04, 0xe8,
		0x7d, 0x34, 0x68, 0x35, 0x62, 0xe4, 0x26, 0x62, 0x0f, 0xc4, 0x1e, 0x18, 0xb9, 0x89, 0x91, 0x9b,
		0x2f, 0xde, 0x23, 0x46, 0x6e, 0xa2, 0xfc, 0x42, 0xf9, 0x85, 0xb6, 0x13, 0xda, 0x4e, 0x68, 0x3b,
		0xa1, 0xed, 0x84, 0xb6, 0x13, 0x46, 0x6e, 0x22, 0xea, 0x40, 0xd4, 0xf1, 0xba, 0x50, 0x07, 0x46,
		0x6e, 0x5a, 0x81, 0x62, 0x06, 0x21, 0x99, 0x61, 0x68, 0x66, 0xee, 0x75, 0x59, 0x81, 0x6a, 0x96,
		0xf0, 0x82, 0x2d, 0xe8, 0x66, 0x13, 0x3c, 0x18, 0x84, 0x72, 0x56, 0x20, 0x9d, 0xab, 0xa5, 0xc2,
		0xc8, 0x4d, 0x77, 0x10, 0xd0, 0xd0, 0x9e, 0xc3, 0xc8, 0xcd, 0x3c, 0x03, 0x62, 0xe4, 0x26, 0x46,
		0x6e, 0x5a, 0x39, 0xcc, 0x18, 0xb9, 0x99, 0x57, 0x59, 0x62, 0xe4, 0x66, 0x36, 0x93, 0x6a, 0xd3,
		0x22, 0x37, 0x33, 0x54, 0x85, 0xcd, 0xfe, 0x86, 0x0c, 0x77, 0x42, 0x58, 0x63, 0xed, 0xdc, 0x1c,
		0xb5, 0x68, 0x27, 0x73, 0x6b, 0x99, 0x78, 0x9a, 0x4f, 0x55, 0xf5, 0xf1, 0x6c, 0xe4, 0x1f, 0xb3,
		0x5e, 0x06, 0x3f, 0x2e, 0xa6, 0x23, 0x7f, 0x59, 0xd9, 0xb8, 0x5e, 0xa1, 0x38, 0xef, 0x9b, 0x02,
		0xaf, 0x3b, 0x63, 0xc3, 0x89, 0x8c, 0x45, 0x7d, 0x33, 0x37, 0x98, 0x58, 0xb5, 0xf0, 0xef, 0x53,
		0xbd, 0x24, 0xbe, 0x9c, 0xec, 0x7f, 0x36, 0xdf, 0x4c, 0x02, 0x6b, 0x0c, 0x9b, 0xe1, 0xaf, 0x5e,
		0x77, 0x8d, 0xe1, 0x7c, 0xc5, 0xb1, 0x97, 0xd6, 0x3b, 0xaf, 0x60, 0x7a, 0xea, 0xcc, 0x1c, 0x72,
		0x2f, 0x14, 0x8a, 0xf1, 0x41, 0xc5, 0x13, 0x5c, 0x13, 0xc6, 0xa9, 0xac, 0x04, 0x42, 0x4e, 0x8e,
		0xd1, 0x7d, 0x00, 0x8e, 0x4a, 0xfb, 0x40, 0x30, 0xef, 0x3b, 0xf7, 0x89, 0x26, 0x15, 0xc1, 0x9f,
		0x3a, 0x4b, 0x7f, 0x54, 0x2a, 0x97, 0x43, 0xaa, 0x68, 0x85, 0x48, 0x9a, 0x0e, 0xa2, 0x34, 0xe1,
		0x3e, 0x91, 0xfe, 0x77, 0x7e, 0xd2, 0x7c, 0x5f, 0x99, 0xdf, 0xb6, 0xd2, 0xb7, 0x21, 0x4d, 0x67,
		0x50, 0x7f, 0x60, 0xc1, 0x64, 0x9b, 0xbc, 0x33, 0x86, 0xdd, 0x5b, 0xc1, 0x2e, 0x05, 0x95, 0xf1,
		0xd5, 0x4b, 0xca, 0x38, 0x1b, 0xe6, 0x31, 0x80, 0x75, 0xaa, 0xab, 0x54, 0xf6, 0x7f, 0x01, 0xd5,
		0xfc, 0x7e, 0x15, 0x9f, 0x7f, 0x23, 0xbf, 0x91, 0xb6, 0xd5, 0xa1, 0x08, 0xfd, 0x9a, 0x66, 0xd1,
		0xcb, 0x27, 0x60, 0x7e, 0xd8, 0xee, 0x2f, 0x79, 0xe1, 0x2d, 0xaf, 0x26, 0x49, 0x56, 0x96, 0x1c,
		0x59, 0x24, 0xc5, 0xa2, 0x64, 0x60, 0xab, 0x34, 0xf8, 0xc8, 0x2a, 0x07, 0x72, 0x9f, 0xfb, 0xdc,
		0xe7, 0xfc, 0xf1, 0xb9, 0x66, 0x41, 0xd5, 0x32, 0x64, 0x5d, 0x55, 0xfb, 0x66, 0xad, 0xec, 0x9f,
		0xaf, 0xa2, 0xff, 0xa6, 0x03, 0x44, 0x16, 0xbc, 0x4a, 0x78, 0xb8, 0xca, 0x36, 0xdc, 0x10, 0x70,
		0xe8, 0x8b, 0xeb, 0x02, 0x98, 0x30, 0xbd, 0x3a, 0x33, 0x14, 0x0c, 0x48, 0x12, 0xa6, 0xaf, 0xaa,
		0x9e, 0x13, 0x87, 0xd5, 0x81, 0xe1, 0x30, 0x16, 0x20, 0x0a, 0x2b, 0x78, 0x4c, 0xdc, 0x70, 0x66,
		0xb9, 0x7d, 0xf9, 0xf7, 0x3e, 0x7c, 0xc6, 0x75, 0xab, 0x99, 0x67, 0xb9, 0xa7, 0x7b, 0x3b, 0x47,
		0xd3, 0xac, 0x82, 0xde, 0xe8, 0x62, 0xfc, 0xae, 0x81, 0xe8, 0x14, 0x23, 0x2e, 0xcb, 0xb9, 0x8b,
		0xb2, 0xe8, 0x38, 0x06, 0xfd, 0x91, 0x77, 0xc5, 0x08, 0xef, 0x8d, 0x7b, 0xb5, 0xed, 0xe6, 0x6e,
		0x7b, 0xb7, 0xbb, 0xdd, 0xdc, 0xed, 0x6c, 0xd0, 0x3b, 0x76, 0x44, 0xd6, 0x5f, 0x6d, 0x40, 0xc5,
		0x81, 0x24, 0xce, 0xaf, 0xaa, 0x93, 0x18, 0x15, 0x35, 0x2a, 0x6a, 0x54, 0xd4, 0xa8, 0xa8, 0x51,
		0x51, 0xa3, 0xa2, 0x46, 0x45, 0x6d, 0x8b, 0xa5, 0x5d, 0xd1, 0x50, 0x3f, 0xbc, 0x49, 0x5f, 0xa7,
		0xb5, 0x36, 0xfb, 0x0b, 0x3a, 0x45, 0x78, 0x35, 0x7a, 0xa3, 0xf7, 0x34, 0x0d, 0x69, 0x44, 0xb5,
		0xbc, 0xad, 0x09, 0x5e, 0xf3, 0x86, 0x39, 0xa2, 0xb8, 0x1e, 0xe9, 0x97, 0x80, 0x84, 0xaa, 0x08,
		0x51, 0x52, 0x7d, 0x35, 0x8d, 0x71, 0xe7, 0xec, 0x70, 0xa6, 0xea, 0x55, 0x86, 0x5a, 0xe3, 0x66,
		0xaa, 0x52, 0x95, 0xab, 0x3a, 0x55, 0x6e, 0x16, 0xb2, 0x89, 0x2c, 0x24, 0xb2, 0x90, 0xc8, 0x42,
		0xa2, 0x71, 0x83, 0xc6, 0x0d, 0x1a, 0x37, 0x68, 0xdc, 0xa0, 0x71, 0x83, 0xc6, 0x0d, 0xb2, 0x90,
		0xa8, 0xa8, 0x51, 0x51, 0xa3, 0xa2, 0x46, 0x45, 0x8d, 0x8a, 0x1a, 0x15, 0x35, 0x2a, 0x6a, 0xbb,
		0x86, 0xfa, 0x3a, 0xa9, 0xb0, 0x0c, 0xe9, 0x40, 0xd6, 0xf3, 0x50, 0x9c, 0x85, 0xbe, 0xae, 0x1a,
		0x27, 0x5a, 0xf9, 0x5d, 0xec, 0xeb, 0xbf, 0x45, 0xe8, 0x5f, 0x8e, 0xc7, 0xb0, 0x10, 0xfb, 0x3a,
		0x9d, 0x6d, 0xc5, 0xb0, 0xd7, 0xf4, 0xdb, 0xab, 0x45, 0xbc, 0xd6, 0x31, 0xe2, 0xd5, 0x04, 0x48,
		0x72, 0x1f, 0xf1, 0xba, 0x32, 0xc8, 0x99, 0xbf, 0xed, 0x90, 0x92, 0x40, 0xd2, 0x95, 0xde, 0xf7,
		0x8c, 0x39, 0x5e, 0x01, 0xc6, 0x54, 0x7b, 0xd3, 0xf3, 0xf6, 0xc7, 0x1f, 0x13, 0xd9, 0xb1, 0x95,
		0xee, 0x3e, 0x0b, 0x67, 0x40, 0x8a, 0x44, 0xaf, 0x9a, 0x2e, 0x33, 0x7f, 0xe8, 0xc5, 0x8b, 0x60,
		0xc4, 0x80, 0xaf, 0x98, 0x1d, 0x02, 0xef, 0x4c, 0xac, 0x96, 0xdd, 0x81, 0x71, 0xe0, 0x98, 0x28,
		0x68, 0xdc, 0x76, 0x05, 0x9d, 0x28, 0x58, 0x2c, 0x3f, 0x30, 0x4f, 0x5a, 0x20, 0x50, 0x82, 0x06,
		0xf3, 0xea, 0x8c, 0x6c, 0x77, 0x30, 0x24, 0x4d, 0xce, 0xba, 0x6c, 0x45, 0xea, 0xb1, 0x15, 0xab,
		0xc3, 0x66, 0xa2, 0x18, 0x1d, 0xe3, 0xba, 0xd1, 0xc5, 0x0a, 0xb8, 0xe6, 0x98, 0x2b, 0xc3, 0x34,
		0x8b, 0x69, 0x26, 0xcb, 0x06, 0xdb, 0x62, 0x80, 0xd9, 0x32, 0xca, 0x70, 0xd9, 0x5e, 0x82, 0x6e,
		0xa7, 0xd3, 0xea, 0x60, 0x09, 0xdc, 0x62, 0x64, 0x58, 0xc1, 0x4d, 0x63, 0x40, 0xf6, 0x29, 0x2d,
		0x19, 0x1f, 0x98, 0xa8, 0xc4, 0xb9, 0x83, 0x74, 0xe3, 0x5a, 0xe9, 0xc6, 0x05, 0xab, 0x7c, 0x0d,
		0xb1, 0x77, 0x2c, 0x1e, 0xb5, 0xb3, 0x5b, 0x7e, 0xe9, 0x55, 0x25, 0xc9, 0xff, 0x8d, 0x5f, 0x67,
		0xe4, 0x5d, 0x0c, 0xc6, 0xe6, 0x23, 0xbe, 0x2f, 0xa9, 0x52, 0x54, 0xe5, 0x37, 0xfc, 0xee, 0x87,
		0x78, 0x1d, 0x55, 0x55, 0x58, 0x8c, 0xb6, 0x5f, 0xc1, 0x4d, 0xef, 0xc6, 0xf2, 0xcb, 0xdf, 0xc8,
		0x74, 0xb2, 0xa3, 0x0d, 0x34, 0x31, 0x9d, 0x0e, 0x54, 0xac, 0x1c, 0x7e, 0xa3, 0x24, 0xe5, 0xf0,
		0x73, 0x1d, 0x1c, 0x53, 0x07, 0xc8, 0xf8, 0x41, 0x32, 0x7e, 0xa0, 0x4c, 0x1e, 0xac, 0x62, 0x98,
		0x3d, 0x6f, 0xd1, 0xd0, 0xbc, 0x07, 0x6e, 0x3e, 0x40, 0x46, 0xb2, 0xfc, 0xc5, 0x4d, 0x97, 0x89,
		0x44, 0xb7, 0x74, 0x0c, 0x8d, 0x1d, 0x47, 0x93, 0xc7, 0xd2, 0xf8, 0xf1, 0x34, 0x7d, 0x4c, 0xad,
		0x1d, 0x57, 0x6b, 0xc7, 0xd6, 0xc6, 0xf1, 0x35, 0x64, 0xb8, 0x17, 0xdc, 0x6f, 0x45, 0x8f, 0xf5,
		0x82, 0x3d, 0x64, 0x6e, 0x5f, 0xdc, 0x5b, 0x4b, 0xa6, 0x36, 0x84, 0x61, 0x4e, 0xc8, 0xd4, 0x71,
		0xb7, 0x71, 0xec, 0xad, 0x1d, 0x7f, 0x5b, 0x62, 0xc0, 0xba, 0x38, 0xb0, 0x2e, 0x16, 0x6c, 0x8a,
		0x07, 0x33, 0x62, 0xc2, 0x90, 0xb8, 0x98, 0x3f, 0x68, 0xe1, 0xc6, 0x38, 0xbf, 0x65, 0x48, 0x6a,
		0xc5, 0xb0, 0xf5, 0xef, 0x59, 0x3b, 0x83, 0x63, 0x9a, 0xae, 0x9f, 0x3f, 0x1f, 0xf8, 0xed, 0xdb,
		0x79, 0xd9, 0xfb, 0x69, 0xa1, 0xfb, 0x5f, 0x8d, 0xf4, 0x9f, 0xc9, 0xe7, 0x66, 0x5a, 0x21, 0x7f,
		0xfa, 0xb9, 0xf3, 0xad, 0x5e, 0xeb, 0xa4, 0xe5, 0xf3, 0xdf, 0xfd, 0xd3, 0xba, 0xcb, 0x7e, 0xa1,
		0xb9, 0x2d, 0x7a, 0x65, 0xf2, 0xd5, 0xda, 0xe8, 0x4f, 0x30, 0x1f, 0xfd, 0x7f, 0x2e, 0x5f, 0xf0,
		0xbf, 0x0c, 0xbe, 0xe1, 0x0d, 0x69, 0x7a, 0x62, 0xc2, 0xe7, 0x33, 0x11, 0xf1, 0xb5, 0x90, 0xf2,
		0x41, 0xca, 0xfd, 0x1a, 0xc6, 0x0e, 0x0f, 0x87, 0x47, 0x18, 0x81, 0x30, 0x02, 0x61, 0xc4, 0x2b,
		0x82, 0x11, 0x09, 0xe3, 0x7a, 0xc7, 0x02, 0x7e, 0xe8, 0x18, 0x1c, 0xd2, 0x6c, 0xa3, 0xb9, 0xd9,
		0x8f, 0xd9, 0xd3, 0x54, 0xb1, 0xd5, 0x78, 0xce, 0x92, 0x4c, 0x5d, 0x1a, 0xde, 0x70, 0x04, 0xc5,
		0xd2, 0xf8, 0x16, 0x5b, 0x9c, 0x19, 0x3e, 0x6d, 0x0f, 0x97, 0xd4, 0x42, 0x83, 0x3a, 0xd7, 0x4b,
		0xda, 0x6a, 0x02, 0x5e, 0xd3, 0x37, 0x9b, 0x39, 0xda, 0xc6, 0x20, 0xcc, 0xb5, 0xb2, 0x62, 0x05,
		0xfb, 0x2b, 0x2d, 0x8d, 0x67, 0x26, 0xc8, 0x61, 0x6c, 0x1a, 0x6f, 0xcd, 0x3d, 0xb2, 0xb3, 0x4f,
		0x99, 0x62, 0x1f, 0xcc, 0xbf, 0xee, 0x22, 0x89, 0x8d, 0x06, 0x38, 0x43, 0x73, 0x5c, 0xa1, 0xa9,
		0x0c, 0x49, 0x74, 0x05, 0x6c, 0x12, 0x68, 0x47, 0x57, 0x80, 0x7b, 0x30, 0x9e, 0x23, 0x59, 0x6c,
		0x65, 0xfa, 0x6e, 0xdb, 0x4c, 0x43, 0xd1, 0x87, 0xc9, 0x66, 0x45, 0xd7, 0x6e, 0x3d, 0xd2, 0x33,
		0x5b, 0xf5, 0xb7, 0x17, 0x17, 0x2b, 0x4b, 0x55, 0xb8, 0x17, 0x97, 0xc9, 0x94, 0x0c, 0x6d, 0xa2,
		0x0c, 0x45, 0x19, 0x0a, 0x48, 0x86, 0xa2, 0x3b, 0x75, 0x9d, 0x90, 0xc9, 0xc6, 0xb1, 0xb7, 0x76,
		0xfc, 0x6d, 0x89, 0x01, 0xeb, 0xe2, 0xc0, 0xba, 0x58, 0xb0, 0x29, 0x1e, 0xcc, 0x5a, 0xcc, 0xe8,
		0x4e, 0x45, 0x77, 0x2a, 0xba, 0x53, 0xd1, 0x9d, 0xba, 0x7e, 0x31, 0x52, 0x15, 0x92, 0x0d, 0x4c,
		0x26, 0x32, 0xce, 0xd5, 0xdd, 0x64, 0x5c, 0x04, 0x0e, 0x08, 0x1c, 0x10, 0x38, 0xbc, 0x2a, 0xe0,
		0x30, 0x83, 0x0d, 0x35, 0xa3, 0x22, 0xe0, 0x01, 0x7a, 0x68, 0x1b, 0x1c, 0xf3, 0x90, 0x27, 0xd1,
		0xf8, 0x55, 0xdc, 0x61, 0x8c, 0xcc, 0xaa, 0x6b, 0x8c, 0x31, 0x32, 0x28, 0xe2, 0x51, 0xc4, 0xbf,
		0x5a, 0x11, 0x8f, 0x31, 0x32, 0x06, 0xf7, 0x23, 0xc6, 0xc8, 0x3c, 0x3f, 0x3e, 0xc6, 0xc8, 0xac,
		0x6d, 0x49, 0x31, 0x46, 0xc6, 0xfc, 0x68, 0x18, 0x23, 0x03, 0x2e, 0x46, 0x26, 0x43, 0x41, 0x62,
		0xf3, 0x6f, 0xbb, 0x88, 0x93, 0x77, 0x24, 0xa5, 0xc1, 0x20, 0x99, 0x74, 0x34, 0xcc, 0x98, 0x75,
		0x86, 0xe3, 0xd1, 0xc5, 0x8b, 0x2e, 0xde, 0xdf, 0x1e, 0xed, 0xda, 0x40, 0x8a, 0xc4, 0x82, 0xab,
		0x77, 0x61, 0x6c, 0xb3, 0x66, 0x7d, 0x03, 0xcd, 0x7a, 0x34, 0xeb, 0xd1, 0xac, 0x2f, 0xfe, 0xa0,
		0xa6, 0xc4, 0xc8, 0x7c, 0x40, 0x43, 0xf5, 0x35, 0x9e, 0x3d, 0x04, 0x46, 0xea, 0x6d, 0x58, 0x16,
		0x2b, 0xd6, 0xc4, 0x8b, 0x4d, 0x31, 0x63, 0x5d, 0xdc, 0xd8, 0x16, 0x3b, 0xce, 0xc4, 0x8f, 0x33,
		0x31, 0xe4, 0x42, 0x1c, 0x59, 0xb2, 0x72, 0x0d, 0xef, 0x77, 0xd3, 0x62, 0x6a, 0x3e, 0x30, 0xf1,
		0x3c, 0x1a, 0xeb, 0x5a, 0x24, 0x7c, 0x8b, 0x1b, 0x72, 0x5e, 0xab, 0x6b, 0x61, 0x32, 0x4b, 0x3b,
		0x65, 0xa1, 0x97, 0x5d, 0xda, 0x3c, 0xdb, 0xd6, 0x3c, 0x96, 0x79, 0x23, 0x5b, 0x82, 0xd3, 0x85,
		0x00, 0x75, 0x26, 0x48, 0x5d, 0x09, 0x54, 0xe7, 0x82, 0xd5, 0xb9, 0x80, 0x75, 0x29, 0x68, 0xed,
		0x08, 0x5c, 0x4b, 0x82, 0x77, 0xfe, 0x62, 0x8c, 0xbb, 0x7f, 0x9e, 0x3d, 0x2d, 0x7d, 0x21, 0x42,
		0x4a, 0xb8, 0xcd, 0xf3, 0x32, 0x43, 0x7b, 0x8d, 0x37, 0x30, 0x16, 0xd6, 0x86, 0x57, 0x81, 0xf8,
		0x23, 0x2a, 0x35, 0x53, 0x74, 0xbc, 0xdd, 0x27, 0xdc, 0xe6, 0x88, 0x84, 0x0e, 0x74, 0xe0, 0xd3,
		0xf3, 0xda, 0x57, 0x87, 0x8d, 0x7a, 0x1d, 0x95, 0x21, 0x2a, 0x43, 0x54, 0x86, 0xa8, 0x0c, 0xe1,
		0x28, 0xc3, 0xc2, 0x2d, 0x52, 0x56, 0x95, 0x5d, 0x5d, 0x8b, 0x53, 0xd8, 0x09, 0x9e, 0x78, 0xfc,
		0x63, 0xf7, 0xb8, 0x57, 0x6c, 0x07, 0x57, 0x38, 0x56, 0x2a, 0x4b, 0xd3, 0xcd, 0x3c, 0xf5, 0x0d,
		0x47, 0xf3, 0x39, 0x70, 0xdc, 0x3b, 0x12, 0x07, 0x0f, 0xb7, 0x08, 0xb9, 0x29, 0xfd, 0x16, 0x69,
		0xd7, 0x77, 0x3b, 0x25, 0xde, 0x25, 0x6f, 0x60, 0x8e, 0x7e, 0xf5, 0x8a, 0x8d, 0x99, 0x58, 0x52,
		0x1a, 0xc5, 0xda, 0xbe, 0xf5, 0x32, 0x9b, 0xc8, 0xbe, 0xb9, 0x32, 0xc6, 0x77, 0x68, 0xaf, 0xa0,
		0xbd, 0x82, 0xf6, 0x0a, 0xda, 0x2b, 0x70, 0xec, 0x15, 0x24, 0xef, 0x5c, 0xea, 0xbb, 0x9a, 0x4f,
		0x43, 0x72, 0xeb, 0x4c, 0xeb, 0x4d, 0xa7, 0xb3, 0xaf, 0xfb, 0x90, 0xa8, 0x43, 0xc5, 0x87, 0x8a,
		0x0f, 0x15, 0x1f, 0x20, 0xc5, 0x87, 0x44, 0xdd, 0xca, 0x3f, 0x48, 0xd4, 0x19, 0x61, 0x61, 0xea,
		0x48, 0xd4, 0x15, 0xda, 0x22, 0xaf, 0x80, 0xa8, 0x6b, 0x75, 0xeb, 0x75, 0x24, 0xea, 0x36, 0x6d,
		0xf4, 0xd7, 0x4d, 0xd4, 0x31, 0x21, 0x99, 0x76, 0x62, 0xb3, 0x4c, 0x67, 0xc2, 0xc8, 0x02, 0x34,
		0x58, 0xd0, 0x60, 0x41, 0x83, 0x05, 0x0d, 0x96, 0x8a, 0xcd, 0xaa, 0x0b, 0xcf, 0x89, 0xae, 0x0e,
		0xda, 0x2b, 0x68, 0xaf, 0x60, 0x60, 0x01, 0xda, 0x2b, 0x2b, 0x6c, 0x91, 0x66, 0xa7, 0x8d, 0xe6,
		0x0a, 0x9a, 0x2b, 0x9b, 0x63, 0xae, 0x8c, 0x98, 0xd4, 0x09, 0x09, 0x6b, 0x45, 0xbb, 0xf5, 0xaf,
		0xac, 0x95, 0x1f, 0x4f, 0x88, 0x66, 0x05, 0x9a, 0x15, 0x68, 0x56, 0xa0, 0x59, 0x01, 0xc6, 0xac,
		0xb8, 0xaf, 0xd7, 0xe9, 0x22, 0x06, 0x60, 0xd7, 0xe2, 0x1c, 0xd3, 0x77, 0x06, 0xde, 0xb6, 0xb0,
		0x5c, 0x82, 0xfd, 0xc5, 0x35, 0xda, 0x71, 0x30, 0x97, 0xad, 0x92, 0xe2, 0xcf, 0x4e, 0x08, 0xb3,
		0x94, 0xfb, 0xb3, 0x10, 0xcf, 0xc5, 0x12, 0xd9, 0x2c, 0xfd, 0xfe, 0xec, 0xac, 0x50, 0x4b, 0xc2,
		0xbb, 0x05, 0xe3, 0x8e, 0xec, 0x58, 0xb7, 0xc2, 0xae, 0x8b, 0xc2, 0xce, 0xa8, 0xb0, 0x23, 0xb5,
		0x60, 0xbf, 0x76, 0x74, 0xf5, 0x4f, 0xe3, 0x7d, 0xfb, 0x6e, 0xef, 0xdd, 0x3f, 0xdb, 0x77, 0x8f,
		0xff, 0xf8, 0xeb, 0xa9, 0xaf, 0x35, 0xde, 0x6f, 0xdf, 0xed, 0x3d, 0xf3, 0x3f, 0xdd, 0xbb, 0xbd,
		0x15, 0xc7, 0xe8, 0xdc, 0xbd, 0x5d, 0xfa, 0xea, 0xf8, 0xef, 0xcd, 0xe7, 0x2e, 0x68, 0x3f, 0x73,
		0x41, 0xeb, 0xb9, 0x0b, 0x5a, 0xcf, 0x5c, 0xf0, 0xec, 0x2d, 0x35, 0x9f, 0xb9, 0xa0, 0x73, 0xf7,
		0x6b, 0xe9, 0xfb, 0x6f, 0x9f, 0xfe, 0x6a, 0xf7, 0xee, 0xdd, 0xaf, 0xe7, 0xfe, 0x6f, 0xfb, 0xee,
		0xd7, 0xde, 0x3b, 0x14, 0xfd, 0xc5, 0x45, 0x3f, 0x6e, 0x5b, 0xf7, 0xdb, 0x16, 0xbe, 0x22, 0x84,
		0xc6, 0xa6, 0x59, 0xb2, 0x1b, 0x4f, 0x98, 0xd2, 0xfb, 0x5a, 0x4b, 0xbb, 0xb6, 0xe3, 0x29, 0xe3,
		0x87, 0x61, 0x5a, 0x0f, 0x40, 0xd9, 0x25, 0x9d, 0xab, 0xa7, 0xe4, 0x66, 0x61, 0xa6, 0xc6, 0x4e,
		0xbb, 0xdd, 0xdd, 0x6e, 0xb7, 0xeb, 0xdb, 0xad, 0xed, 0xfa, 0x6e, 0xa7, 0xd3, 0xe8, 0x36, 0x6c,
		0x7a, 0xab, 0xce, 0xa4, 0x4f, 0x25, 0xf5, 0x3f, 0xdc, 0x56, 0xf7, 0x2a, 0x3c, 0x09, 0x43, 0xe4,
		0x55, 0x6b, 0x69, 0xc9, 0x5c, 0x59, 0x63, 0xbe, 0x3b, 0x66, 0xf5, 0x7e, 0x4a, 0xe4, 0x56, 0x91,
		0x5b, 0x45, 0x6e, 0x15, 0xb9, 0x55, 0x30, 0xdc, 0x2a, 0x86, 0x6c, 0x6c, 0x10, 0xd3, 0x80, 0x21,
		0x1b, 0xe6, 0xe6, 0xc3, 0x90, 0x0d, 0xb0, 0x5b, 0xa4, 0xd9, 0xc1, 0x52, 0x10, 0xaf, 0xc5, 0xc8,
		0x7c, 0x65, 0x35, 0x67, 0x0d, 0x77, 0x16, 0x59, 0x1a, 0xdf, 0x6a, 0xa7, 0x91, 0x91, 0x94, 0xf1,
		0xd6, 0x7d, 0xf9, 0xfd, 0xad, 0x69, 0xd9, 0xec, 0x0d, 0x6d, 0x65, 0x63, 0x70, 0xe9, 0xaa, 0xf3,
		0xd7, 0x54, 0xd3, 0x92, 0x78, 0x3f, 0x19, 0xb7, 0x58, 0x8c, 0xfc, 0x89, 0xb9, 0xb0, 0x30, 0x39,
		0x16, 0x26, 0x5f, 0xb7, 0x95, 0x88, 0x85, 0xc9, 0x9d, 0x29, 0x09, 0x6b, 0x85, 0xc9, 0x2d, 0xf5,
		0x51, 0x58, 0x3a, 0x4c, 0x56, 0xfa, 0x29, 0x58, 0x16, 0x5f, 0x48, 0x86, 0x21, 0x19, 0x86, 0x64,
		0xd8, 0x26, 0x92, 0x61, 0xb6, 0xc4, 0xe1, 0x7c, 0x82, 0x59, 0x5a, 0x67, 0xcd, 0xa7, 0x9e, 0xa4,
		0xd3, 0x35, 0xb0, 0xbc, 0x9f, 0x1f, 0xa7, 0x94, 0x2e, 0xcc, 0x6d, 0x79, 0x9f, 0x39, 0xa8, 0x89,
		0xe3, 0x98, 0x40, 0xb0, 0x2e, 0xb2, 0x5d, 0x8a, 0x6e, 0xe7, 0x22, 0xdc, 0xb5, 0x28, 0x5f, 0x9b,
		0x48, 0x5f, 0x9b, 0x68, 0x5f, 0x87, 0x88, 0x77, 0x44, 0x37, 0x59, 0x3e, 0x6f, 0xd6, 0xfd, 0x20,
		0x4b, 0xa7, 0xcd, 0xb6, 0x3f, 0xe4, 0xb1, 0x68, 0x74, 0xc0, 0x74, 0x3a, 0xf2, 0x8f, 0xcc, 0x7e,
		0xdc, 0x48, 0x8f, 0x8a, 0x6b, 0x7f, 0x89, 0x63, 0x9d, 0xb6, 0x34, 0xad, 0xe3, 0x12, 0x3d, 0xf3,
		0x79, 0xd7, 0x40, 0x91, 0x3b, 0x92, 0x2e, 0x0f, 0xb7, 0x92, 0x43, 0xbf, 0xca, 0xa6, 0x6c, 0x25,
		0x67, 0xa9, 0xb1, 0x1b, 0xb1, 0x99, 0xde, 0x94, 0x63, 0x16, 0xa8, 0x41, 0x8a, 0x16, 0x0f, 0x73,
		0x35, 0x25, 0xca, 0xef, 0x3d, 0x1c, 0xee, 0xac, 0xb7, 0xc7, 0x13, 0xa3, 0x39, 0x85, 0xe6, 0x14,
		0x9a, 0x53, 0x68, 0x4e, 0xa1, 0x39, 0x35, 0x3d, 0x6d, 0x21, 0x25, 0x81, 0xa4, 0x81, 0xcb, 0x74,
		0xa9, 0x6d, 0x37, 0xe9, 0x52, 0x53, 0x07, 0xbb, 0x57, 0x63, 0xc1, 0xde, 0x82, 0x43, 0xfd, 0xd1,
		0x1f, 0xa6, 0xbf, 0xf3, 0xf1, 0xeb, 0x00, 0xbd, 0x75, 0x9c, 0x44, 0xed, 0x2f, 0x1a, 0x76, 0x6e,
		0xa2, 0xf7, 0x17, 0xf1, 0xff, 0xda, 0xa2, 0xf8, 0xe7, 0x37, 0xe1, 0x24, 0x9a, 0xdf, 0x01, 0xd4,
		0x03, 0xe5, 0x5e, 0xb0, 0x1c, 0x92, 0x33, 0x9f, 0xc7, 0x69, 0x68, 0xce, 0x72, 0x10, 0x89, 0x95,
		0x68, 0x1d, 0x7b, 0x2b, 0x6e, 0x23, 0x43, 0x44, 0x69, 0xa2, 0x1d, 0x74, 0xe4, 0x9e, 0x4c, 0x03,
		0xdc, 0xf9, 0xdd, 0x44, 0xe7, 0xf7, 0xc6, 0x40, 0x7c, 0x74, 0x7e, 0xbf, 0x5e, 0xed, 0x84, 0xce,
		0x6f, 0xb3, 0xaf, 0x13, 0x9d, 0xdf, 0xc8, 0xd6, 0x20, 0x5b, 0x83, 0x6c, 0x0d, 0xb2, 0x35, 0x4f,
		0x9c, 0x36, 0x74, 0x7e, 0x17, 0xfd, 0x41, 0xe7, 0xb7, 0x95, 0x69, 0xd1, 0xf9, 0x6d, 0x9b, 0xfc,
		0x42, 0xe7, 0x77, 0xa9, 0x37, 0x13, 0x3a, 0xbf, 0xd7, 0x7a, 0xff, 0xe8, 0xfc, 0x46, 0x73, 0x0a,
		0xcd, 0x29, 0x34, 0xa7, 0xd0, 0x9c, 0x7a, 0x4d, 0xe6, 0x14, 0x3a, 0xbf, 0xd1, 0xf9, 0x9d, 0xcf,
		0xb0, 0x43, 0xe7, 0x37, 0x3a, 0xbf, 0x5d, 0xec, 0xf0, 0x57, 0xe3, 0xfc, 0x9e, 0xf8, 0x64, 0xb1,
		0x84, 0xc9, 0xe6, 0x6f, 0x99, 0x75, 0x6f, 0x95, 0xaa, 0x95, 0xc0, 0x03, 0x99, 0x78, 0x9a, 0x4f,
		0x61, 0xc1, 0xf1, 0x6c, 0xce, 0x1f, 0xe7, 0xe9, 0x0d, 0x7f, 0x09, 0x09, 0xff, 0x71, 0x1c, 0x8f,
		0xda, 0x3f, 0xf6, 0x27, 0x77, 0xf9, 0xe3, 0x8b, 0x94, 0xf1, 0xa7, 0xf1, 0xfd, 0xfd, 0x98, 0x7f,
		0xf7, 0x72, 0x76, 0x7b, 0xaf, 0xa0, 0xda, 0x8a, 0x9d, 0x38, 0x0d, 0xab, 0xf1, 0x19, 0xd6, 0x6b,
		0xaa, 0x34, 0xb1, 0xa6, 0x8a, 0x33, 0xeb, 0x12, 0x6b, 0xaa, 0x94, 0x4f, 0x6b, 0x59, 0xab, 0xa9,
		0x42, 0x3c, 0x8f, 0xc6, 0xba, 0x16, 0x09, 0xdf, 0x41, 0x68, 0xd9, 0xe2, 0x64, 0xf6, 0x7b, 0x50,
		0x07, 0x24, 0x54, 0x14, 0x4b, 0x1a, 0xaf, 0x8d, 0xbe, 0xc3, 0x40, 0x36, 0x70, 0xf4, 0x1c, 0x06,
		0xb2, 0xad, 0x8d, 0x7e, 0x9b, 0x9f, 0x96, 0xbe, 0x10, 0x21, 0x25, 0xdc, 0x45, 0xaf, 0xb8, 0xc6,
		0x2b, 0x8e, 0xa6, 0x26, 0xfe, 0x88, 0x4a, 0xcd, 0x54, 0xca, 0x1b, 0x4d, 0x6c, 0xb3, 0x11, 0x09,
		0x1d, 0xe8, 0xc0, 0xa7, 0xe7, 0xb5, 0xaf, 0x0e, 0x1b, 0xf5, 0x3a, 0x2a, 0x43, 0x54, 0x86, 0xa8,
		0x0c, 0x51, 0x19, 0xc2, 0x51, 0x86, 0x09, 0xe3, 0xba, 0xd1, 0x75, 0xa0, 0x0b, 0xbb, 0x58, 0xe0,
		0xff, 0xe5, 0x07, 0xc1, 0x02, 0xff, 0xe6, 0xe6, 0xc3, 0x02, 0xff, 0x60, 0xb7, 0x48, 0xbb, 0xbe,
		0x8b, 0x15, 0xfe, 0x37, 0x6e, 0xf4, 0xab, 0x57, 0x6c, 0xcc, 0x78, 0x89, 0x94, 0x63, 0x73, 0x62,
		0x96, 0x91, 0xe4, 0xa0, 0x46, 0xf2, 0xe3, 0x19, 0xd1, 0xb4, 0x40, 0xd3, 0x02, 0x4d, 0x0b, 0x34,
		0x2d, 0x40, 0x99, 0x16, 0xd8, 0x3a, 0x0c, 0x2d, 0x0b, 0x67, 0xb0, 0xb1, 0x8e, 0x96, 0x05, 0x5a,
		0x16, 0xbf, 0xdf, 0x22, 0xd8, 0x3a, 0x0c, 0x0d, 0x8b, 0x8d, 0x32, 0x2c, 0x62, 0x49, 0x69, 0x14,
		0x6b, 0xfb, 0xf6, 0xc4, 0x6c, 0x22, 0xfb, 0x7e, 0x90, 0x31, 0xba, 0x43, 0x6b, 0x05, 0xad, 0x15,
		0xb4, 0x56, 0xd0, 0x5a, 0x81, 0x63, 0xad, 0x60, 0x54, 0x80, 0x4b, 0x7d, 0x57, 0xf3, 0x69, 0x48,
		0x6e, 0x9d, 0x69, 0xbd, 0xe9, 0x74, 0xf6, 0x75, 0x1f, 0x46, 0x00, 0xa0, 0xe2, 0x43, 0xc5, 0x87,
		0x8a, 0x0f, 0x90, 0xe2, 0xc3, 0x08, 0x80, 0x95, 0x7f, 0x90, 0xa7, 0x33, 0x42, 0xc2, 0x20, 0x4f,
		0x57, 0x6c, 0x8b, 0xbc, 0x02, 0x9e, 0xae, 0xd5, 0xad, 0xd7, 0x91, 0xa8, 0xdb, 0xb4, 0xd1, 0x5f,
		0x37, 0x51, 0xe7, 0xca, 0xf3, 0x6f, 0xdb, 0xe3, 0x8f, 0x21, 0xcb, 0x68, 0xb0, 0xa0, 0xc1, 0x82,
		0x06, 0x0b, 0x64, 0x83, 0x05, 0xe3, 0x0a, 0xd0, 0x5e, 0x71, 0x06, 0x46, 0x31, 0x62, 0x19, 0xed,
		0x95, 0x17, 0xb6, 0x88, 0xb3, 0x6a, 0xa1, 0x68, 0xae, 0xa0, 0xb9, 0xb2, 0xca, 0x36, 0x19, 0x31,
		0xa9, 0x13, 0x12, 0xd6, 0xa6, 0x85, 0x6d, 0xec, 0x5b, 0x2d, 0x8f, 0x27, 0x44, 0xb3, 0x02, 0xcd,
		0x0a, 0x34, 0x2b, 0xd0, 0xac, 0x00, 0x63, 0x56, 0xb0, 0xd8, 0xb2, 0xec, 0x5a, 0x94, 0x5f, 0x8d,
		0x5d, 0x8b, 0x73, 0x4c, 0xdf, 0x19, 0x78, 0xdb, 0xe2, 0x7e, 0x65, 0x46, 0x6d, 0x07, 0x6b, 0xb3,
		0xb4, 0x46, 0x3b, 0x6e, 0x8a, 0xa5, 0x6a, 0x2a, 0xb9, 0xb3, 0x06, 0x14, 0xd5, 0xb7, 0x6f, 0xbf,
		0xd5, 0x6b, 0xbb, 0x57, 0xbf, 0xbe, 0x35, 0x6a, 0xbb, 0x57, 0x93, 0x8f, 0x8d, 0xf4, 0x9f, 0xc9,
		0xe7, 0xe6, 0xb7, 0x7a, 0xad, 0x3d, 0xfb, 0xdc, 0xf9, 0x56, 0xaf, 0x75, 0xae, 0xde, 0x7d, 0xff,
		0xfe, 0xc7, 0xbb, 0x7f, 0x5a, 0x77, 0xd9, 0x2f, 0xb4, 0x5f, 0x72, 0xf8, 0xca, 0xc5, 0x12, 0x9d,
		0x5d, 0x1c, 0x7f, 0x75, 0xbe, 0x4e, 0xff, 0x73, 0xb9, 0x50, 0xff, 0xaa, 0x42, 0x2f, 0xcd, 0xff,
		0xbe, 0x44, 0xc2, 0xae, 0x8b, 0xc2, 0xce, 0xa8, 0xb0, 0x23, 0xb5, 0x60, 0xbf, 0x76, 0x74, 0xf5,
		0x4f, 0xe3, 0x7d, 0xfb, 0x6e, 0xef, 0xdd, 0x3f, 0xdb, 0x77, 0x8f, 0xff, 0xf8, 0xeb, 0xa9, 0xaf,
		0x35, 0xde, 0x6f, 0xdf, 0xed, 0x3d, 0xf3, 0x3f, 0xdd, 0xbb, 0xbd, 0x15, 0xc7, 0xe8, 0xdc, 0xbd,
		0x5d, 0xfa, 0xea, 0xf8, 0xef, 0xcd, 0xe7, 0x2e, 0x68, 0x3f, 0x73, 0x41, 0xeb, 0xb9, 0x0b, 0x5a,
		0xcf, 0x5c, 0xf0, 0xec, 0x2d, 0x35, 0x9f, 0xb9, 0xa0, 0x73, 0xf7, 0x6b, 0xe9, 0xfb, 0x6f, 0x9f,
		0xfe, 0x6a, 0xf7, 0xee, 0xdd, 0xaf, 0xe7, 0xfe, 0x6f, 0xfb, 0xee, 0xd7, 0xde, 0x3b, 0x14, 0xfd,
		0xc5, 0x45, 0x3f, 0x6e, 0x5b, 0xf7, 0xdb, 0x16, 0xbe, 0x22, 0x84, 0xc6, 0xa6, 0x59, 0xb2, 0x1b,
		0x9d, 0x94, 0xe4, 0x77, 0x57, 0x8a, 0x7f, 0xad, 0x25, 0xf8, 0xdd, 0x94, 0xde, 0x87, 0xc5, 0xab,
		0xa6, 0xb5, 0xc4, 0x65, 0x8d, 0xf9, 0xee, 0x98, 0xd5, 0xfb, 0x29, 0x91, 0x5b, 0x45, 0x6e, 0x15,
		0xb9, 0x55, 0xe4, 0x56, 0xc1, 0x70, 0xab, 0x18, 0xb2, 0xb1, 0x41, 0x4c, 0x03, 0x86, 0x6c, 0x98,
		0x9b, 0x0f, 0x43, 0x36, 0xc0, 0x6e, 0x11, 0x2c, 0x05, 0xf1, 0x7a, 0x8c, 0x4c, 0x6c, 0xc1, 0x64,
		0x74, 0x7c, 0xa7, 0x2d, 0x98, 0x2c, 0xb4, 0xe6, 0xda, 0xcc, 0xb6, 0x46, 0xf6, 0x4d, 0x4b, 0x67,
		0x26, 0xa5, 0x25, 0x99, 0x6e, 0xcd, 0x84, 0xc4, 0x76, 0x47, 0x9b, 0x60, 0x22, 0x62, 0xbb, 0x23,
		0x67, 0x1a, 0xc2, 0x9a, 0xe9, 0xe7, 0xa0, 0xb9, 0xad, 0xcd, 0x66, 0xb6, 0xf3, 0xe6, 0xb5, 0x7f,
		0xfc, 0x31, 0x51, 0x3c, 0x5b, 0xcb, 0xa2, 0x72, 0x53, 0x55, 0xd1, 0x9b, 0x0d, 0xda, 0x68, 0x63,
		0x99, 0x61, 0x53, 0xd1, 0xd8, 0xe1, 0xf7, 0xed, 0xf1, 0xf9, 0x4e, 0xf9, 0x7b, 0x3b, 0x7c, 0xbd,
		0xa9, 0x9d, 0x61, 0x09, 0x9c, 0x3a, 0x05, 0xa5, 0x55, 0xa3, 0xdd, 0x2c, 0x73, 0x36, 0xff, 0x34,
		0x23, 0x88, 0x8a, 0x8b, 0x8d, 0x62, 0x23, 0x14, 0xdc, 0x56, 0xa6, 0xb7, 0x93, 0xfd, 0x6d, 0x54,
		0x6c, 0xd9, 0xf2, 0xbf, 0xec, 0x7c, 0x57, 0xe6, 0x5c, 0x9e, 0x99, 0xfc, 0xcf, 0x0d, 0x78, 0xcd,
		0x08, 0x78, 0x73, 0x02, 0xdd, 0xaa, 0x00, 0x37, 0x23, 0xb0, 0xf3, 0x2e, 0xd5, 0x7e, 0x32, 0x18,
		0x3f, 0x16, 0xf5, 0x0b, 0x91, 0xdb, 0xc5, 0x8e, 0xde, 0x1c, 0x36, 0x6e, 0x8d, 0xe1, 0x78, 0xb0,
		0xb7, 0x70, 0xc0, 0x1e, 0xfd, 0x61, 0xfc, 0xfb, 0xf8, 0x88, 0xed, 0x2d, 0x1e, 0xb7, 0x14, 0xc3,
		0xef, 0xa5, 0x87, 0x6e, 0xf2, 0xf1, 0xfe, 0xe8, 0x3d, 0xf8, 0xbd, 0xa0, 0xdc, 0xae, 0x1e, 0x50,
		0xe5, 0x49, 0x16, 0x4f, 0xa5, 0x4d, 0x75, 0xdf, 0xf7, 0xd9, 0xf8, 0x33, 0x09, 0x2b, 0xc7, 0xbd,
		0xca, 0x78, 0x8e, 0x4a, 0x40, 0x22, 0x16, 0xde, 0x56, 0x26, 0x22, 0x23, 0x91, 0xa9, 0x60, 0xaa,
		0x04, 0x42, 0x7e, 0xe7, 0xf7, 0x8f, 0x54, 0xf4, 0x2e, 0xcc, 0xf4, 0x12, 0x36, 0x66, 0x4c, 0x9b,
		0x34, 0x9e, 0x8d, 0x1b, 0xcb, 0xa6, 0x8d, 0x63, 0x6b, 0xc6, 0xb0, 0x35, 0xe3, 0xd7, 0x86, 0xb1,
		0xbb, 0x5e, 0x95, 0x6f, 0xaa, 0x57, 0x6f, 0x35, 0x55, 0xc7, 0xc6, 0x76, 0xc6, 0x9c, 0x5c, 0x1b,
		0x8f, 0x6a, 0x68, 0xed, 0x1e, 0x09, 0x9c, 0x43, 0xee, 0x85, 0x42, 0x31, 0x3e, 0x18, 0x0b, 0x18,
		0x4d, 0x18, 0xa7, 0x72, 0x2c, 0x5c, 0x2a, 0x5f, 0xce, 0xcf, 0x7b, 0x95, 0x14, 0x99, 0xaa, 0xca,
		0x90, 0x70, 0x3f, 0xa4, 0x7e, 0xa5, 0x7f, 0x5b, 0xd1, 0x43, 0xa6, 0xbe, 0xf3, 0xe3, 0x5e, 0x65,
		0x2e, 0x7b, 0x4c, 0xdd, 0x97, 0xd9, 0x76, 0xe6, 0xc6, 0x79, 0x3d, 0x1b, 0x7c, 0x9e, 0x35, 0x1e,
		0xcf, 0x16, 0x7f, 0x67, 0x9d, 0xb7, 0xb3, 0xce, 0xd7, 0xd9, 0xe4, 0xe9, 0xee, 0xca, 0x61, 0x3d,
		0x39, 0x36, 0x07, 0xae, 0xf2, 0x62, 0x4c, 0x33, 0x56, 0x9a, 0x55, 0xeb, 0xac, 0xc0, 0xe9, 0xc8,
		0x6a, 0xc4, 0xe7, 0xdb, 0xc6, 0xd9, 0x97, 0x2c, 0xdb, 0x15, 0x19, 0xf5, 0x72, 0xd1, 0x45, 0xb5,
		0xb2, 0x98, 0xd9, 0xde, 0xec, 0xea, 0xef, 0x27, 0xc3, 0xbb, 0xa9, 0x7a, 0x33, 0x6d, 0x96, 0xed,
		0x9d, 0xdc, 0xb7, 0xfe, 0x9a, 0x5c, 0x9f, 0x71, 0x35, 0xf2, 0xa9, 0xe4, 0xdc, 0xaa, 0xb7, 0x88,
		0x8a, 0x2d, 0xac, 0x4a, 0x8b, 0xaa, 0x4c, 0x63, 0xaa, 0xd1, 0x98, 0x0a, 0x34, 0xa1, 0xea, 0xec,
		0x9e, 0xf6, 0xbc, 0xa8, 0xbb, 0xea, 0x0f, 0xbd, 0xb8, 0xe6, 0x85, 0x6c, 0xf2, 0x70, 0x39, 0x17,
		0x6c, 0xb6, 0x63, 0x16, 0x07, 0xcb, 0xf9, 0xa6, 0x17, 0xea, 0xdf, 0x05, 0x24, 0x54, 0x79, 0x31,
		0x71, 0x41, 0x1f, 0x77, 0x61, 0xcc, 0x6b, 0x02, 0xe3, 0x1a, 0xc3, 0xb4, 0xa6, 0x30, 0xac, 0x71,
		0xcc, 0x6a, 0x1c, 0xa3, 0x9a, 0xc4, 0xa4, 0x6e, 0x29, 0xd9, 0xc2, 0x3e, 0x5f, 0x83, 0xbd, 0x12,
		0x0a, 0xf6, 0x42, 0xc8, 0x81, 0x84, 0x72, 0x28, 0x19, 0xca, 0x49, 0x3f, 0xa4, 0x7e, 0x71, 0xa1,
		0x35, 0x1b, 0xa8, 0xb8, 0xc0, 0x2a, 0xd0, 0x5b, 0x07, 0xe5, 0x15, 0xca, 0x2b, 0x94, 0x57, 0x65,
		0x96, 0x57, 0x91, 0x4e, 0x8a, 0xcb, 0xaa, 0xf1, 0x20, 0x28, 0x60, 0x50, 0xc0, 0xa0, 0x80, 0xc9,
		0xb0, 0x5b, 0x0a, 0xf7, 0xd0, 0x30, 0xd0, 0x23, 0xc3, 0x50, 0x82, 0x92, 0x01, 0xb7, 0x8a, 0xc9,
		0x04, 0x23, 0xc3, 0x91, 0xc4, 0xf3, 0xec, 0x8f, 0xae, 0xa1, 0x7a, 0x27, 0x36, 0x92, 0x3b, 0x0c,
		0x44, 0x5a, 0x19, 0xcd, 0xe0, 0x99, 0xad, 0x41, 0xcb, 0xf0, 0x1a, 0xd4, 0x37, 0x78, 0x09, 0xd6,
		0xc4, 0xca, 0x5f, 0x21, 0x31, 0x6c, 0x96, 0x18, 0x9e, 0x72, 0xa9, 0x1b, 0xc0, 0x0a, 0x73, 0xca,
		0x06, 0xc3, 0xbe, 0x90, 0x2a, 0x3f, 0x31, 0x7c, 0x3f, 0x04, 0x72, 0xc3, 0xd6, 0x90, 0x17, 0x72,
		0xc3, 0x0e, 0xb9, 0xe1, 0xd9, 0x8e, 0x2e, 0x6e, 0xb7, 0xcc, 0x47, 0x2a, 0x66, 0xbc, 0x34, 0xd0,
		0x78, 0x41, 0xe3, 0x05, 0x82, 0xf1, 0x52, 0x34, 0x08, 0x2a, 0xaf, 0x97, 0xf2, 0xd9, 0x4d, 0x97,
		0xcb, 0x6b, 0x69, 0xf8, 0x18, 0x1a, 0x3b, 0x8e, 0x26, 0x8f, 0xa5, 0xf1, 0xe3, 0x69, 0xfa, 0x98,
		0x5a, 0x3b, 0xae, 0xd6, 0x8e, 0xad, 0x8d, 0xe3, 0x6b, 0x08, 0xfa, 0x6f, 0x4a, 0x6c, 0x23, 0xb3,
		0x10, 0xd9, 0x68, 0x2c, 0xec, 0xcd, 0xb4, 0x55, 0x8f, 0xf1, 0x83, 0x18, 0x3f, 0xe8, 0x48, 0x3c,
		0x98, 0x11, 0x13, 0x06, 0xa9, 0x9e, 0x8a, 0x95, 0x7c, 0x5e, 0xdb, 0xc5, 0xd7, 0x6d, 0xd4, 0x1d,
		0xb6, 0x56, 0x5f, 0x18, 0x68, 0xd1, 0xf4, 0x2b, 0x93, 0xaf, 0xd6, 0x66, 0x25, 0x5c, 0xb0, 0xc5,
		0xce, 0xaf, 0x36, 0x25, 0x88, 0xd8, 0x00, 0x98, 0x0c, 0x19, 0xff, 0x59, 0x0b, 0xc9, 0x2d, 0x95,
		0xc6, 0x9b, 0x06, 0xdd, 0x17, 0x05, 0x58, 0x9e, 0x03, 0x01, 0x05, 0x02, 0x0a, 0x04, 0x14, 0x1b,
		0x07, 0x28, 0x4e, 0x09, 0xf7, 0x89, 0x16, 0xf2, 0xd6, 0x60, 0x96, 0x8f, 0x3d, 0x90, 0x12, 0x0f,
		0x6f, 0x15, 0x82, 0x94, 0xc5, 0xb2, 0xe6, 0x8f, 0xab, 0xa5, 0x37, 0xef, 0xde, 0xfd, 0x9f, 0x77,
		0xff, 0xef, 0x75, 0x62, 0x8b, 0x97, 0xdf, 0x4b, 0x19, 0x21, 0x01, 0x56, 0x65, 0x78, 0xda, 0x23,
		0x38, 0x77, 0xa2, 0xcd, 0x3f, 0xe5, 0x72, 0x12, 0x9a, 0x7b, 0xdf, 0x05, 0xde, 0xb5, 0x09, 0x96,
		0xc7, 0x1c, 0xbb, 0x63, 0x08, 0x84, 0x21, 0x79, 0xbb, 0x51, 0xe0, 0x0a, 0xc9, 0x5b, 0xf7, 0x00,
		0xc7, 0x42, 0x15, 0x35, 0x93, 0x55, 0xd3, 0x96, 0xab, 0xa4, 0xb1, 0x18, 0xa2, 0xf4, 0x9c, 0x94,
		0x16, 0x35, 0x26, 0x40, 0x27, 0xc3, 0x6d, 0x98, 0x03, 0xac, 0x89, 0x32, 0x14, 0x65, 0x28, 0x20,
		0x19, 0x8a, 0x0e, 0x30, 0xe4, 0xab, 0x90, 0xaf, 0x42, 0xbe, 0x6a, 0x63, 0xb8, 0x25, 0x74, 0x80,
		0xa1, 0x03, 0x0c, 0x1d, 0x60, 0x9b, 0xce, 0x76, 0xa1, 0x03, 0x0c, 0x01, 0x05, 0x02, 0x0a, 0x04,
		0x14, 0xe8, 0x00, 0x43, 0x07, 0x18, 0x3a, 0xc0, 0x1e, 0x61, 0x8b, 0xd7, 0xe9, 0x00, 0x33, 0x00,
		0x09, 0x84, 0x64, 0x03, 0x93, 0xc9, 0xac, 0x73, 0x85, 0x35, 0x19, 0x17, 0x55, 0x3f, 0xaa, 0x7e,
		0x54, 0xfd, 0xaf, 0x88, 0x4b, 0x98, 0x79, 0x9c, 0x6b, 0x46, 0x05, 0xc0, 0x03, 0x4d, 0xdd, 0x36,
		0x38, 0xe6, 0x21, 0x4f, 0xa2, 0xf1, 0x8b, 0xb8, 0xc3, 0x98, 0x06, 0x70, 0x31, 0x0d, 0x06, 0xda,
		0xe6, 0x61, 0xaf, 0x89, 0x6c, 0x16, 0x03, 0xf6, 0x9a, 0x70, 0x75, 0x86, 0xec, 0x9e, 0x1d, 0x17,
		0x85, 0x80, 0x3f, 0xcf, 0xe6, 0xc2, 0x82, 0x0f, 0x96, 0x96, 0x73, 0x13, 0x6a, 0x3e, 0xc4, 0x52,
		0xdc, 0xdc, 0xd6, 0x48, 0x8e, 0x2e, 0x03, 0xf7, 0x96, 0xfd, 0x7c, 0x08, 0xac, 0xf9, 0x60, 0x0d,
		0xb5, 0x63, 0xcd, 0x07, 0x87, 0x35, 0x1f, 0x0a, 0x26, 0x9e, 0x9b, 0x49, 0x38, 0xc7, 0x7a, 0x0f,
		0x16, 0x8c, 0x5e, 0xac, 0xf7, 0x60, 0x0f, 0x39, 0x15, 0xae, 0xf7, 0x10, 0x09, 0xdf, 0x60, 0xac,
		0x5b, 0x3a, 0x5a, 0xe1, 0x6e, 0x5a, 0xf3, 0xba, 0xb6, 0x07, 0xc7, 0x17, 0xfb, 0x1f, 0x4e, 0x0e,
		0x31, 0x00, 0xd9, 0x1d, 0xe3, 0x85, 0xc1, 0x73, 0x18, 0x80, 0xfc, 0xf2, 0x6e, 0xa3, 0x3c, 0x89,
		0xe8, 0xa4, 0x8d, 0x9d, 0xc9, 0x20, 0x64, 0x03, 0x2c, 0x95, 0x21, 0x76, 0x0a, 0x0a, 0xc9, 0xb1,
		0x81, 0x96, 0xf3, 0xdc, 0x34, 0x29, 0x94, 0x40, 0xe3, 0xa6, 0x36, 0x72, 0xb1, 0x50, 0x6f, 0x23,
		0x21, 0xde, 0xc6, 0x20, 0x67, 0x13, 0x21, 0x27, 0x42, 0x4e, 0x84, 0x9c, 0x08, 0x39, 0x11, 0x72,
		0x22, 0xe4, 0x44, 0xc8, 0x89, 0x90, 0xf3, 0x35, 0x42, 0xce, 0x02, 0xfe, 0x4d, 0xf4, 0x9e, 0xbc,
		0xfc, 0x7e, 0xab, 0xb9, 0x30, 0xf6, 0x6a, 0xbe, 0xaf, 0xde, 0x78, 0x92, 0x7d, 0x19, 0x6f, 0x82,
		0x87, 0x26, 0x9f, 0x5d, 0x50, 0xc8, 0x1e, 0x28, 0xec, 0x99, 0x69, 0xa2, 0x67, 0x66, 0x8d, 0x2a,
		0xbd, 0xd4, 0x9e, 0x99, 0x64, 0x7c, 0x68, 0x95, 0x09, 0xdf, 0xcc, 0x74, 0x24, 0xf4, 0xce, 0xa0,
		0xa9, 0x8c, 0xa6, 0xf2, 0xcb, 0x03, 0x30, 0x5e, 0xf3, 0x99, 0xf2, 0x88, 0xf4, 0xa9, 0x5f, 0x8b,
		0x7f, 0x6a, 0x65, 0xb0, 0xae, 0xcb, 0xd2, 0xd0, 0x68, 0xf2, 0xa2, 0xc9, 0x8b, 0x26, 0xef, 0x06,
		0x99, 0xbc, 0x53, 0x75, 0xd9, 0x6d, 0x1b, 0x34, 0x78, 0x0d, 0xa4, 0xec, 0x18, 0x6a, 0x29, 0x36,
		0xfb, 0x31, 0x18, 0x50, 0x6d, 0xb2, 0xc5, 0x98, 0x61, 0xb9, 0xb6, 0x34, 0xac, 0xe1, 0x76, 0x57,
		0xf3, 0x71, 0x2d, 0xb4, 0xbd, 0x32, 0x74, 0x42, 0x1e, 0x2e, 0x15, 0xb9, 0x01, 0xb7, 0x54, 0x66,
		0x43, 0x6e, 0x9d, 0xaf, 0xde, 0x86, 0x84, 0xeb, 0x5f, 0x41, 0x2c, 0xa8, 0xc7, 0x6b, 0x54, 0x4a,
		0x21, 0xcd, 0x63, 0xb0, 0x85, 0x61, 0x11, 0x7f, 0x21, 0xfe, 0x42, 0xfc, 0x85, 0xf8, 0x0b, 0xf1,
		0x17, 0xe2, 0x2f, 0xc4, 0x5f, 0x88, 0xbf, 0x10, 0x7f, 0x2d, 0xe2, 0xaf, 0x40, 0xc8, 0xeb, 0x09,
		0x59, 0x25, 0x3c, 0x4d, 0x0d, 0xa3, 0xb0, 0xa5, 0xc1, 0x11, 0x8b, 0x21, 0x16, 0x43, 0x2c, 0x86,
		0x58, 0x0c, 0xb1, 0x18, 0x62, 0x31, 0xc4, 0x62, 0x88, 0xc5, 0x10, 0x8b, 0x3d, 0x8d, 0xc5, 0x8c,
		0xf3, 0x61, 0x8f, 0x86, 0x46, 0x1c, 0x86, 0x38, 0x0c, 0x71, 0x18, 0xe2, 0x30, 0xc4, 0x61, 0x88,
		0xc3, 0x10, 0x87, 0x21, 0x0e, 0x43, 0x1c, 0xb6, 0x88, 0xc3, 0x2c, 0x30, 0x61, 0xc8, 0x7f, 0x21,
		0xee, 0x42, 0xdc, 0x85, 0xb8, 0x0b, 0x71, 0x17, 0xe2, 0x2e, 0xc4, 0x5d, 0x88, 0xbb, 0x10, 0x77,
		0x3d, 0x81, 0xbb, 0x8c, 0xb3, 0x5e, 0xc8, 0x75, 0x21, 0xe6, 0x42, 0xcc, 0x85, 0x98, 0x0b, 0x31,
		0x17, 0x62, 0x2e, 0xc4, 0x5c, 0x88, 0xb9, 0x10, 0x73, 0x3d, 0x5c, 0x16, 0x91, 0x68, 0x6b, 0x89,
		0x90, 0x4f, 0x8c, 0x8d, 0x48, 0x0c, 0x91, 0x18, 0x22, 0x31, 0x44, 0x62, 0x88, 0xc4, 0x10, 0x89,
		0x21, 0x12, 0x43, 0x24, 0x86, 0x48, 0xec, 0x01, 0x12, 0xb3, 0x91, 0x0a, 0xf9, 0x68, 0x5c, 0x44,
		0x60, 0x88, 0xc0, 0x10, 0x81, 0x21, 0x02, 0x43, 0x04, 0x86, 0x08, 0x0c, 0x11, 0x18, 0x22, 0x30,
		0x44, 0x60, 0x0f, 0x10, 0x98, 0xbd, 0x64, 0xc8, 0x27, 0x47, 0x47, 0x34, 0x86, 0x68, 0x0c, 0xd1,
		0x18, 0xa2, 0x31, 0x44, 0x63, 0x88, 0xc6, 0x10, 0x8d, 0x21, 0x1a, 0x43, 0x34, 0xf6, 0x0c, 0x1a,
		0x33, 0xcf, 0x89, 0x61, 0x3e, 0x24, 0x22, 0x31, 0x44, 0x62, 0x88, 0xc4, 0x10, 0x89, 0x21, 0x12,
		0x43, 0x24, 0x86, 0x48, 0x0c, 0x91, 0xd8, 0xef, 0x90, 0x98, 0x0d, 0x36, 0x0c, 0x39, 0x30, 0x44,
		0x5e, 0x88, 0xbc, 0x10, 0x79, 0x21, 0xf2, 0x42, 0xe4, 0x85, 0xc8, 0x0b, 0x91, 0x17, 0x22, 0xaf,
		0xa7, 0x90, 0x97, 0x79, 0xe6, 0x0b, 0xf9, 0x2e, 0x44, 0x5d, 0x88, 0xba, 0x10, 0x75, 0x21, 0xea,
		0x42, 0xd4, 0x85, 0xa8, 0x0b, 0x51, 0x57, 0x29, 0x51, 0xd7, 0x6b, 0xef, 0xdc, 0x9d, 0x76, 0x4a,
		0xde, 0x2a, 0xd8, 0x17, 0xb6, 0x92, 0xa5, 0xcd, 0xf4, 0xc7, 0xd9, 0x5c, 0xae, 0x9a, 0x84, 0xe7,
		0xe8, 0x8e, 0xec, 0x0f, 0xbd, 0xb8, 0xe6, 0x85, 0x6c, 0x02, 0x45, 0x0a, 0x36, 0xdd, 0x5d, 0x1c,
		0x2c, 0x6f, 0x1f, 0x53, 0x1a, 0x90, 0x24, 0x4c, 0x61, 0x51, 0x40, 0x42, 0x45, 0x0b, 0xf6, 0xef,
		0xad, 0x63, 0xff, 0x5e, 0xec, 0xdf, 0x0b, 0x41, 0x60, 0x16, 0x86, 0xcf, 0xf3, 0xdd, 0xd2, 0x17,
		0x22, 0xa4, 0x84, 0x17, 0xd9, 0x2f, 0xb3, 0xe6, 0xd7, 0x8d, 0x0d, 0x16, 0x5c, 0x94, 0x93, 0x7e,
		0x48, 0xfd, 0xe2, 0x42, 0x6b, 0x36, 0x50, 0x71, 0x81, 0x35, 0xde, 0xbf, 0x28, 0xaf, 0x50, 0x5e,
		0xa1, 0xbc, 0x42, 0x79, 0xb5, 0x74, 0x8f, 0x91, 0x4e, 0x8a, 0xcb, 0xaa, 0xf1, 0x20, 0x28, 0x60,
		0x50, 0xc0, 0xa0, 0x80, 0xc9, 0xb0, 0x5b, 0x12, 0xc6, 0x75, 0xa3, 0x6b, 0x40, 0xbe, 0x74, 0x0b,
		0x0c, 0x61, 0x86, 0x34, 0x34, 0xc0, 0xae, 0x9a, 0x24, 0x09, 0x0d, 0x33, 0x4e, 0x73, 0xa6, 0xa9,
		0xbb, 0x63, 0x68, 0x40, 0x0b, 0x7c, 0x92, 0x01, 0x16, 0xd0, 0x28, 0xfb, 0x37, 0x5b, 0x83, 0x96,
		0xe1, 0x35, 0xa8, 0x6f, 0xf0, 0x12, 0xac, 0x89, 0x42, 0xbb, 0x72, 0x05, 0x2f, 0xde, 0x58, 0xdc,
		0x90, 0x45, 0xa9, 0x39, 0xe3, 0x94, 0x5c, 0x36, 0x85, 0xb4, 0xfa, 0xbb, 0xc9, 0xf0, 0x5e, 0xaa,
		0x09, 0xe7, 0x49, 0xd4, 0xa7, 0x32, 0x87, 0x3d, 0x79, 0xaf, 0x66, 0xee, 0xc7, 0xc8, 0xb8, 0x22,
		0x33, 0xf8, 0x9a, 0xf1, 0xb2, 0xbc, 0x90, 0xac, 0x08, 0x14, 0x7b, 0x00, 0xc1, 0x82, 0x1c, 0x3a,
		0xb5, 0x28, 0xf4, 0x32, 0x06, 0xb9, 0x8c, 0x41, 0xad, 0x25, 0x88, 0x15, 0x54, 0x37, 0xec, 0xc4,
		0x1f, 0x30, 0x99, 0x6f, 0xb1, 0xbd, 0xd9, 0x0e, 0x2b, 0x68, 0xb6, 0x4c, 0xc7, 0x29, 0x66, 0xb9,
		0x34, 0xca, 0x62, 0xb9, 0x04, 0x68, 0xb9, 0x38, 0x3a, 0x56, 0xeb, 0xb1, 0x5c, 0xf2, 0x1e, 0x37,
		0x63, 0xd4, 0xa6, 0x61, 0x8a, 0xf3, 0xfe, 0xc1, 0xcc, 0xf8, 0x66, 0x0c, 0x5b, 0x0f, 0x9b, 0x1f,
		0x32, 0x15, 0x60, 0xc8, 0x94, 0x89, 0x81, 0x0d, 0x0a, 0x04, 0x43, 0x96, 0xc4, 0xc6, 0x85, 0x4c,
		0x15, 0xe7, 0x52, 0x97, 0xb4, 0x6e, 0xe3, 0x55, 0xc4, 0x2b, 0x1c, 0xde, 0xa4, 0xb6, 0x69, 0x7e,
		0x76, 0xc6, 0x9c, 0x3a, 0x16, 0x5e, 0x8d, 0xde, 0xe8, 0x3d, 0x4d, 0x43, 0x1a, 0x51, 0x2d, 0x6f,
		0x6b, 0x82, 0xd7, 0xbc, 0x61, 0x4a, 0x1f, 0x19, 0x55, 0xd1, 0xa9, 0x08, 0x37, 0xa8, 0xa3, 0x5d,
		0xab, 0xe7, 0xab, 0xf2, 0x84, 0xa6, 0xdc, 0x9b, 0x8e, 0x5b, 0x53, 0xa8, 0xbc, 0xc1, 0x8e, 0x8c,
		0xf9, 0x73, 0xd4, 0x24, 0x0d, 0x8a, 0xdb, 0x06, 0x0f, 0x87, 0x43, 0x13, 0x01, 0x4d, 0x04, 0x34,
		0x11, 0xac, 0x5b, 0xe6, 0x66, 0x2d, 0x74, 0x43, 0xc7, 0x10, 0x01, 0x3d, 0x02, 0x7a, 0xd8, 0x80,
		0xbe, 0xe8, 0xb1, 0x5e, 0xd6, 0xb1, 0xe6, 0xb6, 0xc7, 0x92, 0xbe, 0x35, 0xb5, 0x3d, 0x0c, 0xfb,
		0x00, 0x4d, 0x1d, 0x7e, 0x1b, 0x42, 0xc0, 0x9a, 0x30, 0xb0, 0x25, 0x14, 0xac, 0x0b, 0x07, 0xeb,
		0x42, 0xc2, 0xa6, 0xb0, 0x30, 0x23, 0x34, 0x0c, 0x09, 0x0f, 0xf3, 0xac, 0xc0, 0xd2, 0x6e, 0x0d,
		0x29, 0x09, 0xf2, 0x83, 0xec, 0xdf, 0x6a, 0xfc, 0x6d, 0x83, 0x63, 0xf6, 0xe6, 0x26, 0xd5, 0x78,
		0x99, 0xf7, 0x16, 0x4c, 0xa8, 0x47, 0x7f, 0x98, 0xfe, 0x9e, 0x06, 0xe2, 0x6f, 0x48, 0x76, 0x87,
		0x89, 0xe8, 0x00, 0x95, 0xf4, 0x2d, 0xca, 0xff, 0x07, 0xa3, 0xa3, 0x0a, 0x40, 0x15, 0x80, 0x2a,
		0x00, 0x55, 0x00, 0x58, 0x15, 0xf0, 0xed, 0x5e, 0x05, 0xfc, 0x5f, 0x2f, 0x91, 0x92, 0x72, 0xfd,
		0xf6, 0xdd, 0xd6, 0x1f, 0x7f, 0xdc, 0xb3, 0x6d, 0x57, 0xd3, 0x4b, 0x16, 0xe5, 0x9e, 0x7a, 0xe2,
		0x6f, 0xf3, 0x91, 0x7d, 0x7a, 0xb3, 0x31, 0xda, 0x64, 0xad, 0xd6, 0x4c, 0x61, 0x4e, 0x7c, 0xf6,
		0x63, 0xde, 0xc0, 0xb5, 0xc6, 0x91, 0x3f, 0x23, 0xcc, 0x0c, 0x70, 0xe5, 0x4f, 0x4a, 0xb1, 0x75,
		0x1b, 0xbc, 0x57, 0x45, 0x09, 0x38, 0x33, 0x5c, 0xfa, 0x3d, 0xf4, 0xb1, 0xc2, 0xa9, 0x3f, 0xa0,
		0x98, 0x0b, 0x31, 0xec, 0xc5, 0xdf, 0xfa, 0x5d, 0xa1, 0xbc, 0x53, 0xa2, 0xa9, 0x39, 0xce, 0x6f,
		0x32, 0xdc, 0x86, 0x51, 0x7e, 0x4d, 0xa4, 0xfc, 0x90, 0xf2, 0x43, 0xca, 0x0f, 0x29, 0x3f, 0xb4,
		0xf7, 0xd0, 0xde, 0x43, 0x7b, 0x0f, 0xed, 0x3d, 0xa4, 0xfc, 0x90, 0xf2, 0x43, 0x15, 0x80, 0x2a,
		0x00, 0x55, 0x00, 0xaa, 0x00, 0xa4, 0xfc, 0x2c, 0x5b, 0x33, 0x10, 0xf9, 0x9c, 0x1c, 0x49, 0x84,
		0x06, 0xe9, 0x9c, 0xd7, 0x5e, 0x55, 0xed, 0xb9, 0x65, 0x71, 0x51, 0x5f, 0xed, 0xcf, 0xf9, 0xdc,
		0x3f, 0xe6, 0x5f, 0x3a, 0xa7, 0xc1, 0x26, 0x07, 0xcf, 0x16, 0xa3, 0xf0, 0x8c, 0x50, 0x77, 0xc6,
		0x82, 0x65, 0x9b, 0x18, 0x2c, 0x6b, 0x0f, 0x6a, 0x61, 0xb0, 0xac, 0x31, 0x8a, 0x0d, 0xf3, 0xe9,
		0xd6, 0x63, 0x8b, 0x21, 0x17, 0xbf, 0xd1, 0x36, 0x16, 0xe6, 0xd3, 0xbd, 0xbc, 0xdb, 0x30, 0x9f,
		0xae, 0x94, 0x48, 0xb5, 0x80, 0xc9, 0x80, 0xd5, 0x5c, 0x56, 0x78, 0xc1, 0xd5, 0x5c, 0xc8, 0x38,
		0x2b, 0xe8, 0xb7, 0x56, 0x38, 0xe6, 0x8d, 0xc1, 0x85, 0xca, 0xbb, 0x40, 0x06, 0x17, 0x26, 0xc3,
		0x6a, 0xac, 0xba, 0x0a, 0xab, 0xbd, 0xfa, 0x97, 0x5f, 0xe4, 0x0a, 0x2f, 0xb1, 0xca, 0xe2, 0x51,
		0x77, 0xe5, 0x57, 0x77, 0xef, 0xf3, 0x1c, 0x5f, 0xb5, 0xe2, 0x12, 0x65, 0x33, 0x88, 0x32, 0xe3,
		0xa3, 0x3c, 0x38, 0x28, 0x77, 0xa9, 0xc3, 0xbc, 0xb8, 0xa6, 0x30, 0x7e, 0x29, 0x8c, 0x53, 0x8a,
		0x94, 0x2a, 0x34, 0x7b, 0x64, 0xb3, 0x1a, 0x1c, 0x55, 0xe2, 0xfb, 0x92, 0x2a, 0x45, 0x55, 0xfe,
		0xea, 0x51, 0xf7, 0x43, 0xbc, 0x92, 0xe2, 0x51, 0x31, 0x16, 0x8f, 0x32, 0x54, 0x9f, 0x73, 0x43,
		0x8b, 0x47, 0x4d, 0x77, 0x74, 0x71, 0xb2, 0x6b, 0x36, 0x10, 0xe6, 0x86, 0x63, 0xe1, 0x5b, 0xa7,
		0x07, 0x0b, 0x28, 0xdd, 0x85, 0xb9, 0xe1, 0xeb, 0x24, 0xa7, 0xb0, 0x3f, 0x9e, 0x15, 0x72, 0x2a,
		0xc6, 0x40, 0xd1, 0xb9, 0x3d, 0x64, 0x21, 0x42, 0x34, 0xc6, 0xb8, 0xa0, 0xcd, 0x39, 0xfe, 0xb6,
		0xc4, 0x80, 0x75, 0x71, 0x60, 0x5d, 0x2c, 0xd8, 0x14, 0x0f, 0x66, 0xc4, 0x84, 0x21, 0x71, 0x31,
		0x7f, 0x50, 0x7b, 0x71, 0x41, 0x2c, 0x1e, 0x75, 0x6b, 0xc5, 0xb0, 0xf5, 0x6f, 0x15, 0xfd, 0x8e,
		0xd9, 0xe0, 0x20, 0x4d, 0x25, 0x37, 0xd6, 0x74, 0x73, 0x3e, 0xf0, 0xdb, 0xb7, 0xdf, 0xea, 0xb5,
		0x5d, 0x52, 0x0b, 0xf6, 0x6b, 0x47, 0x57, 0xff, 0x34, 0xde, 0xb7, 0xef, 0xf6, 0xde, 0xfd, 0xb3,
		0x7d, 0xf7, 0xf8, 0x8f, 0xbf, 0x9e, 0xfa, 0x5a, 0xe3, 0xfd, 0xf6, 0xdd, 0xde, 0x33, 0xff, 0xd3,
		0xbd, 0xdb, 0x5b, 0x71, 0x8c, 0xce, 0xdd, 0xdb, 0xa5, 0xaf, 0x8e, 0xff, 0xde, 0x7c, 0xee, 0x82,
		0xf6, 0x33, 0x17, 0xb4, 0x9e, 0xbb, 0xa0, 0xf5, 0xcc, 0x05, 0xcf, 0xde, 0x52, 0xf3, 0x99, 0x0b,
		0x3a, 0x77, 0xbf, 0x96, 0xbe, 0xff, 0xf6, 0xe9, 0xaf, 0x76, 0xef, 0xde, 0xfd, 0x7a, 0xee, 0xff,
		0xb6, 0xef, 0x7e, 0xed, 0xbd, 0x7b, 0x67, 0xee, 0xc0, 0x5e, 0x99, 0xdc, 0x68, 0x67, 0x17, 0xc7,
		0x5f, 0xad, 0xed, 0xb6, 0xff, 0xe1, 0x76, 0x5b, 0xd7, 0x76, 0xfb, 0x97, 0xc1, 0xfd, 0x56, 0xa2,
		0xc0, 0xf3, 0x89, 0xfa, 0xaf, 0x85, 0x94, 0x0f, 0x52, 0x47, 0x83, 0x61, 0x5c, 0xf9, 0x70, 0x78,
		0x84, 0x98, 0x08, 0x31, 0x11, 0x62, 0x6e, 0x1c, 0xc4, 0x3c, 0x25, 0xdc, 0x27, 0x5a, 0xc8, 0xdb,
		0xe2, 0xf4, 0x8c, 0x03, 0xd8, 0x9a, 0x30, 0xae, 0x77, 0x2c, 0xe0, 0x55, 0x83, 0xad, 0xac, 0x0d,
		0x77, 0x88, 0x9f, 0xfd, 0x98, 0x3d, 0xa1, 0x15, 0x5b, 0x1d, 0xe3, 0x2d, 0xc9, 0xe9, 0xa5, 0xe1,
		0x2d, 0x75, 0x90, 0x9f, 0x8f, 0x6f, 0xb1, 0x17, 0xb9, 0xe1, 0x13, 0xfc, 0xe8, 0x34, 0xdf, 0x80,
		0x5f, 0xd2, 0x46, 0x73, 0x07, 0xf0, 0xa2, 0xbe, 0xd9, 0xcc, 0xd1, 0xae, 0x30, 0xc3, 0x65, 0x93,
		0x33, 0x5c, 0xba, 0x5b, 0xf3, 0x10, 0x80, 0xd9, 0x27, 0xc0, 0xa5, 0x4a, 0x0c, 0x90, 0xd4, 0xe6,
		0xc8, 0xe9, 0x57, 0x13, 0x18, 0x8d, 0xbe, 0xa7, 0x4d, 0x45, 0xfe, 0x65, 0x0b, 0x8c, 0x36, 0x97,
		0x54, 0x6a, 0x32, 0x99, 0x74, 0x9e, 0x44, 0xfa, 0xc7, 0x1f, 0x93, 0x18, 0xdf, 0xad, 0xa2, 0x6b,
		0x87, 0x85, 0x9e, 0x1e, 0x2f, 0x53, 0xd9, 0x0b, 0x3d, 0xa1, 0x0c, 0x45, 0x19, 0xfa, 0xd4, 0x03,
		0xa1, 0xff, 0x7e, 0x9d, 0x90, 0xc9, 0xc6, 0xb1, 0xb7, 0x76, 0xfc, 0x6d, 0x89, 0x01, 0xeb, 0xe2,
		0xc0, 0xba, 0x58, 0xb0, 0x29, 0x1e, 0xcc, 0x5a, 0xcc, 0xe8, 0xbf, 0x47, 0xff, 0x3d, 0x3a, 0x54,
		0xd1, 0x7f, 0xff, 0x60, 0x74, 0xf4, 0xdf, 0xa3, 0xff, 0xde, 0x20, 0x11, 0x6a, 0xc0, 0xd0, 0x10,
		0x92, 0x0d, 0x0c, 0xfa, 0x70, 0xee, 0xa1, 0xd0, 0x64, 0x5c, 0x04, 0x95, 0x08, 0x2a, 0x11, 0x54,
		0xbe, 0x2a, 0x50, 0x39, 0x83, 0x94, 0x35, 0xa3, 0x22, 0xe0, 0x01, 0xb2, 0x6c, 0x1b, 0x1c, 0xf3,
		0x90, 0x27, 0xd1, 0xf8, 0x55, 0xdc, 0x61, 0x50, 0xd6, 0xaa, 0x6b, 0x8c, 0x41, 0x59, 0x28, 0xe2,
		0x51, 0xc4, 0x6f, 0xb8, 0x88, 0xc7, 0xa0, 0x2c, 0x0c, 0xca, 0xb2, 0xf0, 0x83, 0x41, 0x59, 0xae,
		0x4e, 0xf0, 0xa3, 0xd3, 0x8c, 0x41, 0x59, 0xeb, 0x5d, 0x54, 0x0c, 0xca, 0xb2, 0x0e, 0x5b, 0x95,
		0x26, 0x3a, 0x51, 0x16, 0xca, 0xd7, 0x4f, 0xc6, 0x45, 0xa0, 0x8a, 0x40, 0x15, 0x81, 0xea, 0x2b,
		0xe2, 0x22, 0x28, 0x4f, 0x22, 0x2a, 0x27, 0xb1, 0x9a, 0xc8, 0x42, 0x38, 0x1c, 0xe1, 0x55, 0xc5,
		0xd8, 0xae, 0xb7, 0x7c, 0x7c, 0x81, 0x20, 0xb1, 0x91, 0x94, 0x06, 0x83, 0x6c, 0xd3, 0xd1, 0xb0,
		0xc4, 0x8b, 0x33, 0x15, 0x8a, 0x21, 0x62, 0x18, 0x22, 0xf6, 0xdb, 0xa3, 0x5d, 0x1b, 0x48, 0x91,
		0x58, 0x08, 0x15, 0x5b, 0x18, 0xdb, 0x2c, 0xa2, 0x6e, 0x20, 0xa2, 0x46, 0x44, 0x8d, 0x88, 0xba,
		0xf8, 0x83, 0x9a, 0x12, 0x23, 0xf3, 0x01, 0x0d, 0x15, 0x84, 0x7b, 0xf6, 0x10, 0x18, 0x29, 0x10,
		0x67, 0x59, 0xac, 0x58, 0x13, 0x2f, 0x36, 0xc5, 0x8c, 0x75, 0x71, 0x63, 0x5b, 0xec, 0x38, 0x13,
		0x3f, 0xce, 0xc4, 0x90, 0x0b, 0x71, 0x64, 0x56, 0x2c, 0x19, 0x16, 0x4f, 0xd6, 0xc4, 0xd4, 0x7c,
		0x60, 0xe2, 0x79, 0x34, 0xd6, 0xb5, 0x48, 0xf8, 0x16, 0x37, 0xe4, 0xbc, 0xb8, 0xec, 0xc2, 0x64,
		0x96, 0x76, 0x8a, 0xe1, 0x36, 0x2f, 0x2f, 0x09, 0x4c, 0x5b, 0x7e, 0x00, 0x5b, 0x82, 0xd3, 0x85,
		0x00, 0x75, 0x26, 0x48, 0x5d, 0x09, 0x54, 0xe7, 0x82, 0xd5, 0xb9, 0x80, 0x75, 0x29, 0x68, 0xed,
		0x08, 0x5c, 0x4b, 0x82, 0x77, 0xfe, 0x62, 0x8c, 0x33, 0xaf, 0xcf, 0x9e, 0x16, 0x73, 0x6d, 0x70,
		0x5e, 0x44, 0x7b, 0x8d, 0x37, 0x30, 0x16, 0xd6, 0x86, 0x97, 0x98, 0xf8, 0x23, 0x2a, 0x35, 0x53,
		0x74, 0xbc, 0xdd, 0x27, 0xdc, 0xe6, 0x88, 0x84, 0x0e, 0x74, 0xe0, 0xd3, 0xf3, 0xda, 0x57, 0x87,
		0x8d, 0x7a, 0x1d, 0x95, 0x21, 0x2a, 0x43, 0x54, 0x86, 0xa8, 0x0c, 0xe1, 0x28, 0xc3, 0x84, 0x71,
		0xdd, 0xe8, 0x3a, 0xd0, 0x85, 0x5d, 0x8b, 0x53, 0xd8, 0x09, 0x86, 0x7b, 0xfc, 0x63, 0xf7, 0xb8,
		0x57, 0x6c, 0x07, 0xcb, 0x39, 0x56, 0x2a, 0x4b, 0xd3, 0xcd, 0x23, 0xaf, 0x1c, 0xcd, 0xe7, 0x20,
		0x0e, 0xcb, 0x91, 0x38, 0x78, 0xb8, 0x45, 0xc8, 0x4d, 0xe9, 0xb7, 0x48, 0xbb, 0xbe, 0xdb, 0x29,
		0xf1, 0x2e, 0x79, 0x03, 0x73, 0xf4, 0xab, 0x57, 0x6c, 0xcc, 0xc4, 0x92, 0xd2, 0x28, 0xd6, 0xf6,
		0xad, 0x97, 0xd9, 0x44, 0xf6, 0xcd, 0x95, 0x31, 0xbe, 0x43, 0x7b, 0x05, 0xed, 0x15, 0xb4, 0x57,
		0xd0, 0x5e, 0x81, 0x63, 0xaf, 0x20, 0x79, 0xe7, 0x52, 0xdf, 0xd5, 0x7c, 0x1a, 0x92, 0x5b, 0x67,
		0x5a, 0x6f, 0x3a, 0x9d, 0x7d, 0xdd, 0x87, 0x44, 0x1d, 0x2a, 0x3e, 0x54, 0x7c, 0xa8, 0xf8, 0x00,
		0x29, 0x3e, 0x24, 0xea, 0x56, 0xfe, 0x41, 0xa2, 0xce, 0x08, 0x0b, 0x53, 0x47, 0xa2, 0xae, 0xd0,
		0x16, 0x79, 0x05, 0x44, 0x5d, 0xab, 0x5b, 0xaf, 0x23, 0x51, 0xb7, 0x69, 0xa3, 0xbf, 0x6e, 0xa2,
		0x8e, 0x09, 0xc9, 0xb4, 0x13, 0x9b, 0x65, 0x3a, 0x13, 0x46, 0x16, 0xa0, 0xc1, 0x82, 0x06, 0x0b,
		0x1a, 0x2c, 0x68, 0xb0, 0x54, 0x6c, 0x56, 0xd1, 0x79, 0x4e, 0x74, 0x75, 0xd0, 0x5e, 0x41, 0x7b,
		0x05, 0x03, 0x0b, 0xd0, 0x5e, 0x59, 0x61, 0x8b, 0x34, 0x3b, 0x6d, 0x34, 0x57, 0xd0, 0x5c, 0xd9,
		0x1c, 0x73, 0x65, 0xc4, 0xa4, 0x4e, 0x48, 0x38, 0xaf, 0x7c, 0x6f, 0xdd, 0x6a, 0x79, 0x3c, 0x21,
		0x9a, 0x15, 0x68, 0x56, 0xa0, 0x59, 0x81, 0x66, 0x05, 0x18, 0xb3, 0xe2, 0xbe, 0xa6, 0xb3, 0x8b,
		0x18, 0x80, 0x5d, 0x8b, 0x73, 0x4c, 0xdf, 0x19, 0x78, 0xdb, 0x62, 0xa1, 0x85, 0x4b, 0xdb, 0xc1,
		0xda, 0x2c, 0xad, 0xd1, 0x8e, 0x83, 0xb9, 0x6c, 0x35, 0xe1, 0x78, 0x76, 0xc2, 0x49, 0x6f, 0x8e,
		0xab, 0x5f, 0xdf, 0x1a, 0xb5, 0xdd, 0xab, 0xc9, 0xc7, 0x46, 0xfa, 0xcf, 0xe4, 0x73, 0xf3, 0x5b,
		0xbd, 0xd6, 0x9e, 0x7d, 0xee, 0x7c, 0xab, 0xd7, 0x3a, 0x57, 0xef, 0xbe, 0x7f, 0xff, 0xe3, 0xdd,
		0x3f, 0xad, 0xbb, 0xec, 0x17, 0x56, 0xad, 0x3f, 0xd2, 0x95, 0x8b, 0x25, 0xb2, 0xd9, 0x2c, 0xe5,
		0xd9, 0x59, 0xff, 0xe7, 0x72, 0xa1, 0xfe, 0xe5, 0x60, 0xa5, 0xde, 0x00, 0xb6, 0x63, 0xdd, 0x0a,
		0xbb, 0x2e, 0x0a, 0x3b, 0xa3, 0xc2, 0x0e, 0x1b, 0x11, 0x41, 0xee, 0x7b, 0xf5, 0x6a, 0x45, 0x3f,
		0x6e, 0x5b, 0xd0, 0xfd, 0xb3, 0xd6, 0xa4, 0x08, 0xa1, 0xb1, 0x69, 0x96, 0xec, 0xc6, 0x13, 0xa6,
		0xf4, 0xbe, 0xd6, 0xd2, 0xae, 0xed, 0x78, 0xca, 0xf8, 0x61, 0x98, 0xd6, 0x03, 0x50, 0x76, 0x49,
		0xe7, 0xea, 0x29, 0xb9, 0x59, 0x98, 0xa9, 0xb1, 0xd3, 0x6e, 0x77, 0xb7, 0xdb, 0xed, 0xfa, 0x76,
		0x6b, 0xbb, 0xbe, 0xdb, 0xe9, 0x34, 0xba, 0x0d, 0x9b, 0xde, 0xaa, 0x33, 0xe9, 0x53, 0x49, 0xfd,
		0x0f, 0xb7, 0xd5, 0xbd, 0x0a, 0x4f, 0xc2, 0x10, 0x79, 0xd5, 0x5a, 0xc8, 0xf8, 0xcf, 0x5a, 0x28,
		0x3c, 0x17, 0x85, 0x27, 0x9e, 0x98, 0x13, 0xd9, 0x55, 0x64, 0x57, 0x91, 0x5d, 0x45, 0x76, 0x15,
		0xd9, 0x55, 0x64, 0x57, 0x91, 0x5d, 0x45, 0x76, 0x15, 0x4d, 0x6c, 0x64, 0x57, 0x91, 0x5d, 0x45,
		0x76, 0x15, 0xd9, 0x55, 0x64, 0x57, 0x51, 0xf4, 0x23, 0xbb, 0x8a, 0xec, 0x2a, 0xb2, 0xab, 0xe0,
		0x38, 0xb5, 0xb4, 0x0d, 0x95, 0xac, 0x31, 0xdf, 0x1d, 0xa5, 0x76, 0x3f, 0x25, 0x32, 0x6a, 0xc8,
		0xa8, 0x21, 0xa3, 0x86, 0x8c, 0x1a, 0x18, 0x46, 0x0d, 0xd3, 0xa0, 0x36, 0xc8, 0xbe, 0xc4, 0x34,
		0x28, 0x73, 0xf3, 0x61, 0x1a, 0x14, 0xd8, 0x2d, 0xd2, 0xec, 0x60, 0x79, 0x55, 0x34, 0x2d, 0x36,
		0x62, 0x44, 0xd3, 0x7d, 0x9c, 0xf6, 0x93, 0xc1, 0x18, 0xf0, 0x50, 0xdf, 0x8a, 0xba, 0xb2, 0x6c,
		0xee, 0x6c, 0x8d, 0x31, 0x5a, 0xb0, 0xb7, 0xd0, 0xfc, 0xf7, 0xd1, 0x1f, 0xc6, 0xbf, 0x8f, 0x42,
		0xc2, 0xf7, 0x16, 0x5b, 0x01, 0xa7, 0xc0, 0x6e, 0x2f, 0x6d, 0x08, 0x3c, 0xf9, 0x78, 0xdf, 0x16,
		0xf8, 0xc1, 0xef, 0x5b, 0x23, 0x29, 0xe3, 0xad, 0xfb, 0x8e, 0x99, 0x5b, 0x56, 0x3a, 0xdd, 0xcd,
		0x1f, 0xea, 0x80, 0x2a, 0x4f, 0xb2, 0x78, 0xda, 0x38, 0xb9, 0xba, 0xef, 0xfb, 0x6c, 0xfc, 0x99,
		0x84, 0x95, 0x2f, 0xe7, 0xe7, 0xbd, 0x8a, 0x4f, 0x34, 0xa9, 0x04, 0x42, 0x56, 0x8e, 0x7b, 0xa3,
		0x6e, 0xe5, 0xfe, 0x91, 0x2d, 0x5b, 0x78, 0x0d, 0xb4, 0xf0, 0xd0, 0xc2, 0x43, 0x0b, 0xaf, 0xfc,
		0x16, 0x9e, 0xad, 0x86, 0x7e, 0x4b, 0x74, 0x98, 0x83, 0x10, 0xb3, 0x67, 0x79, 0x31, 0xeb, 0xa1,
		0x66, 0xcf, 0x49, 0xf3, 0x23, 0x21, 0x27, 0x62, 0x5c, 0xf0, 0xc7, 0x02, 0xfc, 0x7d, 0x45, 0x51,
		0xad, 0x2a, 0x7a, 0x48, 0x2b, 0xd3, 0xdb, 0xac, 0x8c, 0x6f, 0xb3, 0x92, 0xde, 0xe6, 0x77, 0xee,
		0xc6, 0xab, 0xe7, 0x08, 0x59, 0x5b, 0x17, 0xfb, 0x2e, 0xc5, 0xbf, 0x73, 0x35, 0xe0, 0x5a, 0x1d,
		0xac, 0x4d, 0x2d, 0xac, 0x4d, 0x3d, 0xac, 0x43, 0x4d, 0x38, 0xb2, 0xc3, 0x2c, 0x9f, 0x37, 0xeb,
		0x04, 0xe1, 0xd2, 0x69, 0x73, 0x12, 0x7a, 0xb7, 0x04, 0x87, 0x77, 0x1d, 0xcc, 0xe5, 0x24, 0x14,
		0xcf, 0xae, 0x89, 0xf6, 0xc2, 0xca, 0x39, 0x0d, 0xcd, 0x5b, 0x5a, 0xc3, 0x1d, 0x87, 0x73, 0xba,
		0x8e, 0x03, 0x98, 0x4f, 0x5c, 0xae, 0x90, 0xbd, 0x39, 0xe9, 0xe3, 0x72, 0xe9, 0xd6, 0x11, 0xc7,
		0x31, 0x9f, 0xbd, 0x6c, 0xa1, 0x7c, 0x76, 0x69, 0x3b, 0xc7, 0xea, 0x6e, 0xbd, 0xc2, 0xb3, 0x8b,
		0xc2, 0xd3, 0x89, 0xf0, 0xc4, 0x58, 0xaa, 0x32, 0x86, 0x00, 0xbe, 0x5a, 0x55, 0x82, 0xdb, 0xb9,
		0x94, 0xa1, 0x81, 0x8e, 0x15, 0x2b, 0x86, 0x3a, 0xba, 0xa5, 0x7b, 0x37, 0xdc, 0x1f, 0x79, 0x65,
		0xda, 0x1f, 0xc9, 0xb9, 0xd0, 0x64, 0x4a, 0x9b, 0x9a, 0x87, 0x57, 0x55, 0xe5, 0x0d, 0x69, 0x44,
		0x62, 0xa2, 0x87, 0x13, 0x07, 0x62, 0x4c, 0xf9, 0xc4, 0xad, 0x57, 0x5b, 0xf0, 0x22, 0x3e, 0xf5,
		0x71, 0x6b, 0xd1, 0x85, 0x98, 0x3a, 0x0f, 0xef, 0xdd, 0x86, 0x2f, 0x38, 0x0c, 0xdf, 0x6c, 0xe6,
		0xf2, 0x19, 0xc4, 0xc8, 0xd5, 0xf9, 0x6b, 0xaa, 0x69, 0x49, 0xbc, 0x9f, 0x8c, 0x0f, 0x8c, 0x2f,
		0xdf, 0x3d, 0x02, 0x5e, 0x9e, 0xcb, 0xf0, 0x26, 0xb4, 0xe3, 0xfb, 0xb4, 0x46, 0x7e, 0xdb, 0x24,
		0xbb, 0xad, 0x93, 0xdb, 0xb6, 0xc9, 0x6c, 0x67, 0xe4, 0xb5, 0x33, 0xb2, 0xda, 0x05, 0x39, 0xbd,
		0xd9, 0x41, 0x2b, 0xb6, 0x7c, 0x95, 0x55, 0x6f, 0x76, 0x42, 0x2d, 0x07, 0xae, 0xd8, 0x8d, 0x24,
		0xc1, 0xd0, 0x8d, 0xf5, 0x8b, 0x35, 0x57, 0xe2, 0xcd, 0xb9, 0x98, 0x73, 0x2e, 0xee, 0x5c, 0x8a,
		0x3d, 0xcb, 0x58, 0x1e, 0x6a, 0xe8, 0xc6, 0xac, 0x75, 0x53, 0xcd, 0xa7, 0x9e, 0xa4, 0xd3, 0x35,
		0x70, 0x14, 0xba, 0xf1, 0xc4, 0xdc, 0xd6, 0x43, 0x37, 0xac, 0xf7, 0xbd, 0x7d, 0x2c, 0xaa, 0x31,
		0xec, 0x62, 0x83, 0x45, 0xb8, 0x6b, 0x51, 0xbe, 0x36, 0x91, 0xbe, 0x36, 0xd1, 0xbe, 0x0e, 0x11,
		0xef, 0x86, 0xd0, 0x2a, 0x5f, 0xd8, 0x85, 0xed, 0xfc, 0xac, 0xc7, 0xa2, 0xd1, 0x41, 0xe6, 0x85,
		0xa3, 0x7c, 0xad, 0xd9, 0x8f, 0x43, 0xa7, 0xa1, 0xcb, 0xfc, 0x2d, 0xc7, 0x3a, 0x6d, 0x69, 0x5a,
		0xc7, 0x6d, 0x78, 0xe7, 0xf3, 0xae, 0x21, 0x65, 0xc7, 0x91, 0x74, 0x79, 0xb8, 0x95, 0x1c, 0xe6,
		0x79, 0x6d, 0xca, 0x56, 0x72, 0xd6, 0xfe, 0x6a, 0x23, 0x36, 0x13, 0xfa, 0x8f, 0xd6, 0x7a, 0xff,
		0x16, 0x0f, 0x73, 0x35, 0x25, 0xca, 0xef, 0x3d, 0x1c, 0xee, 0xac, 0xb7, 0xc7, 0x13, 0xa3, 0x39,
		0x85, 0xe6, 0x14, 0x9a, 0x53, 0x68, 0x4e, 0xa1, 0x39, 0x35, 0x3d, 0x6d, 0x21, 0x25, 0x81, 0xa4,
		0x81, 0xcb, 0x10, 0xf6, 0x6d, 0x37, 0x45, 0xfb, 0x86, 0x2b, 0x67, 0xe8, 0xb2, 0x60, 0x8f, 0x8f,
		0x5f, 0x07, 0xe8, 0xad, 0xe3, 0xa4, 0x32, 0xff, 0xa2, 0x61, 0xe7, 0xa6, 0x42, 0xff, 0x22, 0xfe,
		0x5f, 0x5b, 0xa5, 0xfe, 0xf9, 0x4d, 0x38, 0xa9, 0xd8, 0xef, 0x00, 0xea, 0x81, 0x72, 0x2f, 0x58,
		0x0e, 0xc9, 0x99, 0xcf, 0xe3, 0x34, 0x34, 0x67, 0x39, 0x88, 0xc4, 0x4a, 0xb4, 0x8e, 0xbd, 0x15,
		0xb7, 0x51, 0xb1, 0x4e, 0x69, 0xa2, 0xa9, 0x7d, 0xef, 0xf7, 0x64, 0x1a, 0xe0, 0xce, 0xef, 0x26,
		0x3a, 0xbf, 0x37, 0x06, 0xe2, 0xa3, 0xf3, 0xfb, 0xf5, 0x6a, 0x27, 0x74, 0x7e, 0x9b, 0x7d, 0x9d,
		0xe8, 0xfc, 0x46, 0xb6, 0x06, 0xd9, 0x1a, 0x64, 0x6b, 0x90, 0xad, 0x79, 0xe2, 0xb4, 0xa1, 0xf3,
		0xbb, 0xe8, 0x0f, 0x3a, 0xbf, 0xad, 0x4c, 0x8b, 0xce, 0x6f, 0xdb, 0xe4, 0x17, 0x3a, 0xbf, 0x4b,
		0xbd, 0x99, 0xd0, 0xf9, 0xbd, 0xd6, 0xfb, 0x47, 0xe7, 0x37, 0x9a, 0x53, 0x68, 0x4e, 0xa1, 0x39,
		0x85, 0xe6, 0xd4, 0x6b, 0x32, 0xa7, 0xd0, 0xf9, 0x8d, 0xce, 0xef, 0x7c, 0x86, 0x1d, 0x3a, 0xbf,
		0xd1, 0xf9, 0xed, 0x62, 0x87, 0xbf, 0x1a, 0xe7, 0xf7, 0xc4, 0x27, 0x8b, 0x2d, 0x15, 0x36, 0x7f,
		0xcb, 0xac, 0x7b, 0xab, 0x54, 0xad, 0x04, 0x1e, 0xc8, 0xc4, 0xd3, 0x7c, 0x0a, 0x0b, 0x8e, 0x67,
		0x73, 0xfe, 0x38, 0x4f, 0x6f, 0xf8, 0x4b, 0x48, 0xf8, 0x8f, 0xe3, 0x78, 0xd4, 0xfd, 0xb1, 0x3f,
		0xb9, 0xcb, 0x1f, 0x5f, 0xa4, 0x8c, 0x3f, 0x8d, 0xef, 0xef, 0xc7, 0xfc, 0xbb, 0x97, 0xb3, 0xdb,
		0x7b, 0x05, 0xd5, 0x56, 0xec, 0xc4, 0x69, 0x58, 0x8d, 0xcf, 0xb0, 0x5e, 0x53, 0xa5, 0x89, 0x35,
		0x55, 0x9c, 0x59, 0x97, 0x58, 0x53, 0xa5, 0x7c, 0x5a, 0xcb, 0x5a, 0x4d, 0x15, 0xe2, 0x79, 0x34,
		0xd6, 0xb5, 0x48, 0xf8, 0x0e, 0x42, 0xcb, 0x16, 0x27, 0xb3, 0xd6, 0xa7, 0x67, 0x1e, 0x21, 0x11,
		0x90, 0x50, 0x51, 0x6c, 0xb1, 0xba, 0x36, 0xfa, 0x0e, 0x03, 0xd9, 0xc0, 0xd1, 0x73, 0x18, 0xc8,
		0xb6, 0x36, 0xfa, 0x6d, 0x7e, 0x5a, 0xfa, 0x42, 0x84, 0x94, 0x70, 0x07, 0x4d, 0x56, 0x1b, 0x8d,
		0x57, 0x1c, 0x4d, 0x4d, 0xfc, 0x11, 0x95, 0x9a, 0xa9, 0x94, 0x37, 0x9a, 0xd8, 0x66, 0x23, 0x8b,
		0x4d, 0x8f, 0xee, 0x75, 0xe0, 0xd3, 0xf3, 0xda, 0x57, 0x87, 0x8d, 0x7a, 0x1d, 0x95, 0x21, 0x2a,
		0x43, 0x54, 0x86, 0xa8, 0x0c, 0xe1, 0x28, 0xc3, 0x84, 0x71, 0xdd, 0xe8, 0x3a, 0xd0, 0x85, 0x5d,
		0x6c, 0x38, 0xfe, 0xf2, 0x83, 0x60, 0xc3, 0x71, 0x73, 0xf3, 0x61, 0xc3, 0x71, 0xb0, 0x5b, 0xa4,
		0x5d, 0xdf, 0xc5, 0x8e, 0xe3, 0x1b, 0x37, 0xfa, 0xd5, 0x2b, 0x36, 0x66, 0xbc, 0x44, 0xca, 0xb1,
		0x39, 0x31, 0xcb, 0x48, 0x72, 0x50, 0x23, 0xf9, 0xf1, 0x8c, 0x68, 0x5a, 0xa0, 0x69, 0x81, 0xa6,
		0x05, 0x9a, 0x16, 0xa0, 0x4c, 0x8b, 0x1d, 0x07, 0x96, 0x45, 0x07, 0x2d, 0x0b, 0xb4, 0x2c, 0x1c,
		0x66, 0xff, 0xa0, 0x65, 0x01, 0x77, 0x8b, 0x34, 0x3b, 0x68, 0x58, 0xa0, 0x61, 0xb1, 0x41, 0x86,
		0x45, 0x2c, 0x29, 0x8d, 0x62, 0x6d, 0xdf, 0x9e, 0x98, 0x4d, 0x64, 0xdf, 0x0f, 0x32, 0x46, 0x77,
		0x68, 0xad, 0xa0, 0xb5, 0x82, 0xd6, 0x0a, 0x5a, 0x2b, 0x70, 0xac, 0x15, 0x8c, 0x0a, 0x70, 0xa9,
		0xef, 0x6a, 0x3e, 0x0d, 0xc9, 0xad, 0x33, 0xad, 0x37, 0x9d, 0xce, 0xbe, 0xee, 0xc3, 0x08, 0x00,
		0x54, 0x7c, 0xa8, 0xf8, 0x50, 0xf1, 0x01, 0x52, 0x7c, 0x18, 0x01, 0xb0, 0xf2, 0x0f, 0xf2, 0x74,
		0x46, 0x48, 0x18, 0xe4, 0xe9, 0x8a, 0x6d, 0x91, 0x57, 0xc0, 0xd3, 0xb5, 0xba, 0xf5, 0x3a, 0x12,
		0x75, 0x9b, 0x36, 0xfa, 0xeb, 0x26, 0xea, 0x5c, 0x79, 0xfe, 0x6d, 0x7b, 0xfc, 0x31, 0x64, 0x19,
		0x0d, 0x16, 0x34, 0x58, 0xd0, 0x60, 0x81, 0x6c, 0xb0, 0x60, 0x5c, 0x01, 0xda, 0x2b, 0xce, 0xc0,
		0x28, 0x46, 0x2c, 0xa3, 0xbd, 0xf2, 0xc2, 0x16, 0x71, 0x56, 0x2d, 0x14, 0xcd, 0x15, 0x34, 0x57,
		0x56, 0xd9, 0x26, 0x23, 0x26, 0x75, 0x42, 0xc2, 0xda, 0xb4, 0xb0, 0x8d, 0x7d, 0xab, 0xe5, 0xf1,
		0x84, 0x68, 0x56, 0xa0, 0x59, 0x81, 0x66, 0x05, 0x9a, 0x15, 0x60, 0xcc, 0x0a, 0x16, 0x5b, 0x96,
		0x5d, 0x8b, 0xf2, 0xab, 0xb1, 0x6b, 0x71, 0x8e, 0xe9, 0x3b, 0x03, 0x6f, 0x5b, 0xdc, 0xaf, 0xcc,
		0xa8, 0xed, 0x60, 0x6d, 0x96, 0xd6, 0x68, 0xc7, 0x4d, 0xb1, 0x54, 0x4d, 0x25, 0x77, 0xd6, 0x80,
		0xa2, 0xfa, 0xf6, 0xed, 0xb7, 0x7a, 0x6d, 0xf7, 0xea, 0xd7, 0xb7, 0x46, 0x6d, 0xf7, 0x6a, 0xf2,
		0xb1, 0x91, 0xfe, 0x33, 0xf9, 0xdc, 0xfc, 0x56, 0xaf, 0xb5, 0x67, 0x9f, 0x3b, 0xdf, 0xea, 0xb5,
		0xce, 0xd5, 0xbb, 0xef, 0xdf, 0xff, 0x78, 0xf7, 0x4f, 0xeb, 0x2e, 0xfb, 0x85, 0xf6, 0x4b, 0x0e,
		0x5f, 0xb9, 0x58, 0xa2, 0xb3, 0x8b, 0xe3, 0xaf, 0xce, 0xd7, 0xe9, 0x7f, 0x2e, 0x17, 0xea, 0x5f,
		0x55, 0xe8, 0xa5, 0xf9, 0xdf, 0x97, 0x48, 0xd8, 0x75, 0x51, 0xd8, 0x19, 0x15, 0x76, 0xa4, 0x16,
		0xec, 0xd7, 0x8e, 0xae, 0xfe, 0x69, 0xbc, 0x6f, 0xdf, 0xed, 0xbd, 0xfb, 0x67, 0xfb, 0xee, 0xf1,
		0x1f, 0x7f, 0x3d, 0xf5, 0xb5, 0xc6, 0xfb, 0xed, 0xbb, 0xbd, 0x67, 0xfe, 0xa7, 0x7b, 0xb7, 0xb7,
		0xe2, 0x18, 0x9d, 0xbb, 0xb7, 0x4b, 0x5f, 0x1d, 0xff, 0xbd, 0xf9, 0xdc, 0x05, 0xed, 0x67, 0x2e,
		0x68, 0x3d, 0x77, 0x41, 0xeb, 0x99, 0x0b, 0x9e, 0xbd, 0xa5, 0xe6, 0x33, 0x17, 0x74, 0xee, 0x7e,
		0x2d, 0x7d, 0xff, 0xed, 0xd3, 0x5f, 0xed, 0xde, 0xbd, 0xfb, 0xf5, 0xdc, 0xff, 0x6d, 0xdf, 0xfd,
		0xda, 0x7b, 0x87, 0xa2, 0xbf, 0xb8, 0xe8, 0xc7, 0x6d, 0xeb, 0x7e, 0xdb, 0xc2, 0x57, 0x84, 0xd0,
		0xd8, 0x34, 0x4b, 0x76, 0xa3, 0x93, 0x92, 0xfc, 0xee, 0x4a, 0xf1, 0xaf, 0xb5, 0x04, 0xbf, 0x9b,
		0xd2, 0xfb, 0xb0, 0x78, 0xd5, 0x90, 0xf1, 0x9f, 0xb5, 0x50, 0x78, 0x2e, 0x2a, 0xda, 0x3d, 0x31,
		0x27, 0xb2, 0xab, 0xc8, 0xae, 0x22, 0xbb, 0x8a, 0xec, 0x2a, 0xb2, 0xab, 0xc8, 0xae, 0x22, 0xbb,
		0x8a, 0xec, 0x2a, 0x9a, 0xd8, 0xc8, 0xae, 0x22, 0xbb, 0x8a, 0xec, 0x2a, 0xb2, 0xab, 0xc8, 0xae,
		0xa2, 0xe8, 0x47, 0x76, 0x15, 0xd9, 0x55, 0x64, 0x57, 0xc1, 0x71, 0x6a, 0x69, 0x7f, 0x3e, 0x59,
		0x63, 0xbe, 0x3b, 0x4a, 0xed, 0x7e, 0x4a, 0x64, 0xd4, 0x90, 0x51, 0x43, 0x46, 0x0d, 0x19, 0x35,
		0x30, 0x8c, 0x1a, 0xa6, 0x41, 0x6d, 0x90, 0x7d, 0x89, 0x69, 0x50, 0xe6, 0xe6, 0xc3, 0x34, 0x28,
		0xb0, 0x5b, 0x04, 0xcb, 0xab, 0xa2, 0x69, 0xb1, 0x21, 0x23, 0x1a, 0x6f, 0x6b, 0x9e, 0x0c, 0xc6,
		0x80, 0x87, 0xfa, 0x56, 0xd4, 0x95, 0x65, 0x73, 0x67, 0x6b, 0x8c, 0xd1, 0x82, 0xbd, 0x85, 0xae,
		0xe8, 0x8f, 0xfe, 0x30, 0xfe, 0x7d, 0x14, 0x12, 0xbe, 0xb7, 0xd8, 0x23, 0x3d, 0x05, 0x76, 0x7b,
		0x69, 0xa7, 0xf4, 0xc9, 0xc7, 0xfb, 0x7e, 0xe9, 0x0f, 0x7e, 0x5f, 0xea, 0x9a, 0x6e, 0xa3, 0x83,
		0xf6, 0xfc, 0x99, 0x0e, 0xa8, 0xf2, 0x24, 0x8b, 0xa7, 0x0d, 0xe6, 0xab, 0xfb, 0xbe, 0xcf, 0xc6,
		0x9f, 0x49, 0x58, 0xf9, 0x72, 0x7e, 0xde, 0xab, 0xf8, 0x44, 0x93, 0x4a, 0x20, 0x64, 0xe5, 0xb8,
		0x37, 0xea, 0x56, 0xee, 0x9f, 0xd8, 0xb2, 0x81, 0xd7, 0x40, 0x03, 0x0f, 0x0d, 0x3c, 0x34, 0xf0,
		0xca, 0x6f, 0xe0, 0xd9, 0x6a, 0x14, 0xbe, 0xc4, 0x86, 0x39, 0x88, 0x30, 0x7b, 0x96, 0x16, 0xb3,
		0x1e, 0x69, 0xf6, 0x9c, 0x34, 0x3f, 0x12, 0x72, 0x22, 0xc6, 0x05, 0x7f, 0x2c, 0xc0, 0xdf, 0x57,
		0x14, 0xd5, 0xaa, 0xa2, 0x87, 0xb4, 0x32, 0xbd, 0xcd, 0xca, 0xf8, 0x36, 0x2b, 0xe9, 0x6d, 0x7e,
		0xe7, 0x6e, 0x9c, 0x7a, 0x8e, 0x80, 0xb5, 0x75, 0xb1, 0xef, 0x52, 0xfc, 0x3b, 0x57, 0x03, 0xae,
		0xd5, 0xc1, 0xda, 0xd4, 0xc2, 0xda, 0xd4, 0xc3, 0x3a, 0xd4, 0x84, 0x23, 0x33, 0xcc, 0xf2, 0x79,
		0xb3, 0xce, 0x0f, 0x2e, 0x9d, 0x36, 0x27, 0x91, 0x77, 0x4b, 0x70, 0x78, 0xd7, 0xc1, 0x5c, 0x4e,
		0x22, 0xf1, 0xec, 0x5a, 0x68, 0x2f, 0xac, 0x9c, 0xd3, 0xc8, 0xbc, 0xa5, 0x35, 0xdc, 0x71, 0x38,
		0xa7, 0xeb, 0x30, 0x80, 0xf9, 0xc4, 0xe5, 0x8a, 0xd8, 0x9b, 0x73, 0x3e, 0x2e, 0x97, 0x6e, 0x1d,
		0x61, 0x1c, 0xf3, 0xd9, 0xcb, 0x16, 0xc9, 0x67, 0x97, 0xb5, 0x73, 0xac, 0xee, 0xd6, 0x2b, 0x3c,
		0xbb, 0x28, 0x3c, 0x9d, 0x08, 0x4f, 0x0c, 0xa5, 0x2a, 0x63, 0x04, 0xe0, 0xab, 0x55, 0x25, 0xb8,
		0x9d, 0x4b, 0x19, 0x19, 0xe8, 0x58, 0xb1, 0x62, 0xa4, 0xa3, 0x5b, 0xba, 0x77, 0xc3, 0xdd, 0x91,
		0x57, 0xa6, 0xdd, 0x91, 0x9c, 0x0b, 0x4d, 0xa6, 0xb4, 0xa9, 0x79, 0x78, 0x55, 0x55, 0xde, 0x90,
		0x46, 0x24, 0x26, 0x7a, 0x38, 0xf1, 0x1f, 0xc6, 0x94, 0x7b, 0x29, 0x27, 0x59, 0x5b, 0x70, 0x22,
		0x3e, 0xf5, 0x71, 0x6b, 0xd1, 0x83, 0x98, 0xfa, 0x0e, 0xef, 0xbd, 0x86, 0xbf, 0xf7, 0x17, 0xbe,
		0xd9, 0xcc, 0xd5, 0x33, 0x08, 0x91, 0x1d, 0x44, 0xba, 0x3a, 0x8b, 0x70, 0xb5, 0xc4, 0x84, 0x5b,
		0x63, 0xbe, 0x6d, 0x32, 0xdd, 0xd6, 0x99, 0x6d, 0xdb, 0x4c, 0xb6, 0x33, 0xe6, 0xda, 0x19, 0x53,
		0xed, 0x82, 0x99, 0xde, 0xec, 0x80, 0x15, 0x6b, 0x4c, 0xf3, 0x7c, 0xb7, 0x87, 0x94, 0x04, 0x92,
		0x06, 0x36, 0xf6, 0xfb, 0xcc, 0x8a, 0xde, 0xb6, 0x30, 0x76, 0x6f, 0xaa, 0xd4, 0xfe, 0xf8, 0x63,
		0xa2, 0x78, 0xb6, 0x96, 0x45, 0xe5, 0xa6, 0xaa, 0xa2, 0x37, 0x1b, 0xb4, 0xd1, 0xc6, 0x32, 0xc3,
		0xa6, 0xa2, 0xb1, 0x53, 0xc2, 0xc7, 0x5e, 0xc9, 0x1e, 0xa7, 0x25, 0x7a, 0xec, 0x94, 0xe4, 0x31,
		0xb5, 0x33, 0x2c, 0x81, 0x53, 0xa7, 0xa0, 0xd4, 0xa0, 0x54, 0xab, 0x2a, 0x2d, 0x13, 0x4f, 0xf3,
		0xa9, 0xd8, 0x3c, 0x9e, 0xdd, 0xd5, 0x8f, 0xf3, 0xf4, 0xae, 0xbe, 0x84, 0x84, 0xff, 0x38, 0x8e,
		0x47, 0xdd, 0x1f, 0xfb, 0x93, 0x5b, 0xf9, 0xf1, 0x45, 0xca, 0xf8, 0x53, 0x7a, 0x13, 0x6f, 0x36,
		0x43, 0x6c, 0x14, 0x1b, 0xa1, 0xe0, 0xb6, 0x32, 0xbd, 0x9d, 0xec, 0x6f, 0xa3, 0x62, 0xcb, 0x96,
		0xff, 0x65, 0xe7, 0xbb, 0x32, 0xe7, 0xf2, 0xcc, 0xe4, 0x7f, 0x6e, 0xc0, 0x6b, 0x46, 0xc0, 0x9b,
		0x13, 0xe8, 0x56, 0x05, 0xb8, 0x19, 0x81, 0x9d, 0x77, 0xa9, 0xcc, 0x04, 0x2f, 0x17, 0x3b, 0x7a,
		0x8e, 0x82, 0x91, 0x0b, 0xca, 0xed, 0xdf, 0x84, 0x17, 0x1f, 0xf7, 0x2a, 0xe3, 0x39, 0x2a, 0x01,
		0x89, 0x58, 0x78, 0x5b, 0x99, 0x88, 0x8c, 0x44, 0xa6, 0x82, 0xa9, 0x12, 0x08, 0xf9, 0x9d, 0x1b,
		0x8b, 0x36, 0x36, 0x14, 0x55, 0x6c, 0xcc, 0x98, 0x36, 0x69, 0x3c, 0x1b, 0x37, 0x96, 0x4d, 0x1b,
		0xc7, 0xd6, 0x8c, 0x61, 0x6b, 0xc6, 0xaf, 0x0d, 0x63, 0x77, 0xbd, 0x2a, 0xdf, 0x54, 0x94, 0x6d,
		0x35, 0x55, 0xc7, 0xc6, 0x76, 0xc6, 0x9c, 0x5c, 0x1b, 0x8f, 0x6a, 0x68, 0xed, 0x1e, 0x09, 0x9c,
		0x43, 0xee, 0x85, 0x42, 0x31, 0x3e, 0x18, 0x0b, 0x18, 0x4d, 0x18, 0xa7, 0x32, 0x4d, 0x67, 0x48,
		0xa3, 0x62, 0x53, 0x64, 0xaa, 0x2a, 0x43, 0xc2, 0xfd, 0x90, 0xfa, 0x95, 0xfe, 0x6d, 0x45, 0x0f,
		0x99, 0xfa, 0xce, 0x8f, 0x7b, 0xf7, 0x81, 0xb2, 0xa6, 0xee, 0xcb, 0x6c, 0x62, 0x83, 0x71, 0x5e,
		0xcf, 0x06, 0x9f, 0x67, 0x8d, 0xc7, 0xb3, 0xc5, 0xdf, 0x59, 0xe7, 0xed, 0xac, 0xf3, 0x75, 0x36,
		0x79, 0xba, 0xbb, 0x72, 0x58, 0x4f, 0x8e, 0xcd, 0x81, 0xab, 0xbc, 0x18, 0xd3, 0x8c, 0x95, 0x66,
		0xd5, 0x3a, 0x2b, 0x70, 0x3a, 0xb2, 0x1a, 0xf1, 0xf9, 0xb6, 0x71, 0xf6, 0x25, 0xcb, 0x76, 0x45,
		0x46, 0xbd, 0x5c, 0x74, 0x51, 0xad, 0x2c, 0x66, 0xb6, 0x37, 0xbb, 0xfa, 0xfb, 0xc9, 0xf0, 0x6e,
		0xaa, 0xde, 0x4c, 0x9b, 0x65, 0x7b, 0x27, 0x73, 0x05, 0x33, 0xbd, 0x3e, 0xe3, 0x6a, 0xe4, 0x53,
		0xc9, 0xb9, 0x55, 0x6f, 0x11, 0x15, 0x5b, 0x58, 0x95, 0x16, 0x55, 0x99, 0xc6, 0x54, 0xa3, 0x31,
		0x15, 0x68, 0x42, 0xd5, 0xd9, 0x3d, 0xed, 0x79, 0x51, 0x77, 0xd5, 0x1f, 0x7a, 0x71, 0xcd, 0x0b,
		0xd9, 0xe4, 0xe1, 0x72, 0x2e, 0xd8, 0x6c, 0xc7, 0x2c, 0x0e, 0x96, 0xf3, 0x4d, 0x2f, 0xb4, 0xb8,
		0x0f, 0x48, 0xa8, 0xf2, 0x62, 0xe2, 0x82, 0x3e, 0xee, 0xc2, 0x98, 0xd7, 0x04, 0xc6, 0x35, 0x86,
		0x69, 0x4d, 0x61, 0x58, 0xe3, 0x98, 0xd5, 0x38, 0x46, 0x35, 0x89, 0x49, 0xdd, 0x52, 0xb2, 0x85,
		0x7d, 0xbe, 0xf3, 0xdd, 0xd2, 0x17, 0x22, 0xa4, 0x84, 0x17, 0xd9, 0x2f, 0x33, 0x6d, 0xd5, 0x70,
		0x85, 0x84, 0x72, 0x28, 0x19, 0x3f, 0x99, 0x64, 0x47, 0xd5, 0x7c, 0xaa, 0xa9, 0xa7, 0x6b, 0x5a,
		0x12, 0xae, 0xa2, 0x49, 0x45, 0x91, 0xa2, 0x62, 0xec, 0xd9, 0xa1, 0x8b, 0x0b, 0xb5, 0x06, 0x0a,
		0x34, 0x14, 0x68, 0x28, 0xd0, 0xb2, 0xec, 0x96, 0x84, 0x71, 0xdd, 0x6a, 0x1a, 0x90, 0x67, 0x05,
		0x42, 0x52, 0x0c, 0xd5, 0x3b, 0x33, 0x40, 0x8b, 0x9a, 0xac, 0x57, 0x66, 0x38, 0x12, 0x70, 0x5e,
		0x4c, 0xca, 0xd4, 0x78, 0x16, 0x4a, 0x45, 0x19, 0x08, 0x94, 0x30, 0x5a, 0x0f, 0xcc, 0xd6, 0x12,
		0xb4, 0x9b, 0xbb, 0xed, 0xdd, 0xee, 0x76, 0x73, 0xb7, 0xb3, 0xc1, 0x6b, 0xb1, 0x26, 0x76, 0xed,
		0x6a, 0x83, 0x61, 0x0d, 0xe5, 0xa4, 0x1f, 0x52, 0xbf, 0x38, 0x88, 0x99, 0x0d, 0x54, 0x1c, 0xb2,
		0x8c, 0xb5, 0x18, 0xa2, 0x16, 0x44, 0x2d, 0x88, 0x5a, 0xd0, 0x0c, 0x5b, 0xba, 0xc7, 0x48, 0x27,
		0xc5, 0x65, 0xd5, 0x78, 0x10, 0x14, 0x30, 0x28, 0x60, 0x50, 0xc0, 0xa0, 0x59, 0x54, 0x62, 0xb3,
		0xa8, 0xd1, 0xdc, 0x41, 0xcb, 0x28, 0xf3, 0x2a, 0xb4, 0x5e, 0x91, 0x71, 0x5a, 0x76, 0x83, 0xe8,
		0xb5, 0x78, 0xbc, 0xa7, 0x4e, 0xe2, 0x0d, 0x70, 0x77, 0x73, 0xca, 0x06, 0xc3, 0xbe, 0x90, 0x2a,
		0xbf, 0xc7, 0xfb, 0x7e, 0x08, 0x74, 0x7a, 0x5b, 0xc3, 0x5e, 0xe8, 0xf4, 0x76, 0xe8, 0xf4, 0x9e,
		0xed, 0xe8, 0xe2, 0x96, 0xcb, 0x7c, 0xa4, 0x62, 0xe6, 0x4b, 0x03, 0xcd, 0x17, 0x34, 0x5f, 0x20,
		0x98, 0x2f, 0x45, 0xa3, 0xbb, 0xf3, 0x86, 0x5f, 0x3d, 0xbb, 0xe9, 0x72, 0x85, 0x63, 0x19, 0x3e,
		0x86, 0xc6, 0x8e, 0xa3, 0xc9, 0x63, 0x69, 0xfc, 0x78, 0x9a, 0x3e, 0xa6, 0xd6, 0x8e, 0xab, 0xb5,
		0x63, 0x6b, 0xe3, 0xf8, 0x1a, 0x82, 0xfe, 0x9b, 0x92, 0xb4, 0xc1, 0x2c, 0xa4, 0x6c, 0x18, 0x8b,
		0xe7, 0x37, 0x6d, 0xd7, 0x63, 0x62, 0x04, 0x26, 0x46, 0x38, 0x12, 0x0f, 0x66, 0xc4, 0x84, 0x41,
		0xaa, 0xa7, 0x62, 0xa5, 0x50, 0x89, 0xed, 0x1a, 0xa0, 0x36, 0x6a, 0x7c, 0x5a, 0xab, 0xe1, 0x89,
		0x35, 0x3a, 0x4b, 0x50, 0xa3, 0xf3, 0xca, 0xe4, 0x46, 0xb3, 0x59, 0x63, 0x13, 0x6b, 0x68, 0x96,
		0xa2, 0x86, 0xe6, 0xd5, 0xa6, 0x64, 0xce, 0x19, 0x30, 0x34, 0x26, 0xbd, 0x6c, 0xc8, 0x2d, 0x95,
		0x73, 0x55, 0x60, 0x1c, 0x5c, 0x3e, 0x31, 0x07, 0x82, 0x4d, 0x04, 0x9b, 0x08, 0x36, 0x37, 0x0e,
		0x6c, 0x9e, 0x12, 0xee, 0x13, 0x2d, 0xe4, 0xad, 0xc1, 0xd4, 0x76, 0x7b, 0x00, 0x36, 0x1e, 0xde,
		0x2a, 0x04, 0xb0, 0x8b, 0x2a, 0xef, 0xb1, 0x26, 0x6d, 0xde, 0xbd, 0xfb, 0x3f, 0xef, 0xfe, 0xdf,
		0xeb, 0x44, 0x5a, 0x2f, 0xbf, 0x97, 0x32, 0x42, 0x02, 0x2c, 0x45, 0xf6, 0xb4, 0xb7, 0x78, 0xee,
		0x60, 0x9d, 0x7f, 0xca, 0xe5, 0x40, 0x36, 0xf7, 0xbe, 0x0b, 0xbc, 0x6b, 0x13, 0x0c, 0xa0, 0x39,
		0xe6, 0xcf, 0x10, 0x08, 0x43, 0x62, 0x7f, 0xa3, 0xc0, 0x15, 0x12, 0xfb, 0xee, 0x01, 0x8e, 0x85,
		0xd2, 0xc1, 0x26, 0x4b, 0x05, 0x2f, 0x97, 0x06, 0x66, 0x31, 0x44, 0xe9, 0x39, 0xa9, 0xa7, 0x6f,
		0x4c, 0x80, 0x9a, 0x68, 0xe7, 0x6d, 0xdc, 0x39, 0xda, 0x44, 0x19, 0x8a, 0x32, 0x14, 0x90, 0x0c,
		0x45, 0xe7, 0x28, 0xf2, 0x55, 0xc8, 0x57, 0x21, 0x5f, 0xb5, 0x31, 0xdc, 0x12, 0x3a, 0x47, 0xd1,
		0x39, 0x8a, 0xce, 0x51, 0xc7, 0x94, 0x1d, 0x6e, 0x37, 0x74, 0x8e, 0x1a, 0x63, 0x42, 0x0d, 0x18,
		0x1a, 0x4c, 0x4d, 0xfb, 0xb6, 0x58, 0xc0, 0x94, 0xf3, 0xa1, 0x11, 0x5a, 0x22, 0xb4, 0x44, 0x68,
		0xf9, 0x8a, 0xa0, 0x65, 0xf1, 0xaa, 0x05, 0xcf, 0xa2, 0xca, 0x06, 0x46, 0xa6, 0x64, 0x23, 0x5a,
		0x31, 0x32, 0x05, 0xc5, 0x31, 0x8a, 0x63, 0x00, 0xe2, 0x18, 0x23, 0x53, 0x30, 0x32, 0xa5, 0x2c,
		0x66, 0xee, 0xeb, 0x8c, 0x4c, 0x31, 0x00, 0x09, 0x66, 0xa1, 0x1b, 0x35, 0x33, 0x2e, 0xbc, 0xa5,
		0x63, 0xfb, 0x68, 0x7c, 0x84, 0x02, 0x08, 0x05, 0x10, 0x0a, 0xbc, 0x22, 0xcb, 0x8c, 0xf2, 0x24,
		0xa2, 0x93, 0x96, 0x75, 0x36, 0xb4, 0x76, 0xdb, 0xe0, 0x98, 0x87, 0x3c, 0x89, 0xc6, 0x2f, 0xe1,
		0xae, 0x44, 0xe2, 0x5d, 0x48, 0x36, 0x30, 0x59, 0x62, 0x6a, 0x2e, 0x84, 0x26, 0xe3, 0xa2, 0x38,
		0x47, 0x71, 0x8e, 0xe2, 0xfc, 0x15, 0x89, 0xf3, 0x39, 0x9c, 0x33, 0x2a, 0x00, 0x5e, 0x8f, 0x48,
		0xc7, 0x58, 0xf2, 0x95, 0x63, 0xc9, 0x27, 0x06, 0x03, 0x36, 0xb6, 0x5e, 0x65, 0x00, 0x6c, 0x6c,
		0xed, 0x6a, 0xa9, 0x36, 0xb0, 0xe9, 0xe0, 0xf2, 0xd9, 0x71, 0xd1, 0x75, 0xf0, 0xf3, 0x6c, 0x2e,
		0x2c, 0xc2, 0x68, 0x69, 0x39, 0x37, 0xa1, 0x0e, 0xe3, 0xc4, 0xa1, 0x5e, 0x23, 0xfe, 0x88, 0x4a,
		0xcd, 0x14, 0x8d, 0xf2, 0x34, 0x5c, 0x9b, 0xa3, 0x87, 0x27, 0x47, 0xc3, 0xea, 0x8c, 0xd6, 0xb0,
		0x3c, 0x56, 0x67, 0x74, 0x58, 0x9d, 0xb1, 0x60, 0x89, 0x38, 0x33, 0xa5, 0xe1, 0xb0, 0x32, 0xa3,
		0x05, 0x53, 0x18, 0x2b, 0x33, 0xda, 0xc3, 0x53, 0x85, 0x2b, 0x33, 0xa6, 0x9a, 0x74, 0x44, 0x42,
		0x83, 0xe9, 0x9b, 0xb3, 0x11, 0x31, 0x89, 0xd3, 0x19, 0x7b, 0x85, 0x09, 0x48, 0x98, 0xc4, 0xf9,
		0xf2, 0x6e, 0x2b, 0xdc, 0x3b, 0xe2, 0xf1, 0xd9, 0x34, 0x91, 0xc2, 0x69, 0xa6, 0x97, 0xc4, 0xec,
		0xc7, 0x20, 0x67, 0x67, 0xb2, 0xb7, 0x84, 0x61, 0xa1, 0xb6, 0x34, 0xac, 0xe1, 0x2e, 0x07, 0xf3,
		0x71, 0x2d, 0x74, 0x3b, 0x30, 0x74, 0x3c, 0x1e, 0xf3, 0x25, 0xe0, 0x96, 0xca, 0x74, 0xab, 0x3e,
		0x27, 0x6b, 0xb6, 0x21, 0x3c, 0xf0, 0x15, 0xc0, 0x1c, 0xef, 0x90, 0x05, 0x54, 0xb3, 0xc8, 0x60,
		0x9a, 0xf7, 0x7c, 0x44, 0x04, 0x5a, 0x08, 0xb4, 0x10, 0x68, 0x21, 0xd0, 0x42, 0xa0, 0x85, 0x40,
		0x0b, 0x81, 0x16, 0x02, 0xad, 0xd7, 0x0d, 0xb4, 0x54, 0x12, 0xc7, 0x46, 0x72, 0x73, 0xee, 0xeb,
		0xe9, 0xcc, 0x46, 0x2c, 0x5a, 0x52, 0xe4, 0xbe, 0xbb, 0x72, 0x40, 0x42, 0x85, 0xc0, 0x0d, 0x81,
		0x1b, 0x02, 0xb7, 0x8d, 0x02, 0x6e, 0xe6, 0x12, 0x21, 0x0d, 0x25, 0x40, 0x42, 0x09, 0xc1, 0xd9,
		0xc0, 0xb8, 0x8e, 0xa7, 0xbc, 0xe5, 0x85, 0x2a, 0x6c, 0xba, 0x69, 0xad, 0x5d, 0x2c, 0x91, 0xc4,
		0x48, 0x0d, 0x38, 0x63, 0x5e, 0xd0, 0x26, 0x7a, 0x41, 0xed, 0x29, 0x0c, 0xf4, 0x82, 0xde, 0x03,
		0x2b, 0xf4, 0x82, 0x22, 0xc6, 0x43, 0x8c, 0x87, 0x18, 0x0f, 0xc9, 0x39, 0x24, 0xe7, 0x90, 0x9c,
		0x43, 0x72, 0x0e, 0xc9, 0xb9, 0x0d, 0x25, 0xe7, 0xd0, 0x0b, 0x8a, 0x40, 0x0b, 0x81, 0x16, 0x02,
		0x2d, 0x04, 0x5a, 0x08, 0xb4, 0x10, 0x68, 0x21, 0xd0, 0x42, 0xa0, 0x65, 0x09, 0x68, 0xa1, 0x17,
		0x14, 0x81, 0x1b, 0x02, 0x37, 0x04, 0x6e, 0x79, 0x76, 0x1b, 0x7a, 0x41, 0x4b, 0xee, 0x05, 0x2d,
		0x50, 0x1b, 0x02, 0x33, 0xcf, 0x33, 0xbd, 0xea, 0x6a, 0x2e, 0x0f, 0xf0, 0x6a, 0x25, 0x04, 0xd2,
		0xdf, 0xe5, 0xfe, 0x83, 0xe9, 0x36, 0x20, 0xe7, 0x3d, 0x9f, 0x03, 0xbb, 0x90, 0xe3, 0xba, 0x70,
		0x56, 0x7b, 0x13, 0xb3, 0xda, 0xd7, 0xa8, 0xa3, 0x4b, 0x9d, 0xd5, 0x9e, 0x8c, 0xcf, 0xaf, 0x32,
		0x91, 0xd7, 0x3e, 0x1d, 0x09, 0x33, 0xdb, 0x31, 0xa6, 0x63, 0x2d, 0x70, 0x17, 0x5c, 0x4c, 0x47,
		0xcd, 0x67, 0xca, 0x23, 0xd2, 0xa7, 0x7e, 0x2d, 0xfe, 0xa9, 0x95, 0xc9, 0xe0, 0x8e, 0xc7, 0x43,
		0xa3, 0x0d, 0x8b, 0x36, 0x2c, 0xda, 0xb0, 0x1b, 0x64, 0xc3, 0x4e, 0xd5, 0x65, 0xb7, 0x6d, 0xd0,
		0x8a, 0xdd, 0x41, 0xff, 0xc3, 0x5a, 0xe4, 0xda, 0xd2, 0xb0, 0xe8, 0x7f, 0x00, 0xb7, 0x54, 0x66,
		0x8b, 0x18, 0x3a, 0x5f, 0x3d, 0xf4, 0x44, 0x14, 0xc1, 0x61, 0x54, 0x4a, 0x21, 0xcd, 0x63, 0xb0,
		0x85, 0x61, 0x11, 0x7f, 0x21, 0xfe, 0x42, 0xfc, 0x85, 0xf8, 0x0b, 0xf1, 0x17, 0xe2, 0x2f, 0xc4,
		0x5f, 0x88, 0xbf, 0x10, 0x7f, 0x2d, 0xe2, 0xaf, 0x40, 0xc8, 0xeb, 0x09, 0x59, 0x25, 0x3c, 0x4d,
		0x0d, 0xa3, 0xb0, 0xa5, 0xc1, 0x11, 0x8b, 0x21, 0x16, 0x43, 0x2c, 0x86, 0x58, 0x0c, 0xb1, 0x18,
		0x62, 0x31, 0xc4, 0x62, 0x88, 0xc5, 0x10, 0x8b, 0x3d, 0x8d, 0xc5, 0x8c, 0xf3, 0x61, 0x8f, 0x86,
		0x46, 0x1c, 0x86, 0x38, 0x0c, 0x71, 0x18, 0xe2, 0x30, 0xc4, 0x61, 0x88, 0xc3, 0x10, 0x87, 0x21,
		0x0e, 0x43, 0x1c, 0xb6, 0x88, 0xc3, 0x2c, 0x30, 0x61, 0xc8, 0x7f, 0x21, 0xee, 0x42, 0xdc, 0x85,
		0xb8, 0x0b, 0x71, 0x17, 0xe2, 0x2e, 0xc4, 0x5d, 0x88, 0xbb, 0x10, 0x77, 0x3d, 0x81, 0xbb, 0x8c,
		0xb3, 0x5e, 0xc8, 0x75, 0x21, 0xe6, 0x42, 0xcc, 0x85, 0x98, 0x0b, 0x31, 0x17, 0x62, 0x2e, 0xc4,
		0x5c, 0x88, 0xb9, 0x10, 0x73, 0x3d, 0x5c, 0x16, 0x91, 0x68, 0x6b, 0x89, 0x90, 0x4f, 0x8c, 0x8d,
		0x48, 0x0c, 0x91, 0x18, 0x22, 0x31, 0x44, 0x62, 0x88, 0xc4, 0x10, 0x89, 0x21, 0x12, 0x43, 0x24,
		0x86, 0x48, 0xec, 0x01, 0x12, 0xb3, 0x91, 0x0a, 0xf9, 0x68, 0x5c, 0x44, 0x60, 0x88, 0xc0, 0x10,
		0x81, 0x21, 0x02, 0x43, 0x04, 0x86, 0x08, 0x0c, 0x11, 0x18, 0x22, 0x30, 0x44, 0x60, 0x0f, 0x10,
		0x98, 0xbd, 0x64, 0xc8, 0x27, 0x47, 0x47, 0x34, 0x86, 0x68, 0x0c, 0xd1, 0x18, 0xa2, 0x31, 0x44,
		0x63, 0x88, 0xc6, 0x10, 0x8d, 0x21, 0x1a, 0x43, 0x34, 0xf6, 0x0c, 0x1a, 0x33, 0xcf, 0x89, 0x61,
		0x3e, 0x24, 0x22, 0x31, 0x44, 0x62, 0x88, 0xc4, 0x10, 0x89, 0x21, 0x12, 0x43, 0x24, 0x86, 0x48,
		0x0c, 0x91, 0xd8, 0xef, 0x90, 0x98, 0x0d, 0x36, 0x0c, 0x39, 0x30, 0x44, 0x5e, 0x88, 0xbc, 0x10,
		0x79, 0x21, 0xf2, 0x42, 0xe4, 0x85, 0xc8, 0x0b, 0x91, 0x17, 0x22, 0xaf, 0xa7, 0x90, 0x97, 0x79,
		0xe6, 0x0b, 0xf9, 0x2e, 0x44, 0x5d, 0x88, 0xba, 0x10, 0x75, 0x21, 0xea, 0x42, 0xd4, 0x85, 0xa8,
		0x0b, 0x51, 0x57, 0x29, 0x51, 0xd7, 0x6b, 0x6f, 0xed, 0x9d, 0x76, 0x4a, 0xde, 0x2a, 0xd8, 0x17,
		0xb6, 0x92, 0xa5, 0xe3, 0xf4, 0xc7, 0xd9, 0x5c, 0xae, 0x5a, 0x87, 0xe7, 0xe8, 0x8e, 0xec, 0x0f,
		0xbd, 0xb8, 0xe6, 0x85, 0x6c, 0x02, 0x45, 0x0a, 0x36, 0xdd, 0x5d, 0x1c, 0x2c, 0x6f, 0x1f, 0x53,
		0x1a, 0x90, 0x24, 0x4c, 0x61, 0x51, 0x40, 0x42, 0x45, 0x0b, 0xf6, 0xef, 0xad, 0x63, 0xff, 0x5e,
		0xec, 0xdf, 0x0b, 0x41, 0x60, 0x16, 0x86, 0xcf, 0xf3, 0xdd, 0xd2, 0x17, 0x22, 0xa4, 0x84, 0x17,
		0xd9, 0x2f, 0xb3, 0xe6, 0xd7, 0x8d, 0x4d, 0x16, 0x5c, 0x49, 0x5c, 0x23, 0xbe, 0x2f, 0x6b, 0x3e,
		0xd5, 0xd4, 0xd3, 0x35, 0x2d, 0x09, 0x57, 0x11, 0xd3, 0x06, 0x7a, 0x87, 0x3f, 0x3f, 0x74, 0x71,
		0xa1, 0xd6, 0x40, 0x81, 0x86, 0x02, 0x0d, 0x05, 0x5a, 0x96, 0xdd, 0x92, 0x30, 0xae, 0x5b, 0x4d,
		0x03, 0xf2, 0x6c, 0xbb, 0xc0, 0x10, 0x66, 0x8c, 0x7e, 0x03, 0xec, 0x88, 0x49, 0x23, 0xdf, 0xb0,
		0xc5, 0x68, 0xda, 0xa8, 0xb7, 0x61, 0x0e, 0x1a, 0x30, 0xe2, 0x8d, 0x1a, 0xef, 0xb6, 0x96, 0xa0,
		0xdd, 0xdc, 0x6d, 0xef, 0x76, 0xb7, 0x9b, 0xbb, 0x9d, 0x0d, 0x5e, 0x8b, 0x35, 0x99, 0xc2, 0x57,
		0x1b, 0x0c, 0x6b, 0x28, 0x27, 0xfd, 0x90, 0xfa, 0xc5, 0x41, 0xcc, 0x6c, 0xa0, 0xe2, 0x90, 0x65,
		0xac, 0xc5, 0x10, 0xb5, 0x20, 0x6a, 0x41, 0xd4, 0x82, 0x66, 0xd8, 0xd2, 0x3d, 0x46, 0x3a, 0x29,
		0x2e, 0xab, 0xc6, 0x83, 0xa0, 0x80, 0x41, 0x01, 0x83, 0x02, 0x06, 0xcd, 0xa2, 0x12, 0x9b, 0x45,
		0x8d, 0xe6, 0x0e, 0x5a, 0x46, 0x99, 0x57, 0xa1, 0xf5, 0x8a, 0x8c, 0xd3, 0xb2, 0x1b, 0x44, 0x6f,
		0x2c, 0x6e, 0xc8, 0xa2, 0x3e, 0x47, 0xe3, 0xbe, 0xc6, 0x6c, 0x2a, 0x69, 0xf5, 0x77, 0x93, 0xe1,
		0xbd, 0x54, 0x13, 0xce, 0x93, 0xa8, 0x4f, 0x65, 0x0e, 0x8b, 0xf2, 0x5e, 0xd1, 0xdc, 0x8f, 0x91,
		0x71, 0x45, 0x66, 0x00, 0x36, 0xe3, 0x65, 0x79, 0x41, 0x59, 0x11, 0x30, 0xf6, 0x00, 0x84, 0x05,
		0x39, 0xb4, 0x6a, 0x51, 0xf0, 0x65, 0x0c, 0x74, 0x19, 0x03, 0x5b, 0x4b, 0x20, 0x2b, 0xa8, 0x6e,
		0xd8, 0x89, 0x3f, 0x60, 0x32, 0xdf, 0x62, 0x7b, 0xb3, 0x1d, 0x56, 0xd0, 0x70, 0x99, 0x8e, 0x53,
		0xcc, 0x76, 0x69, 0x94, 0xc5, 0x76, 0x09, 0xd0, 0x76, 0x71, 0x74, 0xac, 0xd6, 0x63, 0xbb, 0xe4,
		0x3d, 0x6e, 0xc6, 0xc8, 0x4d, 0xc3, 0x24, 0xe7, 0xfd, 0x83, 0x99, 0x09, 0x3a, 0x31, 0x6c, 0x3f,
		0x6c, 0x7e, 0x2c, 0x78, 0x80, 0xb1, 0xe0, 0x26, 0x06, 0x36, 0x28, 0x10, 0x0c, 0x59, 0x12, 0x1b,
		0x17, 0x0b, 0x5e, 0x9c, 0x4d, 0x5d, 0xd2, 0xba, 0x8d, 0x57, 0x11, 0x88, 0x79, 0x78, 0x93, 0xda,
		0xa6, 0xf9, 0xf9, 0x19, 0x73, 0xea, 0x58, 0x78, 0x35, 0x7a, 0xa3, 0xf7, 0x34, 0x0d, 0x69, 0x44,
		0xb5, 0xbc, 0xad, 0x09, 0x5e, 0xf3, 0x86, 0x29, 0x81, 0x64, 0x54, 0x45, 0xa7, 0x22, 0xdc, 0xa0,
		0x8e, 0x76, 0xad, 0x9e, 0xaf, 0xca, 0x13, 0x73, 0x7b, 0x6f, 0x3a, 0x6e, 0x4d, 0xa1, 0xf2, 0x06,
		0xbb, 0x32, 0xe6, 0xcf, 0x51, 0x93, 0x34, 0x28, 0x6e, 0x1b, 0x3c, 0x1c, 0x0e, 0x4d, 0x04, 0x34,
		0x11, 0xd0, 0x44, 0xb0, 0x6e, 0x99, 0x9b, 0xb5, 0xd0, 0x0d, 0x1d, 0x43, 0x04, 0xf4, 0x08, 0xe8,
		0x61, 0x03, 0xfa, 0xa2, 0xc7, 0x7a, 0x59, 0xc7, 0x9a, 0xdb, 0x1e, 0x4b, 0xfa, 0xd6, 0xd4, 0xf6,
		0x30, 0xec, 0x05, 0x34, 0x75, 0xf8, 0x6d, 0x08, 0x01, 0x6b, 0xc2, 0xc0, 0x96, 0x50, 0xb0, 0x2e,
		0x1c, 0xac, 0x0b, 0x09, 0x9b, 0xc2, 0xc2, 0x8c, 0xd0, 0x30, 0x24, 0x3c, 0xcc, 0xb3, 0x02, 0x4b,
		0xbb, 0x35, 0xa4, 0x24, 0xc8, 0x0f, 0xb2, 0x7f, 0xab, 0xf1, 0xb7, 0x0d, 0x8e, 0xd9, 0x9b, 0x9b,
		0x54, 0xe3, 0x65, 0xde, 0x5b, 0x30, 0xa1, 0x1e, 0xfd, 0x61, 0xfa, 0x7b, 0x9a, 0x61, 0xb8, 0x21,
		0x69, 0xab, 0x26, 0xa2, 0x03, 0x54, 0xd2, 0xb7, 0x28, 0xff, 0x1f, 0x8c, 0x8e, 0x2a, 0x00, 0x55,
		0x00, 0xaa, 0x00, 0x54, 0x01, 0x60, 0x55, 0xc0, 0xb7, 0x7b, 0x15, 0xf0, 0x7f, 0xbd, 0x44, 0x4a,
		0xca, 0xf5, 0xdb, 0x77, 0x5b, 0x7f, 0xfc, 0x71, 0xcf, 0xb6, 0x5d, 0x4d, 0x2f, 0x59, 0x94, 0x7b,
		0xea, 0x89, 0xbf, 0xcd, 0x47, 0xf6, 0xe9, 0xcd, 0xc6, 0x68, 0x93, 0xb5, 0x5a, 0x33, 0x85, 0x39,
		0xf1, 0xd9, 0x8f, 0x79, 0x03, 0xd7, 0x1a, 0x47, 0xfe, 0x8c, 0x30, 0x33, 0xc0, 0x95, 0x3f, 0x29,
		0xc5, 0xd6, 0x6d, 0xf0, 0x5e, 0x15, 0x25, 0xe0, 0xcc, 0x70, 0xe9, 0xf7, 0xd0, 0xc7, 0x0a, 0xa7,
		0xfe, 0x80, 0x62, 0x2e, 0xc4, 0xb0, 0x17, 0x7f, 0xeb, 0x77, 0x85, 0x0a, 0x6a, 0x10, 0x4d, 0xcd,
		0x71, 0x7e, 0x93, 0xe1, 0x36, 0x8c, 0xf2, 0x6b, 0x22, 0xe5, 0x87, 0x94, 0x1f, 0x52, 0x7e, 0x48,
		0xf9, 0xa1, 0xbd, 0x87, 0xf6, 0x1e, 0xda, 0x7b, 0x68, 0xef, 0x21, 0xe5, 0x87, 0x94, 0x1f, 0xaa,
		0x00, 0x54, 0x01, 0xa8, 0x02, 0x50, 0x05, 0x20, 0xe5, 0x67, 0xd9, 0x9a, 0x81, 0xc8, 0xe7, 0xe4,
		0x48, 0x22, 0x34, 0x48, 0xe7, 0xbc, 0xf6, 0x72, 0xb1, 0xcf, 0x2d, 0x8b, 0x8b, 0xc2, 0xb1, 0x7f,
		0xce, 0xe7, 0xfe, 0x31, 0xff, 0xd2, 0x39, 0x0d, 0x36, 0x39, 0x78, 0xb6, 0x18, 0x85, 0x67, 0x84,
		0xba, 0x33, 0x16, 0x2c, 0xdb, 0xc4, 0x60, 0x59, 0x7b, 0x50, 0x0b, 0x83, 0x65, 0x8d, 0x51, 0x6c,
		0x98, 0x4f, 0xb7, 0x1e, 0x5b, 0x0c, 0xb9, 0xf8, 0x8d, 0xb6, 0xb1, 0x30, 0x9f, 0xee, 0xe5, 0xdd,
		0x86, 0xf9, 0x74, 0xa5, 0x44, 0xaa, 0x05, 0x4c, 0x06, 0xac, 0xe6, 0xb2, 0xc2, 0x0b, 0xae, 0xe6,
		0x42, 0xc6, 0x59, 0x41, 0xbf, 0xb5, 0xc2, 0x31, 0x6f, 0x0c, 0x2e, 0x54, 0xde, 0x05, 0x32, 0xb8,
		0x30, 0x19, 0x56, 0x63, 0xd5, 0x55, 0x58, 0xed, 0xd5, 0xbf, 0xfc, 0x22, 0x57, 0x78, 0x89, 0x19,
		0x4d, 0xa6, 0x5c, 0x26, 0x52, 0x46, 0x93, 0x28, 0xb3, 0x09, 0x94, 0x07, 0x09, 0x2d, 0x22, 0x9e,
		0xf1, 0x52, 0x66, 0x59, 0xc5, 0x9c, 0xd8, 0xa6, 0x30, 0x86, 0x29, 0x8c, 0x55, 0x1e, 0x63, 0x92,
		0xf4, 0xc1, 0xd7, 0x74, 0x70, 0xb3, 0x9a, 0x1d, 0xd5, 0xf4, 0x66, 0x73, 0x97, 0x8f, 0xca, 0xb8,
		0xc6, 0x05, 0x00, 0xff, 0xda, 0x0b, 0x47, 0xe5, 0x78, 0xd4, 0xca, 0xab, 0x28, 0x1d, 0x95, 0x6d,
		0xbb, 0xbb, 0x01, 0x18, 0xb9, 0x41, 0xf5, 0x42, 0x61, 0xb4, 0xb1, 0xf2, 0xcb, 0xb1, 0xde, 0x33,
		0xa9, 0xbc, 0x9b, 0xe3, 0xda, 0xe9, 0x6d, 0xe7, 0x0b, 0x5e, 0x35, 0x54, 0x76, 0xb4, 0xd1, 0x35,
		0x50, 0x76, 0xb4, 0x8b, 0x65, 0x47, 0xad, 0xd0, 0x1c, 0xf3, 0xe1, 0xb0, 0x1b, 0xc3, 0xc6, 0x2c,
		0x41, 0xb7, 0xd3, 0x69, 0x61, 0x23, 0x86, 0xa5, 0x9f, 0x2b, 0x97, 0xa6, 0xbb, 0x01, 0xd9, 0xa7,
		0xb4, 0x64, 0x7c, 0x60, 0xa2, 0xa4, 0xfb, 0x8e, 0x23, 0x1b, 0xfd, 0x0a, 0x4d, 0xc9, 0x17, 0x4d,
		0xc9, 0x0c, 0xa4, 0xc9, 0x0a, 0x86, 0xdf, 0x9b, 0x02, 0x2f, 0xa4, 0xba, 0x9f, 0x0c, 0xc6, 0xa8,
		0x29, 0xa5, 0xf4, 0x5f, 0xd6, 0x6d, 0x19, 0x0d, 0xc7, 0x95, 0x62, 0xd0, 0xc6, 0x6f, 0x64, 0x6f,
		0xe1, 0xed, 0xac, 0x6a, 0x68, 0x1e, 0x50, 0xe5, 0x49, 0x16, 0x4f, 0xd7, 0xb0, 0x7a, 0xdc, 0x1b,
		0xb5, 0x2b, 0xc4, 0xf7, 0x25, 0x55, 0xaa, 0x12, 0x90, 0x88, 0x85, 0xb7, 0x95, 0xc9, 0xd2, 0x24,
		0x32, 0x5d, 0xe8, 0x4a, 0x20, 0xe4, 0x77, 0x7e, 0x7f, 0x2f, 0xb6, 0x0d, 0xda, 0xba, 0x1b, 0x83,
		0x36, 0x53, 0xfd, 0xfe, 0xf2, 0x98, 0xb3, 0x59, 0xea, 0xef, 0xaf, 0xd9, 0x98, 0x65, 0xf1, 0xa8,
		0x9d, 0xdf, 0x98, 0x4d, 0xaf, 0xce, 0x5a, 0xa5, 0xf6, 0xe1, 0xd1, 0xe8, 0x11, 0x49, 0x22, 0xaa,
		0xa9, 0x54, 0xe3, 0x33, 0x50, 0xd1, 0x43, 0x5a, 0x79, 0xe2, 0xb4, 0xfc, 0xf1, 0x5a, 0x6a, 0x2d,
		0xc7, 0x68, 0x30, 0x1b, 0x6a, 0x68, 0x71, 0xb7, 0x5e, 0x5d, 0x6f, 0x82, 0x13, 0xdd, 0x6c, 0x8d,
		0xd6, 0x45, 0x8d, 0x86, 0x1a, 0x6d, 0x23, 0x35, 0x5a, 0xb7, 0x90, 0x46, 0xeb, 0x5a, 0xd1, 0x68,
		0x5d, 0xd4, 0x68, 0xa8, 0xd1, 0x4a, 0xae, 0xd1, 0x7e, 0xfb, 0x8d, 0xab, 0x97, 0x8c, 0xbd, 0x6c,
		0x56, 0xaf, 0x19, 0x6b, 0xb7, 0xba, 0x92, 0x63, 0xf2, 0x25, 0x5f, 0xe9, 0xef, 0x97, 0xf2, 0xf9,
		0xd7, 0xf2, 0x1b, 0x19, 0xb8, 0xa2, 0x3b, 0x34, 0x93, 0x1b, 0x74, 0x45, 0x11, 0xb2, 0xb2, 0xdb,
		0x33, 0x8b, 0x88, 0xc8, 0x1c, 0xd8, 0x95, 0x55, 0x04, 0xe4, 0x3e, 0xf2, 0xb9, 0x8f, 0x78, 0x9e,
		0xc0, 0xaa, 0x62, 0x7c, 0xc8, 0xaa, 0xba, 0xb0, 0x4a, 0xfc, 0x88, 0xf1, 0xda, 0x78, 0x4f, 0x24,
		0x2a, 0xbb, 0x4b, 0xfd, 0xc1, 0xd5, 0xd9, 0x60, 0x5b, 0x7d, 0x53, 0x61, 0x5b, 0xf0, 0x3a, 0x61,
		0x5b, 0xb0, 0x2e, 0xd8, 0x76, 0x4a, 0xb8, 0x4f, 0xb4, 0x90, 0xb7, 0x19, 0xb0, 0x7c, 0x66, 0x17,
		0xe4, 0x42, 0xa0, 0x6e, 0x12, 0xd1, 0x89, 0xdd, 0x91, 0x65, 0x9d, 0x67, 0xf2, 0xb0, 0x9d, 0xe1,
		0x9a, 0x43, 0x9e, 0x44, 0xe3, 0x9b, 0x34, 0xfb, 0xba, 0x32, 0xd7, 0xe0, 0xc9, 0xbf, 0x33, 0x8d,
		0xd5, 0xd4, 0x29, 0x5e, 0x3b, 0x27, 0x67, 0x8d, 0x9c, 0x0c, 0x1e, 0x8f, 0xc2, 0xaf, 0x49, 0xc4,
		0xd3, 0x7d, 0x45, 0x42, 0x30, 0xaf, 0x67, 0xa5, 0x6f, 0x5e, 0x19, 0x09, 0xda, 0xf2, 0x44, 0x32,
		0xc6, 0x43, 0x39, 0x94, 0xcc, 0xfc, 0xca, 0x92, 0xf0, 0x02, 0xa8, 0x60, 0x36, 0x9c, 0x17, 0xf0,
		0x88, 0x94, 0x8c, 0xca, 0x9a, 0x96, 0x84, 0x2b, 0x36, 0x3e, 0xd2, 0x2a, 0x3f, 0x4d, 0xf0, 0xd4,
		0x60, 0xaf, 0x23, 0xa8, 0x0b, 0xbb, 0x01, 0x16, 0x3e, 0x08, 0x39, 0xed, 0x79, 0xe7, 0x01, 0x5d,
		0x53, 0x11, 0xdd, 0x6d, 0x17, 0x08, 0xea, 0xda, 0xc9, 0x71, 0x69, 0xb1, 0x70, 0xa6, 0x02, 0x81,
		0x0d, 0x26, 0xc2, 0x97, 0x4c, 0x65, 0x67, 0x19, 0x0a, 0x57, 0x32, 0x19, 0x1f, 0x53, 0xa4, 0xa6,
		0x9d, 0x89, 0xb0, 0x24, 0xd3, 0xaf, 0xb6, 0xb1, 0xd3, 0x6e, 0x77, 0xb7, 0xdb, 0xed, 0xfa, 0x76,
		0x6b, 0xbb, 0xbe, 0xdb, 0xe9, 0x34, 0xba, 0x8d, 0xce, 0x06, 0xbd, 0xed, 0xcd, 0x8c, 0x89, 0xc9,
		0x28, 0x85, 0x72, 0x17, 0x17, 0x2d, 0xae, 0x28, 0x8c, 0x17, 0x0f, 0x35, 0x57, 0x2c, 0xb4, 0x60,
		0x71, 0xd0, 0x6c, 0x8b, 0x7c, 0x65, 0xa5, 0x95, 0x32, 0xe3, 0xb5, 0xbe, 0x14, 0xc4, 0xf7, 0x88,
		0xd2, 0xb5, 0xf8, 0xa7, 0x2e, 0x00, 0xa6, 0x96, 0x87, 0x42, 0x28, 0x85, 0x50, 0x0a, 0xa1, 0x14,
		0x42, 0x29, 0x84, 0x52, 0x08, 0xa5, 0xca, 0x0b, 0xa5, 0x6c, 0xe9, 0x65, 0x9f, 0x29, 0x8f, 0x48,
		0xbf, 0x98, 0x46, 0x9e, 0x0f, 0x82, 0xba, 0x18, 0x75, 0x31, 0xea, 0x62, 0xd4, 0xc5, 0xa8, 0x8b,
		0x51, 0x17, 0xa3, 0x2e, 0xce, 0xaa, 0x8b, 0xa9, 0x94, 0x42, 0x16, 0xd3, 0xc4, 0xd3, 0x21, 0x50,
		0x0f, 0xa3, 0x1e, 0x46, 0x3d, 0x8c, 0x7a, 0x18, 0xf5, 0x30, 0xea, 0x61, 0xd4, 0xc3, 0x59, 0xf5,
		0x70, 0xe0, 0x29, 0x13, 0xba, 0x78, 0x61, 0x18, 0xd4, 0xc7, 0xa8, 0x8f, 0x51, 0x1f, 0xa3, 0x3e,
		0x46, 0x7d, 0x8c, 0xfa, 0x18, 0xf5, 0x71, 0x56, 0x7d, 0x1c, 0x25, 0xa1, 0x66, 0x66, 0x7c, 0xc7,
		0x8f, 0x86, 0x42, 0xbd, 0x8c, 0x7a, 0x19, 0xf5, 0x32, 0xea, 0x65, 0xd4, 0xcb, 0xa8, 0x97, 0x51,
		0x2f, 0x67, 0xd5, 0xcb, 0xc2, 0xd3, 0xb4, 0xa0, 0x3e, 0x9e, 0x0e, 0x81, 0x7a, 0x18, 0xf5, 0x30,
		0xea, 0x61, 0xd4, 0xc3, 0xa8, 0x87, 0x51, 0x0f, 0xa3, 0x1e, 0xce, 0xaa, 0x87, 0x0b, 0x5b, 0xc5,
		0x68, 0x0b, 0xa3, 0x0e, 0x46, 0x1d, 0x8c, 0x3a, 0x18, 0x75, 0x30, 0xea, 0x60, 0xd4, 0xc1, 0xb9,
		0x74, 0x70, 0xc2, 0x0d, 0x31, 0xd4, 0x0f, 0x06, 0x42, 0x9d, 0x8c, 0x3a, 0x19, 0x75, 0x32, 0xea,
		0x64, 0xd4, 0xc9, 0xa8, 0x93, 0x51, 0x27, 0x67, 0xd7, 0xc9, 0x3f, 0xb9, 0xb8, 0xe6, 0xb5, 0x58,
		0x0a, 0x2d, 0x8a, 0x6a, 0xe5, 0x07, 0x43, 0xa1, 0x5e, 0x46, 0xbd, 0x8c, 0x7a, 0x19, 0xf5, 0x32,
		0xea, 0x65, 0xd4, 0xcb, 0xa8, 0x97, 0x33, 0xe9, 0xe5, 0x70, 0x6c, 0xdc, 0x7a, 0x21, 0x25, 0x32,
		0xbf, 0x42, 0x5e, 0x18, 0x03, 0x35, 0x31, 0x6a, 0xe2, 0x52, 0x69, 0x62, 0xcd, 0x22, 0xaa, 0x99,
		0xf7, 0x53, 0x39, 0xd7, 0xc5, 0x7f, 0xf2, 0x89, 0x1c, 0xab, 0x72, 0xc2, 0x85, 0xa2, 0x9e, 0xe0,
		0x99, 0x33, 0xfa, 0x51, 0xa7, 0xa3, 0x4e, 0x47, 0x9d, 0xbe, 0xc9, 0x3a, 0x1d, 0x4b, 0xb2, 0x61,
		0x49, 0xb6, 0xf1, 0x13, 0x88, 0x44, 0x1b, 0xab, 0xc9, 0xf6, 0xc4, 0x58, 0x08, 0xcb, 0x10, 0x96,
		0x21, 0x41, 0x82, 0x04, 0x09, 0x82, 0x29, 0x04, 0x53, 0x48, 0x90, 0x64, 0xd6, 0xcc, 0xc5, 0xab,
		0xb2, 0x3d, 0x18, 0x05, 0xb5, 0x31, 0x6a, 0x63, 0xd4, 0xc6, 0xa8, 0x8d, 0x51, 0x1b, 0xa3, 0x36,
		0x46, 0x6d, 0x9c, 0x59, 0x1b, 0x17, 0xad, 0x05, 0xb3, 0x30, 0x06, 0x6a, 0x62, 0xd4, 0xc4, 0xa8,
		0x89, 0x51, 0x13, 0xa3, 0x26, 0x46, 0x4d, 0x8c, 0x9a, 0x38, 0xb3, 0x26, 0x36, 0x55, 0x09, 0xe6,
		0x89, 0xb1, 0x50, 0x33, 0xa3, 0x66, 0x46, 0xcd, 0x8c, 0x9a, 0x19, 0x35, 0x33, 0x6a, 0x66, 0xd4,
		0xcc, 0x99, 0x35, 0x73, 0xd1, 0x5a, 0x30, 0x0b, 0x63, 0xa0, 0x26, 0x46, 0x4d, 0x8c, 0x9a, 0x18,
		0x35, 0x31, 0x6a, 0x62, 0xd4, 0xc4, 0xa8, 0x89, 0x33, 0x6b, 0xe2, 0xe2, 0x96, 0x31, 0xda, 0xc3,
		0xa8, 0x85, 0x51, 0x0b, 0xa3, 0x16, 0x46, 0x2d, 0x8c, 0x5a, 0x18, 0xb5, 0x70, 0x3e, 0x2d, 0x6c,
		0xa6, 0x1e, 0xcc, 0xd2, 0x48, 0xa8, 0x95, 0x51, 0x2b, 0xa3, 0x56, 0x46, 0xad, 0x8c, 0x5a, 0x19,
		0xb5, 0x32, 0x6a, 0xe5, 0x15, 0xbf, 0xb9, 0xe2, 0x9e, 0xca, 0x9e, 0xec, 0x96, 0x51, 0xab, 0x2f,
		0x27, 0xb7, 0x89, 0x98, 0x4a, 0x32, 0x5e, 0x4b, 0x12, 0x66, 0x55, 0xed, 0x85, 0x93, 0xd9, 0x72,
		0x26, 0xb1, 0xad, 0xf6, 0xca, 0xaf, 0x56, 0x7c, 0xe5, 0xfb, 0x9c, 0x0b, 0x9d, 0xbe, 0x81, 0x4c,
		0x27, 0xb7, 0xaa, 0xbc, 0x21, 0x8d, 0x48, 0x4c, 0xf4, 0x70, 0x7c, 0xf7, 0x5b, 0x22, 0xa6, 0xdc,
		0x4b, 0x41, 0x4b, 0x8d, 0x8d, 0xd5, 0x49, 0x40, 0x3c, 0xaa, 0xb6, 0x9e, 0xfa, 0xb8, 0xa5, 0x34,
		0xd1, 0x74, 0x6b, 0xaa, 0x76, 0xb2, 0x00, 0xaa, 0xaa, 0xd2, 0x32, 0xf1, 0x34, 0x9f, 0x2a, 0xae,
		0xe3, 0xd9, 0x88, 0x3f, 0x3e, 0xce, 0xc6, 0x7a, 0x63, 0xe6, 0xfd, 0xad, 0xb0, 0x5d, 0xab, 0x5e,
		0x9c, 0xac, 0xfc, 0xc2, 0xee, 0x75, 0x6d, 0x9c, 0xac, 0xf8, 0xbc, 0x19, 0xa5, 0x60, 0x66, 0xc0,
		0x98, 0x07, 0x28, 0xe6, 0x06, 0x88, 0x79, 0x81, 0x61, 0x61, 0x40, 0x58, 0x18, 0x08, 0x16, 0x01,
		0x80, 0x66, 0x45, 0x63, 0x66, 0xa0, 0x37, 0x5f, 0xad, 0xbe, 0x10, 0x21, 0x25, 0x3c, 0xcb, 0x7a,
		0x4d, 0x37, 0x5f, 0xa3, 0x01, 0x5c, 0xba, 0x17, 0x4f, 0x5d, 0x5e, 0x9f, 0x94, 0x7f, 0x8f, 0x4a,
		0xb0, 0xb8, 0x12, 0x34, 0x22, 0xea, 0x7d, 0xaa, 0x3c, 0xc9, 0xe2, 0x4c, 0x3a, 0x72, 0x7e, 0xfa,
		0x16, 0x2f, 0x46, 0xd1, 0x8f, 0xa2, 0xdf, 0xa9, 0xe8, 0x57, 0x5a, 0x32, 0x3e, 0xc8, 0x23, 0xf9,
		0x77, 0x1c, 0x42, 0x29, 0xca, 0x49, 0x3f, 0xa4, 0x7e, 0xf6, 0xb3, 0x35, 0xbb, 0x70, 0xc5, 0xf7,
		0x78, 0x40, 0x03, 0x92, 0x84, 0xe9, 0x7a, 0x8e, 0xb7, 0x03, 0x1e, 0x47, 0x3c, 0x8e, 0x65, 0x43,
		0x62, 0x46, 0xce, 0x23, 0x0b, 0x18, 0xf7, 0xe9, 0x4d, 0xf6, 0xf3, 0x38, 0xbb, 0x10, 0x0f, 0x16,
		0x1e, 0x2c, 0xa7, 0x07, 0x2b, 0x61, 0x5c, 0xb7, 0x9a, 0x39, 0xce, 0xd5, 0x76, 0x86, 0x4b, 0xf2,
		0x11, 0xd6, 0x39, 0x98, 0xf9, 0x22, 0x04, 0x75, 0x41, 0xf6, 0xb4, 0x28, 0x21, 0x6d, 0x82, 0x1a,
		0xcd, 0x41, 0x40, 0x17, 0x22, 0x9e, 0x4d, 0xbd, 0xb2, 0x76, 0x73, 0xb7, 0xbd, 0xdb, 0xdd, 0x6e,
		0xee, 0x76, 0xd6, 0xf8, 0xee, 0x2c, 0xd1, 0xbc, 0x57, 0x48, 0x04, 0x20, 0x11, 0xf0, 0xea, 0x89,
		0x80, 0x49, 0xd5, 0xdb, 0xe1, 0x54, 0x0f, 0x64, 0x04, 0x47, 0x8b, 0x17, 0x23, 0x40, 0x42, 0x80,
		0xe4, 0x14, 0x20, 0xe5, 0xab, 0x69, 0x9b, 0xc3, 0xbd, 0x5f, 0xb4, 0x86, 0x2d, 0xa2, 0x2c, 0x44,
		0x59, 0xbf, 0x7d, 0x65, 0xe6, 0xdc, 0xf9, 0x88, 0xb7, 0x10, 0x6f, 0x21, 0xde, 0xda, 0x68, 0xbc,
		0x25, 0x06, 0xcc, 0x23, 0x61, 0x0e, 0xac, 0x35, 0xbd, 0x10, 0x71, 0x16, 0xe2, 0xac, 0x92, 0x31,
		0xbc, 0x28, 0xf2, 0x51, 0xe4, 0x97, 0x5a, 0xe4, 0x8b, 0xb8, 0x4f, 0xbc, 0x9f, 0xb5, 0x48, 0xf8,
		0x79, 0x8c, 0xec, 0x07, 0x97, 0x67, 0xf7, 0x0b, 0xa6, 0x2f, 0x15, 0xd5, 0x06, 0xaa, 0x8d, 0xb2,
		0xa9, 0x0d, 0x23, 0x87, 0x33, 0x22, 0x9c, 0x0c, 0xe8, 0xf4, 0x5d, 0x67, 0x3c, 0x99, 0x0b, 0xd7,
		0xe2, 0xf1, 0xc2, 0xe3, 0x85, 0xa8, 0x0c, 0x51, 0x19, 0xa2, 0x32, 0x28, 0xa8, 0x2c, 0xd2, 0x39,
		0x82, 0xdd, 0xc7, 0x17, 0xa1, 0xa8, 0x47, 0x51, 0xef, 0x54, 0xd4, 0x27, 0x8c, 0xeb, 0x46, 0x37,
		0x87, 0xa4, 0xef, 0xa2, 0x8f, 0xe2, 0xe1, 0xe5, 0xe8, 0xa3, 0xc8, 0xfd, 0xca, 0xba, 0x9d, 0x4e,
		0xeb, 0xf5, 0x3a, 0x25, 0x8c, 0x68, 0x9c, 0x69, 0x92, 0x57, 0x46, 0x95, 0x93, 0x5e, 0x85, 0x3a,
		0x07, 0x75, 0x8e, 0x53, 0x9d, 0x03, 0x23, 0xca, 0x7e, 0x0c, 0x71, 0x6b, 0x4a, 0x13, 0x9d, 0xa8,
		0xec, 0x07, 0x6b, 0xf1, 0x62, 0x3c, 0x5f, 0x78, 0xbe, 0x72, 0x9c, 0xaf, 0x53, 0xc2, 0x7d, 0xa2,
		0x85, 0xbc, 0x1d, 0x6f, 0x7c, 0xeb, 0x67, 0x92, 0xf2, 0x24, 0x9a, 0x9a, 0x74, 0x79, 0x0e, 0x66,
		0x3b, 0xc3, 0x35, 0x87, 0x3c, 0x89, 0xc6, 0x37, 0x79, 0x87, 0x54, 0x01, 0x52, 0x05, 0xaf, 0x9e,
		0x2a, 0xd0, 0x31, 0xcb, 0x91, 0xc9, 0x95, 0x5e, 0x95, 0xdd, 0x5d, 0x23, 0xbc, 0xda, 0x28, 0x24,
		0xbc, 0xa6, 0x6f, 0x63, 0xaa, 0xf6, 0x2e, 0x7b, 0xc7, 0x07, 0x3f, 0xea, 0x5f, 0x77, 0x1a, 0xf5,
		0x7a, 0x49, 0x94, 0xd4, 0xf8, 0xe1, 0x5e, 0xa5, 0x9a, 0x4a, 0x1f, 0x1c, 0x1c, 0x10, 0x64, 0x3e,
		0xe5, 0x9a, 0xe9, 0x5b, 0x49, 0x83, 0x3c, 0x4a, 0x27, 0x83, 0xc9, 0x58, 0x3d, 0x9e, 0x4e, 0xf5,
		0x81, 0x28, 0x9a, 0xbf, 0xba, 0x59, 0x7a, 0x62, 0x2e, 0xff, 0xdb, 0x3b, 0xbc, 0xc8, 0xba, 0xe0,
		0xa9, 0xa9, 0xeb, 0xb4, 0x31, 0xf9, 0x83, 0x7b, 0xae, 0x7f, 0xdd, 0x1d, 0x9f, 0x72, 0x17, 0x8c,
		0x82, 0xa1, 0xdb, 0x6d, 0x82, 0xba, 0xdd, 0x9d, 0x9d, 0xfd, 0x1d, 0x30, 0xb7, 0xbb, 0xff, 0xf9,
		0xbf, 0x90, 0x5e, 0x6d, 0xbe, 0x8d, 0x6b, 0xab, 0x63, 0xbd, 0x43, 0x0b, 0x54, 0x67, 0x11, 0xac,
		0xf7, 0xd0, 0x60, 0x7c, 0x15, 0xda, 0x9c, 0x68, 0x73, 0x6e, 0xbc, 0xcd, 0x09, 0x4e, 0xfd, 0xcf,
		0x6b, 0x72, 0xd5, 0x32, 0x1c, 0xb2, 0x0d, 0x80, 0x00, 0x8c, 0x70, 0x52, 0x2b, 0x74, 0xf3, 0x26,
		0x1e, 0xa2, 0xd8, 0xc3, 0x2c, 0x3d, 0x54, 0x2c, 0x59, 0x44, 0xe4, 0xed, 0xf1, 0xc5, 0xc1, 0xe7,
		0xea, 0x3a, 0x8a, 0x37, 0x9a, 0x7a, 0x0c, 0x16, 0x43, 0xbe, 0x7d, 0x5f, 0x78, 0xea, 0x23, 0xe9,
		0x87, 0xf4, 0xc2, 0xd3, 0xb4, 0xd3, 0xf1, 0x1b, 0x47, 0xd7, 0xfe, 0x99, 0xe8, 0x43, 0x7e, 0xa4,
		0x90, 0xc4, 0x3e, 0xe4, 0xfb, 0x1f, 0x0a, 0xa5, 0x7b, 0x04, 0xf4, 0x23, 0xc4, 0x3e, 0x3f, 0xd4,
		0x43, 0x2a, 0x4f, 0x84, 0x88, 0x9b, 0x90, 0x1f, 0x84, 0x84, 0xc9, 0xe1, 0x49, 0x0f, 0xf2, 0x13,
		0x28, 0xdf, 0x63, 0x90, 0xef, 0x7f, 0x24, 0x98, 0x47, 0x0f, 0x4f, 0x21, 0x3f, 0x42, 0x34, 0x0a,
		0x21, 0xdf, 0xbe, 0x18, 0x9f, 0x64, 0xd0, 0x87, 0xd8, 0x57, 0xa0, 0x17, 0x60, 0x04, 0xfc, 0xfe,
		0xa3, 0x38, 0x54, 0x90, 0xef, 0x9f, 0x29, 0x9f, 0x83, 0x17, 0xa1, 0x67, 0x23, 0x2a, 0xf7, 0x75,
		0x04, 0x1a, 0x55, 0x48, 0x11, 0xff, 0xc5, 0x24, 0x0d, 0xa9, 0x52, 0xbd, 0x66, 0x0f, 0xf8, 0xa3,
		0x68, 0x2a, 0x78, 0xa3, 0x7e, 0xda, 0x67, 0x1a, 0x34, 0xbc, 0x88, 0x7c, 0x75, 0xec, 0xc1, 0xb6,
		0x81, 0xfe, 0x6e, 0xee, 0xb6, 0x1a, 0xa0, 0x05, 0xac, 0x02, 0xae, 0x21, 0x18, 0x0f, 0x18, 0x67,
		0x7d, 0xc2, 0x41, 0x5b, 0x3d, 0x81, 0xc7, 0xe2, 0x13, 0xc6, 0x7f, 0x82, 0xe6, 0x03, 0x60, 0xab,
		0x08, 0xc5, 0xe2, 0xcb, 0x01, 0xe4, 0x07, 0xb8, 0xd9, 0xe9, 0x9e, 0x90, 0x18, 0x34, 0x5c, 0x92,
		0x74, 0x90, 0x84, 0x44, 0x36, 0x76, 0x9a, 0xa0, 0x4d, 0xff, 0x98, 0x48, 0x02, 0x5a, 0xa6, 0xc6,
		0x17, 0xd7, 0x4c, 0x7b, 0x43, 0xd0, 0x96, 0x9b, 0x8e, 0x4e, 0xa6, 0xa5, 0x2d, 0x20, 0x3f, 0x85,
		0xba, 0xe5, 0x1e, 0x6c, 0x03, 0x48, 0xec, 0xec, 0xd4, 0x9b, 0x9d, 0x4b, 0xf1, 0x93, 0xf2, 0x73,
		0xc6, 0x07, 0xc0, 0x29, 0xbd, 0x4f, 0xb1, 0xe0, 0xbd, 0xe1, 0xad, 0x1a, 0x6f, 0xac, 0x3f, 0x39,
		0x2b, 0x13, 0x7f, 0xdf, 0xfc, 0x53, 0x01, 0xa7, 0xef, 0xc7, 0x16, 0xc5, 0xc1, 0x0d, 0x7c, 0xce,
		0xf2, 0xe8, 0xeb, 0x05, 0xe8, 0x65, 0x90, 0x31, 0x70, 0x27, 0x10, 0xe8, 0x53, 0x30, 0x6c, 0x35,
		0x5b, 0x3d, 0x29, 0x6e, 0x6e, 0x21, 0x3f, 0x84, 0x96, 0xf5, 0xfa, 0x0e, 0x74, 0xe9, 0x7a, 0x16,
		0xf8, 0x11, 0xf9, 0x33, 0x56, 0x5a, 0x52, 0x02, 0xda, 0x36, 0xf2, 0xa8, 0x2a, 0x81, 0xde, 0x3e,
		0xe3, 0x09, 0x7c, 0x77, 0x16, 0xf7, 0x08, 0xec, 0xa8, 0x81, 0x51, 0xff, 0xdc, 0xf3, 0x4e, 0x89,
		0x77, 0x42, 0x6e, 0x61, 0xfb, 0x86, 0x62, 0x29, 0xe2, 0x03, 0xe1, 0xa9, 0x19, 0xaf, 0x7c, 0x20,
		0xae, 0x39, 0xfc, 0xa3, 0x4e, 0x48, 0xd8, 0x01, 0x6d, 0x70, 0x50, 0x4a, 0x77, 0xea, 0xcd, 0x06,
		0x68, 0x02, 0x21, 0x6c, 0xb1, 0xf8, 0x26, 0x5b, 0x60, 0xff, 0x46, 0x5a, 0xe0, 0x5f, 0x98, 0xd4,
		0x09, 0x6c, 0x0b, 0x5c, 0x0d, 0x81, 0x13, 0xe4, 0x52, 0x35, 0x5b, 0xb0, 0x03, 0x69, 0xa4, 0xc7,
		0xa9, 0xee, 0x85, 0x09, 0x68, 0x0c, 0x22, 0x62, 0xcd, 0x3c, 0x12, 0x7e, 0x1c, 0x12, 0xce, 0x29,
		0xe8, 0x0d, 0x35, 0x64, 0x71, 0xcc, 0xe6, 0x1d, 0x65, 0x81, 0x4b, 0xa8, 0xa3, 0x04, 0x36, 0x89,
		0x23, 0x03, 0x6f, 0x67, 0x7b, 0xfb, 0xa6, 0x09, 0x5a, 0x67, 0x27, 0x0a, 0xb4, 0xc1, 0x3d, 0x88,
		0x05, 0x87, 0x1e, 0xe4, 0x04, 0x5a, 0x43, 0x78, 0x24, 0xbe, 0x26, 0xf1, 0x5f, 0x3a, 0x9e, 0xe2,
		0x8d, 0x73, 0xe2, 0x33, 0x51, 0x06, 0xd6, 0xfc, 0x88, 0xf5, 0x61, 0xdb, 0x48, 0x83, 0xed, 0x7a,
		0x8b, 0xe8, 0x66, 0xd4, 0x2f, 0xc3, 0x6a, 0x7c, 0x3c, 0x3f, 0xea, 0x1d, 0x73, 0xd0, 0x31, 0x37,
		0x3e, 0x1b, 0x30, 0x4d, 0xc2, 0x9e, 0xb8, 0xa6, 0x32, 0x64, 0x1c, 0xb4, 0xf6, 0x56, 0x82, 0x53,
		0xfd, 0xe5, 0x12, 0xb6, 0xa3, 0xf5, 0x6c, 0x44, 0xe5, 0xc7, 0x90, 0x5c, 0x83, 0x0e, 0x3c, 0x68,
		0x36, 0x5a, 0x90, 0xef, 0x9f, 0x07, 0x04, 0xb4, 0x69, 0xa1, 0xd4, 0xf6, 0x05, 0x1b, 0x40, 0x0f,
		0x1f, 0x22, 0xb0, 0xc3, 0x87, 0x02, 0xa2, 0x74, 0x9a, 0xb8, 0x72, 0xf4, 0x15, 0xf4, 0x63, 0xc8,
		0xa0, 0xd1, 0x3d, 0x0d, 0xe4, 0x87, 0x84, 0xfb, 0x21, 0x2d, 0x85, 0x7b, 0xfb, 0xb3, 0x2f, 0x4b,
		0x90, 0xc5, 0x72, 0xf4, 0xe9, 0x00, 0xb4, 0x8c, 0x0a, 0x61, 0x07, 0xfa, 0x4e, 0xfd, 0xf2, 0x67,
		0xa0, 0xd7, 0x40, 0x13, 0xef, 0xe7, 0xa5, 0xb8, 0x18, 0xff, 0x03, 0xfc, 0x39, 0xe4, 0x09, 0x6c,
		0x6e, 0x7c, 0x2e, 0x9c, 0x4e, 0x89, 0x17, 0x42, 0x77, 0x84, 0x45, 0x31, 0x1d, 0x5c, 0x4a, 0xc2,
		0x55, 0x2c, 0x24, 0x68, 0xeb, 0x68, 0xe8, 0x0f, 0xa1, 0x87, 0x9e, 0x32, 0xe5, 0xc3, 0xf6, 0x72,
		0x2b, 0x16, 0x5f, 0x30, 0xd8, 0x71, 0xd8, 0x7d, 0x71, 0x33, 0xf3, 0x09, 0x97, 0x2a, 0xbf, 0xff,
		0x9c, 0x6a, 0xe0, 0x01, 0x82, 0x8c, 0x52, 0xda, 0x68, 0xed, 0xb6, 0xc1, 0x07, 0x50, 0xa8, 0x4b,
		0x3f, 0x22, 0xf0, 0x51, 0xed, 0x07, 0xd0, 0x71, 0x8e, 0x83, 0xdd, 0xdd, 0x9d, 0x16, 0xf4, 0x12,
		0x05, 0xe5, 0x89, 0x67, 0xf6, 0x98, 0xf2, 0xc4, 0xf1, 0xc5, 0x09, 0xf4, 0xb8, 0x89, 0xa5, 0xb8,
		0xec, 0x03, 0xe8, 0x71, 0xd9, 0x7f, 0x87, 0x21, 0xe8, 0x24, 0x86, 0xfe, 0x20, 0x8e, 0x45, 0xc8,
		0xbc, 0x5b, 0xe2, 0x79, 0x22, 0xe1, 0x1a, 0x78, 0x1a, 0x83, 0xef, 0xf3, 0xaf, 0xb0, 0x1d, 0xc6,
		0xc3, 0xdb, 0x98, 0x4a, 0x0f, 0x7e, 0x28, 0x05, 0xd1, 0xd1, 0x17, 0x8f, 0x1d, 0x72, 0xbf, 0xa7,
		0x4b, 0x10, 0xdb, 0x52, 0x0a, 0x1b, 0x90, 0x8c, 0x98, 0xc7, 0xce, 0x26, 0x0f, 0x74, 0x08, 0xbe,
		0x7c, 0x89, 0x8e, 0x80, 0xe7, 0xc3, 0x2c, 0x96, 0x83, 0x6a, 0x00, 0x5f, 0x8a, 0xbe, 0x80, 0x9d,
		0xa4, 0x3e, 0x09, 0xc4, 0x03, 0x8d, 0xd8, 0x65, 0xab, 0xde, 0x3a, 0x3f, 0xb8, 0x84, 0x1f, 0xec,
		0x72, 0x20, 0x74, 0xa3, 0xd1, 0x93, 0x22, 0x60, 0xb0, 0xbd, 0x34, 0xb1, 0xe0, 0x5d, 0xd8, 0x8c,
		0x1b, 0xd1, 0xd1, 0x45, 0xd2, 0x2f, 0x45, 0x3c, 0xa4, 0xaf, 0x40, 0x8b, 0xd8, 0x51, 0x6b, 0xbb,
		0x14, 0xb5, 0x96, 0x52, 0xe3, 0x0f, 0x74, 0xfa, 0x42, 0x13, 0xba, 0x0d, 0x7e, 0xd3, 0xec, 0x0c,
		0x13, 0xae, 0x3f, 0x49, 0x91, 0xc4, 0xe0, 0x63, 0xa4, 0xc6, 0x7b, 0x6a, 0x48, 0x89, 0x5f, 0x82,
		0xd8, 0x73, 0xda, 0x00, 0xee, 0xdb, 0x80, 0x1d, 0x1b, 0x72, 0x24, 0xe4, 0x35, 0x91, 0x3e, 0xf8,
		0x13, 0xd1, 0x23, 0x7a, 0x58, 0xa6, 0xd4, 0xc3, 0x32, 0x78, 0x91, 0xfb, 0x0a, 0x76, 0xa1, 0x13,
		0xe0, 0x69, 0x62, 0xfe, 0xa8, 0xbf, 0xaf, 0xd8, 0x31, 0x07, 0x9e, 0x0c, 0xd3, 0x68, 0xc3, 0x76,
		0xc9, 0x4c, 0x63, 0xcd, 0x5b, 0x1f, 0x55, 0x44, 0x3c, 0xd0, 0x82, 0x96, 0x01, 0x87, 0x80, 0x54,
		0x0f, 0xa9, 0xe4, 0x54, 0xc3, 0x5f, 0x89, 0x18, 0x78, 0x61, 0x3e, 0x1f, 0xb6, 0xf7, 0x88, 0xc2,
		0xce, 0x0e, 0xd3, 0xc0, 0x5f, 0xff, 0x68, 0x92, 0x13, 0x06, 0xbb, 0xb6, 0xa3, 0x62, 0x37, 0x97,
		0xe2, 0x48, 0x24, 0xb0, 0x93, 0xc1, 0x74, 0x5c, 0x86, 0x34, 0xb0, 0x03, 0x0d, 0xdb, 0x27, 0xe4,
		0x69, 0x1a, 0x32, 0x75, 0x4a, 0x35, 0x39, 0x39, 0x3b, 0xeb, 0x81, 0x4f, 0x5c, 0x8d, 0x81, 0x17,
		0x06, 0x98, 0x15, 0x2c, 0xe9, 0xb4, 0x61, 0x77, 0x7a, 0xe0, 0x67, 0x7e, 0x02, 0xbb, 0x90, 0xb4,
		0xa6, 0x32, 0xa4, 0x64, 0x44, 0xe1, 0x97, 0x57, 0x2a, 0x47, 0x29, 0xa2, 0xa9, 0xc0, 0xed, 0x9e,
		0xc2, 0x36, 0x24, 0x92, 0x50, 0xc3, 0x2e, 0x07, 0x4c, 0x82, 0x90, 0xf0, 0xb1, 0x8c, 0x02, 0x6d,
		0x59, 0x8f, 0x1a, 0x0d, 0xe0, 0x1e, 0x89, 0x18, 0xb6, 0x57, 0x68, 0xa8, 0x14, 0x2b, 0x85, 0x7f,
		0xee, 0x38, 0x06, 0x1f, 0x03, 0x71, 0x0c, 0x3b, 0x06, 0xc2, 0x57, 0x75, 0xf8, 0x09, 0xaa, 0x69,
		0x1d, 0x25, 0xd0, 0x74, 0x2b, 0xf1, 0x99, 0x38, 0xdd, 0xff, 0x08, 0xbd, 0xc1, 0xd4, 0x65, 0x02,
		0xdd, 0x2d, 0x1a, 0x11, 0xef, 0x82, 0x7a, 0x1f, 0x05, 0xd7, 0x52, 0x84, 0x21, 0xf5, 0x8f, 0x8f,
		0x20, 0x3f, 0xcd, 0xf5, 0x35, 0xe1, 0x3d, 0xd8, 0x9d, 0x13, 0x45, 0xa0, 0xaf, 0x89, 0xa4, 0x27,
		0x42, 0xc4, 0x7d, 0xe0, 0xd9, 0xb6, 0x73, 0xf4, 0xd7, 0x81, 0x5f, 0x69, 0x05, 0x78, 0x17, 0x33,
		0x16, 0x7c, 0x09, 0x58, 0xda, 0x74, 0x1b, 0x7e, 0xff, 0xb2, 0x1d, 0xf0, 0xfd, 0xcb, 0x4a, 0x50,
		0xd0, 0x60, 0x7c, 0x26, 0x8e, 0x24, 0x89, 0xe8, 0x39, 0x0d, 0x09, 0xe8, 0x7a, 0xf1, 0x9e, 0x88,
		0x62, 0xa1, 0x98, 0xa6, 0xd0, 0xcb, 0xe0, 0x44, 0xb1, 0x07, 0xbc, 0x79, 0x42, 0x00, 0xda, 0xdb,
		0x05, 0x1e, 0x0b, 0x0e, 0x76, 0x77, 0x77, 0x40, 0x33, 0x1d, 0xd4, 0x13, 0xc0, 0xd3, 0x0c, 0x98,
		0x82, 0x1d, 0x35, 0xea, 0x91, 0x7e, 0x48, 0xef, 0x39, 0xe4, 0xf3, 0xa0, 0x07, 0x3c, 0xa9, 0xeb,
		0xa6, 0xd9, 0x89, 0x42, 0xd0, 0x4b, 0x12, 0xc3, 0x76, 0xc2, 0x07, 0xf2, 0x20, 0x2c, 0x41, 0xa2,
		0xe3, 0x34, 0x61, 0x1e, 0x78, 0x23, 0x91, 0x01, 0x1b, 0x90, 0x3e, 0x9b, 0x54, 0xab, 0x03, 0x2e,
		0x69, 0x17, 0x92, 0xa1, 0x3e, 0xc0, 0xae, 0xb6, 0x12, 0x10, 0x05, 0x3b, 0xb5, 0x0e, 0xfa, 0x03,
		0x4c, 0xbd, 0x8d, 0xed, 0xb4, 0x53, 0xe1, 0x07, 0xd8, 0x31, 0x05, 0x71, 0x1c, 0x97, 0xa0, 0x2c,
		0x2e, 0xf0, 0xc0, 0xb3, 0x58, 0x8a, 0xf8, 0x23, 0x0f, 0x15, 0xfc, 0x70, 0x82, 0x32, 0xb4, 0x30,
		0x9b, 0x14, 0x70, 0xfc, 0x74, 0x70, 0xb8, 0xff, 0x79, 0x1f, 0x74, 0x9a, 0x04, 0x51, 0xcc, 0x3b,
		0xbe, 0x38, 0xf8, 0x0c, 0xda, 0xc4, 0x8b, 0x43, 0xa9, 0x60, 0xb7, 0x27, 0x24, 0x5c, 0xc5, 0xff,
		0x06, 0x2e, 0xa1, 0x58, 0x5c, 0x82, 0x84, 0x2e, 0x8f, 0x4b, 0xe8, 0xad, 0xbe, 0x4a, 0x53, 0xb1,
		0x6a, 0xa6, 0x28, 0xe0, 0x33, 0x06, 0x23, 0xe8, 0x3d, 0x51, 0xc6, 0xe8, 0xa3, 0x04, 0xed, 0xd7,
		0x46, 0xad, 0x2e, 0xf0, 0x40, 0x15, 0xd0, 0xce, 0x08, 0xe1, 0x91, 0x2f, 0x54, 0x2a, 0x26, 0x78,
		0x03, 0xb6, 0x71, 0x1a, 0x97, 0xa1, 0x97, 0x70, 0x39, 0xc2, 0x7a, 0xff, 0x06, 0xde, 0x20, 0x55,
		0x82, 0x6f, 0xc0, 0xbb, 0xaf, 0xd8, 0x59, 0x52, 0x06, 0x22, 0xb6, 0x0c, 0x06, 0xe9, 0x19, 0xe8,
		0x1a, 0xb8, 0x25, 0x28, 0xc2, 0xc8, 0x82, 0xde, 0x35, 0xf4, 0xa0, 0x1a, 0x3f, 0x54, 0xd7, 0x25,
		0xe8, 0x4b, 0xf6, 0x97, 0x24, 0x71, 0x4c, 0x65, 0x89, 0x0a, 0xd6, 0x48, 0x4a, 0xbc, 0xe1, 0xc1,
		0xc5, 0x09, 0xf0, 0x0a, 0x67, 0xc7, 0xb0, 0xab, 0x8d, 0x0f, 0x59, 0x4c, 0x65, 0x48, 0x78, 0x13,
		0xbc, 0xc2, 0x38, 0x38, 0x06, 0xdd, 0x06, 0x28, 0x14, 0x1e, 0x09, 0x2f, 0x49, 0x08, 0x3b, 0x44,
		0xeb, 0x56, 0x32, 0xe0, 0x7e, 0xd3, 0x58, 0x8a, 0xf8, 0xc3, 0x5f, 0xfb, 0x71, 0xf3, 0x14, 0x78,
		0x45, 0xaa, 0x59, 0xec, 0xe2, 0x05, 0x95, 0x23, 0x06, 0xbb, 0xfa, 0xe2, 0x24, 0x88, 0xff, 0x4f,
		0xee, 0x95, 0x24, 0x8c, 0x7f, 0xd2, 0xa8, 0xe2, 0x94, 0x78, 0x27, 0xd0, 0x4b, 0x53, 0x05, 0xbe,
		0x0f, 0xbb, 0x33, 0x42, 0x3f, 0xfc, 0x42, 0x3d, 0x4d, 0x2e, 0x34, 0x91, 0x65, 0x48, 0x95, 0xef,
		0xfe, 0x75, 0xba, 0x0f, 0xda, 0xff, 0x35, 0x8a, 0xae, 0x89, 0xa4, 0x53, 0x7a, 0xf6, 0x33, 0x03,
		0xed, 0x44, 0x8a, 0x98, 0x00, 0xde, 0x7e, 0xfe, 0x5e, 0x8b, 0xa4, 0x55, 0x7c, 0x3d, 0xc1, 0x39,
		0xf5, 0xc0, 0xab, 0xf7, 0x7d, 0xe8, 0x55, 0x9f, 0x60, 0xd7, 0xd3, 0x83, 0x9f, 0x89, 0x20, 0x63,
		0xd8, 0xca, 0xa2, 0x1f, 0xb5, 0xb6, 0xeb, 0x31, 0x91, 0x1f, 0x87, 0xb0, 0xbd, 0xab, 0xf7, 0xe2,
		0xe9, 0xb4, 0x77, 0x0c, 0x5a, 0x53, 0x04, 0x25, 0x68, 0x53, 0xfd, 0xb8, 0xf4, 0x6a, 0x19, 0x62,
		0xa3, 0x42, 0xc6, 0xe9, 0x00, 0x7a, 0xa9, 0xeb, 0xa9, 0x4b, 0xe0, 0x44, 0x0c, 0x98, 0x47, 0xc2,
		0x12, 0x74, 0x43, 0x3f, 0x27, 0x3e, 0x13, 0xc0, 0x7b, 0x3b, 0x34, 0x3a, 0x25, 0x41, 0x86, 0xa0,
		0x15, 0xb9, 0x92, 0xa0, 0xdb, 0xc7, 0x79, 0x9e, 0x3e, 0x8c, 0x92, 0xb0, 0x1c, 0xfd, 0x9e, 0x3f,
		0x46, 0x5a, 0x95, 0xc3, 0x8f, 0xaf, 0xc0, 0xa7, 0xe9, 0x05, 0xb5, 0x81, 0x2a, 0x57, 0xe0, 0x5d,
		0x09, 0x3c, 0x66, 0x91, 0xf0, 0x69, 0x04, 0xbb, 0x8b, 0x38, 0xf0, 0xd0, 0x41, 0x42, 0xe0, 0x87,
		0x3e, 0xf6, 0x04, 0xe3, 0xfa, 0x52, 0xa4, 0xff, 0x5c, 0x50, 0xc9, 0x60, 0x47, 0x41, 0x06, 0x44,
		0x69, 0xf0, 0xcd, 0x08, 0xfd, 0x51, 0xff, 0xd2, 0x8f, 0x4a, 0xc0, 0x3f, 0xb7, 0x88, 0x7f, 0x42,
		0x40, 0x97, 0x93, 0xee, 0x4b, 0xe6, 0x0f, 0x40, 0x3b, 0xcb, 0xfa, 0x4c, 0x43, 0xcf, 0xd0, 0x3b,
		0x4d, 0x42, 0xcd, 0x42, 0xc6, 0x7f, 0xc2, 0x2f, 0x65, 0x37, 0xad, 0xb1, 0x7e, 0x1c, 0xef, 0xfb,
		0xbe, 0xa4, 0xf0, 0x13, 0x71, 0x81, 0x73, 0xcf, 0x1c, 0x78, 0xa3, 0xa9, 0xa1, 0x88, 0x68, 0xcc,
		0x09, 0xfc, 0x1a, 0x76, 0x4d, 0xe8, 0x25, 0xbd, 0x35, 0xec, 0x42, 0x07, 0xdb, 0xf5, 0x16, 0xd1,
		0xdd, 0xf6, 0xcf, 0x12, 0xe4, 0xa5, 0x37, 0x81, 0xf7, 0xd0, 0x67, 0xca, 0xe7, 0xa0, 0xf5, 0x42,
		0x44, 0x7d, 0x46, 0x4e, 0x09, 0x0b, 0xe1, 0x97, 0x00, 0xf6, 0x55, 0x0b, 0x7a, 0x85, 0xab, 0x66,
		0x09, 0xfa, 0xe5, 0x4f, 0xc9, 0x1a, 0xf0, 0x4d, 0x46, 0x27, 0xd1, 0x2c, 0x9f, 0x99, 0x77, 0x09,
		0x9c, 0xd1, 0xf4, 0x3d, 0xd0, 0x6c, 0xe0, 0xb0, 0xd5, 0x6c, 0x7d, 0x22, 0x9a, 0xfe, 0xa4, 0x34,
		0x86, 0x4d, 0x15, 0xc4, 0x42, 0x95, 0x8a, 0x96, 0x2d, 0xc5, 0xc3, 0x94, 0xc3, 0x6b, 0x31, 0x6a,
		0x81, 0xf6, 0x48, 0x52, 0xe5, 0xc1, 0x4e, 0x7b, 0x93, 0x04, 0xb8, 0x71, 0x1d, 0xb0, 0xbe, 0xa4,
		0x25, 0xf0, 0xb3, 0x78, 0x22, 0x08, 0x28, 0xec, 0xa4, 0x37, 0xd5, 0x38, 0x3a, 0x38, 0x29, 0x43,
		0x40, 0x33, 0xe8, 0xe4, 0x7a, 0x16, 0xe9, 0x32, 0xf4, 0x79, 0x6d, 0x41, 0xaf, 0x47, 0x1e, 0x4b,
		0x31, 0xe1, 0x94, 0xe3, 0x90, 0xde, 0x08, 0xd8, 0x3d, 0x0a, 0x1b, 0xcd, 0xd3, 0x38, 0xbe, 0xb8,
		0x66, 0xda, 0x1b, 0xc2, 0x0e, 0x02, 0x96, 0x51, 0x8f, 0xf8, 0xb0, 0xbd, 0xd9, 0xb0, 0x79, 0xa7,
		0x30, 0x8a, 0x4b, 0x81, 0xbe, 0x3f, 0xfb, 0x45, 0xea, 0xaa, 0xe7, 0xba, 0xf2, 0xea, 0x8d, 0x83,
		0xf7, 0x95, 0xef, 0x3d, 0x2d, 0x08, 0x3d, 0x16, 0x11, 0x79, 0x9b, 0xaf, 0x20, 0xde, 0x1a, 0x6e,
		0x37, 0x8f, 0x63, 0xc6, 0xfd, 0x6d, 0xce, 0x77, 0xdd, 0x85, 0xa7, 0x69, 0xa7, 0xe3, 0x37, 0x8e,
		0xae, 0xfd, 0x33, 0xd1, 0x87, 0x70, 0xeb, 0x21, 0x89, 0x7d, 0x08, 0xf7, 0x39, 0x14, 0x4a, 0xe7,
		0x52, 0x0d, 0x6b, 0xd8, 0xb4, 0x3e, 0x4f, 0x83, 0x4f, 0x4e, 0x84, 0x88, 0x9b, 0x10, 0x6e, 0x98,
		0x84, 0xc9, 0xe1, 0x49, 0x0f, 0xc2, 0x9d, 0x2a, 0xdf, 0x63, 0x10, 0xee, 0x33, 0xad, 0x3d, 0x70,
		0x78, 0x0a, 0xe1, 0x56, 0xa3, 0x51, 0x08, 0xe1, 0x36, 0x45, 0xbe, 0x70, 0xae, 0x35, 0x1c, 0xa6,
		0x5c, 0x7c, 0xcd, 0x1a, 0xb6, 0x28, 0x90, 0xfb, 0x8c, 0xe2, 0x3c, 0x25, 0xa1, 0xdd, 0xdf, 0x27,
		0x53, 0x3e, 0x07, 0x23, 0x9a, 0x72, 0x37, 0x77, 0x5b, 0x07, 0x62, 0x15, 0xf1, 0x2c, 0x79, 0xac,
		0xd7, 0xec, 0x01, 0xb9, 0x65, 0x4d, 0x05, 0x6f, 0xe4, 0x6c, 0xd9, 0xb6, 0x06, 0xb5, 0x1a, 0xf9,
		0xea, 0xd8, 0x83, 0x81, 0xb5, 0xff, 0x6e, 0xee, 0xb6, 0x1a, 0x20, 0x04, 0x97, 0x02, 0x22, 0x61,
		0x19, 0x0f, 0x18, 0x67, 0x7d, 0xc2, 0x41, 0xa0, 0xeb, 0xc0, 0x63, 0x71, 0xbe, 0x6c, 0xc5, 0x35,
		0xd8, 0x85, 0x30, 0x44, 0xac, 0x62, 0xf1, 0xe5, 0x00, 0xc2, 0x8d, 0xde, 0xec, 0x74, 0x4f, 0x48,
		0x0c, 0x02, 0x0e, 0x48, 0x3a, 0x48, 0x42, 0x22, 0x1b, 0x3b, 0x4d, 0x10, 0x26, 0x60, 0x4c, 0x24,
		0x01, 0x21, 0xab, 0x72, 0xb3, 0xdc, 0x6b, 0xb0, 0x04, 0x74, 0x34, 0xcd, 0xae, 0x06, 0x71, 0xb7,
		0xea, 0x96, 0x7b, 0x30, 0x80, 0x76, 0x1a, 0xe0, 0xd9, 0x49, 0x1b, 0x0f, 0x9d, 0x33, 0x3e, 0x00,
		0x42, 0xb1, 0x7c, 0x8a, 0x05, 0xef, 0x0d, 0x6f, 0xd5, 0x78, 0x43, 0xfc, 0xc9, 0x19, 0x44, 0x5e,
		0xb3, 0xf9, 0xa7, 0x02, 0x42, 0x6b, 0x8e, 0x11, 0xed, 0xc1, 0x0d, 0x1c, 0xae, 0xe8, 0xe8, 0xeb,
		0x05, 0x88, 0xd7, 0x2a, 0x63, 0x20, 0xa4, 0x36, 0x88, 0x5d, 0x3a, 0x6c, 0x35, 0x5b, 0x3d, 0x29,
		0x6e, 0x6e, 0x21, 0xdc, 0xac, 0x96, 0xf5, 0xfa, 0x0e, 0x14, 0xa9, 0x75, 0x16, 0xf8, 0x11, 0xc9,
		0x1f, 0x4e, 0xe8, 0xfe, 0xa6, 0x3d, 0xaa, 0x00, 0xe9, 0xb1, 0x5c, 0x1d, 0x3d, 0xd7, 0x45, 0xc3,
		0x73, 0x8f, 0xc0, 0xf0, 0x22, 0xa6, 0xcd, 0xe3, 0xf2, 0x17, 0x00, 0x5d, 0x0f, 0x37, 0xb7, 0x58,
		0xdc, 0xa9, 0x48, 0xc8, 0xeb, 0x1a, 0xf6, 0x32, 0x09, 0x3b, 0x20, 0x00, 0xef, 0x34, 0xea, 0x0d,
		0x84, 0x21, 0x19, 0xb6, 0x58, 0x7c, 0x93, 0xaf, 0x41, 0xd7, 0x5a, 0x2c, 0xb4, 0xdc, 0x3d, 0x9f,
		0xd6, 0x00, 0xbe, 0x86, 0x40, 0x08, 0x45, 0xa9, 0x9a, 0x2d, 0x18, 0x8e, 0x6f, 0xe9, 0x71, 0xaa,
		0x7b, 0x61, 0x02, 0x42, 0xf7, 0x3e, 0x4c, 0x83, 0x02, 0x81, 0x6f, 0x59, 0x1c, 0xb3, 0xb4, 0x48,
		0x6c, 0x40, 0xf2, 0x14, 0x1b, 0x5f, 0x8b, 0x44, 0x38, 0x4a, 0x60, 0x18, 0xe7, 0x32, 0xf0, 0x76,
		0xb6, 0xb7, 0x73, 0xd5, 0x12, 0x76, 0x7f, 0xb3, 0x89, 0x02, 0x61, 0x90, 0x0d, 0x72, 0x35, 0x49,
		0x5a, 0x4f, 0x90, 0x01, 0x08, 0x09, 0x3b, 0x69, 0x38, 0xff, 0x97, 0x9e, 0xf5, 0x56, 0xcc, 0x59,
		0xa4, 0x71, 0x7d, 0x2c, 0xe3, 0x11, 0xeb, 0xc3, 0xc0, 0xe2, 0x93, 0xe4, 0xfd, 0x66, 0xd4, 0x87,
		0xf4, 0x76, 0x3f, 0x9e, 0x1f, 0xf5, 0x8e, 0x39, 0x08, 0x1f, 0xf9, 0xb4, 0xe5, 0x52, 0x4f, 0x5c,
		0x53, 0x19, 0x32, 0x0e, 0x42, 0x9b, 0xa5, 0x25, 0x07, 0xbf, 0x5c, 0xc2, 0x70, 0xec, 0xa4, 0x3d,
		0xec, 0x43, 0x72, 0x0d, 0xc2, 0x11, 0xd9, 0x6c, 0xb4, 0x20, 0xdc, 0x27, 0x0f, 0x08, 0x08, 0x68,
		0xab, 0xd4, 0x76, 0xee, 0x5a, 0xd7, 0x6b, 0x01, 0x89, 0x20, 0x22, 0x25, 0x66, 0x55, 0xf0, 0x8e,
		0xbe, 0x82, 0xb8, 0x5d, 0x19, 0x34, 0xba, 0xa7, 0x81, 0xcc, 0x5b, 0xde, 0x6b, 0x8d, 0xee, 0xb1,
		0xcf, 0xbe, 0x04, 0x14, 0x95, 0x7c, 0xf4, 0xe9, 0x00, 0x84, 0x4c, 0x08, 0x61, 0x04, 0xa4, 0x4d,
		0xfd, 0x77, 0x67, 0x20, 0xde, 0xa9, 0x26, 0xde, 0xcf, 0x4b, 0x71, 0x31, 0xfe, 0x07, 0xc8, 0xfd,
		0xca, 0x13, 0x18, 0x5c, 0xe2, 0x7d, 0xc9, 0x6a, 0xe2, 0x85, 0x50, 0x08, 0xfc, 0x28, 0xa6, 0x83,
		0x4b, 0x49, 0xb8, 0x8a, 0x85, 0x04, 0x81, 0xc2, 0x87, 0xfe, 0x10, 0x4a, 0x48, 0x15, 0x53, 0x3e,
		0x0c, 0x2f, 0x99, 0x62, 0xf1, 0x05, 0x83, 0x11, 0xff, 0xd7, 0x17, 0x37, 0x33, 0x5f, 0x13, 0xc8,
		0xbc, 0xc0, 0x73, 0xaa, 0x81, 0x04, 0xd0, 0x30, 0x4a, 0x69, 0xa3, 0xb5, 0xdb, 0x06, 0xe3, 0x38,
		0x55, 0x97, 0x7e, 0x44, 0xe0, 0xa0, 0xb0, 0x0f, 0x20, 0xe2, 0x7d, 0x06, 0xbb, 0xbb, 0x3b, 0x2d,
		0x28, 0x29, 0x8c, 0xf0, 0xe2, 0xeb, 0x3c, 0xa6, 0x3c, 0x71, 0x7c, 0x71, 0x02, 0xc5, 0x5f, 0xba,
		0x14, 0x0f, 0x78, 0x00, 0x25, 0x1e, 0xf0, 0xef, 0x5c, 0xe5, 0x40, 0xdd, 0xdf, 0x67, 0x7f, 0x10,
		0xc7, 0x22, 0x64, 0xde, 0x2d, 0xf1, 0x3c, 0x91, 0x70, 0x0d, 0x24, 0xbc, 0xd5, 0xf7, 0xf9, 0x57,
		0x18, 0x8e, 0xa8, 0xe1, 0x6d, 0x4c, 0xa5, 0x07, 0xc7, 0x85, 0x4a, 0x74, 0xf4, 0xc5, 0x63, 0x87,
		0xdc, 0xef, 0x69, 0x40, 0x3e, 0x6a, 0x50, 0x36, 0x05, 0x19, 0x31, 0x8f, 0x9d, 0x4d, 0x6e, 0xfc,
		0x10, 0x4c, 0x9a, 0xb1, 0x8e, 0x80, 0xc4, 0x37, 0x2f, 0x96, 0x43, 0x68, 0x00, 0x79, 0xb5, 0x7d,
		0x01, 0x23, 0x19, 0x6e, 0x12, 0xc0, 0x02, 0x02, 0x49, 0xca, 0x56, 0xbd, 0x75, 0x7e, 0x70, 0x09,
		0xc7, 0x69, 0x7d, 0x20, 0x74, 0xa3, 0xd1, 0x93, 0x22, 0x60, 0x30, 0xd8, 0xe8, 0x58, 0xf0, 0x2e,
		0x0c, 0x66, 0x84, 0xe8, 0xe8, 0x22, 0xe9, 0x83, 0x8a, 0x0b, 0xf2, 0x15, 0x08, 0xd1, 0x35, 0x6a,
		0x6d, 0x83, 0xaa, 0x41, 0x90, 0x1a, 0x13, 0x20, 0xc2, 0x5a, 0x9b, 0x50, 0x6c, 0xb4, 0x9b, 0x66,
		0x67, 0x98, 0x70, 0x9d, 0xb3, 0x4a, 0xfa, 0x9a, 0x62, 0x14, 0xc6, 0x7b, 0x61, 0x48, 0x89, 0x0f,
		0x28, 0xb6, 0x91, 0x36, 0x80, 0x70, 0xbb, 0x30, 0x7c, 0xbf, 0x47, 0x42, 0x5e, 0x13, 0xe9, 0x83,
		0xd9, 0xb1, 0x3d, 0xa2, 0x87, 0x10, 0x53, 0x34, 0x20, 0x79, 0xa7, 0xfa, 0x0a, 0x46, 0x42, 0x32,
		0x90, 0xb0, 0x7c, 0x7f, 0xd4, 0xdf, 0x57, 0xec, 0x98, 0x03, 0x09, 0x6e, 0x6e, 0xb4, 0x61, 0x50,
		0xcf, 0xd3, 0x58, 0xc6, 0xd6, 0x47, 0x15, 0x11, 0x0f, 0x84, 0x00, 0x63, 0x40, 0xa0, 0xcc, 0xac,
		0xd4, 0x34, 0x9c, 0x37, 0x1b, 0x03, 0x29, 0xf8, 0xe2, 0xc3, 0x60, 0xc3, 0x29, 0x8c, 0x68, 0x7c,
		0x0d, 0xe4, 0x75, 0x4e, 0xdb, 0x4e, 0xc2, 0xa8, 0xf5, 0xa3, 0xd8, 0xcd, 0xa5, 0x38, 0x12, 0x09,
		0x8c, 0xe0, 0x7b, 0x1d, 0x43, 0x0a, 0xbb, 0x3f, 0xd0, 0x30, 0x38, 0x6e, 0x4f, 0xd3, 0x90, 0xa9,
		0x53, 0xaa, 0xc9, 0xc9, 0xd9, 0x59, 0x0f, 0x4c, 0x62, 0x4e, 0x0c, 0x24, 0xa1, 0x70, 0x96, 0x58,
		0xdc, 0x69, 0xc3, 0xa8, 0x00, 0xcb, 0xcf, 0xfc, 0x04, 0x46, 0x41, 0x3d, 0x4d, 0x65, 0x48, 0xc9,
		0x88, 0xc2, 0x29, 0x3b, 0x00, 0x2b, 0x75, 0x7f, 0x2a, 0xc8, 0xba, 0xa7, 0x30, 0x80, 0x6c, 0x12,
		0x6a, 0x18, 0xe5, 0xd5, 0x48, 0x10, 0x12, 0x9e, 0xf6, 0x6c, 0x07, 0x81, 0x67, 0x1a, 0x0d, 0x20,
		0x8c, 0x6c, 0x0c, 0x83, 0xe5, 0x1e, 0x2a, 0xc5, 0x40, 0xf9, 0x0f, 0x8e, 0x63, 0x30, 0xbe, 0xcf,
		0x63, 0x18, 0xbe, 0x4f, 0x5f, 0xd5, 0xe1, 0x24, 0xe0, 0xa4, 0xf5, 0x05, 0x40, 0xd0, 0x59, 0xc4,
		0x67, 0xe2, 0x74, 0xff, 0x23, 0x94, 0x82, 0xeb, 0x97, 0x09, 0x14, 0x37, 0x4c, 0x44, 0xbc, 0x0b,
		0xea, 0x7d, 0x14, 0x5c, 0x4b, 0x11, 0x86, 0xd4, 0x3f, 0x3e, 0x82, 0x70, 0xd7, 0x93, 0x76, 0xf7,
		0x30, 0x9c, 0x1d, 0x81, 0xbe, 0x26, 0x92, 0x9e, 0x08, 0x11, 0xf7, 0x81, 0x64, 0x0d, 0xcd, 0x51,
		0x4c, 0x07, 0x4e, 0xe6, 0x33, 0x90, 0x6a, 0xfc, 0x2c, 0xf8, 0x12, 0xb0, 0xcb, 0xdb, 0x98, 0x02,
		0xaa, 0xc3, 0xbf, 0x03, 0xa6, 0x0e, 0x3f, 0xa0, 0x84, 0xc7, 0xf1, 0x9e, 0x3d, 0x92, 0x24, 0xa2,
		0xe7, 0x34, 0x24, 0x20, 0xea, 0x57, 0x7a, 0x22, 0x8a, 0x85, 0x62, 0x9a, 0x42, 0x49, 0x33, 0x8f,
		0x62, 0x0f, 0x48, 0xb1, 0xd5, 0x00, 0x04, 0x4b, 0x0f, 0x06, 0xd3, 0x0c, 0x76, 0x77, 0x77, 0x40,
		0x58, 0xb6, 0xd4, 0x13, 0x40, 0xc2, 0x4f, 0x99, 0x82, 0x11, 0x0d, 0xe5, 0x3d, 0xec, 0x1c, 0x7f,
		0x1e, 0xf4, 0x80, 0x04, 0xd1, 0xdf, 0x34, 0x3b, 0x51, 0x08, 0xe2, 0x15, 0xc7, 0x30, 0x9c, 0x75,
		0x81, 0x3c, 0x08, 0x01, 0x25, 0x7e, 0x4c, 0x13, 0xf0, 0x80, 0x14, 0x06, 0x1e, 0xb0, 0x01, 0xe9,
		0xb3, 0x49, 0x75, 0x14, 0x20, 0x12, 0x6c, 0x21, 0x28, 0xfd, 0x03, 0x8c, 0xec, 0xe7, 0x80, 0x28,
		0x18, 0xa9, 0x09, 0x50, 0x6e, 0x74, 0xea, 0xf5, 0x68, 0xa7, 0x9d, 0x2f, 0x3e, 0xc0, 0xf0, 0x31,
		0xc6, 0x71, 0x0c, 0xa8, 0xfc, 0x18, 0x90, 0x40, 0x8e, 0x58, 0x8a, 0xf8, 0x23, 0x87, 0xd1, 0x17,
		0x71, 0xe2, 0x5e, 0x84, 0x54, 0x8a, 0x7f, 0x52, 0xd0, 0xe7, 0xd3, 0xc1, 0xe1, 0xfe, 0xe7, 0x7d,
		0x10, 0x61, 0xb2, 0x44, 0x31, 0x0f, 0x4a, 0x47, 0x6f, 0x1a, 0x87, 0x52, 0xc1, 0x68, 0x77, 0x41,
		0xb8, 0x8a, 0xff, 0x0d, 0x44, 0x22, 0xb0, 0x18, 0x50, 0x00, 0xbd, 0xc7, 0x25, 0x94, 0x52, 0xf6,
		0xe0, 0x2a, 0x33, 0xcc, 0x04, 0x2d, 0x1c, 0xcb, 0x71, 0x04, 0xa5, 0x96, 0xf1, 0x58, 0xeb, 0x02,
		0x6a, 0x17, 0x30, 0x6a, 0x75, 0x81, 0x38, 0x9c, 0x41, 0x90, 0xb1, 0xc2, 0x23, 0x5f, 0xa8, 0x54,
		0x4c, 0xf0, 0x06, 0x0c, 0xa3, 0x26, 0x86, 0xd4, 0xab, 0x09, 0x56, 0xf8, 0xd9, 0xdf, 0x40, 0x1a,
		0xdc, 0x48, 0x30, 0x8d, 0x8f, 0xf6, 0x15, 0x3b, 0x4b, 0x20, 0x11, 0x5d, 0x90, 0x0c, 0x99, 0x33,
		0x10, 0xb5, 0xc6, 0x00, 0x15, 0xe5, 0x61, 0x41, 0xef, 0x1a, 0x8a, 0x13, 0xdc, 0x0f, 0xd5, 0x35,
		0xa0, 0xfa, 0xfa, 0x7f, 0x49, 0x12, 0xc7, 0x54, 0x02, 0x4c, 0x08, 0x97, 0x94, 0x78, 0xc3, 0x83,
		0x8b, 0x13, 0x20, 0x15, 0x38, 0x8e, 0x61, 0x54, 0x4b, 0x1c, 0xb2, 0x98, 0xca, 0x90, 0xf0, 0x26,
		0x18, 0x81, 0x7b, 0x70, 0x0c, 0xa2, 0xbc, 0x76, 0x28, 0x3c, 0x12, 0x5e, 0x92, 0x10, 0x46, 0x28,
		0xc4, 0xad, 0x64, 0x40, 0xfc, 0x34, 0x63, 0x2b, 0xf1, 0xc3, 0x5f, 0xfb, 0x71, 0xf3, 0x14, 0x48,
		0xe5, 0x85, 0x59, 0x0c, 0xcf, 0x05, 0x95, 0x23, 0x06, 0xa3, 0x1a, 0xcf, 0x24, 0xe8, 0xf3, 0x4f,
		0xee, 0x01, 0x0b, 0xfb, 0x9c, 0x14, 0xaa, 0x85, 0xd4, 0xe1, 0x33, 0xf0, 0x7d, 0x18, 0x95, 0x54,
		0xfb, 0xe1, 0x17, 0xea, 0x69, 0x72, 0xa1, 0x89, 0x84, 0x94, 0x7a, 0xd7, 0xfd, 0xeb, 0x74, 0x1f,
		0x04, 0x6f, 0x3f, 0x8a, 0xae, 0x89, 0xa4, 0x53, 0xfa, 0xeb, 0x33, 0x03, 0x41, 0x8a, 0x47, 0x4c,
		0x00, 0x69, 0x8f, 0x77, 0x2f, 0x85, 0xd3, 0xaa, 0x68, 0x9e, 0xe0, 0x9c, 0x7a, 0x60, 0xd4, 0xdd,
		0x3e, 0x94, 0xaa, 0x07, 0x30, 0xea, 0xb4, 0xc0, 0x89, 0x50, 0x95, 0x31, 0x0c, 0x61, 0xdb, 0x8f,
		0x5a, 0xdb, 0xf5, 0x98, 0xc8, 0xb1, 0x35, 0x09, 0x4b, 0x1c, 0x9c, 0xf6, 0x8e, 0x41, 0x48, 0xda,
		0x00, 0x50, 0xfb, 0xae, 0xc7, 0x25, 0xb1, 0x20, 0xc5, 0x26, 0x84, 0x8c, 0xd3, 0x01, 0x94, 0xd2,
		0x7e, 0x53, 0xaa, 0xf4, 0x44, 0x0c, 0x98, 0x47, 0x42, 0x40, 0xdd, 0xdd, 0xc0, 0x74, 0x29, 0x8d,
		0x05, 0x6f, 0x74, 0x80, 0x21, 0x1c, 0x18, 0x1d, 0xcc, 0x25, 0x88, 0xb6, 0x06, 0x9e, 0xa7, 0x0f,
		0xa3, 0x24, 0x84, 0xd5, 0x1f, 0xeb, 0x63, 0xa4, 0x15, 0x2c, 0x7f, 0x9f, 0x02, 0x93, 0xe6, 0x10,
		0xd4, 0x06, 0x0a, 0x66, 0xc0, 0x0a, 0x20, 0xa6, 0x3f, 0x12, 0x3e, 0x8d, 0x60, 0x74, 0x4b, 0x03,
		0x12, 0x5a, 0x43, 0x08, 0x9c, 0x10, 0xa0, 0x9e, 0x60, 0x5c, 0x5f, 0x8a, 0xf4, 0x9f, 0x0b, 0x2a,
		0x19, 0x8c, 0x68, 0xa0, 0x79, 0x33, 0x58, 0x20, 0x3c, 0xe9, 0xa5, 0x1f, 0x01, 0xe2, 0xf1, 0x5a,
		0xc4, 0x3f, 0x21, 0x20, 0xca, 0xea, 0xf5, 0x25, 0xf3, 0x07, 0x20, 0x48, 0xfe, 0x3e, 0xd3, 0x50,
		0x32, 0x1c, 0x4e, 0x93, 0x50, 0xb3, 0x90, 0xf1, 0x9f, 0x70, 0x4a, 0xa7, 0x4c, 0x6b, 0x41, 0x1e,
		0xc7, 0xfb, 0xbe, 0x2f, 0x29, 0x9c, 0x84, 0x22, 0x20, 0x1c, 0x1e, 0x07, 0x52, 0x78, 0x7d, 0x28,
		0x22, 0x1a, 0x73, 0x02, 0xa7, 0x66, 0x4a, 0x13, 0x4a, 0xa9, 0x42, 0x0d, 0x23, 0x11, 0x72, 0xbb,
		0xde, 0x22, 0xba, 0xdb, 0xfe, 0x09, 0x28, 0xff, 0xad, 0x09, 0xa4, 0x97, 0x1f, 0x53, 0x3e, 0x07,
		0x21, 0x57, 0x23, 0xea, 0x33, 0x72, 0x4a, 0x58, 0x08, 0xa7, 0xa4, 0x9a, 0xaf, 0x5a, 0x50, 0x2a,
		0x39, 0x34, 0x01, 0xf5, 0xed, 0x9b, 0x1a, 0xe1, 0x60, 0x9a, 0xc7, 0x4c, 0xbc, 0xd2, 0x9f, 0x99,
		0x77, 0x09, 0x84, 0x49, 0xf2, 0x3d, 0x10, 0xec, 0xcc, 0xb0, 0xd5, 0x6c, 0x7d, 0x22, 0x9a, 0xfe,
		0xa4, 0x34, 0x86, 0x61, 0x32, 0xc6, 0x42, 0x81, 0xa4, 0xbd, 0x40, 0xdd, 0x34, 0x2c, 0xd6, 0x76,
		0xd4, 0x02, 0xe1, 0x19, 0xa1, 0xca, 0x83, 0x91, 0x4e, 0x20, 0x09, 0x10, 0xe3, 0x2b, 0x60, 0x7d,
		0x49, 0x01, 0xf1, 0xc9, 0x9e, 0x08, 0x02, 0x0a, 0xa5, 0x0d, 0xe2, 0xd1, 0xc1, 0x09, 0xa4, 0x00,
		0x3b, 0x10, 0xc9, 0x7a, 0x2c, 0xd2, 0x90, 0xfa, 0xf1, 0xb4, 0xa0, 0xd4, 0x53, 0x8c, 0xa5, 0x98,
		0x70, 0x73, 0x71, 0x48, 0x6f, 0x04, 0x8c, 0x9e, 0x17, 0x8d, 0xe6, 0x69, 0x1c, 0x5f, 0x5c, 0x33,
		0xed, 0x0d, 0x61, 0x04, 0xab, 0xc9, 0xa8, 0x47, 0x7c, 0x18, 0xde, 0x30, 0x18, 0xbc, 0x41, 0x18,
		0xc5, 0xa0, 0x50, 0xe1, 0x67, 0x3f, 0x4f, 0xfd, 0xc7, 0x4c, 0x57, 0x5c, 0xbd, 0x31, 0x3b, 0xee,
		0xcb, 0xdf, 0xfa, 0xfd, 0x37, 0x5e, 0x78, 0xdb, 0xd5, 0xfd, 0x64, 0x10, 0x51, 0xae, 0xa9, 0x5f,
		0xdd, 0xab, 0x7c, 0x7b, 0x63, 0x66, 0x21, 0xe6, 0x2f, 0x7e, 0x4b, 0x78, 0x35, 0x16, 0xec, 0xb1,
		0x59, 0xff, 0x64, 0xf5, 0xf8, 0x0f, 0xd3, 0xdf, 0x95, 0x26, 0x9a, 0x56, 0x57, 0xdb, 0x17, 0xd5,
		0x03, 0xaa, 0x3c, 0xc9, 0x62, 0xcd, 0x04, 0x1f, 0xcf, 0xb1, 0xef, 0xfb, 0xaa, 0x72, 0xd9, 0x3b,
		0x3e, 0xa8, 0x6c, 0x55, 0x52, 0xb1, 0xaf, 0x6f, 0x63, 0x5a, 0x11, 0x71, 0x3a, 0x66, 0x25, 0x10,
		0xb2, 0xa2, 0x87, 0xb4, 0xd2, 0x27, 0x8a, 0x56, 0xe6, 0xd3, 0xae, 0x3a, 0xd5, 0x7f, 0x18, 0x1f,
		0xbf, 0x97, 0xc6, 0x8a, 0x5f, 0xff, 0x28, 0x78, 0xc0, 0x06, 0xd5, 0xbd, 0x4a, 0x7d, 0xc5, 0x0b,
		0x7a, 0x92, 0x06, 0xec, 0xa6, 0xba, 0x97, 0x61, 0x83, 0xdf, 0xf3, 0x20, 0x5e, 0x2d, 0x2d, 0xf9,
		0xb1, 0xfa, 0x69, 0xaa, 0x5e, 0x88, 0x44, 0x7a, 0x34, 0xd3, 0x74, 0x93, 0xd7, 0x40, 0x6f, 0xaf,
		0x85, 0xf4, 0x27, 0x7a, 0x2a, 0xbd, 0xe3, 0x6c, 0x47, 0xb8, 0xfa, 0x6f, 0xa2, 0xf6, 0xe5, 0x20,
		0x19, 0x6f, 0xb4, 0xea, 0x5e, 0x45, 0xcb, 0x84, 0x66, 0x1c, 0x60, 0xe1, 0xea, 0xf9, 0x83, 0x9b,
		0x3e, 0x68, 0xab, 0x6e, 0x3f, 0x26, 0xb3, 0x2d, 0x98, 0x8e, 0x99, 0x9f, 0xfd, 0x9d, 0xcf, 0xb5,
		0xd6, 0xf8, 0xea, 0x8c, 0x6f, 0xeb, 0xd1, 0x09, 0x39, 0x4b, 0x3f, 0x91, 0x30, 0xbc, 0xad, 0x28,
		0xaa, 0xd3, 0xe3, 0xa0, 0xc9, 0xa0, 0x12, 0x4b, 0xa1, 0x85, 0x27, 0xc2, 0x0a, 0xf3, 0x29, 0xd7,
		0x2c, 0x60, 0x54, 0x56, 0x02, 0x46, 0x43, 0xbf, 0xf2, 0x76, 0x7c, 0x9c, 0xde, 0x55, 0xf4, 0x90,
		0xe8, 0xef, 0x9c, 0xa9, 0x0a, 0xf1, 0x3c, 0x1a, 0x6b, 0xea, 0x57, 0x04, 0x4f, 0xaf, 0xfe, 0x72,
		0xb2, 0xff, 0x39, 0xfb, 0x3d, 0x05, 0x24, 0x09, 0x17, 0x17, 0xb0, 0x36, 0x3e, 0xa8, 0x6a, 0x6f,
		0x3c, 0xd7, 0x8f, 0xfa, 0xd7, 0x9d, 0x46, 0xbd, 0x9e, 0x75, 0xcc, 0xe9, 0xf1, 0xac, 0x67, 0xbc,
		0x2c, 0xeb, 0x31, 0x2d, 0x72, 0x5c, 0x0d, 0x1c, 0xdb, 0xa2, 0xc7, 0xd7, 0xd8, 0x31, 0x36, 0x76,
		0x9c, 0xcd, 0x1c, 0xeb, 0x7c, 0xfa, 0x39, 0x23, 0xfa, 0xa8, 0xa6, 0xc9, 0xf3, 0x85, 0x56, 0x7c,
		0x72, 0xbc, 0xf4, 0xad, 0xa4, 0x41, 0x9e, 0x55, 0x9f, 0xe9, 0xa0, 0x4e, 0x8e, 0x6b, 0x8f, 0xa7,
		0x53, 0x7f, 0x20, 0xaa, 0xc0, 0xbe, 0x99, 0x3d, 0x48, 0x7a, 0x52, 0x2f, 0xff, 0xdb, 0x3b, 0xbc,
		0xc8, 0xbb, 0x71, 0xbe, 0x90, 0x30, 0xa1, 0x6a, 0x25, 0xa4, 0x61, 0x16, 0x0a, 0x3e, 0xfd, 0x2c,
		0xf5, 0xaf, 0xbb, 0x63, 0xa9, 0x93, 0x7b, 0xc4, 0xbb, 0xf7, 0x9b, 0xf2, 0x18, 0xcd, 0x52, 0x3c,
		0xc6, 0xce, 0xce, 0xfe, 0x0e, 0xf8, 0xc7, 0xd8, 0xff, 0xfc, 0xdf, 0x32, 0x2c, 0x45, 0xb1, 0x83,
		0x91, 0xeb, 0xca, 0x2b, 0xdb, 0xa2, 0x7f, 0xc3, 0x4c, 0xb3, 0xab, 0x97, 0x4c, 0x33, 0xce, 0x85,
		0x26, 0x53, 0x14, 0xf7, 0xf2, 0xf2, 0x56, 0x95, 0x37, 0xa4, 0x11, 0x89, 0x89, 0x1e, 0x4e, 0x6c,
		0xaf, 0x98, 0x72, 0x2f, 0x85, 0x3a, 0xb5, 0x05, 0x03, 0xec, 0xa9, 0x8f, 0x5b, 0x13, 0xfb, 0xeb,
		0x4d, 0xbe, 0x47, 0xf9, 0xcd, 0x9e, 0xad, 0xaa, 0xa4, 0x7f, 0x3f, 0xe1, 0x8b, 0x4f, 0x71, 0x1f,
		0xc5, 0xfe, 0xe0, 0xb2, 0x17, 0x5e, 0xd3, 0x6a, 0x46, 0xda, 0xca, 0xa8, 0x2f, 0x0b, 0xca, 0x5b,
		0x44, 0x75, 0x6c, 0x15, 0xed, 0x9e, 0x15, 0xc3, 0xe5, 0xc6, 0x6c, 0xb9, 0x31, 0xda, 0x63, 0x4c,
		0xc6, 0x56, 0x60, 0x4c, 0x8a, 0x31, 0x10, 0xab, 0x1a, 0x54, 0x0f, 0x76, 0xc5, 0xea, 0x6f, 0xf0,
		0xa9, 0x3d, 0x55, 0x12, 0xfb, 0x9f, 0x05, 0xaf, 0xd2, 0xfa, 0x67, 0x01, 0x18, 0xdb, 0xdf, 0x9b,
		0xed, 0x88, 0x9c, 0xd6, 0xff, 0xf4, 0xfa, 0x7c, 0x76, 0x71, 0x03, 0x98, 0x5d, 0xcc, 0x02, 0xb4,
		0x8a, 0x0b, 0x6e, 0x77, 0x37, 0x36, 0x71, 0xd6, 0x63, 0x30, 0xbf, 0xd0, 0x7f, 0x40, 0x4c, 0x15,
		0x65, 0xf5, 0x17, 0x06, 0xcb, 0xf9, 0xa6, 0xf3, 0x11, 0x48, 0x85, 0x0f, 0x8c, 0x89, 0x83, 0x63,
		0xec, 0x00, 0x99, 0x3a, 0x48, 0xc6, 0x0f, 0x94, 0xf1, 0x83, 0x65, 0xf2, 0x80, 0x15, 0xb3, 0x74,
		0x72, 0x9a, 0x79, 0xf9, 0xc9, 0xa8, 0x65, 0x34, 0xa4, 0x25, 0xe3, 0x83, 0x22, 0xdb, 0x65, 0xa6,
		0x64, 0x76, 0xde, 0xb8, 0x79, 0x6f, 0x39, 0xde, 0x59, 0x95, 0x72, 0xd2, 0x0f, 0xa9, 0x5f, 0x5c,
		0xd6, 0xcc, 0x06, 0xca, 0xb9, 0x6e, 0x0b, 0xe4, 0xf7, 0x78, 0xfb, 0xa2, 0xb8, 0x42, 0x71, 0x85,
		0xe2, 0x2a, 0xcb, 0x6e, 0xe9, 0x0b, 0x11, 0x52, 0xc2, 0x4d, 0xc8, 0xab, 0xc6, 0x06, 0xcb, 0x2b,
		0xc6, 0x7d, 0x7a, 0x53, 0x5c, 0x5a, 0x4d, 0x86, 0x29, 0x2e, 0xab, 0xea, 0x28, 0xa8, 0x50, 0x50,
		0xa1, 0xa0, 0xca, 0xb2, 0x5b, 0x12, 0xc6, 0x75, 0xab, 0x69, 0x40, 0x4e, 0x6d, 0x17, 0x18, 0xe2,
		0x9c, 0xf0, 0x01, 0x2d, 0xe4, 0x65, 0xab, 0x14, 0x76, 0x28, 0xa4, 0x37, 0x72, 0xca, 0x78, 0xe1,
		0x7d, 0x6f, 0x48, 0xa8, 0x2c, 0x0d, 0x97, 0xfa, 0x22, 0x0d, 0x8e, 0x77, 0x24, 0x89, 0x37, 0xb6,
		0x45, 0x0f, 0xd8, 0x80, 0x69, 0x35, 0x1e, 0xb8, 0xf0, 0xb8, 0x77, 0xef, 0x0d, 0x2c, 0x01, 0xb9,
		0xd9, 0xf8, 0x25, 0x68, 0x37, 0x77, 0xdb, 0xbb, 0xdd, 0xed, 0xe6, 0x6e, 0x67, 0x83, 0xd7, 0xe2,
		0xcd, 0x7a, 0xae, 0xbe, 0x72, 0x05, 0x57, 0xac, 0x32, 0x46, 0x87, 0x37, 0x3a, 0x9f, 0xdb, 0xbf,
		0x38, 0xa9, 0x27, 0xbc, 0x1a, 0xbd, 0xd1, 0x7b, 0x9a, 0x86, 0x34, 0xa2, 0x5a, 0xde, 0xd6, 0x04,
		0xaf, 0x79, 0xc3, 0x54, 0x42, 0x1a, 0x21, 0xfa, 0x02, 0x12, 0x2a, 0x13, 0x4c, 0x9f, 0xf5, 0xc0,
		0xd4, 0xac, 0xa4, 0x7b, 0x36, 0xef, 0xe3, 0xd2, 0xf5, 0x05, 0xbc, 0x91, 0x8b, 0xde, 0xbf, 0x07,
		0xbf, 0x6d, 0x4d, 0xf9, 0x70, 0x5b, 0x6e, 0xdf, 0x0c, 0xde, 0x94, 0x7c, 0x50, 0xbd, 0x10, 0x44,
		0x87, 0x1a, 0xef, 0x86, 0xbc, 0xbe, 0x31, 0x78, 0xbc, 0xe9, 0xb1, 0x6e, 0x21, 0x25, 0x41, 0xc1,
		0x38, 0xb7, 0x1c, 0xc0, 0xb7, 0xda, 0x9b, 0x4a, 0x99, 0x3f, 0xfe, 0x98, 0x84, 0x32, 0x6c, 0x4d,
		0x8e, 0xd7, 0x26, 0x88, 0x89, 0x78, 0xd4, 0x2e, 0x20, 0x25, 0xc6, 0x57, 0xbf, 0x12, 0xe7, 0x5f,
		0x8c, 0x42, 0xe2, 0x29, 0x21, 0x11, 0x97, 0xc6, 0xf9, 0x47, 0x26, 0xe5, 0x9b, 0x56, 0x88, 0x03,
		0x7a, 0x71, 0xbf, 0xdc, 0x0f, 0x55, 0x8c, 0xa0, 0x6a, 0x94, 0x85, 0xa0, 0x8a, 0x91, 0xa0, 0x72,
		0x74, 0xb8, 0xd6, 0x43, 0x50, 0xe5, 0x3d, 0x74, 0x8f, 0x0f, 0x5f, 0xf1, 0x45, 0x7e, 0x74, 0x04,
		0x8b, 0x2e, 0x71, 0xb1, 0x83, 0x68, 0xec, 0x40, 0x9a, 0x3c, 0x98, 0xc6, 0x0f, 0xa8, 0xe9, 0x83,
		0x6a, 0xed, 0xc0, 0x5a, 0x3b, 0xb8, 0x36, 0x0e, 0xb0, 0x21, 0x62, 0xa7, 0xe0, 0x7e, 0x2b, 0x7a,
		0xb0, 0xe7, 0x03, 0xe5, 0x8c, 0x34, 0x7b, 0x71, 0xf3, 0xe6, 0x8a, 0x40, 0xb3, 0x7c, 0xdc, 0x8d,
		0x1f, 0x7b, 0x1b, 0xc7, 0xdf, 0x9a, 0x18, 0xb0, 0x25, 0x0e, 0xac, 0x8b, 0x05, 0xeb, 0xe2, 0xc1,
		0xa6, 0x98, 0x30, 0x23, 0x2e, 0x0c, 0x89, 0x0d, 0xe3, 0xe2, 0x63, 0xc1, 0x5e, 0x35, 0xbf, 0x9f,
		0xee, 0xad, 0x59, 0xd3, 0x1b, 0xc9, 0xac, 0x3f, 0xc2, 0x9a, 0x58, 0xb1, 0x29, 0x5e, 0xac, 0x8b,
		0x19, 0xdb, 0xe2, 0xc6, 0x99, 0xd8, 0x71, 0x26, 0x7e, 0x5c, 0x88, 0x21, 0xb3, 0xe2, 0xc8, 0xb0,
		0x58, 0x2a, 0x4e, 0x28, 0x66, 0x62, 0xc8, 0x6a, 0x66, 0x6c, 0x91, 0xdf, 0x02, 0x96, 0x1d, 0x0b,
		0x63, 0xf7, 0x88, 0xd6, 0x54, 0xf2, 0xc2, 0x8e, 0xfa, 0x67, 0x27, 0x78, 0xfb, 0xf6, 0x5b, 0xbd,
		0xb6, 0x7b, 0xf5, 0xeb, 0x5b, 0xa3, 0xb6, 0x7b, 0x35, 0xf9, 0xd8, 0x48, 0xff, 0x99, 0x7c, 0x6e,
		0x7e, 0xab, 0xd7, 0xda, 0xb3, 0xcf, 0x9d, 0x6f, 0xf5, 0x5a, 0xe7, 0xea, 0xdd, 0xf7, 0xef, 0x7f,
		0xbc, 0xfb, 0xa7, 0x75, 0x97, 0xfd, 0x42, 0xf3, 0x5b, 0xfb, 0xca, 0xc6, 0x2b, 0x3f, 0xbb, 0x38,
		0xfe, 0x6a, 0xfd, 0xbd, 0xff, 0xcf, 0xe5, 0x8b, 0xff, 0x97, 0x85, 0x37, 0xff, 0x66, 0x33, 0x45,
		0x94, 0x41, 0xf1, 0x34, 0x55, 0x31, 0xb5, 0x90, 0xf2, 0x41, 0xea, 0x3b, 0xb0, 0x84, 0x79, 0x1e,
		0x4e, 0x83, 0xf0, 0x07, 0xe1, 0x0f, 0xc2, 0x1f, 0x84, 0x3f, 0xc6, 0x76, 0x7b, 0xc2, 0xb8, 0xde,
		0xb1, 0x88, 0x7b, 0x3a, 0x16, 0x86, 0x36, 0x13, 0x9d, 0xf8, 0xdc, 0x8f, 0x9d, 0xd3, 0x59, 0x31,
		0x1d, 0xcd, 0xe8, 0x58, 0xa6, 0x2f, 0x4d, 0x63, 0x38, 0xfa, 0xf1, 0xd9, 0x79, 0x2c, 0x44, 0xe2,
		0x39, 0x3a, 0xbd, 0x0f, 0x97, 0x9e, 0xdc, 0x94, 0x6e, 0xe9, 0x5b, 0xcd, 0x12, 0xad, 0xfd, 0x1b,
		0x18, 0xa3, 0x6e, 0x2c, 0xb2, 0xde, 0x28, 0x56, 0xb3, 0x60, 0xe8, 0xe1, 0xb3, 0xe3, 0x5a, 0x09,
		0x49, 0x64, 0xf1, 0xa8, 0xbd, 0x35, 0x0f, 0x48, 0x98, 0x7d, 0xca, 0x15, 0xa9, 0x68, 0x6f, 0x75,
		0x4c, 0x44, 0x92, 0x1b, 0xa4, 0x86, 0xcd, 0x53, 0xc2, 0xa6, 0x43, 0xd3, 0xd1, 0xb3, 0x84, 0x9e,
		0x25, 0xc7, 0x36, 0xcd, 0x66, 0xc9, 0x60, 0xe3, 0xb6, 0x8b, 0x81, 0x18, 0xd1, 0x97, 0x0e, 0x7f,
		0x63, 0xdb, 0xe0, 0x98, 0xcb, 0x31, 0xa5, 0x71, 0x99, 0xa4, 0xf9, 0xa4, 0xe4, 0x97, 0x71, 0x81,
		0x9e, 0xa5, 0x92, 0xf3, 0xca, 0xcb, 0x6a, 0x5a, 0xa6, 0x37, 0x51, 0xa6, 0xa3, 0x4c, 0x7f, 0x85,
		0x32, 0x1d, 0xa3, 0x05, 0x90, 0x2e, 0xb7, 0x2c, 0x66, 0x6c, 0x8b, 0x1b, 0x67, 0x62, 0xc7, 0x99,
		0xf8, 0x71, 0x21, 0x86, 0xec, 0x10, 0x1a, 0x18, 0x2d, 0xf0, 0x1c, 0x60, 0xc1, 0x68, 0x01, 0x8c,
		0x16, 0x58, 0x79, 0x16, 0x8c, 0x16, 0xb0, 0x23, 0xa2, 0x4c, 0x46, 0x0b, 0x08, 0xc9, 0x06, 0x16,
		0xbc, 0x3f, 0xf7, 0x6a, 0x78, 0x32, 0x3e, 0x02, 0x1e, 0x04, 0x3c, 0x08, 0x78, 0x10, 0xf0, 0x18,
		0x04, 0x3c, 0x33, 0xb8, 0x53, 0xb3, 0x22, 0x62, 0x1e, 0xa0, 0x9e, 0xb6, 0x85, 0xb1, 0x0f, 0x79,
		0x12, 0x8d, 0x5f, 0xd1, 0x1d, 0x86, 0xa4, 0x99, 0xda, 0x13, 0x18, 0x92, 0x86, 0x2a, 0x07, 0x55,
		0x0e, 0xaa, 0x1c, 0x4b, 0xbb, 0x1d, 0x43, 0xd2, 0x1e, 0xff, 0x60, 0x48, 0xda, 0x4a, 0xd3, 0x60,
		0x48, 0x5a, 0xb6, 0xa5, 0xc7, 0x90, 0xb4, 0xcd, 0x5e, 0x7b, 0x0c, 0x49, 0xdb, 0x80, 0x91, 0x30,
		0x24, 0xed, 0x3e, 0x24, 0x6d, 0x85, 0x2e, 0x5f, 0xee, 0x16, 0xc7, 0x44, 0x0c, 0xc3, 0x48, 0x4a,
		0x0b, 0x31, 0x69, 0xe9, 0xa8, 0x58, 0xef, 0x60, 0xe3, 0xcc, 0x1e, 0x8c, 0x60, 0x58, 0x87, 0x59,
		0x53, 0xf2, 0x08, 0x86, 0xf1, 0x61, 0xaf, 0x0d, 0xa4, 0x48, 0x2c, 0x46, 0x32, 0x2c, 0xcc, 0x61,
		0x87, 0x6d, 0x69, 0x20, 0xdb, 0x82, 0x6c, 0x0b, 0xb2, 0x2d, 0x9b, 0xc7, 0xb6, 0x98, 0x16, 0x57,
		0xf3, 0x81, 0x0d, 0x57, 0x7b, 0x7a, 0xf6, 0x30, 0x19, 0xad, 0xfe, 0xe4, 0x48, 0x7c, 0x59, 0x17,
		0x63, 0x2e, 0xc4, 0x99, 0x33, 0xb1, 0xe6, 0x4a, 0xbc, 0x39, 0x17, 0x73, 0xce, 0xc5, 0x9d, 0x4b,
		0xb1, 0x67, 0x99, 0x64, 0xb0, 0x74, 0x5e, 0x6c, 0x89, 0xc3, 0xf9, 0x04, 0xc4, 0xf3, 0x68, 0xac,
		0x6b, 0x91, 0xf0, 0x1d, 0x6c, 0xe4, 0x79, 0x25, 0xcc, 0x85, 0x49, 0x2d, 0xef, 0xac, 0x85, 0xde,
		0x4c, 0x69, 0xdb, 0x01, 0xdb, 0xf3, 0x39, 0xa2, 0xff, 0x6c, 0x0b, 0x6a, 0x97, 0x02, 0xdb, 0xb9,
		0xe0, 0x76, 0x2d, 0xc0, 0xd7, 0x26, 0xc8, 0xd7, 0x26, 0xd0, 0xd7, 0x21, 0xd8, 0xed, 0x0a, 0x78,
		0xcb, 0x82, 0x7e, 0xfe, 0xc2, 0xac, 0x79, 0x1b, 0x9f, 0x3d, 0x6d, 0xc5, 0x1b, 0x05, 0x66, 0x46,
		0xaf, 0x8d, 0x37, 0x30, 0x37, 0x80, 0x4d, 0xe7, 0x14, 0xf1, 0x47, 0x54, 0x6a, 0xa6, 0xe8, 0xf8,
		0xb8, 0x4c, 0xa8, 0xec, 0x11, 0x09, 0x1d, 0xea, 0xe4, 0xa7, 0xe7, 0x77, 0xa7, 0x9e, 0x1b, 0xf5,
		0x3a, 0x2a, 0x67, 0x54, 0xce, 0xa8, 0x9c, 0x51, 0x39, 0xa3, 0x72, 0x5e, 0x0c, 0x0d, 0x6a, 0x74,
		0x1d, 0xea, 0xe6, 0xae, 0x83, 0xa9, 0xec, 0xc6, 0x0e, 0x3d, 0xfe, 0x71, 0x23, 0x3e, 0x2a, 0xae,
		0x62, 0x8b, 0xd6, 0xa4, 0xd4, 0x96, 0xa6, 0x9d, 0x05, 0xa0, 0x34, 0x1c, 0xcf, 0xeb, 0x30, 0x1e,
		0xc5, 0xb1, 0x78, 0x79, 0xb8, 0x95, 0xc8, 0xcd, 0xab, 0xdb, 0x4a, 0xed, 0xfa, 0x6e, 0xe7, 0x15,
		0xed, 0xa6, 0x37, 0xe5, 0x98, 0xe5, 0x0a, 0x8d, 0xb9, 0xa5, 0x6d, 0x15, 0x4b, 0x4a, 0xa3, 0x58,
		0xbb, 0xb3, 0xde, 0x66, 0x13, 0xba, 0x33, 0xd7, 0xc6, 0x38, 0x15, 0xed, 0x35, 0xb4, 0xd7, 0xd0,
		0x5e, 0x43, 0x7b, 0x0d, 0xed, 0x35, 0x24, 0x53, 0x37, 0x51, 0xff, 0xd6, 0x7c, 0x1a, 0x92, 0x5b,
		0xe7, 0x5a, 0x78, 0x3a, 0xad, 0x3b, 0x5d, 0x8c, 0xc4, 0x29, 0x2a, 0x62, 0x54, 0xc4, 0xa8, 0x88,
		0x51, 0x11, 0x23, 0x71, 0x6a, 0xee, 0x07, 0x89, 0x53, 0x2b, 0xd3, 0x3a, 0x4a, 0xda, 0x5c, 0x9a,
		0x17, 0x89, 0xd3, 0xd2, 0x6e, 0xa5, 0x56, 0xb7, 0x5e, 0x47, 0xe2, 0x14, 0xda, 0x2c, 0x48, 0x9c,
		0x3e, 0x65, 0xb8, 0x31, 0x21, 0x99, 0x76, 0x6a, 0xb3, 0x4d, 0x67, 0xc4, 0x48, 0x17, 0x34, 0xd8,
		0xd0, 0x60, 0x43, 0x83, 0x0d, 0x0d, 0xb6, 0xb5, 0x19, 0x6c, 0x3b, 0x0e, 0xed, 0xb5, 0x0e, 0xda,
		0x6b, 0x68, 0xaf, 0x65, 0x01, 0xd9, 0x18, 0xe8, 0x82, 0xf6, 0x9a, 0xa1, 0xad, 0xd4, 0xec, 0xb4,
		0xd1, 0x5c, 0x43, 0x73, 0x0d, 0xbe, 0xb9, 0x36, 0x62, 0x52, 0x27, 0x24, 0x9c, 0x17, 0x88, 0x77,
		0x66, 0xb5, 0x3d, 0x9e, 0x18, 0xcd, 0x29, 0x34, 0xa7, 0xd0, 0x9c, 0x42, 0x73, 0x0a, 0xcd, 0xa9,
		0xa5, 0x32, 0xd6, 0x2e, 0x63, 0x51, 0x76, 0x1d, 0xcc, 0x35, 0x7d, 0x97, 0xa5, 0xb3, 0xa9, 0x1c,
		0x75, 0x5c, 0x79, 0x71, 0x0d, 0x77, 0x1c, 0xce, 0x69, 0xbb, 0x53, 0xc8, 0xb3, 0x13, 0xc3, 0xee,
		0xdc, 0xf2, 0x2c, 0x44, 0x75, 0xb9, 0x74, 0x2e, 0x3a, 0xbd, 0x3c, 0x3b, 0x3b, 0xf4, 0x0e, 0x30,
		0xeb, 0x31, 0x32, 0x1c, 0xdb, 0xf7, 0xeb, 0x11, 0x9e, 0x5d, 0x14, 0x9e, 0x4e, 0x84, 0x27, 0xa9,
		0x05, 0xfb, 0xb5, 0xa3, 0xab, 0x7f, 0x1a, 0xef, 0xdb, 0x77, 0x7b, 0xef, 0xfe, 0xd9, 0xbe, 0x7b,
		0xfc, 0xc7, 0x5f, 0x4f, 0x7d, 0xad, 0xf1, 0x7e, 0xfb, 0x6e, 0xef, 0x99, 0xff, 0xe9, 0xde, 0xed,
		0xad, 0x38, 0x46, 0xe7, 0xee, 0xed, 0xd2, 0x57, 0xc7, 0x7f, 0x6f, 0x3e, 0x77, 0x41, 0xfb, 0x99,
		0x0b, 0x5a, 0xcf, 0x5d, 0xd0, 0x7a, 0xe6, 0x82, 0x67, 0x6f, 0xa9, 0xf9, 0xcc, 0x05, 0x9d, 0xbb,
		0x5f, 0x4b, 0xdf, 0x7f, 0xfb, 0xf4, 0x57, 0xbb, 0x77, 0xef, 0x7e, 0x3d, 0xf7, 0x7f, 0xdb, 0x77,
		0xbf, 0xf6, 0xde, 0xa1, 0x2a, 0xb1, 0xa7, 0x4a, 0x70, 0x3b, 0xbb, 0xdf, 0xce, 0xe5, 0x53, 0xac,
		0xd0, 0x59, 0x48, 0xcb, 0x76, 0xf0, 0x09, 0x53, 0x7a, 0x5f, 0x6b, 0xe9, 0xc6, 0x16, 0x3e, 0x65,
		0xfc, 0x30, 0x4c, 0xeb, 0x99, 0x28, 0x37, 0x64, 0x7f, 0xf5, 0x94, 0xdc, 0x2c, 0xcc, 0xd8, 0xd8,
		0x69, 0xb7, 0xbb, 0xdb, 0xed, 0x76, 0x7d, 0xbb, 0xb5, 0x5d, 0xdf, 0xed, 0x74, 0x1a, 0xdd, 0x86,
		0x0b, 0xaf, 0xe3, 0x99, 0xf4, 0xa9, 0xa4, 0xfe, 0x87, 0xdb, 0xea, 0x5e, 0x85, 0x27, 0x61, 0x88,
		0xbc, 0xf5, 0xd2, 0x2b, 0x9a, 0xd1, 0xc7, 0x52, 0x24, 0x9a, 0xca, 0x1a, 0xf3, 0xdd, 0x33, 0xd7,
		0xf7, 0x53, 0x23, 0x77, 0x9d, 0x0d, 0x2d, 0x20, 0x77, 0x6d, 0x70, 0x73, 0x20, 0x77, 0x8d, 0xdc,
		0xf5, 0x4a, 0x7c, 0x2b, 0x86, 0x02, 0x15, 0x9a, 0x0a, 0x43, 0x81, 0xe0, 0xe9, 0xb4, 0xa5, 0x69,
		0x31, 0x14, 0xc8, 0x36, 0x7a, 0x7e, 0x85, 0xa1, 0x40, 0x58, 0xf2, 0x06, 0x8d, 0x70, 0x57, 0x26,
		0x15, 0xa8, 0xda, 0xe7, 0x96, 0x1a, 0x88, 0x2d, 0xcd, 0xe3, 0xb2, 0xa1, 0xd8, 0x48, 0xca, 0x78,
		0xeb, 0xbe, 0xbb, 0xcd, 0xd6, 0xb4, 0x5b, 0x04, 0x90, 0xc6, 0x77, 0x16, 0x56, 0xba, 0x3a, 0x7f,
		0x65, 0x35, 0x2d, 0x89, 0xf7, 0x93, 0x71, 0x07, 0x3d, 0x3a, 0x9e, 0x98, 0x13, 0xfb, 0x75, 0xac,
		0xcb, 0xd8, 0xc6, 0x7e, 0x1d, 0xe0, 0x8c, 0x69, 0xec, 0xd7, 0xf1, 0xdc, 0x8b, 0xb1, 0xde, 0xaf,
		0xc3, 0x72, 0x1b, 0xa3, 0xa5, 0x43, 0x69, 0xb5, 0x9d, 0x91, 0x23, 0x31, 0xe9, 0x4c, 0x5c, 0xba,
		0x14, 0x9b, 0xce, 0xc5, 0xa7, 0x6b, 0x31, 0xba, 0x36, 0x71, 0xba, 0x36, 0xb1, 0xba, 0x0e, 0xf1,
		0xea, 0xc6, 0x68, 0xb2, 0xcd, 0x51, 0xda, 0x16, 0xbb, 0xf3, 0x89, 0x66, 0xd9, 0xe2, 0x35, 0x9f,
		0x7a, 0x92, 0x4e, 0xd7, 0xc8, 0xd1, 0x39, 0x78, 0x9c, 0xb1, 0xbe, 0x70, 0x0f, 0x8e, 0xf6, 0xa5,
		0xc3, 0x92, 0x63, 0x6b, 0xe2, 0x67, 0x9c, 0xa9, 0x88, 0x75, 0xa8, 0x8a, 0xb5, 0xa9, 0x8c, 0x75,
		0xa9, 0x8e, 0xb5, 0xab, 0x90, 0xb5, 0xab, 0x92, 0x75, 0xaa, 0x14, 0x37, 0xaa, 0xc5, 0x91, 0x8a,
		0x99, 0xbf, 0x48, 0x67, 0xee, 0xb0, 0xa5, 0xd3, 0xea, 0xca, 0x2d, 0xf6, 0x58, 0xf4, 0x3a, 0x24,
		0xa8, 0x1d, 0xbb, 0xc9, 0x66, 0x3f, 0x6e, 0xa5, 0x51, 0x65, 0x5d, 0x6e, 0xb3, 0x35, 0xe9, 0xd4,
		0xa5, 0xe9, 0xd7, 0x54, 0x01, 0x6d, 0x3e, 0xff, 0x1a, 0x3d, 0x20, 0x8e, 0xa5, 0xd5, 0xc3, 0x2d,
		0xb7, 0x06, 0xf7, 0xda, 0xa6, 0x6d, 0x39, 0xe7, 0x99, 0xf7, 0x1b, 0xb5, 0xe9, 0xde, 0x94, 0x73,
		0xb6, 0xb2, 0xc4, 0xf6, 0x3a, 0x10, 0x0a, 0xd5, 0xd4, 0xe1, 0x71, 0xef, 0xd8, 0x72, 0x6f, 0xbd,
		0x3e, 0xbe, 0x01, 0x34, 0x23, 0xd1, 0x8c, 0x44, 0x33, 0x12, 0xcd, 0x48, 0x34, 0x23, 0x1d, 0x9d,
		0xd6, 0x90, 0x92, 0x40, 0xd2, 0x60, 0x1d, 0xd9, 0x91, 0xdb, 0x6e, 0xb3, 0x23, 0xa7, 0xf1, 0x1c,
		0x5e, 0x8d, 0x05, 0x7b, 0x0b, 0x71, 0x1a, 0x8f, 0xfe, 0x30, 0xfd, 0x9d, 0x8f, 0x5f, 0x4f, 0xa9,
		0xb6, 0x98, 0xd3, 0x64, 0x9b, 0x45, 0xc3, 0xd6, 0x6d, 0xd2, 0xcd, 0xa2, 0x7d, 0xb3, 0xf6, 0xe4,
		0x9b, 0xf9, 0xcd, 0x38, 0x4d, 0xc2, 0x71, 0x08, 0x51, 0x41, 0xbb, 0x89, 0x1c, 0x45, 0x94, 0xcd,
		0xe7, 0x5b, 0x67, 0x64, 0xd9, 0x72, 0x8c, 0x93, 0xd5, 0x60, 0x33, 0xfb, 0x1b, 0xc4, 0x66, 0x3e,
		0x98, 0xd2, 0x44, 0x53, 0x77, 0x41, 0x15, 0x93, 0xe9, 0x4a, 0x16, 0x53, 0xd1, 0xc4, 0x98, 0x0a,
		0x30, 0x16, 0x0d, 0xc6, 0x54, 0x60, 0x4c, 0xc5, 0x4b, 0x2f, 0x0c, 0x63, 0x2a, 0x9c, 0xdc, 0x01,
		0xc6, 0x54, 0x20, 0x19, 0x86, 0x64, 0x18, 0x92, 0x61, 0x48, 0x86, 0x61, 0x4c, 0x85, 0x9d, 0x29,
		0x31, 0xa6, 0xa2, 0x7c, 0x3a, 0x75, 0x69, 0x7a, 0x8c, 0xa9, 0xc0, 0x98, 0x8a, 0x35, 0x6d, 0x39,
		0x8c, 0xa9, 0x28, 0xe1, 0x6c, 0x18, 0x53, 0xb1, 0xfa, 0x36, 0xc4, 0x98, 0x0a, 0x34, 0x23, 0xd1,
		0x8c, 0x44, 0x33, 0x12, 0xcd, 0xc8, 0xd7, 0x6a, 0x46, 0x62, 0x4c, 0x05, 0xc6, 0x54, 0xd8, 0x35,
		0x6c, 0x31, 0xa6, 0x02, 0x63, 0x2a, 0x36, 0xf1, 0x64, 0xfc, 0x7f, 0xec, 0x7d, 0x6d, 0x6f, 0xe2,
		0x4a, 0xf2, 0xfd, 0xfb, 0x7c, 0x0a, 0x84, 0xf6, 0x45, 0xb2, 0x1a, 0x4f, 0x80, 0x10, 0xf2, 0x20,
		0xad, 0x56, 0xb9, 0x3b, 0x99, 0xfd, 0x45, 0x3b, 0x0f, 0xd1, 0xcc, 0xec, 0xfc, 0x77, 0x95, 0xe1,
		0x46, 0x0e, 0x6e, 0x12, 0xeb, 0x3a, 0x86, 0xb5, 0x4d, 0xee, 0x44, 0x13, 0xbe, 0xfb, 0x5f, 0x06,
		0x63, 0x0c, 0x06, 0x62, 0xbb, 0xab, 0xba, 0x6d, 0x38, 0xf3, 0x62, 0x97, 0x70, 0xa1, 0xdb, 0xf4,
		0x43, 0xd5, 0xa9, 0x53, 0xa7, 0xab, 0x77, 0x5d, 0x53, 0x31, 0x4d, 0xe5, 0xa3, 0x1e, 0x14, 0xff,
		0x8a, 0xdb, 0x89, 0x7a, 0x50, 0xca, 0x2a, 0x13, 0x4d, 0x7f, 0x69, 0xe0, 0x8d, 0x7a, 0x81, 0x1b,
		0x81, 0x98, 0xab, 0x59, 0xdf, 0xb7, 0x5f, 0x13, 0x4f, 0x7e, 0x7b, 0x35, 0x7c, 0x6a, 0xdf, 0x5e,
		0x4c, 0x9f, 0xf7, 0xf6, 0xbb, 0xe7, 0x0d, 0xff, 0x19, 0x3e, 0xe9, 0x6d, 0xfc, 0xe9, 0x6f, 0xb3,
		0x07, 0xdd, 0xe1, 0x22, 0x56, 0xbc, 0xfa, 0x21, 0x25, 0xba, 0x21, 0x65, 0xa5, 0xaa, 0x5a, 0x28,
		0x55, 0x55, 0x9a, 0x68, 0x1c, 0xa5, 0xaa, 0x76, 0xd7, 0x9d, 0xb2, 0x97, 0xaa, 0x32, 0x7b, 0x3d,
		0x31, 0x0c, 0x8c, 0xc7, 0x81, 0xa5, 0x50, 0x5a, 0x99, 0xec, 0x94, 0x5b, 0x20, 0x35, 0x57, 0xee,
		0xf4, 0x4d, 0xc7, 0x17, 0x28, 0xe4, 0x5f, 0x3a, 0x83, 0xad, 0xdc, 0x70, 0xab, 0x36, 0xe0, 0xda,
		0x0c, 0xb9, 0x36, 0x83, 0xae, 0xc3, 0xb0, 0x6f, 0x47, 0xa4, 0xae, 0xbe, 0x90, 0xff, 0xdd, 0x60,
		0xe0, 0x08, 0xd3, 0x55, 0x79, 0x03, 0x6d, 0x13, 0xa7, 0x1b, 0xd2, 0x8e, 0xd8, 0x7a, 0x12, 0x5e,
		0x60, 0xfb, 0x13, 0x1e, 0x6f, 0x1a, 0xc4, 0x3e, 0x99, 0x8e, 0x42, 0x9f, 0xbc, 0xba, 0x7f, 0x75,
		0xee, 0xb9, 0xd9, 0x68, 0xc0, 0x39, 0xc3, 0x39, 0xc3, 0x39, 0xc3, 0x39, 0xc3, 0x39, 0x27, 0xa5,
		0xaf, 0xcd, 0x8e, 0x42, 0xdf, 0xdc, 0xc1, 0x35, 0x3b, 0xc5, 0x7f, 0x18, 0xae, 0xd9, 0xe1, 0xef,
		0x17, 0xd7, 0xec, 0x6c, 0xed, 0x52, 0x6a, 0x37, 0xce, 0x70, 0xcf, 0x4e, 0xe5, 0x7a, 0xe9, 0x22,
		0x98, 0x4b, 0x2d, 0xab, 0xde, 0xc8, 0xf3, 0xc2, 0x30, 0x6a, 0x76, 0x62, 0x51, 0xe1, 0x55, 0x00,
		0xcb, 0x3d, 0x23, 0xa4, 0x42, 0x48, 0x85, 0x90, 0x0a, 0x21, 0x15, 0x42, 0x2a, 0x5c, 0x5c, 0x8a,
		0x88, 0xaa, 0x0a, 0x30, 0xb8, 0x81, 0x88, 0x0a, 0x11, 0x15, 0xcd, 0x52, 0xc2, 0xc5, 0xa5, 0x08,
		0xa8, 0xb6, 0x22, 0xa0, 0x1a, 0x7a, 0x42, 0x3c, 0x0e, 0x03, 0x75, 0x71, 0xd4, 0xac, 0x43, 0x75,
		0xf9, 0xaf, 0x10, 0xa5, 0x22, 0x5a, 0x43, 0xb4, 0x86, 0x68, 0x0d, 0xd1, 0x1a, 0xa2, 0x35, 0xa8,
		0x53, 0xca, 0xe8, 0x7f, 0x0d, 0x4b, 0x38, 0xe6, 0xb3, 0x72, 0x2f, 0x1c, 0x75, 0xab, 0xce, 0x17,
		0x43, 0x89, 0x02, 0x47, 0x0c, 0x47, 0x0c, 0x47, 0x0c, 0x47, 0x0c, 0x25, 0x0a, 0xdd, 0x3f, 0xf0,
		0xa6, 0x2c, 0xdd, 0x82, 0x37, 0xe5, 0x5d, 0x4a, 0x3b, 0xc8, 0x9b, 0x1e, 0x75, 0x1a, 0x0d, 0x10,
		0xa7, 0x55, 0xeb, 0x05, 0xc4, 0xe9, 0xaa, 0xc0, 0x4d, 0xb5, 0x02, 0x45, 0x95, 0xf2, 0x04, 0x47,
		0x07, 0x10, 0xb0, 0x21, 0x60, 0x43, 0xc0, 0x86, 0x80, 0x6d, 0x7d, 0xc0, 0x06, 0x9d, 0x0b, 0xe2,
		0xb5, 0xd2, 0x82, 0x6c, 0x9c, 0x1c, 0x40, 0xbc, 0x46, 0xb4, 0x94, 0x94, 0x57, 0xb7, 0x46, 0xb8,
		0x86, 0x70, 0x8d, 0x63, 0x59, 0x3d, 0xd9, 0x5e, 0x30, 0x32, 0x1d, 0x23, 0x2a, 0x3d, 0xa6, 0x2e,
		0x6a, 0x5b, 0xee, 0x18, 0xe1, 0x14, 0xc2, 0x29, 0x84, 0x53, 0x08, 0xa7, 0x10, 0x4e, 0x45, 0xbb,
		0xcd, 0x1e, 0x2a, 0xb2, 0x8d, 0x49, 0xfb, 0xd8, 0x3c, 0x53, 0xd0, 0x57, 0x34, 0x96, 0x5b, 0x17,
		0x53, 0xcd, 0x67, 0xee, 0xa9, 0xad, 0x70, 0xee, 0x52, 0x73, 0x78, 0xaa, 0xb6, 0xf8, 0x77, 0x20,
		0x3c, 0x57, 0xf9, 0x45, 0x52, 0xf5, 0xfd, 0xfd, 0x9b, 0x86, 0x71, 0xd6, 0x7d, 0xb9, 0x69, 0x1a,
		0x67, 0xdd, 0xe9, 0xcb, 0xe6, 0xe4, 0xff, 0xa6, 0xaf, 0x5b, 0x37, 0x0d, 0xa3, 0x3d, 0x7b, 0x7d,
		0x7c, 0xd3, 0x30, 0x8e, 0xbb, 0x07, 0x3f, 0x7e, 0xbc, 0x3d, 0xf8, 0x75, 0x34, 0xce, 0xff, 0x45,
		0x75, 0xa5, 0xf7, 0xbb, 0x2a, 0xa7, 0xee, 0xf3, 0xd7, 0xab, 0xff, 0x68, 0x9b, 0xbf, 0xdf, 0x55,
		0x4e, 0xe0, 0x5f, 0xea, 0xdb, 0x76, 0x45, 0xce, 0x9b, 0x2d, 0x36, 0x9e, 0x1d, 0x18, 0x4f, 0x25,
		0xc6, 0xd3, 0x34, 0xfa, 0x17, 0xc6, 0xfb, 0xee, 0xaf, 0xe6, 0x9b, 0xf6, 0xf8, 0xfc, 0xe0, 0xd7,
		0xc9, 0x78, 0xf9, 0xcd, 0x97, 0x55, 0x1f, 0x6b, 0xbe, 0x39, 0x19, 0x9f, 0xaf, 0xf9, 0x2f, 0x9d,
		0xf1, 0x79, 0xc6, 0x36, 0x8e, 0xc7, 0xfb, 0xa9, 0x8f, 0x86, 0xef, 0xb7, 0xd6, 0x7d, 0xa1, 0xbd,
		0xe6, 0x0b, 0x47, 0xeb, 0xbe, 0x70, 0xb4, 0xe6, 0x0b, 0x6b, 0x1f, 0xa9, 0xb5, 0xe6, 0x0b, 0xc7,
		0xe3, 0x97, 0xd4, 0xe7, 0xf7, 0x57, 0x7f, 0xb4, 0x33, 0x3e, 0x78, 0x59, 0xf7, 0xdf, 0x4e, 0xc6,
		0x2f, 0xe7, 0x07, 0x70, 0x25, 0x7c, 0xae, 0x04, 0xcb, 0x59, 0xfd, 0x72, 0xde, 0x3e, 0xc7, 0x5a,
		0x75, 0x16, 0x92, 0x39, 0x0e, 0x56, 0x7a, 0xd5, 0x8d, 0xfa, 0x2b, 0x6e, 0x4a, 0x71, 0xb5, 0x8d,
		0xda, 0x2b, 0x6d, 0xaa, 0xcd, 0x5b, 0x7b, 0x83, 0x51, 0x20, 0x3c, 0xc3, 0xb6, 0xd4, 0x33, 0xd7,
		0xf3, 0xae, 0xc1, 0x5d, 0xe7, 0x43, 0x0b, 0xe0, 0xae, 0x09, 0x17, 0x07, 0xb8, 0x6b, 0x70, 0xd7,
		0x99, 0xf8, 0x56, 0x48, 0x81, 0xa4, 0xba, 0x82, 0x14, 0xa8, 0x7a, 0x3e, 0x2d, 0xd5, 0x2d, 0xa4,
		0x40, 0xdc, 0xe8, 0x19, 0x25, 0x6f, 0xb6, 0x7a, 0x31, 0x21, 0x08, 0xd7, 0x1b, 0x52, 0xe1, 0x6e,
		0xc6, 0x15, 0xfd, 0xe8, 0xbc, 0x9b, 0x91, 0xf1, 0xaa, 0xcf, 0x6a, 0xdc, 0x72, 0xa8, 0x2e, 0x12,
		0x57, 0x1e, 0x81, 0x33, 0xbb, 0x16, 0xf6, 0x88, 0x1b, 0xb7, 0x1f, 0x56, 0x21, 0xa2, 0xc6, 0xed,
		0x87, 0xa5, 0x71, 0x58, 0xec, 0x91, 0x72, 0xbc, 0x5b, 0x1c, 0x61, 0xf6, 0x3d, 0xd1, 0xe7, 0xdc,
		0x2f, 0xb3, 0x8c, 0xf6, 0x09, 0x63, 0x1f, 0xb3, 0xbb, 0xff, 0xdf, 0xbe, 0x9d, 0x3a, 0xc2, 0xc3,
		0xb4, 0x69, 0xae, 0x8a, 0x6b, 0xdc, 0x2b, 0xf1, 0x02, 0x0d, 0x6d, 0x92, 0x0a, 0xc7, 0xc7, 0x9b,
		0xde, 0xe1, 0x4f, 0xe7, 0x68, 0x49, 0xdf, 0xf0, 0xa6, 0x6b, 0xa8, 0x57, 0x12, 0x33, 0x26, 0xd7,
		0x89, 0xc5, 0xeb, 0x2c, 0x77, 0x78, 0x17, 0xbe, 0x0c, 0x9d, 0xd6, 0xf2, 0xd1, 0xd9, 0x27, 0x9a,
		0x96, 0x88, 0xd6, 0x25, 0xd7, 0x7a, 0x54, 0xbe, 0x0e, 0x69, 0x66, 0x5b, 0x7e, 0x6e, 0xe4, 0x5a,
		0x90, 0x9c, 0xd5, 0x99, 0x9f, 0x92, 0x0e, 0x04, 0x68, 0x1d, 0x11, 0xbd, 0xe3, 0x51, 0xe2, 0x68,
		0x68, 0x1d, 0x8b, 0xec, 0xd4, 0x5e, 0x8c, 0xee, 0xc3, 0x9f, 0x2b, 0x2c, 0x92, 0x1c, 0x08, 0xcd,
		0x4e, 0x8f, 0xe1, 0xf4, 0x61, 0x18, 0xc6, 0xf4, 0xcf, 0x13, 0xfb, 0x76, 0xe9, 0x8d, 0xe8, 0xef,
		0xc5, 0xbd, 0x9d, 0x7e, 0x6f, 0xf2, 0xd6, 0xf0, 0x7c, 0xb2, 0xcf, 0xa7, 0x2f, 0xe7, 0xbb, 0x7d,
		0xe1, 0x6f, 0x22, 0x5f, 0x53, 0x7f, 0x27, 0xfc, 0x9e, 0x67, 0x0f, 0x23, 0xfb, 0x57, 0xbf, 0xb0,
		0x2c, 0x3b, 0x7c, 0x6d, 0x3a, 0xb5, 0xab, 0xeb, 0x5a, 0xd8, 0x57, 0xad, 0x6f, 0x3e, 0xda, 0xce,
		0x73, 0x6d, 0x6a, 0xbc, 0x46, 0xde, 0xc4, 0x54, 0xd6, 0xfa, 0x03, 0xef, 0x87, 0x3b, 0xff, 0x25,
		0x54, 0x4f, 0x33, 0x0b, 0x19, 0x88, 0x9a, 0xa3, 0xe6, 0x37, 0x38, 0xf8, 0x0c, 0x36, 0xfe, 0x82,
		0x8b, 0xaf, 0x60, 0xe7, 0x27, 0xd8, 0xf9, 0x08, 0x4e, 0xfe, 0xa1, 0x5c, 0xe0, 0xe6, 0x9d, 0x4d,
		0x1b, 0x49, 0xd5, 0x27, 0x48, 0x83, 0x7c, 0x45, 0xc5, 0xbc, 0x6a, 0xd8, 0x3a, 0xf1, 0x5c, 0x2f,
		0x19, 0xb8, 0x4b, 0xb7, 0xe7, 0x0c, 0x7c, 0xdb, 0xbd, 0x0f, 0x0d, 0x5a, 0x60, 0xda, 0xae, 0xf0,
		0x42, 0x63, 0x56, 0xfb, 0xfe, 0xe5, 0xcb, 0x75, 0x6d, 0x82, 0xe2, 0xfd, 0xda, 0x83, 0xe9, 0x5a,
		0x8e, 0xb0, 0x6a, 0x77, 0xcf, 0xb5, 0xe0, 0xc1, 0xf6, 0x7f, 0xb8, 0x57, 0xd7, 0xb5, 0xd8, 0xd6,
		0x51, 0x3f, 0x1f, 0xad, 0xc9, 0x63, 0x33, 0x7d, 0x9c, 0x26, 0x90, 0xdd, 0x14, 0x72, 0x9b, 0x44,
		0x65, 0xa6, 0x51, 0x99, 0x89, 0x54, 0x61, 0x2a, 0x99, 0x98, 0xaf, 0xb2, 0x99, 0x72, 0xcd, 0x11,
		0x55, 0x57, 0x16, 0x76, 0xd3, 0xc6, 0xc7, 0x2a, 0xe3, 0x62, 0x82, 0xcd, 0x97, 0x9f, 0x7f, 0x91,
		0xdb, 0x1f, 0xc5, 0xe7, 0xba, 0xd8, 0x37, 0x0b, 0x02, 0x0d, 0xaa, 0x55, 0xa1, 0x62, 0x35, 0x14,
		0x9b, 0x90, 0xfc, 0xc3, 0x59, 0x60, 0x28, 0xeb, 0xbd, 0x99, 0x97, 0x2e, 0x36, 0x84, 0xf3, 0x4b,
		0x50, 0xa7, 0xed, 0x14, 0x9c, 0x4c, 0x39, 0x08, 0x22, 0x0d, 0x35, 0x28, 0x20, 0x05, 0x19, 0x74,
		0xa0, 0x82, 0x08, 0xe4, 0x50, 0x80, 0xdc, 0xe5, 0x53, 0xba, 0x76, 0xb5, 0xc6, 0x47, 0x36, 0xaa,
		0xa9, 0x5b, 0x0f, 0xbd, 0xa1, 0xd1, 0x73, 0xec, 0xe9, 0x8f, 0x97, 0x9c, 0xe8, 0xd9, 0xca, 0x4b,
		0x36, 0x2a, 0x39, 0x33, 0x89, 0x4a, 0xaf, 0x7d, 0xd3, 0xf1, 0x65, 0x63, 0x0e, 0x22, 0x19, 0x09,
		0x59, 0x4c, 0x41, 0x19, 0x43, 0x90, 0xc7, 0x0c, 0xd4, 0x31, 0x02, 0x5b, 0x4c, 0xc0, 0x16, 0x03,
		0x70, 0x60, 0x7e, 0xbd, 0x59, 0x01, 0x32, 0x59, 0x05, 0xc3, 0x2d, 0x4d, 0x44, 0xb7, 0x30, 0x49,
		0x00, 0x47, 0x09, 0x67, 0x29, 0x5c, 0xf3, 0xce, 0x11, 0x16, 0x9d, 0x11, 0x9d, 0x35, 0x48, 0x67,
		0x40, 0x09, 0x6e, 0x19, 0x84, 0xfd, 0x84, 0xfd, 0x84, 0xfd, 0x84, 0xfd, 0xa4, 0xb7, 0x9f, 0x8f,
		0xc1, 0x88, 0xce, 0x76, 0x86, 0x8d, 0xc1, 0xd0, 0xc1, 0xd0, 0xc1, 0xd0, 0x95, 0xc8, 0xd0, 0x91,
		0xdd, 0x22, 0x46, 0x78, 0x4b, 0x18, 0xf1, 0x51, 0x52, 0xc2, 0xf4, 0x22, 0xc7, 0x51, 0x50, 0xa6,
		0x43, 0x14, 0xf1, 0xf9, 0xbb, 0x0e, 0x71, 0xc5, 0x2e, 0xce, 0xe3, 0x75, 0x84, 0x62, 0x4e, 0x96,
		0xb3, 0x96, 0xb3, 0xb9, 0x3a, 0x62, 0x9a, 0xab, 0x46, 0x85, 0xa6, 0xaa, 0x24, 0xd9, 0xa7, 0x2e,
		0xf2, 0x19, 0x39, 0xda, 0xe1, 0xcb, 0x67, 0x44, 0x14, 0x7f, 0x89, 0x93, 0x19, 0xae, 0xb0, 0xef,
		0x1f, 0xee, 0x06, 0x9e, 0x2f, 0x9f, 0xcf, 0x98, 0x37, 0x85, 0x94, 0x06, 0x52, 0x1a, 0x5a, 0x00,
		0x69, 0xc5, 0x52, 0x1a, 0xb3, 0x1d, 0x43, 0x17, 0x4e, 0xc6, 0x2d, 0xd2, 0xc4, 0x94, 0x4d, 0xc4,
		0x94, 0x88, 0x29, 0x77, 0x31, 0xa6, 0xa4, 0xd2, 0x60, 0xca, 0x8a, 0x05, 0xd6, 0x2e, 0x5e, 0x29,
		0xf1, 0x00, 0xd3, 0x76, 0x27, 0xdf, 0xf6, 0x1c, 0xdb, 0x9f, 0xcd, 0x0c, 0x70, 0x99, 0x03, 0x76,
		0xb3, 0xc0, 0x6e, 0x1e, 0x38, 0xcd, 0x04, 0x71, 0xe4, 0x55, 0x56, 0x09, 0xb7, 0xcd, 0x28, 0xe0,
		0x26, 0x57, 0xed, 0x72, 0x91, 0x37, 0x90, 0x47, 0x2b, 0x34, 0x37, 0xca, 0xcc, 0x8e, 0x32, 0xf3,
		0xa3, 0xc2, 0x0c, 0xd1, 0x9a, 0x23, 0x06, 0x06, 0xb0, 0xc6, 0x5a, 0xb1, 0x42, 0xd5, 0x6d, 0x36,
		0x9c, 0x17, 0x2f, 0xb0, 0x5f, 0xb0, 0x50, 0xf1, 0x5b, 0x68, 0xba, 0x1c, 0x43, 0xae, 0xe2, 0x2a,
		0x80, 0xca, 0xdf, 0x1e, 0xd3, 0x2d, 0xeb, 0x99, 0x0b, 0x42, 0xf0, 0xec, 0xd8, 0xee, 0x1f, 0x86,
		0x63, 0x3e, 0x0b, 0x8f, 0xed, 0x76, 0xc9, 0x79, 0x39, 0x9d, 0x74, 0x5f, 0x00, 0x42, 0x00, 0x42,
		0x00, 0x42, 0x3b, 0x03, 0x84, 0x3e, 0x9a, 0xae, 0x65, 0x06, 0x03, 0xef, 0x99, 0xe1, 0x30, 0x27,
		0x3f, 0xc8, 0x1a, 0x3e, 0x3c, 0xfb, 0x00, 0x59, 0xeb, 0x40, 0x56, 0xf2, 0xfe, 0x99, 0xe5, 0x6b,
		0x6d, 0x5a, 0xe3, 0x83, 0xbf, 0x1e, 0xfc, 0x1d, 0xd8, 0x28, 0x89, 0x8d, 0x5e, 0x1f, 0xaf, 0x5d,
		0x82, 0x34, 0x28, 0x77, 0x24, 0x95, 0xf8, 0x8e, 0x73, 0xc1, 0xf1, 0x2b, 0xa9, 0x5c, 0x38, 0xfd,
		0xf4, 0x10, 0x4c, 0x0d, 0x25, 0x29, 0x47, 0x4f, 0xc6, 0x11, 0x63, 0x4f, 0x70, 0xfa, 0xe0, 0xf4,
		0x55, 0x63, 0xc8, 0x72, 0x19, 0x61, 0x72, 0x3c, 0xc7, 0x58, 0xd6, 0x95, 0xa3, 0x8c, 0x6b, 0xba,
		0x6c, 0xab, 0x3d, 0xdc, 0x26, 0x6b, 0x3e, 0xad, 0xc9, 0x4e, 0x6e, 0xd0, 0xa7, 0xcd, 0x96, 0x3c,
		0x4f, 0xdb, 0x82, 0x4d, 0x87, 0x4d, 0xdf, 0x41, 0x9b, 0x8e, 0x3c, 0x2d, 0xe8, 0x49, 0x66, 0x33,
		0xc3, 0x6d, 0x6e, 0x94, 0x99, 0x1d, 0x65, 0xe6, 0x47, 0x85, 0x19, 0xa2, 0x67, 0x0c, 0x6a, 0xc8,
		0xd3, 0x6e, 0x00, 0x2c, 0xc8, 0xd3, 0x22, 0x4f, 0x9b, 0xb9, 0x17, 0xe4, 0x69, 0x79, 0x4c, 0x14,
		0xf2, 0xb4, 0x00, 0x42, 0x00, 0x42, 0x00, 0x42, 0xd5, 0x03, 0x42, 0xc8, 0xd3, 0x6e, 0x2f, 0xc8,
		0x42, 0x9e, 0x36, 0x1f, 0x36, 0x42, 0x9e, 0x96, 0x09, 0xd2, 0x0c, 0x3c, 0xfb, 0x9e, 0xa3, 0x94,
		0x41, 0xec, 0x50, 0xa7, 0xed, 0x03, 0xba, 0x00, 0xba, 0x00, 0xba, 0x80, 0xc3, 0x21, 0x5b, 0xed,
		0x33, 0x85, 0x85, 0xc1, 0x62, 0x60, 0x16, 0x10, 0x46, 0x9b, 0xa1, 0xed, 0x4b, 0x77, 0xf4, 0x18,
		0x0e, 0xd0, 0x18, 0x52, 0xa0, 0x2c, 0xfb, 0x69, 0x1b, 0xa4, 0x40, 0x84, 0xd7, 0x5f, 0xe3, 0xee,
		0xb3, 0xa8, 0x21, 0xdc, 0x7d, 0x56, 0xba, 0xbb, 0xcf, 0x2a, 0x73, 0x09, 0x43, 0x7a, 0x8b, 0xaa,
		0xbd, 0x85, 0xe1, 0xd3, 0xac, 0x57, 0x94, 0x2d, 0x2a, 0xd7, 0x7a, 0x28, 0x73, 0xe5, 0xa2, 0xa1,
		0x37, 0xf8, 0xf9, 0x6c, 0x98, 0x12, 0x57, 0x5b, 0xcd, 0x09, 0x9a, 0xb8, 0x29, 0x54, 0x2e, 0x42,
		0xe5, 0x22, 0x2d, 0xc1, 0x4d, 0xc5, 0x2a, 0x17, 0x11, 0x95, 0x35, 0xa1, 0x2d, 0x67, 0x82, 0xaa,
		0x45, 0x1a, 0xb9, 0x0c, 0x54, 0x2d, 0xaa, 0x6d, 0x4f, 0xd5, 0xa2, 0xc7, 0x81, 0xc5, 0x20, 0x85,
		0x9d, 0xb4, 0x4a, 0x76, 0x05, 0x6e, 0x7c, 0x59, 0xc0, 0xbb, 0xab, 0xaf, 0x17, 0xbf, 0x7d, 0xb8,
		0xc4, 0xb9, 0x89, 0xf2, 0x11, 0xa7, 0xd0, 0xd8, 0xea, 0x20, 0x46, 0x77, 0xe5, 0xdc, 0x84, 0x70,
		0x47, 0x8f, 0x62, 0x7a, 0xb7, 0x35, 0xc7, 0xd9, 0x09, 0x42, 0xb2, 0x93, 0x98, 0xe4, 0xac, 0x3a,
		0xe9, 0x55, 0x1d, 0x66, 0x24, 0x8e, 0x0c, 0x49, 0x8e, 0x2f, 0xea, 0xb9, 0xaf, 0x82, 0xe6, 0x60,
		0x0b, 0xe9, 0x81, 0x16, 0x72, 0xa4, 0xde, 0x02, 0x52, 0x07, 0x52, 0x07, 0x52, 0x07, 0x52, 0x07,
		0x52, 0x07, 0x52, 0x07, 0x52, 0x07, 0x52, 0x07, 0x52, 0xdf, 0x59, 0xa4, 0x4e, 0xa0, 0x2e, 0x40,
		0x2a, 0x91, 0x7c, 0x5a, 0xea, 0x52, 0x11, 0x4c, 0xd6, 0x4c, 0xf2, 0x75, 0xd8, 0xdd, 0x85, 0x37,
		0x2c, 0x73, 0xe2, 0x52, 0x2e, 0x1e, 0x23, 0x89, 0xc3, 0xc8, 0x12, 0x96, 0x2d, 0x24, 0x2c, 0xf9,
		0xa0, 0x0e, 0x12, 0x96, 0x64, 0xf1, 0x52, 0xbd, 0x37, 0x18, 0x85, 0x96, 0xc2, 0xa7, 0x4c, 0x59,
		0x46, 0x2d, 0x22, 0x69, 0x09, 0x2a, 0x04, 0x54, 0x88, 0x7e, 0x2a, 0xc4, 0x76, 0x0d, 0xcb, 0xf6,
		0x7b, 0xa6, 0x67, 0x09, 0xcb, 0x18, 0xfe, 0x11, 0xf8, 0x0c, 0xd5, 0xd9, 0x52, 0x5d, 0x80, 0xca,
		0x00, 0x95, 0x01, 0x2a, 0x63, 0x87, 0xa8, 0x8c, 0xc8, 0xed, 0x77, 0xda, 0x0c, 0x44, 0x06, 0xe1,
		0x01, 0x4e, 0xe2, 0xeb, 0x82, 0x67, 0xff, 0x18, 0x8e, 0xb1, 0x70, 0x5c, 0x1f, 0xcc, 0x64, 0x57,
		0x53, 0xcd, 0x33, 0x5d, 0x51, 0x1b, 0xb7, 0xcf, 0x78, 0x55, 0x2d, 0xf1, 0x8e, 0x5b, 0x9c, 0x52,
		0xf3, 0x67, 0xe5, 0xa7, 0x94, 0xe7, 0x84, 0x82, 0xb6, 0x59, 0x2e, 0xe9, 0xe1, 0xaa, 0xee, 0x36,
		0x95, 0x03, 0x76, 0x0d, 0xe1, 0x79, 0x03, 0x8f, 0x0f, 0x7b, 0x26, 0x9a, 0x07, 0xee, 0x04, 0xee,
		0x04, 0xee, 0x04, 0xee, 0x04, 0xee, 0x04, 0xee, 0x04, 0xee, 0x04, 0xee, 0x04, 0xee, 0xdc, 0x65,
		0xdc, 0xd9, 0x1f, 0x78, 0x7f, 0x4e, 0x49, 0xc9, 0x41, 0x2f, 0x10, 0x4c, 0xe8, 0x33, 0xd5, 0x09,
		0x30, 0x28, 0x30, 0x28, 0x30, 0x28, 0x30, 0x28, 0x30, 0x28, 0x30, 0x28, 0x30, 0x28, 0x30, 0x28,
		0x30, 0x28, 0x30, 0x28, 0x6b, 0xee, 0x7d, 0xa9, 0x0b, 0xe0, 0x4f, 0xe0, 0x4f, 0xe0, 0x4f, 0xe0,
		0x4f, 0xe0, 0x4f, 0xe0, 0x4f, 0xe0, 0x4f, 0xe0, 0x4f, 0xe0, 0xcf, 0x5d, 0xc6, 0x9f, 0x8c, 0xcc,
		0x27, 0xf8, 0x4e, 0xe0, 0x4d, 0xe0, 0x4d, 0xe0, 0x4d, 0xe0, 0x4d, 0xe0, 0x4d, 0xe0, 0x4d, 0xe0,
		0x4d, 0xe0, 0x4d, 0xe0, 0x4d, 0x3e, 0x96, 0x13, 0xdc, 0x26, 0xb0, 0x26, 0xb0, 0x26, 0xb0, 0x26,
		0xb0, 0x26, 0xb0, 0x26, 0xb0, 0x26, 0xb0, 0x26, 0xb0, 0xe6, 0x6e, 0x63, 0xcd, 0xc1, 0x28, 0x60,
		0x3f, 0xd8, 0xbe, 0xa2, 0x0f, 0x20, 0x50, 0x20, 0x50, 0x20, 0x50, 0x20, 0x50, 0x20, 0x50, 0x20,
		0x50, 0x20, 0x50, 0x20, 0x50, 0x20, 0xd0, 0x9d, 0x46, 0xa0, 0x9c, 0x47, 0xdb, 0x97, 0xda, 0x07,
		0xf2, 0x04, 0xf2, 0x04, 0xf2, 0x04, 0xf2, 0x04, 0xf2, 0x04, 0xf2, 0x04, 0xf2, 0x04, 0xf2, 0x04,
		0xf2, 0xdc, 0x69, 0xe4, 0xc9, 0x7f, 0xb8, 0x7d, 0x65, 0x2f, 0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1,
		0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1, 0xcc, 0x19,
		0x78, 0x9c, 0x6f, 0x07, 0x02, 0x05, 0x02, 0x05, 0x02, 0x05, 0x02, 0x05, 0x02, 0x05, 0x02, 0x05,
		0x02, 0x05, 0x02, 0x05, 0x02, 0x9d, 0x23, 0x50, 0x4e, 0xf6, 0x13, 0x9c, 0x27, 0x10, 0x27, 0x10,
		0x27, 0x10, 0x27, 0x10, 0x27, 0x10, 0x27, 0x10, 0x27, 0x10, 0x27, 0x10, 0x27, 0x10, 0x67, 0xc0,
		0xc8, 0x74, 0x82, 0xdf, 0x04, 0xda, 0x04, 0xda, 0x04, 0xda, 0x04, 0xda, 0x04, 0xda, 0x04, 0xda,
		0x04, 0xda, 0x04, 0xda, 0xac, 0x30, 0xda, 0xd4, 0x7a, 0x7d, 0xfc, 0x85, 0xeb, 0x0e, 0x02, 0x33,
		0x5c, 0x02, 0x34, 0xb7, 0xc8, 0xfb, 0xbd, 0x07, 0xf1, 0x68, 0x0e, 0xcd, 0xe0, 0x21, 0xf4, 0x58,
		0x87, 0x83, 0xa1, 0x70, 0x7b, 0x13, 0x44, 0x68, 0xd8, 0xa1, 0xef, 0xea, 0x9b, 0x3d, 0xe1, 0x1f,
		0xae, 0x7a, 0x79, 0xe8, 0x8f, 0xee, 0x12, 0xef, 0x27, 0xff, 0x3a, 0xb4, 0x87, 0x4f, 0xed, 0x43,
		0x3f, 0x30, 0x03, 0x71, 0x18, 0xf9, 0x40, 0x0a, 0xf4, 0x5b, 0xf7, 0x03, 0x6f, 0xd4, 0x0b, 0xdc,
		0xc8, 0xbb, 0x5e, 0xcd, 0xba, 0xbb, 0xfd, 0x9a, 0xe8, 0xfb, 0xf6, 0x6a, 0xf8, 0xd4, 0xbe, 0xfd,
		0xc7, 0xac, 0xd7, 0x3d, 0x3d, 0x33, 0x2d, 0x31, 0xcb, 0x75, 0xeb, 0xa1, 0x37, 0x34, 0x7a, 0x8e,
		0x3d, 0xc5, 0x5e, 0x72, 0x53, 0x1c, 0x43, 0x91, 0x64, 0xa3, 0x92, 0x2b, 0xf0, 0x9d, 0xe8, 0x9b,
		0x23, 0x67, 0x82, 0x0b, 0xfb, 0xa6, 0xe3, 0x0b, 0xd9, 0xf6, 0x68, 0x8c, 0x34, 0x59, 0x1c, 0x43,
		0x19, 0xbf, 0x90, 0xc7, 0x2d, 0xd4, 0xf1, 0x0a, 0x5b, 0x9c, 0xc2, 0x16, 0x9f, 0x70, 0xc4, 0x25,
		0x7a, 0x2d, 0x3a, 0x59, 0xfc, 0x11, 0xaf, 0xb6, 0xbb, 0xc1, 0xc0, 0x11, 0xa6, 0x4b, 0xb1, 0xde,
		0xa2, 0xcd, 0xd9, 0x6c, 0x56, 0xd0, 0x90, 0x0a, 0xd7, 0xbc, 0x73, 0x84, 0x45, 0x67, 0x44, 0x67,
		0x0d, 0xd2, 0x19, 0xd0, 0x70, 0x5f, 0xc0, 0x7e, 0xc2, 0x7e, 0xc2, 0x7e, 0xc2, 0x7e, 0x96, 0xce,
		0x7e, 0x3e, 0x06, 0x23, 0x3a, 0xdb, 0x19, 0x36, 0x06, 0x43, 0x07, 0x43, 0x07, 0x43, 0x57, 0x22,
		0x43, 0x37, 0xb2, 0xdd, 0xa0, 0xd9, 0x21, 0xb4, 0x73, 0x1d, 0x82, 0xa6, 0x68, 0xd9, 0x68, 0x42,
		0x5a, 0x9f, 0x83, 0x7d, 0x66, 0xa2, 0x28, 0x63, 0x6a, 0xb2, 0x73, 0x4a, 0xdc, 0x30, 0x23, 0x01,
		0x49, 0x48, 0x2f, 0xb3, 0xd0, 0xca, 0xb3, 0xb9, 0x3a, 0x62, 0x9a, 0xab, 0x46, 0x85, 0xa6, 0xaa,
		0x24, 0x5c, 0x6c, 0x57, 0x17, 0xac, 0xda, 0x53, 0xb8, 0xc0, 0xa9, 0x38, 0x5f, 0x6e, 0xae, 0xb7,
		0x98, 0x7f, 0xcd, 0x3f, 0x94, 0x05, 0x86, 0xb1, 0x3e, 0x72, 0xdd, 0xd1, 0xe3, 0x9d, 0xf0, 0x24,
		0xe8, 0x80, 0xb9, 0xd7, 0x9c, 0xb7, 0x55, 0x70, 0x42, 0x67, 0x51, 0x41, 0xc1, 0xaf, 0xcb, 0x22,
		0x58, 0x0a, 0xe4, 0xba, 0x80, 0x58, 0xfb, 0x12, 0x10, 0x82, 0x0a, 0xa9, 0x92, 0x23, 0x54, 0x72,
		0x64, 0x9a, 0x42, 0xa4, 0xfd, 0x7a, 0x45, 0x0c, 0xd0, 0x3b, 0xdb, 0x93, 0x5b, 0x2c, 0xbd, 0xd9,
		0x8a, 0x25, 0x8a, 0x26, 0xa3, 0xf6, 0x68, 0x02, 0xca, 0xe6, 0xb6, 0x07, 0x94, 0x7d, 0x04, 0x94,
		0x1c, 0x01, 0x65, 0xbf, 0xea, 0x01, 0xa5, 0xec, 0xb6, 0x8e, 0x1b, 0xa2, 0x62, 0xda, 0x53, 0xab,
		0x97, 0x86, 0x71, 0x9f, 0xff, 0x60, 0xda, 0xd4, 0x25, 0x53, 0x10, 0x57, 0x3d, 0x49, 0x66, 0x1f,
		0x92, 0x4c, 0x1d, 0x92, 0xcc, 0x3e, 0x24, 0x99, 0x79, 0x57, 0x2b, 0x1d, 0xb5, 0x9f, 0x42, 0x11,
		0x4d, 0xe8, 0x93, 0x6a, 0xb5, 0xfa, 0xe5, 0xcf, 0x09, 0xd5, 0x20, 0x4f, 0xde, 0xd1, 0xc3, 0x8c,
		0x41, 0xcf, 0x10, 0x3f, 0x83, 0xf3, 0x40, 0x38, 0xe2, 0x51, 0x04, 0xde, 0xb3, 0x31, 0x70, 0x8d,
		0xde, 0xc3, 0x84, 0x6d, 0x64, 0x81, 0x1e, 0x13, 0x17, 0xc3, 0x80, 0x3d, 0x74, 0xc3, 0x8e, 0xee,
		0xce, 0x48, 0xd8, 0xe6, 0x91, 0xfe, 0x61, 0x14, 0x71, 0x54, 0x30, 0x8d, 0x17, 0xff, 0x26, 0xc3,
		0x13, 0x7d, 0xba, 0x10, 0x6c, 0xb1, 0x59, 0x44, 0x62, 0x88, 0xc4, 0x10, 0x89, 0xe9, 0x8f, 0xc4,
		0x88, 0x88, 0x16, 0x1e, 0xc2, 0x85, 0x78, 0xbb, 0x23, 0x5e, 0x42, 0xbc, 0x84, 0x78, 0x89, 0xd2,
		0x7c, 0xa4, 0x31, 0x03, 0xfd, 0xb2, 0x4a, 0xe1, 0x07, 0xea, 0x65, 0xc5, 0x94, 0x51, 0xa7, 0x36,
		0x32, 0x9c, 0xc6, 0x86, 0xdd, 0xe8, 0x70, 0x1b, 0x1f, 0x65, 0x46, 0x48, 0x99, 0x31, 0x52, 0x61,
		0x94, 0x68, 0x8d, 0x13, 0xb1, 0x91, 0xe2, 0x23, 0x77, 0x52, 0xab, 0xdd, 0x11, 0x66, 0x5f, 0x3e,
		0x28, 0xd9, 0x88, 0x5c, 0x4e, 0x18, 0xda, 0xbe, 0x8e, 0x23, 0xd8, 0x70, 0x59, 0x9c, 0x27, 0x22,
		0xd3, 0xa5, 0x37, 0xa2, 0xbf, 0x27, 0x07, 0xa1, 0x4a, 0x7a, 0x58, 0x8f, 0x52, 0xcb, 0x93, 0x8c,
		0xcb, 0xf9, 0xfc, 0xd1, 0x42, 0x2f, 0x70, 0x49, 0x70, 0x49, 0x70, 0x49, 0x70, 0x49, 0x70, 0x49,
		0x19, 0x5d, 0xd2, 0xcd, 0xdc, 0x25, 0xfd, 0xad, 0x37, 0xf2, 0x3c, 0xe1, 0x06, 0xfb, 0x07, 0x87,
		0x6f, 0xdf, 0xce, 0xc9, 0xd6, 0x6e, 0xf4, 0x95, 0x45, 0xce, 0x35, 0xfd, 0x5e, 0xdc, 0xb2, 0x25,
		0x7e, 0x96, 0xd6, 0xbb, 0x95, 0x2a, 0xfa, 0x23, 0x4b, 0xb9, 0xcc, 0xfe, 0xf1, 0x11, 0x09, 0xec,
		0x29, 0x98, 0x35, 0xc6, 0x93, 0x30, 0x15, 0xb3, 0xd2, 0x6a, 0x96, 0x8d, 0x58, 0xe8, 0x52, 0x11,
		0xad, 0xb4, 0xa9, 0x9a, 0x39, 0xa4, 0x53, 0x91, 0xb2, 0x59, 0xc8, 0x50, 0x90, 0x24, 0x70, 0xe8,
		0x26, 0x69, 0x4c, 0x52, 0x0e, 0xc1, 0x0c, 0x04, 0x3d, 0xd5, 0x3b, 0x6d, 0xb6, 0xe4, 0x4c, 0x6f,
		0x0b, 0x4c, 0x6f, 0x75, 0x10, 0x2d, 0x98, 0x5e, 0x30, 0xbd, 0x08, 0xab, 0x11, 0x56, 0x23, 0xac,
		0x46, 0x58, 0x8d, 0xb0, 0x1a, 0x4c, 0xef, 0x7a, 0x44, 0x0b, 0xa6, 0x17, 0x2e, 0x09, 0x2e, 0x09,
		0x2e, 0x09, 0x2e, 0xa9, 0xb4, 0x2e, 0x09, 0x4c, 0xaf, 0xbe, 0xe8, 0x6f, 0x8b, 0xe8, 0x38, 0x89,
		0x13, 0xe3, 0x0c, 0x6c, 0x1c, 0x4a, 0xba, 0x4a, 0xcd, 0xa6, 0xda, 0xe2, 0xae, 0xff, 0x8e, 0x9f,
		0xe2, 0x36, 0xfe, 0xd8, 0x17, 0xd1, 0xaf, 0xa2, 0x36, 0x9f, 0x86, 0xc2, 0x25, 0xa5, 0x6e, 0xc9,
		0xb5, 0xf8, 0x2d, 0x68, 0xf1, 0xf5, 0x43, 0x4e, 0x68, 0xf1, 0x33, 0xff, 0x20, 0x9c, 0x8a, 0xc6,
		0xa9, 0xe8, 0xd2, 0xc5, 0xbc, 0xc8, 0xfd, 0xe8, 0x88, 0x69, 0x71, 0x2a, 0x5a, 0x1a, 0x45, 0xe0,
		0x54, 0x74, 0x65, 0x21, 0x3e, 0x41, 0x88, 0x86, 0x0a, 0x6b, 0xf4, 0xf3, 0x52, 0x97, 0x8a, 0x37,
		0xf2, 0x07, 0x59, 0xca, 0xca, 0xba, 0xed, 0x31, 0xce, 0xb4, 0xec, 0x0c, 0xf3, 0xcd, 0x6c, 0x81,
		0xe9, 0xcc, 0x3e, 0x8d, 0xf9, 0xe6, 0x2e, 0xfb, 0x0c, 0xe4, 0x18, 0xfd, 0xba, 0x3d, 0x7c, 0xea,
		0xe4, 0x1e, 0xf3, 0xb9, 0x78, 0x20, 0xfc, 0x76, 0xce, 0xb9, 0x2e, 0x16, 0xc1, 0x16, 0x06, 0x98,
		0x32, 0x40, 0x52, 0xba, 0xf0, 0xb3, 0x2c, 0x30, 0x24, 0x03, 0x80, 0x64, 0x40, 0x8f, 0xa2, 0x70,
		0x33, 0xaf, 0x2d, 0x29, 0x1a, 0x21, 0xd6, 0x4d, 0xcb, 0xf2, 0x84, 0xef, 0x0b, 0x5f, 0xbe, 0x08,
		0xe5, 0xbc, 0x29, 0xd4, 0xa0, 0x94, 0xae, 0x9a, 0xbe, 0xc3, 0x35, 0x28, 0x87, 0x3b, 0x53, 0x83,
		0x32, 0xda, 0x31, 0x74, 0x6c, 0xeb, 0xac, 0x41, 0xd4, 0x3e, 0x61, 0xdf, 0xa0, 0xe0, 0x5b, 0x39,
		0x36, 0xf0, 0x96, 0xf1, 0xad, 0xa8, 0x7d, 0x52, 0x05, 0x56, 0x14, 0xd7, 0x77, 0xe3, 0xfa, 0xee,
		0x5a, 0xa9, 0x15, 0xf1, 0x43, 0x46, 0x29, 0xfc, 0x10, 0x82, 0x43, 0x35, 0x82, 0xc3, 0x21, 0x04,
		0x87, 0x1a, 0xcd, 0x8f, 0x0a, 0x33, 0x44, 0x6b, 0x8e, 0x88, 0xcd, 0x52, 0x3c, 0x00, 0xfc, 0x82,
		0x43, 0x7b, 0xf8, 0xd4, 0x31, 0x68, 0x62, 0x91, 0x8d, 0x80, 0xe5, 0x94, 0x47, 0x75, 0x18, 0x08,
		0xcf, 0x25, 0x3d, 0xbd, 0xbc, 0xd0, 0xc1, 0xfe, 0xfe, 0x4d, 0xc3, 0x38, 0x33, 0x8d, 0xfe, 0x85,
		0xf1, 0xbe, 0xfb, 0xab, 0xf9, 0xa6, 0x3d, 0x3e, 0x3f, 0xf8, 0x75, 0x32, 0x5e, 0x7e, 0xf3, 0x65,
		0xd5, 0xc7, 0x9a, 0x6f, 0x4e, 0xc6, 0xe7, 0x6b, 0xfe, 0x4b, 0x67, 0x7c, 0x9e, 0xb1, 0x8d, 0xe3,
		0xf1, 0x7e, 0xea, 0xa3, 0xe1, 0xfb, 0xad, 0x75, 0x5f, 0x68, 0xaf, 0xf9, 0xc2, 0xd1, 0xba, 0x2f,
		0x1c, 0xad, 0xf9, 0xc2, 0xda, 0x47, 0x6a, 0xad, 0xf9, 0xc2, 0xf1, 0xf8, 0x25, 0xf5, 0xf9, 0xfd,
		0xd5, 0x1f, 0xed, 0x8c, 0x0f, 0x5e, 0xd6, 0xfd, 0xb7, 0x93, 0xf1, 0xcb, 0xf9, 0xc1, 0x01, 0xfd,
		0x46, 0xef, 0x72, 0x2c, 0xc0, 0xcf, 0x5f, 0xaf, 0xfe, 0xc3, 0xbe, 0x0a, 0x7f, 0xc7, 0x32, 0xd4,
		0xb5, 0x0c, 0xff, 0xc2, 0xb0, 0x0e, 0x77, 0xe0, 0x24, 0xce, 0x14, 0x7e, 0x18, 0x8e, 0x70, 0xef,
		0x27, 0x19, 0x2f, 0x26, 0x3c, 0xbc, 0xd8, 0x0d, 0xa0, 0x31, 0xa0, 0x31, 0xa0, 0xf1, 0xce, 0x40,
		0xe3, 0x8f, 0xa6, 0x6b, 0x99, 0xc1, 0xc0, 0x7b, 0xa6, 0xa3, 0xc3, 0x14, 0xc2, 0xee, 0x91, 0xed,
		0x06, 0xa7, 0x8c, 0x78, 0xfb, 0x98, 0xa1, 0x69, 0xda, 0xab, 0x55, 0x97, 0xff, 0xf1, 0xec, 0xfc,
		0x1a, 0xd7, 0xd5, 0xab, 0x8a, 0xfc, 0x45, 0xaa, 0x1b, 0xa6, 0xeb, 0x3e, 0x53, 0xfd, 0x30, 0x5e,
		0xff, 0xc9, 0x6c, 0x19, 0x96, 0xac, 0xc4, 0xcf, 0xad, 0x9b, 0xfa, 0x66, 0xeb, 0x74, 0x8b, 0x26,
		0x7f, 0xaf, 0x1a, 0xad, 0x76, 0x71, 0xc4, 0x30, 0x0b, 0x2a, 0xa9, 0xd8, 0x11, 0xc3, 0xce, 0x61,
		0xac, 0x84, 0x99, 0xbd, 0xda, 0xc2, 0x52, 0x5f, 0x84, 0x39, 0x09, 0xfa, 0x5c, 0xc4, 0xce, 0x1f,
		0xf4, 0x40, 0x4a, 0x13, 0x29, 0xcd, 0x5a, 0x25, 0x0e, 0x7a, 0xd0, 0x17, 0x27, 0xe0, 0x28, 0x4a,
		0x10, 0x17, 0x23, 0x78, 0xfb, 0x76, 0x7a, 0x08, 0xe1, 0x90, 0x6a, 0xae, 0x51, 0xb8, 0x31, 0xef,
		0xb4, 0xee, 0x6a, 0xe1, 0x46, 0xd8, 0x74, 0xd8, 0xf4, 0x1a, 0x64, 0x2a, 0xe5, 0x0e, 0xb0, 0xc1,
		0xc5, 0xab, 0x34, 0x37, 0xca, 0xcc, 0x8e, 0x32, 0xf3, 0xa3, 0xc2, 0x0c, 0xf1, 0x10, 0x1a, 0x90,
		0xa9, 0xac, 0x03, 0x2c, 0x90, 0xa9, 0x40, 0x1f, 0x00, 0x99, 0x4a, 0xa1, 0x5e, 0x20, 0x53, 0x81,
		0x4c, 0x85, 0xdf, 0x7d, 0x51, 0xca, 0x54, 0x06, 0x9e, 0x7d, 0xcf, 0x90, 0x1a, 0x9c, 0x43, 0xb4,
		0x69, 0xfb, 0x00, 0xc3, 0x00, 0xc3, 0x00, 0xc3, 0x00, 0xc3, 0x84, 0x60, 0x78, 0x06, 0x85, 0x0d,
		0x16, 0x13, 0xb3, 0x80, 0x88, 0xdb, 0x0c, 0x6d, 0x5f, 0xba, 0xa3, 0xc7, 0x70, 0x88, 0xc6, 0xd0,
		0x42, 0x52, 0xad, 0x09, 0x68, 0x21, 0xe1, 0x72, 0xe0, 0x72, 0xa0, 0x85, 0x84, 0x16, 0x32, 0x65,
		0xb6, 0xa0, 0x85, 0x4c, 0x2e, 0x15, 0x68, 0x21, 0x73, 0xf7, 0x03, 0x2d, 0x64, 0x69, 0xa7, 0x1e,
		0x5a, 0x48, 0x0d, 0xad, 0xee, 0x02, 0x37, 0xe4, 0x07, 0x66, 0x30, 0xf2, 0x19, 0xaf, 0x11, 0x9a,
		0xb6, 0x0f, 0xa0, 0x0e, 0xa0, 0x0e, 0xa0, 0x0e, 0x6e, 0x88, 0x6c, 0xb5, 0x0b, 0x77, 0xf4, 0x28,
		0xbc, 0xa9, 0x04, 0x1b, 0xac, 0x10, 0xa4, 0xf6, 0xf9, 0x1d, 0x9f, 0x42, 0xa9, 0x7d, 0xb9, 0xae,
		0xf1, 0x21, 0xd0, 0x66, 0x3e, 0x79, 0x1e, 0x83, 0xd6, 0x7e, 0xd2, 0x2a, 0x0a, 0x88, 0x95, 0x0e,
		0x09, 0x40, 0x99, 0xa9, 0xc3, 0xd3, 0x6f, 0xb9, 0x32, 0x33, 0xdc, 0xec, 0xc6, 0xbd, 0x37, 0x18,
		0x31, 0x2a, 0x34, 0x13, 0x7d, 0xf0, 0x04, 0x20, 0x4d, 0x04, 0x20, 0x08, 0x40, 0x10, 0x80, 0x94,
		0x2f, 0x00, 0xa1, 0x36, 0x57, 0x71, 0xc3, 0xc4, 0xe5, 0x53, 0xd7, 0x6e, 0x26, 0xd2, 0x72, 0xaa,
		0x8a, 0xcc, 0x17, 0xbb, 0x19, 0x53, 0x61, 0xce, 0x94, 0x99, 0x35, 0x55, 0xe6, 0x4d, 0xb9, 0x99,
		0x53, 0x6e, 0xee, 0x54, 0x9a, 0x3d, 0x1e, 0xf3, 0xc7, 0x64, 0x06, 0xd9, 0xcd, 0x61, 0xdc, 0x81,
		0xd9, 0xeb, 0x89, 0x61, 0x60, 0x3c, 0x0e, 0x2c, 0x05, 0x0b, 0x39, 0x2e, 0x2d, 0x9f, 0xe8, 0x94,
		0x79, 0x65, 0x31, 0xdd, 0xfe, 0xf7, 0x9a, 0x81, 0xe6, 0x4e, 0x2f, 0x71, 0x1b, 0x6a, 0x95, 0x06,
		0x5b, 0xb9, 0xe1, 0x56, 0x6d, 0xc0, 0xb5, 0x19, 0x72, 0x6d, 0x06, 0x5d, 0x87, 0x61, 0xe7, 0x35,
		0xf0, 0xcc, 0x86, 0x3e, 0x1e, 0x30, 0x36, 0x02, 0x7e, 0xed, 0x6e, 0xa3, 0xbf, 0x1d, 0xf1, 0x55,
		0xf4, 0xda, 0xdc, 0xab, 0xe6, 0x02, 0xe0, 0x14, 0x3f, 0x98, 0xd6, 0x93, 0xf0, 0x02, 0xdb, 0x17,
		0xe1, 0x76, 0x99, 0x52, 0xd9, 0x4f, 0xa6, 0xa3, 0xd0, 0x27, 0xaf, 0xee, 0x5f, 0x9d, 0x7b, 0x6e,
		0x36, 0x1a, 0x70, 0xce, 0x70, 0xce, 0x70, 0xce, 0x70, 0xce, 0x70, 0xce, 0x49, 0xe9, 0x69, 0xb3,
		0xa3, 0xd0, 0x37, 0x77, 0x14, 0x74, 0xc5, 0xab, 0x4d, 0x5d, 0xfe, 0xa7, 0xc6, 0x7c, 0xd4, 0x54,
		0x69, 0x57, 0x35, 0x39, 0xb5, 0x54, 0xb7, 0xb1, 0xc0, 0x51, 0x71, 0xbf, 0x0a, 0xe5, 0x8e, 0x8a,
		0xcd, 0xcb, 0xe2, 0x52, 0x32, 0x7f, 0xee, 0xdc, 0x52, 0x6a, 0x37, 0xce, 0x8e, 0x77, 0x68, 0x35,
		0xed, 0x6d, 0x47, 0x2f, 0x5d, 0x04, 0x73, 0xa9, 0x65, 0x35, 0xf4, 0x84, 0x78, 0x1c, 0x06, 0xea,
		0xa2, 0xb7, 0x59, 0x87, 0xea, 0xc2, 0xb5, 0x10, 0xa7, 0x22, 0x5e, 0x43, 0xbc, 0x86, 0x78, 0x0d,
		0xf1, 0x1a, 0xe2, 0x35, 0x90, 0xa9, 0x65, 0xf4, 0xbf, 0x86, 0x25, 0x1c, 0xf3, 0x59, 0xb9, 0x17,
		0x8e, 0xba, 0x55, 0xe7, 0x8b, 0x41, 0x9c, 0xc2, 0x11, 0xc3, 0x11, 0xc3, 0x11, 0xc3, 0x11, 0x83,
		0x38, 0xa5, 0xfb, 0x07, 0xe2, 0x94, 0xa5, 0x5b, 0x45, 0x45, 0x01, 0x52, 0xfd, 0x82, 0x38, 0xdd,
		0xda, 0xa5, 0x74, 0xd4, 0x69, 0x34, 0x40, 0x9c, 0x56, 0xad, 0x17, 0x10, 0xa7, 0xab, 0x02, 0x37,
		0x7b, 0xe0, 0xd9, 0x81, 0xd2, 0x98, 0x2d, 0xea, 0x11, 0x4a, 0x17, 0x04, 0x6c, 0x08, 0xd8, 0x10,
		0xb0, 0x21, 0x60, 0xd3, 0x16, 0xb0, 0x9d, 0x2a, 0x8c, 0xd7, 0x8e, 0x11, 0xaf, 0x21, 0x5e, 0xcb,
		0x03, 0xb2, 0x21, 0x74, 0x41, 0xbc, 0x46, 0xb4, 0x94, 0x5a, 0xc7, 0x6d, 0x84, 0x6b, 0x08, 0xd7,
		0xaa, 0x1f, 0xae, 0x3d, 0xd9, 0x5e, 0x30, 0x32, 0x9d, 0xf8, 0xe2, 0x1b, 0x65, 0x51, 0xdb, 0x72,
		0xc7, 0x08, 0xa7, 0x10, 0x4e, 0x21, 0x9c, 0x42, 0x38, 0x85, 0x70, 0x2a, 0x75, 0x05, 0x83, 0x4a,
		0x2d, 0xca, 0x99, 0x82, 0xbe, 0xa2, 0xb1, 0xdc, 0xba, 0x98, 0x2a, 0x71, 0x93, 0x5c, 0x5b, 0xe1,
		0xdc, 0xa5, 0xe6, 0xf0, 0x54, 0x61, 0x9f, 0xdc, 0x77, 0x7e, 0xad, 0xed, 0x78, 0x7a, 0x15, 0x58,
		0xf7, 0xe5, 0xa6, 0x69, 0x9c, 0x75, 0xa7, 0x2f, 0x9b, 0x93, 0xff, 0x9b, 0xbe, 0x6e, 0xdd, 0x34,
		0x8c, 0xf6, 0xec, 0xf5, 0xf1, 0x4d, 0xc3, 0x38, 0xee, 0x1e, 0xfc, 0xf8, 0xf1, 0xf6, 0xe0, 0xd7,
		0xd1, 0x38, 0xff, 0x17, 0xeb, 0xca, 0x7e, 0x5a, 0x57, 0xe5, 0xd4, 0xa9, 0xb8, 0xb3, 0x6d, 0x6d,
		0xef, 0xbf, 0xab, 0x9c, 0xc0, 0xbf, 0x28, 0x9c, 0xc1, 0xbd, 0x2d, 0x8a, 0xef, 0xf5, 0x18, 0xcf,
		0x0e, 0x8c, 0xa7, 0x12, 0xe3, 0x89, 0x7b, 0x14, 0xb7, 0xe1, 0x3a, 0x4f, 0xb8, 0x12, 0x5c, 0x0b,
		0xba, 0x4d, 0xd7, 0x82, 0x6a, 0x76, 0xac, 0x55, 0x67, 0x21, 0x99, 0xe3, 0xe0, 0x0f, 0xb6, 0x1f,
		0x5c, 0x04, 0x81, 0xa7, 0x26, 0x16, 0xfe, 0x68, 0xbb, 0x97, 0xce, 0xa4, 0x9e, 0x89, 0xaf, 0x86,
		0xec, 0xaf, 0x7f, 0x34, 0x7f, 0x26, 0x7a, 0x6c, 0x9e, 0xb6, 0xdb, 0x9d, 0x93, 0x76, 0xbb, 0x71,
		0x72, 0x74, 0xd2, 0x38, 0x3b, 0x3e, 0x6e, 0x76, 0x9a, 0x2a, 0xb2, 0x8e, 0x9f, 0x3d, 0x4b, 0x78,
		0xc2, 0xfa, 0xed, 0xb9, 0x7e, 0x5e, 0x73, 0x47, 0x8e, 0x03, 0xde, 0x3a, 0x35, 0x44, 0x33, 0xfa,
		0xd8, 0xb1, 0xdd, 0x3f, 0x0c, 0x67, 0xd0, 0x53, 0x59, 0x68, 0x67, 0x45, 0xdf, 0x60, 0xaf, 0xf3,
		0xe1, 0x05, 0xb0, 0xd7, 0x84, 0x8b, 0x03, 0xec, 0x35, 0xd8, 0xeb, 0x4c, 0x8c, 0x2b, 0xd8, 0x6b,
		0xba, 0xb1, 0x04, 0x7b, 0x0d, 0x02, 0x46, 0x96, 0x80, 0x01, 0x7b, 0x5d, 0x71, 0xca, 0x01, 0xec,
		0x75, 0x19, 0xdd, 0x9d, 0x5e, 0xe3, 0x09, 0xf6, 0x5a, 0x8d, 0xf1, 0x04, 0xdd, 0x07, 0xf6, 0x7a,
		0x8b, 0x5c, 0x09, 0x96, 0x33, 0xd8, 0xeb, 0x92, 0x47, 0xa9, 0x35, 0x68, 0x68, 0x37, 0x72, 0x91,
		0xde, 0x60, 0x14, 0x08, 0xcf, 0xb0, 0x2d, 0xf5, 0x54, 0xe4, 0xbc, 0x6b, 0x30, 0x91, 0x60, 0x22,
		0xc1, 0x44, 0x82, 0x89, 0x04, 0x13, 0x89, 0x63, 0x89, 0xd5, 0x8b, 0xa3, 0x71, 0x2c, 0x91, 0xbf,
		0x5f, 0x1c, 0x4b, 0xdc, 0xda, 0xa5, 0xd4, 0x3a, 0x46, 0xf9, 0x6d, 0x84, 0x54, 0xaa, 0x42, 0xaa,
		0x4a, 0xdd, 0xc3, 0x78, 0x31, 0xba, 0x0f, 0x81, 0x9a, 0xb0, 0x58, 0xdd, 0xa6, 0xa2, 0xb0, 0xef,
		0x30, 0xc4, 0x9a, 0xfd, 0xf3, 0xc9, 0x1d, 0x4f, 0x7d, 0xb3, 0x27, 0xfc, 0xe5, 0x37, 0xa2, 0xbf,
		0xfd, 0xd1, 0x5d, 0xea, 0x33, 0xc9, 0xf7, 0x26, 0x6f, 0x0d, 0xcf, 0xed, 0xe1, 0x53, 0x27, 0x7a,
		0x19, 0x71, 0xd7, 0xd1, 0xa7, 0xe3, 0xbf, 0x0f, 0x9f, 0x3c, 0x6f, 0x78, 0x38, 0xbf, 0xd4, 0xfb,
		0x90, 0xf5, 0x92, 0xdc, 0xf8, 0xf7, 0xbe, 0x13, 0x7e, 0xcf, 0xb3, 0x87, 0xa1, 0x81, 0x09, 0x7f,
		0xf6, 0x85, 0x65, 0xd9, 0xe1, 0x6b, 0xd3, 0xa9, 0x7d, 0xff, 0xf2, 0xe5, 0xba, 0x66, 0x99, 0x81,
		0x59, 0xeb, 0x0f, 0xbc, 0xda, 0xd5, 0xf5, 0x53, 0xa7, 0x36, 0xff, 0xa5, 0x8a, 0x82, 0xe0, 0x26,
		0x82, 0x60, 0x04, 0xc1, 0x08, 0x82, 0x11, 0x04, 0xe7, 0x36, 0x6b, 0xb6, 0x22, 0xfd, 0xac, 0x06,
		0x95, 0x64, 0x6a, 0xa3, 0x2b, 0x57, 0x4b, 0xae, 0xf3, 0x1e, 0xef, 0x07, 0xde, 0xd4, 0x6d, 0x0c,
		0xdc, 0x65, 0x87, 0xf1, 0xa6, 0xe6, 0x8b, 0xc0, 0xaf, 0x05, 0x0f, 0xa2, 0x16, 0x3d, 0x6e, 0x2d,
		0x7c, 0xdc, 0xda, 0xe4, 0x71, 0x7f, 0xb8, 0x6a, 0x13, 0xba, 0x8a, 0x83, 0x08, 0x65, 0x6e, 0x46,
		0x87, 0xbb, 0xd1, 0xe6, 0x76, 0x74, 0xb9, 0x1f, 0xed, 0x6e, 0x48, 0xbb, 0x3b, 0xd2, 0xe9, 0x96,
		0x14, 0x87, 0xa6, 0x8a, 0xf6, 0xab, 0x32, 0xce, 0x36, 0xb5, 0x5b, 0x95, 0xaa, 0x48, 0x53, 0xf0,
		0xfe, 0x4c, 0x61, 0x9f, 0x4a, 0x55, 0xa5, 0x6a, 0xa2, 0xd5, 0x57, 0x66, 0x56, 0x8b, 0xca, 0x34,
		0x35, 0xc7, 0xa7, 0x1a, 0xfa, 0xd6, 0x25, 0x35, 0x89, 0x1f, 0x60, 0x3b, 0xd5, 0xa7, 0x31, 0x9f,
		0xa6, 0x63, 0x4a, 0x75, 0x4a, 0x88, 0xe2, 0xa7, 0xd8, 0x56, 0x55, 0x6a, 0x3c, 0xb3, 0x4a, 0x7b,
		0x1c, 0xbf, 0xd9, 0x21, 0x63, 0xdc, 0x81, 0x31, 0xd6, 0x6a, 0x8c, 0x21, 0xff, 0xdb, 0x66, 0x35,
		0x2b, 0x5c, 0x13, 0x54, 0xae, 0xbb, 0xa0, 0x72, 0xd5, 0xe4, 0xa8, 0xa1, 0xe2, 0x2d, 0x55, 0x0f,
		0x55, 0x4b, 0x39, 0x77, 0xb9, 0x52, 0xce, 0xae, 0x3b, 0x08, 0xcc, 0x88, 0x7e, 0xe6, 0x83, 0x77,
		0x75, 0xbf, 0xf7, 0x20, 0x1e, 0xcd, 0xa1, 0x19, 0x3c, 0x4c, 0x73, 0xc3, 0x43, 0xe1, 0x4e, 0xd3,
		0xb3, 0x46, 0x22, 0xf9, 0xbb, 0xea, 0xe5, 0xe1, 0x62, 0x7e, 0x78, 0x21, 0x33, 0x3c, 0xc9, 0x09,
		0xcf, 0xb3, 0xc1, 0xaf, 0xe4, 0x81, 0xf7, 0xaa, 0x31, 0xdb, 0x0c, 0x90, 0xbe, 0x1e, 0x0f, 0x99,
		0x11, 0x78, 0x66, 0xef, 0x0f, 0xdb, 0xbd, 0x67, 0x9b, 0xed, 0x39, 0x60, 0x4f, 0xf7, 0xc9, 0xb4,
		0x86, 0x79, 0x53, 0xdd, 0xec, 0xb9, 0x07, 0x15, 0xb9, 0x06, 0x65, 0xb9, 0x05, 0x55, 0xb9, 0x04,
		0xe5, 0xb9, 0x03, 0xe5, 0xb9, 0x02, 0x95, 0xb9, 0x81, 0x6a, 0xc9, 0xa4, 0xb8, 0x53, 0xd3, 0xf5,
		0xde, 0x6c, 0xc7, 0x2b, 0x92, 0x4a, 0xa9, 0x11, 0x2a, 0x41, 0x11, 0x54, 0x7e, 0xf3, 0xa9, 0xda,
		0x8c, 0x6a, 0x33, 0xa7, 0xda, 0xcc, 0xaa, 0x0e, 0xf3, 0xaa, 0x28, 0xa4, 0xd9, 0x16, 0x45, 0xd0,
		0xec, 0xb2, 0x44, 0xc3, 0x12, 0x3d, 0x4f, 0x44, 0x73, 0xa4, 0x58, 0x11, 0xb4, 0xe2, 0x19, 0x94,
		0x29, 0x82, 0x94, 0xdd, 0xb8, 0xbf, 0xec, 0x1a, 0xa0, 0xe6, 0xa9, 0xb0, 0xcb, 0xd0, 0xe5, 0x3a,
		0xb4, 0xbb, 0x10, 0xed, 0xae, 0x44, 0xa7, 0x4b, 0x51, 0xe3, 0x5a, 0x14, 0xb9, 0x98, 0x78, 0x20,
		0xf5, 0xa9, 0x79, 0x54, 0x9d, 0xc4, 0x5c, 0x36, 0xbd, 0x0a, 0xcf, 0x44, 0x29, 0x3e, 0x99, 0x39,
		0xfb, 0xa7, 0x21, 0x77, 0xac, 0xe3, 0xa4, 0xa6, 0x26, 0x9f, 0x9a, 0xea, 0x7e, 0x76, 0xdc, 0x4e,
		0x57, 0xff, 0x1a, 0x0f, 0xdd, 0x29, 0xb6, 0x56, 0x8b, 0x4b, 0x4e, 0xc3, 0x89, 0xce, 0xb2, 0x2d,
		0x39, 0xe5, 0x17, 0x4f, 0x96, 0x6a, 0xd1, 0x21, 0xad, 0x58, 0xea, 0xdf, 0xa3, 0xc0, 0x28, 0xd4,
		0x27, 0x09, 0x8f, 0x79, 0x62, 0x4b, 0x7d, 0xf4, 0xba, 0xfc, 0x00, 0x08, 0x23, 0x11, 0x46, 0x22,
		0x8c, 0x44, 0x18, 0x89, 0x30, 0x52, 0xd1, 0x6e, 0x75, 0x84, 0xd9, 0xf7, 0x44, 0x5f, 0xc7, 0x89,
		0x90, 0x13, 0xb5, 0xe5, 0x55, 0x1f, 0xf2, 0x9c, 0xf5, 0x77, 0xc3, 0xe1, 0xd9, 0xaa, 0x25, 0xa6,
		0xf4, 0xae, 0x99, 0x64, 0x60, 0xab, 0xf6, 0xce, 0x99, 0x64, 0x7c, 0xa3, 0xfd, 0xee, 0x99, 0xf8,
		0x61, 0x94, 0xde, 0x41, 0xa3, 0x10, 0xa2, 0x56, 0x3a, 0x4d, 0xa4, 0x48, 0x51, 0x16, 0xf7, 0xa7,
		0x53, 0x59, 0x96, 0xd6, 0x38, 0xb1, 0x8a, 0xcd, 0xf8, 0x17, 0x08, 0x67, 0x09, 0x52, 0x3f, 0x30,
		0x03, 0xa1, 0x4e, 0x54, 0x31, 0xed, 0x6e, 0xcb, 0x34, 0x15, 0x2d, 0x68, 0x2a, 0x2a, 0x13, 0xd1,
		0x40, 0x53, 0x01, 0x4d, 0xc5, 0x6b, 0x03, 0x06, 0x4d, 0x85, 0x92, 0x27, 0x80, 0xa6, 0x02, 0x64,
		0x18, 0xc8, 0x30, 0x90, 0x61, 0x20, 0xc3, 0xa0, 0xa9, 0xe0, 0xe9, 0x12, 0x9a, 0x8a, 0xed, 0xf3,
		0xa9, 0xa9, 0xee, 0xa1, 0xa9, 0x80, 0xa6, 0x42, 0xd3, 0x92, 0x83, 0xa6, 0x62, 0x0b, 0x7b, 0x83,
		0xa6, 0x22, 0xfb, 0x32, 0x84, 0xa6, 0x02, 0x61, 0x24, 0xc2, 0x48, 0x84, 0x91, 0x08, 0x23, 0x77,
		0x35, 0x8c, 0x84, 0xa6, 0x02, 0x9a, 0x0a, 0xde, 0xc0, 0x16, 0x9a, 0x0a, 0x68, 0x2a, 0xca, 0xb8,
		0x33, 0x76, 0x5d, 0x53, 0x31, 0x4d, 0xe5, 0xa3, 0x1e, 0x14, 0xff, 0x8a, 0xdb, 0x89, 0x7a, 0x50,
		0xca, 0x2a, 0x13, 0x4d, 0x7f, 0x69, 0xe0, 0x8d, 0x7a, 0x81, 0x1b, 0x81, 0x98, 0xab, 0x59, 0xdf,
		0xb7, 0x5f, 0x13, 0x4f, 0x7e, 0x7b, 0x35, 0x7c, 0xea, 0xdc, 0x5e, 0x4c, 0x9f, 0xf7, 0xf6, 0xbb,
		0xe7, 0x0d, 0xff, 0x19, 0x3e, 0xe9, 0x6d, 0xfc, 0xe9, 0x6f, 0xb3, 0x07, 0xdd, 0xe1, 0x22, 0x56,
		0xbc, 0xfa, 0x21, 0x25, 0xba, 0x21, 0x65, 0xa5, 0xaa, 0x5a, 0x28, 0x55, 0x55, 0x9a, 0x68, 0x1c,
		0xa5, 0xaa, 0x76, 0xd7, 0x9d, 0xb2, 0x97, 0xaa, 0x32, 0x7b, 0x3d, 0x31, 0x0c, 0x8c, 0xc7, 0x81,
		0xa5, 0x50, 0x5a, 0x99, 0xec, 0x94, 0xfd, 0x76, 0xbd, 0x58, 0xb9, 0xd3, 0x37, 0x1d, 0x5f, 0xe0,
		0xee, 0xf8, 0xd2, 0x19, 0x6c, 0xe5, 0x86, 0x5b, 0xb5, 0x01, 0xd7, 0x66, 0xc8, 0xb5, 0x19, 0x74,
		0x1d, 0x86, 0x7d, 0x3b, 0x22, 0x75, 0xf5, 0x77, 0xc7, 0xdf, 0x0d, 0x06, 0x8e, 0x30, 0x5d, 0x85,
		0xb7, 0xc7, 0x37, 0x9b, 0x38, 0xdd, 0x90, 0x76, 0xc4, 0xd6, 0x93, 0xf0, 0x02, 0xdb, 0x9f, 0xf0,
		0x78, 0xd3, 0x20, 0xf6, 0x49, 0xc1, 0x55, 0x86, 0x73, 0x9f, 0xbc, 0xba, 0x7f, 0x75, 0xee, 0xb9,
		0xd9, 0x68, 0xc0, 0x39, 0xc3, 0x39, 0xc3, 0x39, 0xc3, 0x39, 0xc3, 0x39, 0x27, 0xa5, 0xaf, 0xcd,
		0x8e, 0x42, 0xdf, 0xdc, 0x51, 0xd0, 0x95, 0x5a, 0xad, 0xab, 0xda, 0x14, 0xa0, 0x06, 0x6d, 0x86,
		0x16, 0x81, 0x61, 0x2c, 0x2c, 0x6c, 0x2a, 0xee, 0x57, 0xa3, 0x9c, 0x70, 0xac, 0x36, 0xa7, 0xbb,
		0x73, 0x4b, 0xa9, 0xdd, 0x38, 0x3b, 0xde, 0xa1, 0xd5, 0xb4, 0x25, 0x99, 0xf1, 0x2e, 0x82, 0xb9,
		0xd4, 0xb2, 0xea, 0x8d, 0x3c, 0x2f, 0x0c, 0xa3, 0x66, 0x27, 0x16, 0x15, 0x5e, 0x05, 0xb0, 0xdc,
		0x33, 0x42, 0x2a, 0x84, 0x54, 0x08, 0xa9, 0x10, 0x52, 0x21, 0xa4, 0x52, 0x7c, 0x9a, 0x50, 0xe1,
		0x29, 0x42, 0x44, 0x54, 0xdb, 0x04, 0x83, 0x1b, 0x88, 0xa8, 0x10, 0x51, 0xd1, 0x2c, 0xa5, 0xd6,
		0x31, 0x02, 0x2a, 0x04, 0x54, 0x5b, 0x10, 0x50, 0x0d, 0x3d, 0x21, 0x1e, 0x87, 0x81, 0xba, 0x38,
		0x6a, 0xd6, 0xa1, 0xba, 0xfc, 0x57, 0x88, 0x52, 0x11, 0xad, 0x21, 0x5a, 0x43, 0xb4, 0x86, 0x68,
		0x0d, 0xd1, 0x1a, 0xd4, 0x29, 0x65, 0xf4, 0xbf, 0x86, 0x25, 0x1c, 0xf3, 0x59, 0xb9, 0x17, 0x8e,
		0xba, 0x55, 0xe7, 0x8b, 0xa1, 0x44, 0x81, 0x23, 0x86, 0x23, 0x86, 0x23, 0x86, 0x23, 0x86, 0x12,
		0x85, 0xee, 0x1f, 0x78, 0x53, 0x96, 0x6e, 0xc1, 0x9b, 0xf2, 0x2e, 0xa5, 0x1d, 0xe4, 0x4d, 0x8f,
		0x3a, 0x8d, 0x06, 0x88, 0xd3, 0xaa, 0xf5, 0x02, 0xe2, 0x74, 0x55, 0xe0, 0xa6, 0x5a, 0x81, 0xa2,
		0x4a, 0x79, 0x82, 0xa3, 0x03, 0x08, 0xd8, 0x10, 0xb0, 0x21, 0x60, 0x43, 0xc0, 0xb6, 0x3e, 0x60,
		0x83, 0xce, 0x05, 0xf1, 0x5a, 0x69, 0x41, 0x36, 0x4e, 0x0e, 0x20, 0x5e, 0x23, 0x5a, 0x4a, 0xca,
		0xab, 0x5b, 0x23, 0x5c, 0x43, 0xb8, 0xc6, 0xb1, 0xac, 0x9e, 0x6c, 0x2f, 0x18, 0x99, 0x8e, 0x11,
		0x95, 0x1e, 0x53, 0x17, 0xb5, 0x2d, 0x77, 0x8c, 0x70, 0x0a, 0xe1, 0x14, 0xc2, 0x29, 0x84, 0x53,
		0x08, 0xa7, 0xa2, 0xdd, 0x66, 0x0f, 0x15, 0xd9, 0xc6, 0xa4, 0x7d, 0x6c, 0x9e, 0x29, 0xe8, 0x2b,
		0x1a, 0xcb, 0xad, 0x8b, 0xa9, 0xe6, 0x33, 0xf7, 0xd4, 0x56, 0x38, 0x77, 0xa9, 0x39, 0x3c, 0x55,
		0x5b, 0xfc, 0x3b, 0x10, 0x9e, 0xab, 0xfc, 0x22, 0xa9, 0xfa, 0xfe, 0xfe, 0x4d, 0xc3, 0x38, 0xeb,
		0xbe, 0xdc, 0x34, 0x8d, 0xb3, 0xee, 0xf4, 0x65, 0x73, 0xf2, 0x7f, 0xd3, 0xd7, 0xad, 0x9b, 0x86,
		0xd1, 0x9e, 0xbd, 0x3e, 0xbe, 0x69, 0x18, 0xc7, 0xdd, 0x83, 0x1f, 0x3f, 0xde, 0x1e, 0xfc, 0x3a,
		0x1a, 0xe7, 0xff, 0xa2, 0xba, 0xd2, 0xfb, 0x5d, 0x95, 0x53, 0xf7, 0xf9, 0xeb, 0xd5, 0x7f, 0xb4,
		0xcd, 0xdf, 0xef, 0x2a, 0x27, 0xf0, 0x2f, 0xf5, 0x6d, 0xbb, 0x22, 0xe7, 0xcd, 0x16, 0x1b, 0xcf,
		0x0e, 0x8c, 0xa7, 0x12, 0xe3, 0x69, 0x1a, 0xfd, 0x0b, 0xe3, 0x7d, 0xf7, 0x57, 0xf3, 0x4d, 0x7b,
		0x7c, 0x7e, 0xf0, 0xeb, 0x64, 0xbc, 0xfc, 0xe6, 0xcb, 0xaa, 0x8f, 0x35, 0xdf, 0x9c, 0x8c, 0xcf,
		0xd7, 0xfc, 0x97, 0xce, 0xf8, 0x3c, 0x63, 0x1b, 0xc7, 0xe3, 0xfd, 0xd4, 0x47, 0xc3, 0xf7, 0x5b,
		0xeb, 0xbe, 0xd0, 0x5e, 0xf3, 0x85, 0xa3, 0x75, 0x5f, 0x38, 0x5a, 0xf3, 0x85, 0xb5, 0x8f, 0xd4,
		0x5a, 0xf3, 0x85, 0xe3, 0xf1, 0x4b, 0xea, 0xf3, 0xfb, 0xab, 0x3f, 0xda, 0x19, 0x1f, 0xbc, 0xac,
		0xfb, 0x6f, 0x27, 0xe3, 0x97, 0xf3, 0x03, 0xb8, 0x12, 0x3e, 0x57, 0x82, 0xe5, 0xac, 0x7e, 0x39,
		0x6f, 0x9f, 0x63, 0xad, 0x3a, 0x0b, 0xc9, 0x1c, 0x07, 0x2b, 0xbd, 0xea, 0x46, 0xfd, 0x15, 0x37,
		0xa5, 0xb8, 0xda, 0x46, 0xed, 0x95, 0x36, 0xd5, 0xe6, 0xad, 0x1d, 0xdb, 0xfd, 0xc3, 0x70, 0x06,
		0x3d, 0x95, 0x95, 0x4b, 0x57, 0xf4, 0x0d, 0xf6, 0x3a, 0x1f, 0x5e, 0x00, 0x7b, 0x4d, 0xb8, 0x38,
		0xc0, 0x5e, 0x83, 0xbd, 0xce, 0xc4, 0xb8, 0x82, 0xbd, 0xa6, 0x1b, 0x4b, 0xb0, 0xd7, 0x20, 0x60,
		0x64, 0x09, 0x18, 0xb0, 0xd7, 0x15, 0xa7, 0x1c, 0xc0, 0x5e, 0x97, 0xd1, 0xdd, 0xe9, 0x35, 0x9e,
		0x60, 0xaf, 0xd5, 0x18, 0x4f, 0xd0, 0x7d, 0x60, 0xaf, 0xb7, 0xc8, 0x95, 0x60, 0x39, 0x83, 0xbd,
		0x2e, 0x79, 0x94, 0x5a, 0x83, 0x86, 0x76, 0x23, 0x17, 0xe9, 0x0d, 0x46, 0x81, 0xf0, 0x0c, 0xdb,
		0x52, 0x4f, 0x45, 0xce, 0xbb, 0x06, 0x13, 0x09, 0x26, 0x12, 0x4c, 0x24, 0x98, 0x48, 0x30, 0x91,
		0x38, 0x96, 0x58, 0xbd, 0x38, 0x1a, 0xc7, 0x12, 0xf9, 0xfb, 0xc5, 0xb1, 0xc4, 0xad, 0x5d, 0x4a,
		0x28, 0xbf, 0x8d, 0x90, 0x4a, 0x5d, 0x48, 0x55, 0xa9, 0x8b, 0xed, 0x2f, 0x46, 0xf7, 0x21, 0x50,
		0x13, 0x16, 0xab, 0xdb, 0x54, 0x14, 0xf6, 0x1d, 0x86, 0x58, 0xb3, 0x7f, 0x3e, 0xb9, 0x34, 0xb7,
		0x6f, 0xf6, 0x84, 0xbf, 0xfc, 0x46, 0xf4, 0xb7, 0x3f, 0xba, 0x4b, 0x7d, 0x26, 0xf9, 0xde, 0xe4,
		0xad, 0xe1, 0xb9, 0x3d, 0x7c, 0xea, 0x44, 0x2f, 0x23, 0xee, 0x3a, 0xfa, 0x74, 0xfc, 0xf7, 0xe1,
		0x93, 0xe7, 0x0d, 0x27, 0xff, 0x63, 0xdc, 0x7b, 0x83, 0xd1, 0xf0, 0xd0, 0x0f, 0xcc, 0x40, 0xc1,
		0x5d, 0xfa, 0x7e, 0xcf, 0xb3, 0x87, 0xa1, 0x7d, 0x09, 0x7f, 0xf5, 0x85, 0x65, 0xd9, 0xe1, 0x6b,
		0xd3, 0xa9, 0x7d, 0xff, 0xf2, 0xe5, 0xba, 0x66, 0x99, 0x81, 0x59, 0xeb, 0x0f, 0xbc, 0xda, 0xd5,
		0xf5, 0x53, 0xa7, 0x36, 0xff, 0xa1, 0x8a, 0x62, 0xe0, 0x26, 0x62, 0x60, 0xc4, 0xc0, 0x88, 0x81,
		0x11, 0x03, 0xe7, 0x36, 0x6b, 0xb6, 0x22, 0xf9, 0xac, 0x06, 0x91, 0x64, 0x6a, 0xa3, 0x2b, 0x17,
		0x4b, 0xae, 0xf3, 0x1e, 0xef, 0x07, 0xde, 0xd4, 0x6d, 0x0c, 0xdc, 0x65, 0x87, 0xf1, 0xa6, 0xe6,
		0x8b, 0xc0, 0xaf, 0x05, 0x0f, 0xa2, 0x16, 0x3d, 0x6e, 0x2d, 0x7c, 0xdc, 0xda, 0xe4, 0x71, 0x7f,
		0xb8, 0x6a, 0xf3, 0xb9, 0x8a, 0x63, 0x08, 0x65, 0x6e, 0x46, 0x87, 0xbb, 0xd1, 0xe6, 0x76, 0x74,
		0xb9, 0x1f, 0xed, 0x6e, 0x48, 0xbb, 0x3b, 0xd2, 0xe9, 0x96, 0x14, 0x47, 0xa6, 0x8a, 0xf6, 0xab,
		0x32, 0xca, 0x36, 0xb5, 0x5b, 0x95, 0x8a, 0x48, 0x53, 0xf0, 0xfe, 0x4c, 0x61, 0x9f, 0x4a, 0x45,
		0xa5, 0x6a, 0x82, 0xd5, 0x57, 0x66, 0x56, 0x8b, 0xc8, 0x34, 0x35, 0xc7, 0xa7, 0x1a, 0xfa, 0xd6,
		0xa5, 0x34, 0x89, 0x1f, 0x60, 0x3b, 0xc5, 0xa7, 0x31, 0x9d, 0xa6, 0x63, 0x4a, 0x75, 0x2a, 0x88,
		0xe2, 0xa7, 0xd8, 0x56, 0x51, 0x6a, 0x3c, 0xb3, 0x4a, 0x7b, 0x1c, 0xbf, 0xd9, 0x21, 0x63, 0xdc,
		0x81, 0x31, 0xd6, 0x6a, 0x8c, 0xa1, 0xfe, 0xdb, 0x66, 0x31, 0x2b, 0x5c, 0x13, 0x44, 0xae, 0xbb,
		0x20, 0x72, 0xd5, 0xe4, 0xa8, 0x21, 0xe2, 0x2d, 0x55, 0x0f, 0x55, 0xcb, 0x38, 0x77, 0xb9, 0x32,
		0xce, 0xae, 0x3b, 0x08, 0xcc, 0x88, 0x7e, 0xe6, 0x83, 0x77, 0x75, 0xbf, 0xf7, 0x20, 0x1e, 0xcd,
		0xa1, 0x19, 0x3c, 0x4c, 0x53, 0xc3, 0x43, 0xe1, 0xf6, 0x26, 0x9c, 0xae, 0x91, 0xc8, 0xfd, 0xae,
		0x7a, 0x79, 0xb8, 0x98, 0x1e, 0x5e, 0x48, 0x0c, 0x4f, 0x52, 0xc2, 0xf3, 0x64, 0xf0, 0xe6, 0x34,
		0xf0, 0x5e, 0x35, 0x26, 0x9b, 0x01, 0xd1, 0x2b, 0xd4, 0x7e, 0x2b, 0xd7, 0x7c, 0x33, 0x27, 0x22,
		0xd8, 0x13, 0x0f, 0x2a, 0x12, 0x0d, 0xca, 0x12, 0x0b, 0xaa, 0x12, 0x09, 0xca, 0x13, 0x07, 0xca,
		0x13, 0x05, 0x2a, 0x13, 0x03, 0xd5, 0x92, 0x48, 0xb1, 0x13, 0xfd, 0xf1, 0x6e, 0x71, 0x84, 0xd9,
		0xf7, 0x44, 0x9f, 0x73, 0xbf, 0xcc, 0x48, 0x85, 0x13, 0xc6, 0x3e, 0xae, 0x23, 0x9f, 0xfb, 0xf6,
		0xed, 0xd4, 0x11, 0x1e, 0xa6, 0x4d, 0x73, 0x55, 0x5c, 0xe3, 0x5e, 0x89, 0x17, 0x68, 0x68, 0x93,
		0x54, 0x38, 0x3e, 0xde, 0xe2, 0x66, 0xfc, 0xc5, 0xcc, 0xb4, 0x14, 0x2f, 0xe3, 0x2d, 0x56, 0x46,
		0xbd, 0x92, 0x98, 0x31, 0xb9, 0x4e, 0x2c, 0xce, 0x60, 0x4c, 0xeb, 0x7e, 0xe0, 0x8d, 0x7a, 0x81,
		0x1b, 0x59, 0xed, 0xab, 0xd9, 0x13, 0xdd, 0x7e, 0x4d, 0x3c, 0xde, 0xed, 0xd5, 0xf0, 0xa9, 0x73,
		0x7b, 0x31, 0x7d, 0xa8, 0xdb, 0xef, 0x9e, 0x37, 0xfc, 0xe7, 0xe4, 0x71, 0xf6, 0xca, 0x69, 0x9f,
		0x68, 0x5a, 0x22, 0x5a, 0x97, 0x5c, 0xeb, 0x51, 0xf9, 0x3a, 0xa4, 0x99, 0x6d, 0xf9, 0xb9, 0x91,
		0x6b, 0x41, 0x72, 0x56, 0x67, 0x7e, 0x4a, 0x3a, 0x10, 0xa0, 0x75, 0x44, 0xf4, 0x8e, 0x47, 0x89,
		0xa3, 0xa1, 0x75, 0x2c, 0xb2, 0x53, 0x4b, 0x7b, 0x7c, 0x80, 0x66, 0xa7, 0xeb, 0x3b, 0x0e, 0x40,
		0xe4, 0x6b, 0x36, 0x08, 0xfc, 0xaf, 0xae, 0x6b, 0x61, 0x5f, 0xb5, 0xbe, 0xf9, 0x68, 0x3b, 0xcf,
		0xb5, 0xa9, 0xf1, 0x1a, 0x79, 0x13, 0x53, 0x59, 0xeb, 0x0f, 0xbc, 0x1f, 0x2e, 0xb9, 0xde, 0x9f,
		0x58, 0xd7, 0x4f, 0xce, 0x6f, 0x70, 0xf0, 0x19, 0x6c, 0xfc, 0x05, 0x17, 0x5f, 0xc1, 0xce, 0x4f,
		0xb0, 0xf3, 0x11, 0x9c, 0xfc, 0x43, 0xb9, 0xc0, 0x0d, 0xb5, 0xce, 0xbd, 0x3e, 0x41, 0x1a, 0xe4,
		0x2b, 0x2a, 0xe6, 0x55, 0xc3, 0xd6, 0x89, 0xe7, 0x7a, 0xc9, 0xc0, 0x5d, 0xba, 0x3d, 0x67, 0xe0,
		0xdb, 0xee, 0x7d, 0x68, 0xd0, 0x02, 0xd3, 0x76, 0x85, 0x37, 0x39, 0xc0, 0x34, 0xd1, 0xa5, 0x4f,
		0x50, 0xbc, 0x5f, 0x7b, 0x30, 0x5d, 0xcb, 0x11, 0x56, 0xed, 0xee, 0xb9, 0x16, 0x3c, 0xd8, 0xfe,
		0x0f, 0xf7, 0xea, 0x7a, 0x2e, 0x55, 0xa7, 0x7e, 0x3e, 0x9e, 0xa3, 0x4c, 0x6c, 0xd4, 0x2e, 0x27,
		0xa5, 0xcb, 0x4e, 0xe5, 0x72, 0x53, 0xb8, 0xca, 0xa8, 0x5b, 0x65, 0x94, 0xad, 0x0a, 0xaa, 0x76,
		0xbc, 0xdd, 0x71, 0xaa, 0xe6, 0x88, 0xaa, 0x2b, 0x0b, 0xbb, 0x69, 0xe3, 0x63, 0x95, 0x71, 0x31,
		0xc1, 0xe6, 0xcb, 0xcf, 0xbf, 0xc8, 0xed, 0x8f, 0xe2, 0x73, 0x5d, 0xec, 0x9b, 0x05, 0x81, 0x06,
		0xd5, 0xaa, 0x50, 0xb1, 0x1a, 0x8a, 0x4d, 0x48, 0xfe, 0xe1, 0x2c, 0x30, 0x94, 0xf5, 0xde, 0xcc,
		0x4b, 0x17, 0x1b, 0xc2, 0xd8, 0x61, 0x46, 0xed, 0x14, 0x9c, 0x4c, 0x39, 0x08, 0x22, 0x0d, 0x35,
		0x28, 0x20, 0x05, 0x19, 0x74, 0xa0, 0x82, 0x08, 0xe4, 0x50, 0x80, 0xdc, 0xe5, 0x53, 0xba, 0x76,
		0xb5, 0xc6, 0x47, 0x36, 0xaa, 0xa9, 0x5b, 0x0f, 0xbd, 0xa1, 0xd1, 0x73, 0xec, 0xe9, 0x8f, 0x97,
		0x9c, 0xe8, 0xd9, 0xca, 0x4b, 0x36, 0x2a, 0x39, 0x33, 0xef, 0x44, 0xdf, 0x1c, 0x39, 0x93, 0x89,
		0xe9, 0x9b, 0x8e, 0x2f, 0x1b, 0x73, 0x10, 0xc9, 0x48, 0xc8, 0x62, 0x0a, 0xca, 0x18, 0x82, 0x3c,
		0x66, 0xa0, 0x8e, 0x11, 0xd8, 0x62, 0x02, 0xb6, 0x18, 0x80, 0x03, 0xf3, 0xeb, 0xcd, 0x0a, 0x90,
		0xc9, 0x2a, 0xe2, 0xd5, 0x76, 0x37, 0x18, 0x38, 0xc2, 0x74, 0x29, 0xd6, 0xdb, 0xcc, 0xfb, 0x36,
		0x75, 0x01, 0x47, 0x09, 0x67, 0x69, 0x8d, 0xa6, 0xe7, 0x43, 0x0d, 0x4b, 0x04, 0xa2, 0x17, 0x18,
		0x81, 0x67, 0xba, 0xfe, 0xe3, 0xb4, 0x0c, 0x15, 0x95, 0x59, 0x5d, 0xdb, 0x05, 0x9d, 0x91, 0x6d,
		0xc2, 0xc0, 0xc2, 0xc0, 0xc2, 0xc0, 0x96, 0xc9, 0xc0, 0x8e, 0x6c, 0x37, 0x38, 0x6a, 0x11, 0xda,
		0x57, 0x02, 0x15, 0x1a, 0x71, 0xd1, 0x4f, 0x42, 0x5a, 0x9e, 0xa3, 0x68, 0x27, 0x93, 0xf8, 0x38,
		0xae, 0x94, 0x48, 0xdd, 0x2e, 0x63, 0x1d, 0x44, 0x42, 0x0d, 0x14, 0x4b, 0x51, 0x4c, 0xee, 0xa9,
		0x6a, 0xb7, 0xce, 0xda, 0x67, 0x9d, 0x93, 0xd6, 0xd9, 0x71, 0x85, 0xe6, 0xac, 0x24, 0xec, 0x6d,
		0xb7, 0x82, 0xb0, 0x4e, 0xb8, 0xe6, 0x9d, 0x23, 0x2c, 0x3a, 0x10, 0x37, 0x6b, 0x90, 0x0e, 0xb2,
		0x85, 0xde, 0x18, 0xa8, 0x0d, 0xa8, 0x0d, 0xa8, 0x0d, 0x61, 0x71, 0xe9, 0xec, 0xe7, 0x63, 0x30,
		0xa2, 0xb3, 0x9d, 0x61, 0x63, 0x30, 0x74, 0x30, 0x74, 0x30, 0x74, 0x08, 0x4f, 0x11, 0x9e, 0x2a,
		0x8b, 0x79, 0x9a, 0xad, 0x53, 0x44, 0xa8, 0xe4, 0xb3, 0x75, 0x04, 0x32, 0x61, 0xe7, 0x03, 0x53,
		0x08, 0x55, 0x16, 0x84, 0x2a, 0x91, 0x76, 0xa3, 0xc4, 0x2a, 0x15, 0x57, 0xd8, 0xf7, 0x0f, 0x77,
		0x03, 0xcf, 0x97, 0x17, 0xaa, 0xcc, 0x9b, 0x82, 0x56, 0x05, 0x5a, 0x15, 0x2d, 0x90, 0xb4, 0x62,
		0x5a, 0x95, 0xd9, 0x8e, 0xa1, 0x0b, 0x28, 0xe3, 0x16, 0x69, 0xa2, 0xca, 0x26, 0xa2, 0x4a, 0x44,
		0x95, 0xbb, 0x18, 0x55, 0x52, 0x1d, 0xae, 0x91, 0x55, 0x81, 0xae, 0x5d, 0xbc, 0x52, 0xaa, 0x50,
		0xa6, 0xed, 0x4e, 0xbe, 0xed, 0x39, 0xb6, 0x3f, 0x9b, 0x19, 0xe0, 0x32, 0x07, 0xec, 0x66, 0x81,
		0xdd, 0x3c, 0x70, 0x9a, 0x09, 0xe2, 0xc8, 0xab, 0xac, 0x67, 0xf3, 0x6c, 0xc6, 0x93, 0x79, 0xe4,
		0xc7, 0xb1, 0xb8, 0xe8, 0x1b, 0x9c, 0x7b, 0x53, 0x68, 0x6e, 0x94, 0x99, 0x1d, 0x65, 0xe6, 0x47,
		0x85, 0x19, 0xa2, 0x35, 0x47, 0x0c, 0x0c, 0x60, 0x8d, 0xb5, 0x14, 0x99, 0xaa, 0xa2, 0xe7, 0x9c,
		0x45, 0xcd, 0xd9, 0x8b, 0x96, 0xa3, 0x28, 0xf9, 0x16, 0x15, 0x25, 0xef, 0x72, 0x2c, 0x40, 0x15,
		0x45, 0xc5, 0x51, 0x34, 0x7c, 0xab, 0x8a, 0x86, 0x77, 0xcb, 0x7a, 0xd0, 0x9a, 0x30, 0xb0, 0x9a,
		0x5e, 0x72, 0x68, 0x3e, 0x0b, 0x2f, 0x76, 0x2d, 0x6c, 0xa0, 0x78, 0x45, 0x5f, 0x00, 0xc9, 0x00,
		0xc9, 0x00, 0xc9, 0x3b, 0x03, 0x92, 0x3f, 0x9a, 0xae, 0x65, 0x06, 0x03, 0xef, 0x99, 0xa1, 0x82,
		0x0b, 0x3f, 0x00, 0x1f, 0x3e, 0x3c, 0xfb, 0x00, 0xe0, 0xeb, 0x00, 0x78, 0xd2, 0x35, 0x2f, 0x7b,
		0xfc, 0xd6, 0xf8, 0xe0, 0xaf, 0x07, 0x7f, 0x07, 0x52, 0x4c, 0x22, 0xc5, 0xd7, 0xc7, 0x6b, 0x97,
		0x20, 0x0d, 0x6a, 0x9c, 0x4a, 0x89, 0x22, 0x62, 0x9d, 0x40, 0xfc, 0x4a, 0x4a, 0x27, 0x41, 0x3f,
		0x3d, 0x04, 0x53, 0x43, 0x49, 0xd8, 0xd2, 0x13, 0xb5, 0xc4, 0xd8, 0x13, 0xf9, 0x1e, 0xe4, 0x7b,
		0x54, 0x63, 0xc8, 0x72, 0x19, 0x61, 0x72, 0x3c, 0xc7, 0x78, 0x97, 0x03, 0xc7, 0xdd, 0x0d, 0xe9,
		0xbb, 0x1a, 0xec, 0xe1, 0x36, 0x59, 0xf3, 0xe9, 0x45, 0x4c, 0xe4, 0x06, 0x7d, 0xda, 0x6c, 0xc9,
		0x73, 0xf8, 0x2d, 0xd8, 0x74, 0xd8, 0xf4, 0x1d, 0xb4, 0xe9, 0xc8, 0xe1, 0x83, 0x9e, 0x64, 0x36,
		0x33, 0xdc, 0xe6, 0x46, 0x99, 0xd9, 0x51, 0x66, 0x7e, 0x54, 0x98, 0x21, 0x7a, 0xc6, 0xa0, 0x86,
		0x1c, 0xfe, 0x06, 0xc0, 0x82, 0x1c, 0x3e, 0x92, 0xa7, 0xc8, 0xe1, 0x17, 0xea, 0x05, 0x39, 0x7c,
		0xe4, 0xf0, 0xf9, 0xdd, 0x17, 0x65, 0x0e, 0xdf, 0xf6, 0xa3, 0x0b, 0x06, 0x19, 0xb1, 0x70, 0xdc,
		0x05, 0x20, 0x31, 0x20, 0x31, 0x20, 0x31, 0x20, 0x31, 0xd9, 0x6a, 0xa7, 0xab, 0x81, 0xb3, 0x16,
		0x0d, 0x37, 0x21, 0xe4, 0x22, 0x9d, 0x32, 0x08, 0xb9, 0xe0, 0x16, 0xe0, 0x16, 0x20, 0xe4, 0x82,
		0x90, 0x6b, 0x1b, 0x59, 0x18, 0x08, 0xb9, 0xf2, 0xd1, 0x05, 0x10, 0x72, 0x31, 0x41, 0x9a, 0x99,
		0x94, 0xc9, 0xa0, 0x4d, 0x15, 0xa7, 0xcc, 0xc1, 0x52, 0x3f, 0x80, 0x32, 0x80, 0x32, 0x80, 0x32,
		0x88, 0x70, 0xc9, 0x56, 0xbb, 0x70, 0x47, 0x8f, 0x62, 0x7a, 0x11, 0x34, 0x27, 0xda, 0x68, 0x33,
		0xb4, 0x7d, 0xe9, 0x8e, 0x1e, 0xc3, 0xc1, 0x19, 0xef, 0x80, 0xbb, 0x19, 0x78, 0xf6, 0x3d, 0x47,
		0xe1, 0xc5, 0xd8, 0xe8, 0x4d, 0xdb, 0x87, 0x7b, 0x81, 0x7b, 0x81, 0x7b, 0x81, 0x7b, 0xa1, 0x87,
		0xaf, 0x2c, 0x06, 0x06, 0x2e, 0x06, 0x47, 0x53, 0xa8, 0x8f, 0xa6, 0x4c, 0xe3, 0xac, 0xad, 0xb8,
		0x2e, 0x5a, 0xb6, 0x28, 0xda, 0xbf, 0xc4, 0x33, 0x89, 0xd6, 0xb0, 0xfe, 0xc1, 0xf6, 0x83, 0x8b,
		0x20, 0x20, 0x2a, 0xb1, 0xf6, 0xd1, 0x76, 0x2f, 0x1d, 0x11, 0x1a, 0x6e, 0x9f, 0x06, 0x03, 0xd4,
		0x3f, 0x9a, 0x3f, 0x13, 0x2d, 0x36, 0x4f, 0xdb, 0xed, 0xce, 0x49, 0xbb, 0xdd, 0x38, 0x39, 0x3a,
		0x69, 0x9c, 0x1d, 0x1f, 0x37, 0x3b, 0x4d, 0x82, 0xbb, 0x72, 0xea, 0x9f, 0x3d, 0x4b, 0x78, 0xc2,
		0xfa, 0x2d, 0x1c, 0x53, 0x77, 0xe4, 0x38, 0x5a, 0xa7, 0xb6, 0x3a, 0x37, 0x81, 0xa7, 0xb7, 0xa8,
		0xda, 0xab, 0xc0, 0x3f, 0xcd, 0x7a, 0x45, 0x89, 0xe5, 0x72, 0xad, 0x87, 0x32, 0x57, 0x59, 0x9e,
		0xea, 0x51, 0x0c, 0xd3, 0x7a, 0x12, 0x5e, 0x60, 0xfb, 0xe2, 0x51, 0xe6, 0x76, 0xe2, 0x18, 0x4c,
		0xad, 0x6c, 0x15, 0xb5, 0x97, 0x51, 0x7b, 0x59, 0x4b, 0xc8, 0x53, 0xb1, 0xda, 0xcb, 0x44, 0x85,
		0x59, 0x69, 0x0b, 0xb2, 0xa2, 0xee, 0xb2, 0x46, 0x86, 0x03, 0x75, 0x97, 0x6b, 0xdb, 0x53, 0x77,
		0x79, 0x82, 0x12, 0x9e, 0x4c, 0x87, 0xe1, 0x14, 0xfe, 0xac, 0x65, 0x9c, 0xc5, 0x2f, 0x1d, 0xf9,
		0x89, 0x73, 0x9b, 0x3a, 0xc8, 0xcd, 0x5d, 0x39, 0x8b, 0x4f, 0x76, 0x31, 0xd8, 0xf2, 0xde, 0xa7,
		0x3c, 0x89, 0x4f, 0x7b, 0x51, 0xd8, 0xec, 0x1f, 0x03, 0x25, 0xcc, 0x71, 0x71, 0x18, 0x93, 0x51,
		0x4d, 0x35, 0xcf, 0x74, 0x35, 0x55, 0xdc, 0x3e, 0xe3, 0x15, 0x55, 0xc4, 0xdb, 0x6d, 0x99, 0x37,
		0xab, 0xfc, 0x94, 0x72, 0xdd, 0x87, 0xad, 0x74, 0x6e, 0x4b, 0x9a, 0x9e, 0xe8, 0x6e, 0x51, 0x49,
		0x10, 0xc7, 0xee, 0x8b, 0xc0, 0x7e, 0x64, 0xa8, 0x0a, 0x12, 0xb7, 0x0c, 0x80, 0x09, 0x80, 0x09,
		0x80, 0x09, 0x80, 0x09, 0x80, 0x09, 0x80, 0x09, 0x80, 0x09, 0x80, 0x09, 0x80, 0xb9, 0x4b, 0x00,
		0xd3, 0x1f, 0x0d, 0x87, 0xa4, 0x47, 0x23, 0xe7, 0x65, 0xe7, 0x66, 0x2d, 0x53, 0x55, 0xca, 0x12,
		0x7d, 0x73, 0xe4, 0x4c, 0x1c, 0x7f, 0xdf, 0x74, 0x7c, 0x00, 0x57, 0x00, 0x57, 0x00, 0xd7, 0x9d,
		0x02, 0xae, 0xf4, 0xe7, 0xe2, 0x89, 0xcf, 0xc3, 0x57, 0x5d, 0x7a, 0x57, 0x1d, 0x7d, 0xd6, 0x2a,
		0x51, 0x0a, 0x49, 0x7d, 0x6f, 0x09, 0xc9, 0x94, 0x84, 0x14, 0x84, 0xe6, 0x38, 0x1f, 0x69, 0xc5,
		0x57, 0x72, 0x91, 0x40, 0x0b, 0x22, 0x01, 0xfd, 0xfe, 0x0e, 0x22, 0x81, 0xec, 0x78, 0x13, 0x22,
		0x01, 0x40, 0x61, 0x40, 0x61, 0x40, 0xe1, 0x32, 0x42, 0x61, 0x70, 0xb8, 0xa4, 0x84, 0x1f, 0x38,
		0x5c, 0xad, 0x3c, 0x1f, 0x38, 0xdc, 0x95, 0x53, 0x0a, 0x0e, 0x97, 0xaf, 0x35, 0x88, 0x04, 0xb2,
		0xb8, 0x19, 0x88, 0x04, 0x00, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30, 0x01, 0x30,
		0x01, 0x30, 0x01, 0x30, 0x77, 0x12, 0x60, 0x42, 0x24, 0x00, 0xe0, 0x0a, 0xe0, 0x0a, 0xe0, 0x0a,
		0x91, 0x40, 0x39, 0x4c, 0x3a, 0x44, 0x02, 0xc5, 0x45, 0x02, 0x04, 0x95, 0x96, 0x50, 0x56, 0x85,
		0x73, 0x86, 0xea, 0x52, 0x3a, 0x8a, 0xac, 0x05, 0x76, 0xbe, 0x4c, 0x7a, 0xbe, 0x58, 0xe8, 0xb8,
		0xc4, 0xa5, 0x5d, 0xe4, 0x04, 0x22, 0x24, 0xc2, 0x10, 0xb2, 0xe2, 0x2d, 0x2d, 0x14, 0x6f, 0xe1,
		0xc3, 0x2c, 0x28, 0xde, 0x32, 0x8f, 0x05, 0xe4, 0x8b, 0xb7, 0x8c, 0x42, 0xa3, 0xe1, 0x53, 0x96,
		0x6f, 0x89, 0x5a, 0x44, 0x01, 0x17, 0x65, 0x61, 0x07, 0xb4, 0x59, 0xd0, 0x66, 0xad, 0x6d, 0xc8,
		0x76, 0x0d, 0xcb, 0xf6, 0x7b, 0xa6, 0x67, 0x09, 0xcb, 0x18, 0xfe, 0x11, 0xf8, 0x1c, 0x22, 0xad,
		0xe5, 0x2e, 0xc0, 0x49, 0x80, 0x93, 0x00, 0x27, 0xb1, 0x43, 0x9c, 0x44, 0xe4, 0xf6, 0x3b, 0x6d,
		0x06, 0x56, 0xe2, 0x14, 0xf9, 0x34, 0xe2, 0xc6, 0x91, 0x4f, 0x53, 0xb4, 0xe3, 0x16, 0xa7, 0x74,
		0x0b, 0xf2, 0x69, 0x3c, 0x35, 0x9c, 0xb5, 0xcd, 0x32, 0x32, 0x6b, 0xdc, 0xbb, 0x20, 0x04, 0x87,
		0xc2, 0xf3, 0x06, 0x1e, 0x1f, 0xf6, 0x4c, 0x34, 0x0f, 0xdc, 0x09, 0xdc, 0x09, 0xdc, 0x09, 0xdc,
		0x09, 0xdc, 0x09, 0xdc, 0x09, 0xdc, 0x09, 0xdc, 0x09, 0xdc, 0xb9, 0xcb, 0xb8, 0xb3, 0x3f, 0xf0,
		0xfe, 0x9c, 0x92, 0x92, 0x83, 0x5e, 0x20, 0x98, 0xd0, 0x67, 0xaa, 0x13, 0x60, 0x50, 0x60, 0x50,
		0x60, 0x50, 0x60, 0x50, 0x60, 0x50, 0x60, 0x50, 0x60, 0x50, 0x60, 0x50, 0x60, 0x50, 0x60, 0x50,
		0xd6, 0xdc, 0xfb, 0x52, 0x17, 0xc0, 0x9f, 0xc0, 0x9f, 0xc0, 0x9f, 0xc0, 0x9f, 0xc0, 0x9f, 0xc0,
		0x9f, 0xc0, 0x9f, 0xc0, 0x9f, 0xc0, 0x9f, 0xbb, 0x8c, 0x3f, 0x19, 0x99, 0x4f, 0xf0, 0x9d, 0xc0,
		0x9b, 0xc0, 0x9b, 0xc0, 0x9b, 0xc0, 0x9b, 0xc0, 0x9b, 0xc0, 0x9b, 0xc0, 0x9b, 0xc0, 0x9b, 0xc0,
		0x9b, 0x7c, 0x2c, 0x27, 0xb8, 0x4d, 0x60, 0x4d, 0x60, 0x4d, 0x60, 0x4d, 0x60, 0x4d, 0x60, 0x4d,
		0x60, 0x4d, 0x60, 0x4d, 0x60, 0xcd, 0xdd, 0xc6, 0x9a, 0x83, 0x51, 0xc0, 0x7e, 0xb0, 0x7d, 0x45,
		0x1f, 0x40, 0xa0, 0x40, 0xa0, 0x40, 0xa0, 0x40, 0xa0, 0x40, 0xa0, 0x40, 0xa0, 0x40, 0xa0, 0x40,
		0xa0, 0x40, 0xa0, 0x3b, 0x8d, 0x40, 0x39, 0x8f, 0xb6, 0x2f, 0xb5, 0x0f, 0xe4, 0x09, 0xe4, 0x09,
		0xe4, 0x09, 0xe4, 0x09, 0xe4, 0x09, 0xe4, 0x09, 0xe4, 0x09, 0xe4, 0x09, 0xe4, 0xb9, 0xd3, 0xc8,
		0x93, 0xff, 0x70, 0xfb, 0xca, 0x5e, 0x80, 0x42, 0x81, 0x42, 0x81, 0x42, 0x81, 0x42, 0x81, 0x42,
		0x81, 0x42, 0x81, 0x42, 0x81, 0x42, 0x81, 0x42, 0x81, 0x42, 0x99, 0x33, 0xf0, 0x38, 0xdf, 0x0e,
		0x04, 0x0a, 0x04, 0x0a, 0x04, 0x0a, 0x04, 0x0a, 0x04, 0x0a, 0x04, 0x0a, 0x04, 0x0a, 0x04, 0x0a,
		0x04, 0x3a, 0x47, 0xa0, 0x9c, 0xec, 0x27, 0x38, 0x4f, 0x20, 0x4e, 0x20, 0x4e, 0x20, 0x4e, 0x20,
		0x4e, 0x20, 0x4e, 0x20, 0x4e, 0x20, 0x4e, 0x20, 0x4e, 0x20, 0xce, 0x80, 0x91, 0xe9, 0x04, 0xbf,
		0x09, 0xb4, 0x09, 0xb4, 0x09, 0xb4, 0x09, 0xb4, 0x09, 0xb4, 0x09, 0xb4, 0x09, 0xb4, 0x09, 0xb4,
		0x59, 0x61, 0xb4, 0xa9, 0xf5, 0xfa, 0xf8, 0x0b, 0xd7, 0x1d, 0x04, 0x66, 0xb8, 0x04, 0x68, 0x6e,
		0x91, 0xf7, 0x7b, 0x0f, 0xe2, 0xd1, 0x1c, 0x9a, 0xc1, 0x43, 0xe8, 0xb1, 0x0e, 0x07, 0x43, 0xe1,
		0xf6, 0x26, 0x88, 0xd0, 0xb0, 0x43, 0xdf, 0xd5, 0x37, 0x7b, 0xc2, 0x3f, 0x5c, 0xf5, 0xf2, 0xd0,
		0x1f, 0xdd, 0x25, 0xde, 0x4f, 0xfe, 0x75, 0x68, 0x0f, 0x9f, 0x3a, 0x87, 0x7e, 0x60, 0x06, 0xe2,
		0x30, 0xf2, 0x81, 0x14, 0xe8, 0xb7, 0xee, 0x07, 0xde, 0xa8, 0x17, 0xb8, 0x91, 0x77, 0xbd, 0x9a,
		0x75, 0x77, 0xfb, 0x35, 0xd1, 0xf7, 0xed, 0xd5, 0xf0, 0xa9, 0x73, 0xfb, 0x8f, 0x59, 0xaf, 0x7b,
		0x7a, 0x66, 0x5a, 0x62, 0x96, 0xeb, 0xd6, 0x43, 0x6f, 0x68, 0xf4, 0x1c, 0x7b, 0x8a, 0xbd, 0xe4,
		0xa6, 0x38, 0x86, 0x22, 0xc9, 0x46, 0x25, 0x57, 0xe0, 0x3b, 0xd1, 0x37, 0x47, 0xce, 0x04, 0x17,
		0xf6, 0x4d, 0xc7, 0x17, 0xb2, 0xed, 0xd1, 0x18, 0x69, 0xb2, 0x38, 0x86, 0x32, 0x7e, 0x21, 0x8f,
		0x5b, 0xa8, 0xe3, 0x15, 0xb6, 0x38, 0x85, 0x2d, 0x3e, 0xe1, 0x88, 0x4b, 0xf4, 0x5a, 0x74, 0xb2,
		0xf8, 0x23, 0x5e, 0x6d, 0x77, 0x83, 0x81, 0x23, 0x4c, 0x97, 0x62, 0xbd, 0x45, 0x9b, 0xb3, 0xd9,
		0xac, 0xa2, 0x21, 0x1d, 0x0d, 0x0d, 0xd3, 0xb2, 0x3c, 0xc3, 0x12, 0x81, 0xe8, 0x05, 0x46, 0xe0,
		0x99, 0xae, 0xff, 0x68, 0x13, 0x70, 0x3c, 0x73, 0xb3, 0xba, 0xb6, 0x0b, 0x3a, 0x23, 0xdb, 0x84,
		0x81, 0x85, 0x81, 0x85, 0x81, 0x2d, 0x93, 0x81, 0x1d, 0xd9, 0x6e, 0x70, 0xd4, 0x22, 0xb4, 0xaf,
		0x27, 0x04, 0x4d, 0xd1, 0xb2, 0x38, 0x84, 0x74, 0x18, 0x07, 0x6b, 0xc3, 0x14, 0xda, 0x73, 0xb1,
		0x34, 0x9c, 0x71, 0x3b, 0x21, 0x2b, 0xc3, 0xc2, 0xc6, 0x70, 0x4f, 0x55, 0xbb, 0x75, 0xd6, 0x3e,
		0xeb, 0x9c, 0xb4, 0xce, 0x8e, 0x2b, 0x34, 0x67, 0x25, 0xe1, 0x32, 0xba, 0x15, 0x84, 0x75, 0xc2,
		0x35, 0xef, 0x1c, 0x61, 0xd1, 0x81, 0xb8, 0x59, 0x83, 0x74, 0x90, 0x2d, 0xf4, 0xc6, 0x40, 0x6d,
		0x40, 0x6d, 0x40, 0x6d, 0x08, 0x8b, 0x4b, 0x67, 0x3f, 0x1f, 0x83, 0x11, 0x9d, 0xed, 0x0c, 0x1b,
		0x83, 0xa1, 0x83, 0xa1, 0x83, 0xa1, 0x43, 0x78, 0x8a, 0xf0, 0x54, 0x59, 0xcc, 0xd3, 0x6c, 0x9d,
		0x22, 0x42, 0x25, 0x9f, 0xad, 0x23, 0x90, 0x09, 0x3b, 0x1f, 0x98, 0xee, 0x29, 0x5c, 0xe0, 0x54,
		0xc9, 0x7c, 0xee, 0x24, 0x7e, 0x31, 0x0f, 0x9b, 0x7f, 0x28, 0x0b, 0x0c, 0x63, 0x7d, 0xe4, 0xba,
		0xa3, 0xc7, 0x3b, 0xe1, 0x49, 0x10, 0x02, 0x73, 0xbf, 0x39, 0x6f, 0xab, 0xe0, 0x84, 0xce, 0xe2,
		0x82, 0x82, 0x5f, 0x97, 0xc5, 0xb0, 0x14, 0xd8, 0x75, 0x01, 0xb3, 0xf6, 0x25, 0x40, 0x04, 0x15,
		0x56, 0x25, 0xc7, 0xa8, 0xe4, 0xd8, 0x34, 0x85, 0x49, 0xfb, 0xf5, 0x8a, 0x18, 0xa0, 0x77, 0xb6,
		0x27, 0xb7, 0x58, 0x7a, 0xb3, 0x15, 0x4b, 0x14, 0x4f, 0x46, 0xed, 0xd1, 0x84, 0x94, 0xcd, 0x6d,
		0x0f, 0x29, 0xfb, 0x08, 0x29, 0x39, 0x42, 0xca, 0x7e, 0xd5, 0x43, 0x4a, 0xd9, 0x6d, 0x1d, 0x37,
		0x44, 0xc5, 0xb5, 0xa7, 0x56, 0x2f, 0x0d, 0xe7, 0x3e, 0xff, 0xc1, 0xb4, 0x9a, 0x34, 0xa6, 0x30,
		0xae, 0x7a, 0x67, 0x6d, 0xfa, 0x38, 0x6b, 0xa3, 0xe3, 0xac, 0x4d, 0x1f, 0x67, 0x6d, 0xf2, 0xae,
		0x56, 0x3a, 0x72, 0x3f, 0x85, 0x22, 0x9a, 0x10, 0x9e, 0xd7, 0x6a, 0xf5, 0xcb, 0x9f, 0x13, 0xaa,
		0x41, 0x9e, 0xbe, 0xa3, 0x87, 0x19, 0x83, 0x9e, 0x21, 0x7e, 0x06, 0xe7, 0x81, 0x70, 0xc4, 0xa3,
		0x08, 0xbc, 0x67, 0x63, 0xe0, 0x1a, 0xbd, 0x87, 0x09, 0xdf, 0xc8, 0x02, 0x3d, 0x26, 0x2e, 0x86,
		0x01, 0x7b, 0xe8, 0x86, 0x1d, 0xdd, 0x9d, 0x39, 0x9b, 0x30, 0x8f, 0xf4, 0x0f, 0xa3, 0x88, 0xa3,
		0x82, 0x89, 0xbc, 0xf8, 0x37, 0x19, 0x9e, 0xe8, 0xd3, 0x85, 0x60, 0x8b, 0xcd, 0x22, 0x12, 0x43,
		0x24, 0x86, 0x48, 0x4c, 0x7f, 0x24, 0x46, 0x44, 0xb4, 0xf0, 0x10, 0x2e, 0xc4, 0xdb, 0x1d, 0xf1,
		0x12, 0xe2, 0x25, 0xc4, 0x4b, 0x94, 0xe6, 0x23, 0x8d, 0x19, 0xe8, 0x97, 0x55, 0x0a, 0x3f, 0x50,
		0x2f, 0x2b, 0xa6, 0x9c, 0x3a, 0xb5, 0x91, 0xe1, 0x34, 0x36, 0xec, 0x46, 0x87, 0xdb, 0xf8, 0x28,
		0x33, 0x42, 0xca, 0x8c, 0x91, 0x0a, 0xa3, 0x44, 0x6b, 0x9c, 0x88, 0x8d, 0x14, 0x1f, 0xb9, 0x93,
		0x5a, 0xed, 0x8e, 0x30, 0xfb, 0xf2, 0x41, 0xc9, 0x46, 0xe4, 0x72, 0xc2, 0xd0, 0xf6, 0x75, 0x1c,
		0xc1, 0x86, 0xcb, 0xe2, 0x3c, 0x11, 0x99, 0x2e, 0xbd, 0x11, 0xfd, 0x3d, 0x39, 0xe1, 0x5e, 0xd2,
		0x2a, 0x0c, 0x94, 0x5a, 0x9e, 0x64, 0x5c, 0xce, 0xe7, 0x8f, 0x16, 0x7a, 0x81, 0x4b, 0x82, 0x4b,
		0x82, 0x4b, 0x82, 0x4b, 0x82, 0x4b, 0xca, 0xe8, 0x92, 0x6e, 0xe6, 0x2e, 0xe9, 0x6f, 0xbd, 0x91,
		0xe7, 0x09, 0x37, 0xd8, 0x3f, 0x38, 0x7c, 0xfb, 0x76, 0x4e, 0xb6, 0x76, 0xa3, 0xaf, 0x2c, 0x72,
		0xae, 0xe9, 0xf7, 0xe2, 0x96, 0x2d, 0xf1, 0xb3, 0xb4, 0xde, 0xad, 0x54, 0xd1, 0x1f, 0x59, 0xca,
		0x65, 0xf6, 0x8f, 0x8f, 0x48, 0x60, 0x4f, 0xc1, 0xac, 0x31, 0x9e, 0x84, 0xa9, 0x98, 0x95, 0x56,
		0xb3, 0x6c, 0xc4, 0x42, 0x97, 0x8a, 0x68, 0xa5, 0x4d, 0xd5, 0xcc, 0x21, 0x9d, 0x8a, 0x94, 0xcd,
		0x42, 0x86, 0x82, 0x24, 0x81, 0x43, 0x37, 0x49, 0x63, 0x92, 0x3a, 0x57, 0x66, 0x20, 0xe8, 0xa9,
		0xde, 0x69, 0xb3, 0x25, 0x67, 0x7a, 0x5b, 0x60, 0x7a, 0xab, 0x83, 0x68, 0xc1, 0xf4, 0x82, 0xe9,
		0x45, 0x58, 0x8d, 0xb0, 0x1a, 0x61, 0x35, 0xc2, 0x6a, 0x84, 0xd5, 0x60, 0x7a, 0xd7, 0x23, 0x5a,
		0x30, 0xbd, 0x70, 0x49, 0x70, 0x49, 0x70, 0x49, 0x70, 0x49, 0xa5, 0x75, 0x49, 0x60, 0x7a, 0xf5,
		0x45, 0x7f, 0x5b, 0x44, 0xc7, 0x49, 0x9c, 0x18, 0x67, 0x60, 0xe3, 0x50, 0xab, 0x5f, 0x6a, 0x36,
		0xd5, 0x56, 0xed, 0xff, 0x77, 0xfc, 0x14, 0xb7, 0xf1, 0xc7, 0xbe, 0x88, 0x7e, 0x15, 0xb5, 0xf9,
		0x34, 0x14, 0x2e, 0x29, 0x75, 0x4b, 0xae, 0xc5, 0x6f, 0x41, 0x8b, 0xaf, 0x1f, 0x72, 0x42, 0x8b,
		0x9f, 0xf9, 0x07, 0xe1, 0x54, 0x34, 0x4e, 0x45, 0x97, 0x2e, 0xe6, 0x45, 0xee, 0x47, 0x47, 0x4c,
		0x8b, 0x53, 0xd1, 0xd2, 0x28, 0x02, 0xa7, 0xa2, 0x2b, 0x0b, 0xf1, 0x09, 0x42, 0x34, 0x54, 0x58,
		0xa3, 0x9f, 0x97, 0xba, 0x54, 0xbc, 0x91, 0x3f, 0xc8, 0x52, 0x56, 0xd6, 0x6d, 0x8f, 0x71, 0xa6,
		0x65, 0x67, 0x98, 0x6f, 0x66, 0x0b, 0x4c, 0x67, 0xf6, 0x69, 0xcc, 0x37, 0x77, 0xd9, 0x67, 0x20,
		0xc7, 0xe8, 0x17, 0x8c, 0x71, 0xa5, 0x62, 0xda, 0x82, 0x31, 0x6c, 0xe1, 0x98, 0x55, 0x06, 0x4a,
		0x4a, 0x43, 0x46, 0x59, 0x68, 0x48, 0x06, 0x01, 0xc9, 0xa0, 0x1e, 0x05, 0xa4, 0xe3, 0xb5, 0x26,
		0x45, 0x63, 0xc4, 0xba, 0x69, 0x3d, 0xda, 0xae, 0x11, 0xae, 0xe9, 0x91, 0x2f, 0x5f, 0x89, 0x72,
		0xa1, 0x35, 0xb9, 0x5a, 0x94, 0x0d, 0xd4, 0xa2, 0x44, 0x2d, 0xca, 0x2a, 0x40, 0xb5, 0x8f, 0xa6,
		0x6b, 0x99, 0xc1, 0xc0, 0x7b, 0x96, 0x28, 0xa0, 0x2a, 0x1d, 0x49, 0x25, 0xa8, 0x98, 0xd1, 0xa3,
		0xf0, 0xa6, 0xb8, 0x42, 0x62, 0xdd, 0xcd, 0xfc, 0x55, 0x5b, 0xa2, 0x8d, 0x4b, 0x77, 0xf4, 0x18,
		0xfe, 0x28, 0xb5, 0xd3, 0x21, 0x7d, 0xf8, 0x80, 0x6e, 0xa7, 0xb1, 0x1d, 0x2e, 0xa0, 0x3f, 0x4c,
		0x40, 0x74, 0x78, 0x40, 0x22, 0x2c, 0x25, 0x1f, 0xf6, 0xc1, 0x30, 0xda, 0x07, 0xa6, 0x83, 0xe1,
		0xc6, 0x70, 0x53, 0x0c, 0x77, 0xa1, 0x6f, 0x76, 0x95, 0xd4, 0x13, 0x8f, 0xef, 0x2b, 0x97, 0xc6,
		0x70, 0x92, 0x37, 0x9f, 0xa3, 0x96, 0x38, 0xf0, 0xdb, 0x8e, 0xd5, 0x12, 0x37, 0x3d, 0xcf, 0x16,
		0xde, 0xf4, 0x12, 0x65, 0x3b, 0x34, 0x81, 0x84, 0x37, 0x35, 0xaf, 0x6a, 0x1c, 0x17, 0x57, 0xb1,
		0x6f, 0x5c, 0xea, 0x0d, 0xcc, 0xb6, 0x91, 0xd9, 0x36, 0x34, 0xc7, 0xc6, 0x96, 0xdb, 0xe0, 0x04,
		0xa8, 0xa7, 0xc6, 0x73, 0x71, 0x55, 0xe4, 0x32, 0x3b, 0x6d, 0xc2, 0xbb, 0xab, 0x4e, 0x71, 0x77,
		0x95, 0x16, 0xbb, 0x96, 0x6a, 0x16, 0x57, 0x2b, 0x57, 0xef, 0x9a, 0xb1, 0xd3, 0x76, 0xbb, 0x73,
		0xd2, 0x6e, 0x37, 0x4e, 0x8e, 0x4e, 0x1a, 0x67, 0xc7, 0xc7, 0xcd, 0x4e, 0x13, 0x97, 0x2c, 0x2b,
		0x08, 0x5c, 0x28, 0xad, 0x34, 0xea, 0x76, 0x6f, 0x7f, 0xdd, 0x6e, 0x4d, 0xe5, 0xa7, 0x8d, 0x3b,
		0x6f, 0x60, 0x5a, 0x3d, 0xd3, 0x0f, 0x8c, 0xe1, 0x1f, 0x81, 0x4f, 0x59, 0x82, 0x7a, 0xb9, 0x69,
		0x40, 0x75, 0x40, 0x75, 0x40, 0x75, 0x40, 0x75, 0x40, 0x75, 0x40, 0x75, 0x40, 0x75, 0x40, 0xf5,
		0x72, 0x42, 0x75, 0x5d, 0x38, 0xcc, 0xb2, 0xfd, 0x9e, 0xe9, 0x59, 0xb4, 0x08, 0x2c, 0x6e, 0x14,
		0xd8, 0x0b, 0xd8, 0x0b, 0xd8, 0x0b, 0xd8, 0x0b, 0xd8, 0x0b, 0xd8, 0x0b, 0xd8, 0x0b, 0xd8, 0x0b,
		0xd8, 0x2b, 0x89, 0xbd, 0x84, 0xe7, 0x0d, 0x3c, 0x5a, 0xe4, 0x15, 0x35, 0x09, 0xdc, 0x05, 0xdc,
		0x05, 0xdc, 0x05, 0xdc, 0x05, 0xdc, 0x05, 0xdc, 0x05, 0xdc, 0x05, 0xdc, 0x05, 0xdc, 0x95, 0xc4,
		0x5d, 0xfd, 0x9e, 0xcf, 0x81, 0xbd, 0x12, 0xcd, 0x02, 0x7f, 0x01, 0x7f, 0x01, 0x7f, 0x01, 0x7f,
		0x01, 0x7f, 0x01, 0x7f, 0x01, 0x7f, 0x01, 0x7f, 0x01, 0x7f, 0x25, 0xf1, 0xd7, 0xe3, 0xc8, 0x09,
		0x6c, 0x1e, 0xed, 0xd7, 0x52, 0xd3, 0xc0, 0x61, 0xc0, 0x61, 0xc0, 0x61, 0xc0, 0x61, 0xc0, 0x61,
		0xc0, 0x61, 0xc0, 0x61, 0xc0, 0x61, 0xc0, 0x61, 0x49, 0x1c, 0x36, 0xe8, 0x05, 0x82, 0x18, 0x7f,
		0x45, 0x4d, 0x02, 0x77, 0x01, 0x77, 0x01, 0x77, 0x01, 0x77, 0x01, 0x77, 0x01, 0x77, 0x01, 0x77,
		0x01, 0x77, 0x01, 0x77, 0x25, 0x71, 0x17, 0x39, 0xeb, 0x05, 0xae, 0x0b, 0x98, 0x0b, 0x98, 0x0b,
		0x98, 0x0b, 0x98, 0x0b, 0x98, 0x0b, 0x98, 0x0b, 0x98, 0x0b, 0x98, 0x2b, 0x85, 0xb9, 0x46, 0x2e,
		0x53, 0xc6, 0x71, 0xa1, 0x61, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x60,
		0x30, 0x60, 0x30, 0x60, 0x30, 0x60, 0xb0, 0x45, 0x0c, 0xf6, 0x87, 0x3b, 0xf8, 0xd3, 0x35, 0x86,
		0xde, 0x20, 0x18, 0x50, 0xa3, 0xb0, 0x85, 0xa6, 0x81, 0xc3, 0x80, 0xc3, 0x80, 0xc3, 0x80, 0xc3,
		0x80, 0xc3, 0x80, 0xc3, 0x80, 0xc3, 0x80, 0xc3, 0x80, 0xc3, 0xe2, 0x69, 0x71, 0x4c, 0x3f, 0x30,
		0x7a, 0x8e, 0x30, 0x3d, 0x3a, 0x00, 0x96, 0x68, 0x13, 0xc8, 0x0b, 0xc8, 0x0b, 0xc8, 0xab, 0x44,
		0xc8, 0x2b, 0xb0, 0x1f, 0x45, 0x60, 0xf7, 0xfe, 0xf0, 0x4b, 0x87, 0xbd, 0xfe, 0xed, 0x4e, 0xfd,
		0x42, 0xdd, 0x35, 0xdd, 0x81, 0x2f, 0x7a, 0x03, 0x57, 0xba, 0x62, 0x20, 0x30, 0x1d, 0x30, 0x1d,
		0x30, 0x1d, 0x30, 0x9d, 0x3e, 0x4c, 0x87, 0x2b, 0x17, 0xa8, 0x60, 0x02, 0xae, 0x5c, 0xa0, 0x84,
		0xfd, 0x83, 0x51, 0xc0, 0x76, 0xe7, 0xc2, 0x8a, 0xb6, 0x11, 0x06, 0x20, 0x0c, 0x40, 0x18, 0x50,
		0xa2, 0x30, 0x00, 0x04, 0x2c, 0xc0, 0x3a, 0xc0, 0x3a, 0xc0, 0x3a, 0xc0, 0x3a, 0x45, 0xff, 0xb2,
		0x48, 0x8c, 0xfe, 0xd6, 0x85, 0x85, 0x56, 0x81, 0xbe, 0x80, 0xbe, 0x80, 0xbe, 0x80, 0xbe, 0x80,
		0xbe, 0x80, 0xbe, 0x80, 0xbe, 0x80, 0xbe, 0x80, 0xbe, 0x16, 0xd0, 0x17, 0x75, 0xed, 0xdf, 0x44,
		0x9b, 0x40, 0x5e, 0x40, 0x5e, 0x40, 0x5e, 0x40, 0x5e, 0x40, 0x5e, 0x40, 0x5e, 0x40, 0x5e, 0x40,
		0x5e, 0x40, 0x5e, 0x0b, 0xc8, 0x8b, 0xab, 0xf2, 0xef, 0x8a, 0xb6, 0x81, 0xc4, 0x80, 0xc4, 0x80,
		0xc4, 0x80, 0xc4, 0x80, 0xc4, 0x80, 0xc4, 0x80, 0xc4, 0x80, 0xc4, 0x80, 0xc4, 0x16, 0x90, 0x18,
		0x75, 0xed, 0xdf, 0x44, 0x9b, 0x40, 0x5e, 0x40, 0x5e, 0x40, 0x5e, 0x40, 0x5e, 0x40, 0x5e, 0x40,
		0x5e, 0x40, 0x5e, 0x40, 0x5e, 0x40, 0x5e, 0x0b, 0xc8, 0x8b, 0x9e, 0xf9, 0x02, 0xdf, 0x05, 0xd4,
		0x05, 0xd4, 0x05, 0xd4, 0x05, 0xd4, 0x05, 0xd4, 0x05, 0xd4, 0x05, 0xd4, 0x05, 0xd4, 0x95, 0x46,
		0x5d, 0x3c, 0xf5, 0x7f, 0x53, 0x2d, 0x03, 0x85, 0x01, 0x85, 0x01, 0x85, 0x01, 0x85, 0x01, 0x85,
		0x01, 0x85, 0x01, 0x85, 0x01, 0x85, 0x6d, 0x1b, 0x0a, 0xdb, 0x53, 0xb8, 0xe6, 0xe5, 0x8b, 0xa1,
		0x48, 0xa2, 0xbc, 0x74, 0xf1, 0x93, 0xc1, 0x50, 0x78, 0x66, 0xb8, 0xb6, 0x4c, 0x47, 0x16, 0xea,
		0x91, 0x17, 0x3b, 0x21, 0x2a, 0x72, 0x22, 0x61, 0xa0, 0x30, 0xdc, 0xaa, 0x76, 0x54, 0xb7, 0xe0,
		0x8e, 0xba, 0x70, 0xdd, 0x41, 0x30, 0x19, 0x51, 0x29, 0xc7, 0x51, 0xf7, 0x7b, 0x0f, 0xe2, 0xd1,
		0x1c, 0x9a, 0xc1, 0x43, 0xf8, 0xeb, 0x0f, 0x07, 0x43, 0xe1, 0xf6, 0x26, 0x31, 0x87, 0x61, 0x87,
		0x68, 0xab, 0x6f, 0xf6, 0x84, 0x7f, 0xb8, 0xea, 0xe5, 0xa1, 0x3f, 0xba, 0x4b, 0xbc, 0x9f, 0xfc,
		0xeb, 0xd0, 0x0f, 0xcc, 0x40, 0x1c, 0x46, 0x80, 0x4d, 0x26, 0x94, 0xaa, 0xfb, 0x81, 0x37, 0xea,
		0x05, 0x6e, 0x04, 0x01, 0xaf, 0x66, 0x3d, 0xdc, 0x7e, 0x4d, 0x74, 0x77, 0xfb, 0x8f, 0x59, 0x47,
		0x7b, 0x6a, 0xe6, 0xad, 0xc0, 0xc6, 0xaa, 0xf7, 0x86, 0xa3, 0xc2, 0x13, 0x35, 0x87, 0xc0, 0xc3,
		0x51, 0xc1, 0xc1, 0x94, 0x04, 0x03, 0xd2, 0x71, 0x28, 0x45, 0xfc, 0x49, 0x16, 0x77, 0x52, 0xc5,
		0x9b, 0xe4, 0x71, 0x26, 0x79, 0x7c, 0x49, 0x19, 0x57, 0xaa, 0x45, 0x0c, 0xd2, 0xf1, 0x63, 0xbc,
		0x5a, 0xee, 0x06, 0x03, 0x47, 0x98, 0xae, 0xcc, 0x7a, 0x89, 0x36, 0x4f, 0xb3, 0xb9, 0xe3, 0xa0,
		0x89, 0xbe, 0x62, 0x1c, 0xc0, 0x13, 0xc0, 0x13, 0x86, 0xbb, 0x2a, 0x58, 0x55, 0x09, 0x52, 0xb2,
		0x84, 0xdf, 0xf3, 0xec, 0xa1, 0x14, 0xb4, 0x8d, 0x8d, 0x7f, 0xb2, 0x31, 0x20, 0x27, 0x20, 0x27,
		0x20, 0xa7, 0x1c, 0xab, 0xc5, 0x0f, 0x3c, 0xdb, 0xbd, 0xa7, 0x00, 0x4e, 0xa7, 0x25, 0x8e, 0xcc,
		0x84, 0x6b, 0xde, 0x39, 0xc2, 0x92, 0xb7, 0x35, 0xb3, 0x86, 0x0a, 0xce, 0xdb, 0x3b, 0xd1, 0x37,
		0x47, 0xce, 0x64, 0xbd, 0x85, 0xcb, 0x17, 0xe6, 0x0a, 0xe6, 0x0a, 0xe6, 0xaa, 0x5a, 0x81, 0x9e,
		0x12, 0x7b, 0x65, 0xf7, 0x6d, 0xd7, 0x12, 0x3f, 0xe5, 0xed, 0xd5, 0xac, 0x21, 0x18, 0x1a, 0x18,
		0x1a, 0x18, 0x9a, 0x1c, 0xab, 0x65, 0x64, 0xbb, 0xc1, 0x51, 0x8b, 0xc0, 0xce, 0x9c, 0x48, 0x34,
		0x41, 0x23, 0x3b, 0x20, 0xd0, 0x67, 0x50, 0xca, 0x0c, 0x88, 0x73, 0xd6, 0xd4, 0xb2, 0x02, 0x8e,
		0x84, 0x34, 0x81, 0x8c, 0x80, 0x54, 0x3e, 0xc0, 0x35, 0x05, 0xed, 0xd6, 0x59, 0xfb, 0xac, 0x73,
		0xd2, 0x3a, 0x3b, 0x2e, 0xf1, 0x5c, 0x68, 0x4a, 0xc6, 0x77, 0xc1, 0x2b, 0x83, 0x57, 0x56, 0x3f,
		0xec, 0xe0, 0x95, 0x31, 0xdc, 0xc4, 0xc3, 0x5d, 0x62, 0x5e, 0x99, 0x2a, 0x6a, 0x92, 0x89, 0x99,
		0x12, 0x1c, 0x4f, 0x03, 0x71, 0x17, 0xe2, 0x2e, 0xc4, 0x5d, 0x88, 0xbb, 0x10, 0x77, 0x21, 0xee,
		0x42, 0xdc, 0x55, 0xa5, 0xb8, 0x4b, 0x09, 0x5c, 0x99, 0xde, 0xc4, 0xfd, 0x10, 0x59, 0x1b, 0x49,
		0xd0, 0x92, 0x6c, 0x0c, 0xb0, 0x03, 0xb0, 0x03, 0xb0, 0x23, 0xc7, 0x6a, 0xa1, 0xb9, 0x77, 0x9b,
		0xe0, 0xc8, 0x19, 0xf5, 0x3d, 0xdb, 0xc0, 0x32, 0xc0, 0x32, 0x95, 0xc2, 0x32, 0x7c, 0x47, 0xce,
		0x80, 0x6a, 0xc0, 0x26, 0x57, 0x91, 0x6f, 0x03, 0xbd, 0x89, 0xe1, 0x06, 0x9b, 0x2c, 0x69, 0xfe,
		0x0a, 0x85, 0x67, 0x83, 0x7b, 0xbb, 0x67, 0x3a, 0x04, 0xa1, 0x59, 0xd4, 0x10, 0xc2, 0x32, 0x84,
		0x65, 0x08, 0xcb, 0x72, 0xac, 0x16, 0x9c, 0xeb, 0x02, 0x62, 0x82, 0x0b, 0xc7, 0x70, 0x63, 0xb8,
		0xab, 0x81, 0x98, 0x1e, 0x4d, 0xd7, 0xbc, 0x17, 0xd1, 0x6f, 0x94, 0x04, 0x4d, 0x89, 0xb6, 0x80,
		0x9b, 0x80, 0x9b, 0x80, 0x9b, 0x80, 0x9b, 0x80, 0x9b, 0xe0, 0xc8, 0x31, 0xdc, 0x18, 0xee, 0xad,
		0xc3, 0x4d, 0x51, 0xf1, 0x23, 0x49, 0xc4, 0x34, 0x69, 0x05, 0x58, 0x09, 0x58, 0x09, 0x58, 0x29,
		0xc7, 0x6a, 0xd1, 0x7e, 0x02, 0x1e, 0x50, 0x09, 0xbe, 0x1b, 0xbe, 0xbb, 0xb2, 0xbe, 0x3b, 0x1c,
		0x7e, 0xc3, 0x0f, 0xcc, 0x60, 0xe4, 0xcb, 0xbb, 0xf0, 0x64, 0x63, 0xf0, 0xe4, 0xf0, 0xe4, 0x3b,
		0xe0, 0xc9, 0x3f, 0x9a, 0xae, 0x65, 0x06, 0x03, 0xef, 0x39, 0x74, 0xa1, 0xda, 0xd1, 0x80, 0x70,
		0x47, 0x8f, 0x91, 0x39, 0xa5, 0x80, 0x04, 0x6d, 0x89, 0x36, 0x2e, 0xdd, 0xd1, 0x63, 0xf8, 0xa3,
		0xc6, 0x80, 0x15, 0x80, 0x15, 0x80, 0x15, 0x18, 0x6e, 0xa0, 0x38, 0x8e, 0x7e, 0x72, 0x2e, 0x02,
		0xd9, 0xaa, 0xdc, 0x8c, 0xd5, 0xb8, 0xf3, 0xcd, 0x4c, 0xf6, 0x51, 0xca, 0x31, 0x42, 0xf5, 0x27,
		0xc7, 0xcc, 0x3f, 0x2e, 0xb1, 0xf7, 0x9d, 0x7c, 0x3b, 0xe7, 0x7c, 0xcc, 0x5c, 0x6d, 0xce, 0xaf,
		0x15, 0xc5, 0xb9, 0x32, 0xf8, 0x36, 0x89, 0x6b, 0x0b, 0xfc, 0x54, 0x0a, 0x44, 0x4b, 0x86, 0x64,
		0xc9, 0x10, 0xec, 0x32, 0x72, 0x9d, 0x0c, 0x4c, 0xc9, 0xf6, 0xfc, 0x3b, 0xdb, 0x2b, 0x36, 0xe1,
		0xbd, 0xd9, 0x2a, 0x93, 0xad, 0x0a, 0x3f, 0x6d, 0x47, 0x2e, 0x24, 0x6c, 0x6e, 0x49, 0x48, 0x58,
		0x70, 0xeb, 0x20, 0x28, 0x2c, 0xb6, 0xb5, 0xf4, 0x84, 0x85, 0x45, 0xb7, 0xdc, 0x82, 0x27, 0x32,
		0x6c, 0x8b, 0xee, 0xfa, 0xc0, 0x59, 0x83, 0xb8, 0x35, 0x50, 0xc1, 0x26, 0xa5, 0xde, 0xac, 0x6c,
		0x9b, 0x96, 0x6d, 0xf3, 0xf2, 0x6c, 0x62, 0xb9, 0xcd, 0x4c, 0x10, 0x38, 0xd5, 0x78, 0x6e, 0x0e,
		0x1c, 0xb9, 0x72, 0x8c, 0x4d, 0xca, 0x57, 0x9e, 0x11, 0xb4, 0x15, 0xfd, 0xcc, 0xd2, 0xdd, 0x1a,
		0x48, 0x6b, 0xd1, 0x56, 0x0d, 0x5f, 0x87, 0xb0, 0x49, 0xda, 0xcb, 0x17, 0xe9, 0x87, 0x73, 0xce,
		0x64, 0x32, 0x5c, 0xc6, 0x48, 0xec, 0x36, 0xd6, 0x36, 0x1f, 0x1f, 0xbf, 0x64, 0x6a, 0x9f, 0xf1,
		0x9a, 0x3f, 0x22, 0xa3, 0xb4, 0x7a, 0x4a, 0x19, 0x2e, 0x6d, 0x54, 0x3d, 0xa5, 0xed, 0xc6, 0x59,
		0xbb, 0xc2, 0xb3, 0xba, 0x57, 0xce, 0xd6, 0xba, 0x7b, 0x25, 0x5a, 0xb3, 0x0c, 0xbe, 0xe1, 0x7f,
		0xb6, 0xfb, 0x3f, 0x1e, 0xdf, 0xd0, 0x3c, 0x25, 0x6c, 0xf3, 0xda, 0x0c, 0x02, 0xe1, 0xb9, 0xe4,
		0xee, 0xa1, 0xfe, 0xfb, 0x7e, 0xbb, 0x71, 0x76, 0xd3, 0x30, 0xda, 0xdd, 0x97, 0x76, 0xe3, 0xa6,
		0x61, 0x9c, 0x76, 0x6f, 0x1a, 0xc6, 0x59, 0xf7, 0xe5, 0xa6, 0x69, 0x1c, 0x4d, 0x5f, 0xfe, 0x3a,
		0x1a, 0x87, 0x7f, 0x9d, 0x45, 0x7f, 0x35, 0xdf, 0xb4, 0xa2, 0xbf, 0x0f, 0x7e, 0xfc, 0x78, 0xbb,
		0x2f, 0xf1, 0xf5, 0x97, 0x1f, 0x3f, 0xfe, 0x7a, 0xf0, 0x97, 0x3a, 0xdd, 0x52, 0xa5, 0x1c, 0xef,
		0xcf, 0x5f, 0xaf, 0xfe, 0x83, 0x41, 0x57, 0x66, 0x1f, 0x70, 0xf9, 0x6c, 0xb6, 0x18, 0xa9, 0xcc,
		0x57, 0x65, 0x86, 0x30, 0xfb, 0x30, 0x62, 0xf0, 0xca, 0x7c, 0x49, 0xca, 0xbd, 0x27, 0x7c, 0xdf,
		0x78, 0x34, 0x87, 0x43, 0xdb, 0x25, 0xe0, 0x2c, 0x97, 0xda, 0x03, 0x77, 0x09, 0xee, 0x12, 0xdc,
		0x65, 0xb6, 0x06, 0x24, 0xd3, 0x06, 0xa9, 0x85, 0x27, 0x95, 0x3e, 0x20, 0xda, 0x8a, 0x60, 0x2e,
		0xc1, 0x5c, 0x56, 0x9f, 0xb9, 0x94, 0xdd, 0xda, 0x71, 0x43, 0xc1, 0x90, 0x20, 0x37, 0x91, 0x5a,
		0xbe, 0x93, 0x56, 0xdf, 0x94, 0xb2, 0xc0, 0x17, 0xd5, 0xb6, 0xe7, 0xd8, 0xfe, 0x8c, 0x66, 0x80,
		0xcb, 0x1c, 0xb0, 0x9b, 0x05, 0x76, 0xf3, 0xc0, 0x6b, 0x26, 0x68, 0x19, 0x1f, 0x22, 0x9e, 0x86,
		0x2e, 0xf1, 0x91, 0x5a, 0xb1, 0xb6, 0x25, 0xdc, 0xc0, 0x0e, 0x9e, 0x3d, 0xd1, 0xe7, 0xe0, 0x6c,
		0x8e, 0x09, 0xdb, 0xbc, 0x8a, 0x1e, 0xf5, 0x37, 0xd3, 0x67, 0xd8, 0x0f, 0xb3, 0x01, 0xf9, 0x76,
		0x7d, 0xf5, 0xee, 0xf6, 0xdb, 0x7f, 0xaf, 0x2f, 0xbf, 0x52, 0x6f, 0x88, 0x09, 0xb1, 0xea, 0x93,
		0xb3, 0x1f, 0x35, 0x96, 0xac, 0x44, 0x7a, 0x4c, 0x1a, 0xff, 0x39, 0x6b, 0x36, 0x1a, 0xf5, 0x2a,
		0xf0, 0xef, 0x8a, 0x86, 0xa3, 0x85, 0xe1, 0x48, 0x0c, 0xc7, 0xe9, 0xe9, 0xc5, 0x29, 0x86, 0x23,
		0x1a, 0x8e, 0x8b, 0x4f, 0xff, 0xc5, 0x58, 0xcc, 0x97, 0x06, 0x8f, 0xe1, 0x20, 0x6d, 0xb1, 0x5b,
		0x36, 0xe8, 0x50, 0x8a, 0xd2, 0xbf, 0x54, 0x6a, 0xa8, 0xd4, 0xca, 0xa0, 0xd5, 0x10, 0x20, 0xe8,
		0x40, 0xd0, 0x81, 0xa0, 0xa3, 0x32, 0x41, 0x07, 0x04, 0x44, 0xa4, 0x6b, 0x12, 0x02, 0xa2, 0xf5,
		0xed, 0x43, 0x40, 0xa4, 0x6d, 0x4a, 0x21, 0x20, 0xe2, 0x68, 0xad, 0xbb, 0x6d, 0xe8, 0xd2, 0x0f,
		0xcc, 0xde, 0x1f, 0xc6, 0x74, 0x3e, 0x99, 0x70, 0xe6, 0x42, 0x17, 0x40, 0x9c, 0x40, 0x9c, 0x40,
		0x9c, 0xbb, 0x88, 0x38, 0x19, 0xcc, 0x40, 0x8d, 0xa8, 0x6a, 0x43, 0xaa, 0x4d, 0xb9, 0x2a, 0x0e,
		0x0c, 0xe6, 0x5e, 0x6b, 0xfa, 0x94, 0x48, 0xa7, 0x15, 0xb7, 0xc7, 0xa7, 0xd7, 0x5a, 0x54, 0x2f,
		0x49, 0xc9, 0xb7, 0xe4, 0x87, 0x5e, 0x62, 0xd8, 0xeb, 0xd3, 0xa3, 0xe1, 0x64, 0x52, 0x92, 0x69,
		0x73, 0x25, 0x53, 0x92, 0xb4, 0xa0, 0x24, 0x29, 0x83, 0x2f, 0x85, 0x92, 0x24, 0xc7, 0x4f, 0x82,
		0x92, 0x04, 0x10, 0x1b, 0x10, 0x1b, 0x10, 0xbb, 0x74, 0x10, 0x1b, 0x4a, 0x92, 0xa5, 0x01, 0x81,
		0x92, 0x64, 0xcd, 0x98, 0x40, 0x49, 0x02, 0x25, 0xc9, 0xa6, 0xe1, 0x80, 0x92, 0x04, 0x4a, 0x92,
		0x75, 0x4b, 0x03, 0x4a, 0x12, 0x1d, 0xe4, 0x0f, 0x94, 0x24, 0x08, 0x3a, 0x10, 0x74, 0x20, 0xe8,
		0x28, 0x5d, 0xd0, 0x01, 0x25, 0x09, 0xe9, 0x9a, 0x84, 0x92, 0x64, 0x7d, 0xfb, 0x50, 0x92, 0x68,
		0x9b, 0x52, 0x28, 0x49, 0x38, 0x5a, 0x83, 0x92, 0x24, 0xbf, 0xab, 0x81, 0x92, 0x04, 0x88, 0x13,
		0x88, 0x73, 0xe7, 0x11, 0x27, 0x94, 0x24, 0xba, 0x5a, 0xd8, 0x59, 0x25, 0x49, 0x81, 0x52, 0xfd,
		0x74, 0x23, 0x8f, 0xaa, 0x4c, 0x9b, 0xe6, 0xa6, 0x2e, 0x25, 0xb3, 0xf1, 0x46, 0xbd, 0x20, 0xba,
		0xc8, 0xb3, 0x7e, 0x35, 0xeb, 0xe6, 0xf6, 0x6b, 0xa2, 0xcf, 0xdb, 0xef, 0x8e, 0xe9, 0xde, 0x5e,
		0x4e, 0xfa, 0xfc, 0x18, 0x75, 0x59, 0xe2, 0x82, 0x50, 0xb6, 0x4b, 0x5c, 0x11, 0x6a, 0xb9, 0x41,
		0x94, 0x84, 0x42, 0x49, 0x28, 0x6d, 0xb8, 0x07, 0x25, 0xa1, 0x50, 0x12, 0x4a, 0x71, 0x68, 0x03,
		0x21, 0x1f, 0x84, 0x7c, 0x1b, 0x1a, 0x82, 0x90, 0x0f, 0x0c, 0x07, 0x18, 0x0e, 0x30, 0x1c, 0x54,
		0x2b, 0x16, 0x42, 0xbe, 0xa5, 0x01, 0x81, 0x90, 0x6f, 0xcd, 0x98, 0x40, 0xc8, 0x07, 0x21, 0xdf,
		0xa6, 0xe1, 0x80, 0x90, 0x0f, 0x42, 0xbe, 0x75, 0x4b, 0x03, 0x42, 0x3e, 0x0d, 0xad, 0x40, 0xc8,
		0x87, 0xa0, 0x03, 0x41, 0x07, 0x82, 0x8e, 0xf2, 0x05, 0x1d, 0x10, 0xf2, 0x91, 0xae, 0x49, 0x08,
		0xf9, 0xd6, 0xb7, 0x0f, 0x21, 0x9f, 0xb6, 0x29, 0x85, 0x90, 0x8f, 0xa3, 0x35, 0x08, 0xf9, 0xf2,
		0xbb, 0x1a, 0x08, 0xf9, 0x80, 0x38, 0x81, 0x38, 0x77, 0x1e, 0x71, 0x42, 0xc8, 0xa7, 0xab, 0x85,
		0xdd, 0x11, 0xf2, 0x2d, 0xc9, 0x97, 0x50, 0x13, 0x0a, 0x35, 0xa1, 0xb4, 0x39, 0x57, 0x48, 0x49,
		0x20, 0x25, 0xd9, 0xd0, 0x10, 0xa4, 0x24, 0xc0, 0xd8, 0xc0, 0xd8, 0xc0, 0xd8, 0x54, 0x2b, 0x16,
		0x52, 0x92, 0xa5, 0x01, 0x81, 0x94, 0x64, 0xcd, 0x98, 0x40, 0x4a, 0x02, 0x29, 0xc9, 0xa6, 0xe1,
		0x80, 0x94, 0x04, 0x52, 0x92, 0x75, 0x4b, 0x03, 0x52, 0x12, 0x1d, 0xec, 0x0f, 0xa4, 0x24, 0x08,
		0x3a, 0x10, 0x74, 0x20, 0xe8, 0x28, 0x5d, 0xd0, 0x01, 0x29, 0x09, 0xe9, 0x9a, 0x84, 0x94, 0x64,
		0x7d, 0xfb, 0x90, 0x92, 0x68, 0x9b, 0x52, 0x48, 0x49, 0x38, 0x5a, 0x83, 0x94, 0x24, 0xbf, 0xab,
		0x81, 0x94, 0x04, 0x88, 0x13, 0x88, 0x73, 0xe7, 0x11, 0x27, 0xa4, 0x24, 0xba, 0x5a, 0xd8, 0x5d,
		0x29, 0x09, 0x8a, 0x42, 0x95, 0x77, 0x72, 0xd4, 0x54, 0x85, 0xba, 0x72, 0xab, 0x52, 0x16, 0xea,
		0xd1, 0x0c, 0x7a, 0x0f, 0xf2, 0xc5, 0xa0, 0xa6, 0xcd, 0xa0, 0x04, 0x14, 0x4a, 0x40, 0x69, 0x83,
		0x39, 0x15, 0x2b, 0x01, 0x65, 0x0d, 0x46, 0x77, 0x8e, 0x30, 0x02, 0xf3, 0xfe, 0x5e, 0x58, 0x74,
		0xea, 0xbd, 0xc5, 0x66, 0x51, 0x10, 0x4a, 0x61, 0x5c, 0x03, 0x15, 0x1f, 0x54, 0x7c, 0x1b, 0x1a,
		0x22, 0xaa, 0xf9, 0x96, 0x5a, 0xc0, 0x24, 0xb5, 0xdf, 0x88, 0xb7, 0x3c, 0x28, 0x0e, 0x50, 0x1c,
		0xa0, 0x38, 0xa8, 0x4d, 0x48, 0xdc, 0xa0, 0xed, 0xba, 0xc2, 0x33, 0xa8, 0xf3, 0xf4, 0xa9, 0xfd,
		0xb0, 0xd8, 0x0d, 0xf1, 0xfc, 0xf3, 0x24, 0x24, 0xc8, 0x0d, 0x0e, 0xa7, 0xe1, 0x51, 0x60, 0x80,
		0xb8, 0x0d, 0x91, 0x32, 0x83, 0xa4, 0xcc, 0x30, 0xa9, 0x31, 0x50, 0xb4, 0x86, 0x8a, 0xd8, 0x60,
		0xc5, 0x43, 0x40, 0xce, 0xcd, 0xa6, 0x56, 0x3c, 0x8f, 0x71, 0xa9, 0xf1, 0xa8, 0x03, 0xe2, 0xa6,
		0x79, 0x54, 0x02, 0xb3, 0x7f, 0x3c, 0x3b, 0xb4, 0xc6, 0xad, 0x1a, 0x60, 0xb6, 0xec, 0xa9, 0x6e,
		0x98, 0x55, 0x04, 0x71, 0x3f, 0x0a, 0xf2, 0xce, 0x4c, 0xfb, 0x77, 0x71, 0xea, 0x19, 0xd5, 0x05,
		0xba, 0xa6, 0x9e, 0x4f, 0x6d, 0xa0, 0x65, 0xf6, 0xf7, 0xaa, 0xd1, 0x6a, 0xb7, 0xa4, 0x2a, 0x09,
		0xc2, 0xdd, 0x53, 0x1f, 0x8c, 0x02, 0x15, 0x08, 0x7b, 0xb1, 0x1b, 0x20, 0x6c, 0x20, 0x6c, 0x20,
		0x6c, 0x20, 0x6c, 0x20, 0x6c, 0x20, 0x6c, 0x20, 0x6c, 0x20, 0x6c, 0x20, 0x6c, 0x20, 0xec, 0x72,
		0x21, 0xec, 0x52, 0xd1, 0xea, 0xc4, 0x02, 0xb1, 0xb8, 0x5d, 0x3e, 0x2d, 0xd2, 0x44, 0x25, 0x73,
		0xb8, 0x90, 0xa2, 0x27, 0xa9, 0x3b, 0x44, 0x37, 0x3f, 0x14, 0x0a, 0x6f, 0x9a, 0x7a, 0x44, 0x29,
		0x20, 0x43, 0x51, 0x97, 0x68, 0xd9, 0x8c, 0x92, 0xa7, 0x39, 0x5b, 0x48, 0x73, 0x56, 0x29, 0xe6,
		0x41, 0x9a, 0x13, 0x69, 0x4e, 0xa4, 0x39, 0x41, 0xc2, 0x80, 0x84, 0x01, 0x09, 0x03, 0x12, 0x06,
		0x24, 0x0c, 0x48, 0x18, 0x90, 0x30, 0x20, 0x61, 0x40, 0xc2, 0xd4, 0x90, 0xe6, 0x24, 0x05, 0x7c,
		0x48, 0x73, 0x02, 0x61, 0x03, 0x61, 0x03, 0x61, 0x03, 0x61, 0x03, 0x61, 0x03, 0x61, 0x03, 0x61,
		0x03, 0x61, 0x03, 0x61, 0x23, 0xcd, 0x99, 0x11, 0x3e, 0x6c, 0x45, 0x9a, 0x93, 0xa0, 0x26, 0x06,
		0xdd, 0xf4, 0xa0, 0xb0, 0x49, 0xe1, 0x89, 0xac, 0x93, 0x24, 0x88, 0xb3, 0xd6, 0xd1, 0xf8, 0x18,
		0x3e, 0xc0, 0xed, 0xbb, 0xc9, 0x03, 0x7c, 0x9b, 0xf6, 0x5f, 0xc1, 0x0b, 0x7a, 0x16, 0x06, 0xd0,
		0x98, 0xa6, 0x9b, 0x1c, 0xdb, 0x0f, 0x98, 0x4e, 0xfd, 0x27, 0x7b, 0x40, 0x01, 0x00, 0x85, 0xb1,
		0x32, 0x0a, 0x00, 0xa0, 0x00, 0xc0, 0x86, 0x86, 0x50, 0x00, 0xa0, 0xa4, 0xf4, 0x19, 0x94, 0x31,
		0x1a, 0xe8, 0x31, 0x28, 0x63, 0x24, 0x1a, 0x5c, 0x90, 0xac, 0xf8, 0x8a, 0xa4, 0x31, 0x3e, 0x98,
		0x7b, 0x30, 0xf7, 0x1a, 0x4d, 0x92, 0x32, 0xd3, 0xa4, 0xc6, 0x44, 0xf1, 0xf0, 0x2a, 0x60, 0xee,
		0xd3, 0x06, 0x06, 0xcc, 0x7d, 0xe2, 0xc1, 0xc1, 0xdc, 0xe7, 0xef, 0x07, 0xcc, 0x7d, 0x69, 0xa7,
		0x1e, 0xcc, 0xbd, 0x8e, 0x56, 0xbb, 0xa5, 0xf6, 0x59, 0x1f, 0x6c, 0x3f, 0xb8, 0x08, 0x02, 0x8f,
		0xc7, 0x6f, 0x7d, 0xb4, 0xdd, 0x4b, 0x47, 0x84, 0xb0, 0xc0, 0xe7, 0x59, 0xe7, 0xe1, 0x3e, 0x4d,
		0xf4, 0xd0, 0x3c, 0x6d, 0xb7, 0x3b, 0x27, 0xed, 0x76, 0xe3, 0xe4, 0xe8, 0xa4, 0x71, 0x76, 0x7c,
		0xdc, 0xec, 0x50, 0xde, 0xb0, 0x19, 0x77, 0xfa, 0xd9, 0xb3, 0x84, 0x27, 0xac, 0xdf, 0x9e, 0xeb,
		0xe7, 0x35, 0x77, 0xe4, 0x38, 0x50, 0x3f, 0x91, 0x41, 0x7a, 0xa8, 0x9f, 0x10, 0x43, 0x21, 0x86,
		0x42, 0x0c, 0x85, 0x18, 0x0a, 0x31, 0x14, 0x62, 0x28, 0xc4, 0x50, 0x88, 0xa1, 0x10, 0x43, 0x41,
		0xfd, 0x94, 0x11, 0x3e, 0x6c, 0x83, 0xfa, 0x29, 0xa1, 0xc8, 0x40, 0xbd, 0x87, 0xac, 0x98, 0x06,
		0xf5, 0x1e, 0x4a, 0x1b, 0x0e, 0x21, 0xab, 0xad, 0x27, 0xdc, 0x41, 0x56, 0x9b, 0x64, 0x43, 0x20,
		0xab, 0x0d, 0x46, 0x06, 0x8c, 0x0c, 0x18, 0x19, 0x30, 0x32, 0x60, 0x64, 0xc0, 0xc8, 0x80, 0x91,
		0x01, 0x23, 0x03, 0x46, 0xa6, 0x86, 0xac, 0x36, 0xb2, 0xda, 0xfa, 0x38, 0x37, 0x64, 0xb5, 0x11,
		0x43, 0x21, 0x86, 0x42, 0x0c, 0x85, 0x18, 0x0a, 0x31, 0x14, 0x62, 0x28, 0xc4, 0x50, 0x88, 0xa1,
		0x10, 0x43, 0x21, 0x86, 0x42, 0x56, 0x3b, 0x67, 0xbb, 0xda, 0xb2, 0xda, 0x28, 0xef, 0xc1, 0x35,
		0xb7, 0xda, 0xe6, 0x54, 0x77, 0xa5, 0x8f, 0xab, 0xf0, 0x49, 0x3e, 0x84, 0x0f, 0xb2, 0x25, 0x25,
		0x3f, 0xa6, 0x11, 0xb3, 0x17, 0xc1, 0x43, 0xc6, 0xca, 0x1f, 0xc9, 0x8e, 0x50, 0x00, 0x44, 0x61,
		0x60, 0x8d, 0x02, 0x20, 0x28, 0x00, 0xb2, 0xa1, 0x21, 0x14, 0x00, 0x29, 0x29, 0xd7, 0x06, 0xa9,
		0x94, 0x06, 0x2e, 0x0d, 0x52, 0x29, 0x89, 0x06, 0xa7, 0x8e, 0xfe, 0xc1, 0xbe, 0x7f, 0x50, 0x75,
		0x3f, 0xce, 0x42, 0x5f, 0xa0, 0xfb, 0x41, 0xf7, 0xeb, 0x33, 0x4d, 0xca, 0x4c, 0x94, 0x1a, 0x53,
		0xc5, 0x43, 0xc6, 0x80, 0xee, 0x4f, 0x1b, 0x18, 0xd0, 0xfd, 0x89, 0x07, 0x07, 0xdd, 0x9f, 0xbf,
		0x1f, 0xd0, 0xfd, 0xa5, 0x9d, 0x7a, 0xd0, 0xfd, 0x3a, 0x5a, 0xdd, 0x85, 0x4b, 0x72, 0x22, 0x4a,
		0x74, 0xf0, 0xa7, 0x2a, 0xa8, 0x9d, 0xec, 0x0a, 0x48, 0x1b, 0x48, 0x1b, 0x48, 0x1b, 0x48, 0x1b,
		0x48, 0x1b, 0x48, 0x1b, 0x48, 0x1b, 0x48, 0x1b, 0x48, 0x1b, 0x48, 0x7b, 0x6b, 0x91, 0xf6, 0x34,
		0x71, 0xad, 0x86, 0xd5, 0x5e, 0xd1, 0x17, 0xb0, 0x36, 0xb0, 0x36, 0xb0, 0x36, 0xb0, 0x36, 0xb0,
		0x36, 0xb0, 0x36, 0xb0, 0x36, 0xb0, 0x36, 0xb0, 0x36, 0xb0, 0xf6, 0x96, 0x63, 0x6d, 0x25, 0xac,
		0x76, 0xba, 0x2b, 0x20, 0x6d, 0x20, 0x6d, 0x20, 0x6d, 0x20, 0x6d, 0x20, 0x6d, 0x20, 0x6d, 0x20,
		0x6d, 0x20, 0x6d, 0x20, 0x6d, 0x20, 0xed, 0x72, 0x21, 0x6d, 0x1c, 0x17, 0x65, 0x3a, 0x5a, 0x98,
		0x38, 0x9c, 0x86, 0x5a, 0xc8, 0x59, 0xa1, 0x0d, 0x6a, 0x21, 0x97, 0x36, 0x2a, 0xc2, 0x01, 0x1f,
		0x3d, 0x51, 0x0f, 0x0e, 0xf8, 0x90, 0x6d, 0x0a, 0x1c, 0xf0, 0x01, 0x41, 0x03, 0x82, 0x06, 0x04,
		0x0d, 0x08, 0x1a, 0x10, 0x34, 0x20, 0x68, 0x40, 0xd0, 0x80, 0xa0, 0x01, 0x41, 0x53, 0x7a, 0x82,
		0x06, 0x07, 0x7c, 0x80, 0xb4, 0x81, 0xb4, 0x81, 0xb4, 0x81, 0xb4, 0x81, 0xb4, 0x81, 0xb4, 0x81,
		0xb4, 0x81, 0xb4, 0x81, 0xb4, 0x81, 0xb4, 0x4b, 0x8e, 0xb4, 0x71, 0xc0, 0x07, 0x58, 0x1b, 0x58,
		0x1b, 0x58, 0x1b, 0x58, 0x1b, 0x58, 0x1b, 0x58, 0x1b, 0x58, 0x1b, 0x58, 0x1b, 0x58, 0x1b, 0x58,
		0x9b, 0x13, 0x6b, 0xe3, 0x80, 0x0f, 0x90, 0x36, 0x90, 0x36, 0x90, 0x36, 0x90, 0x36, 0x90, 0x36,
		0x90, 0x36, 0x90, 0x36, 0x90, 0x36, 0x90, 0x36, 0x90, 0x36, 0x0e, 0xf8, 0xa8, 0x39, 0xe0, 0x83,
		0x6b, 0xe1, 0xb8, 0xa6, 0x58, 0xf7, 0xd4, 0x96, 0xe2, 0x76, 0xb8, 0xcf, 0xe1, 0xf3, 0x4c, 0xf1,
		0xd5, 0x96, 0xdc, 0x11, 0xa7, 0xe0, 0x76, 0x38, 0xdc, 0x0b, 0xa7, 0x3c, 0xc0, 0xc6, 0xbd, 0x70,
		0xb8, 0x17, 0x6e, 0x43, 0x43, 0xb8, 0x17, 0xae, 0xa4, 0x9c, 0x1b, 0x8e, 0x8d, 0x6a, 0xe0, 0xd4,
		0x70, 0x6c, 0x54, 0xa2, 0x41, 0x1c, 0x1b, 0xd5, 0x60, 0x7a, 0x38, 0x4d, 0x90, 0x02, 0x53, 0xc4,
		0x6d, 0x92, 0x94, 0x99, 0x26, 0x65, 0x26, 0x4a, 0x8d, 0xa9, 0xe2, 0x21, 0x65, 0x40, 0xfb, 0xa7,
		0x0d, 0x0c, 0x68, 0xff, 0xc4, 0x83, 0x83, 0xf6, 0xcf, 0xdf, 0x0f, 0x68, 0xff, 0xd2, 0x4e, 0x3d,
		0x68, 0x7f, 0x1d, 0xad, 0xe2, 0xd8, 0x28, 0x03, 0xd4, 0x86, 0xc0, 0x06, 0x48, 0x1b, 0x48, 0x1b,
		0x48, 0x1b, 0x48, 0x1b, 0x48, 0x1b, 0x48, 0x1b, 0x48, 0x1b, 0x48, 0x1b, 0x48, 0x7b, 0x87, 0xa4,
		0xec, 0x8a, 0x64, 0xec, 0x40, 0xd8, 0x40, 0xd8, 0x40, 0xd8, 0x40, 0xd8, 0x40, 0xd8, 0x40, 0xd8,
		0x40, 0xd8, 0x40, 0xd8, 0x40, 0xd8, 0x40, 0xd8, 0x25, 0xf6, 0x59, 0x1f, 0x6c, 0x3f, 0xb8, 0x08,
		0x02, 0x8f, 0xc7, 0x6f, 0x7d, 0xb4, 0xdd, 0x4b, 0x47, 0x84, 0xb0, 0xc0, 0xe7, 0x59, 0xe7, 0xe1,
		0x3e, 0x4d, 0xf4, 0xd0, 0x3c, 0x6d, 0xb7, 0x3b, 0x27, 0xed, 0x76, 0xe3, 0xe4, 0xe8, 0xa4, 0x71,
		0x76, 0x7c, 0xdc, 0xec, 0x34, 0x8f, 0x19, 0x3a, 0xfd, 0xec, 0x59, 0xc2, 0x13, 0xd6, 0x6f, 0xcf,
		0xf5, 0xf3, 0x9a, 0x3b, 0x72, 0x1c, 0x1c, 0x52, 0xc8, 0x02, 0x10, 0xb7, 0xe8, 0x90, 0x02, 0xee,
		0x1f, 0xc9, 0x05, 0x5b, 0x71, 0xff, 0x48, 0x69, 0x23, 0x5e, 0x08, 0x49, 0xf5, 0x44, 0xb4, 0x10,
		0x92, 0x92, 0x6d, 0x0a, 0x08, 0x49, 0x41, 0xbe, 0x81, 0x7c, 0x03, 0xf9, 0x06, 0xf2, 0x0d, 0xe4,
		0x1b, 0xc8, 0x37, 0x90, 0x6f, 0x20, 0xdf, 0x40, 0xbe, 0x31, 0x91, 0x6f, 0x10, 0x92, 0x42, 0x48,
		0x0a, 0xa4, 0x0d, 0xa4, 0x0d, 0xa4, 0x0d, 0xa4, 0x0d, 0xa4, 0x0d, 0xa4, 0x0d, 0xa4, 0x0d, 0xa4,
		0x0d, 0xa4, 0xbd, 0x33, 0x48, 0x1b, 0x42, 0x52, 0x20, 0x6c, 0x20, 0x6c, 0x20, 0x6c, 0x20, 0x6c,
		0x20, 0x6c, 0x20, 0x6c, 0x20, 0x6c, 0x20, 0x6c, 0x20, 0xec, 0xca, 0x22, 0x6c, 0x08, 0x49, 0x97,
		0xf7, 0x29, 0x84, 0xa4, 0xac, 0x2d, 0x41, 0x48, 0xba, 0x4e, 0x48, 0x8a, 0x3a, 0xd7, 0x5c, 0x93,
		0xab, 0x6f, 0x52, 0x4b, 0x51, 0xe1, 0x7a, 0x4b, 0x8a, 0x5b, 0x47, 0x17, 0x44, 0xd9, 0x7e, 0xc0,
		0x55, 0xdb, 0x3a, 0xd1, 0x03, 0x4a, 0x5b, 0x2b, 0xe4, 0x4b, 0x50, 0xda, 0x1a, 0xa5, 0xad, 0x37,
		0x34, 0x84, 0xd2, 0xd6, 0x14, 0x0d, 0xe2, 0x44, 0x42, 0x0d, 0x27, 0x12, 0x2a, 0x06, 0xf2, 0x99,
		0x4e, 0x24, 0x28, 0x52, 0x48, 0x21, 0x77, 0x53, 0x43, 0xee, 0x46, 0xbb, 0x41, 0x52, 0x66, 0x98,
		0xd4, 0x18, 0x28, 0x1e, 0x66, 0x0d, 0xb9, 0x9b, 0xb4, 0x81, 0x41, 0xee, 0x66, 0x91, 0x7a, 0x44,
		0xee, 0x26, 0x67, 0x3f, 0xc8, 0xdd, 0x94, 0x76, 0xea, 0x91, 0xbb, 0xd1, 0xd1, 0xea, 0xce, 0xa9,
		0xa3, 0x7c, 0x45, 0xf2, 0x28, 0x1f, 0x18, 0x1b, 0x18, 0x1b, 0x18, 0x1b, 0x18, 0x1b, 0x18, 0x1b,
		0x18, 0x1b, 0x18, 0x1b, 0x18, 0x1b, 0x18, 0x1b, 0x18, 0xbb, 0x8c, 0x3e, 0x0b, 0xfa, 0xa8, 0x02,
		0x9d, 0x42, 0x1f, 0x55, 0x04, 0x20, 0x6e, 0x85, 0x3e, 0x6a, 0xae, 0xc8, 0x40, 0x9d, 0xbd, 0xac,
		0xa8, 0x15, 0x75, 0xf6, 0x4a, 0x1b, 0xf0, 0x22, 0xab, 0xad, 0x27, 0xa0, 0x45, 0x56, 0x9b, 0x62,
		0x3f, 0x20, 0xab, 0x0d, 0xc6, 0x0d, 0x8c, 0x1b, 0x18, 0x37, 0x30, 0x6e, 0x60, 0xdc, 0xc0, 0xb8,
		0x81, 0x71, 0x03, 0xe3, 0x06, 0xc6, 0x0d, 0x59, 0x6d, 0x5a, 0xc4, 0x87, 0xac, 0x36, 0x30, 0x36,
		0x30, 0x36, 0x30, 0x36, 0x30, 0x36, 0x30, 0x36, 0x30, 0x36, 0x30, 0x36, 0x30, 0x36, 0x30, 0x36,
		0xb2, 0xda, 0xc8, 0x6a, 0xeb, 0x8b, 0xa2, 0x90, 0xd5, 0xe6, 0xcc, 0x6a, 0xa3, 0xe8, 0x07, 0xd7,
		0xdc, 0x6a, 0x9b, 0x53, 0xdd, 0x35, 0x3f, 0x3e, 0x87, 0x4f, 0x12, 0x9a, 0xe4, 0x6d, 0x29, 0xf9,
		0xe1, 0x45, 0xd0, 0x9f, 0xb1, 0xe6, 0x07, 0x45, 0xb1, 0x16, 0x14, 0xfd, 0xd0, 0x4a, 0x8f, 0xa0,
		0xe8, 0x47, 0x19, 0x8c, 0x38, 0x8a, 0x7e, 0x94, 0x61, 0xeb, 0x73, 0x98, 0x00, 0x46, 0x53, 0xc0,
		0x65, 0x12, 0xd8, 0x4d, 0x03, 0xbb, 0x89, 0xe0, 0x35, 0x15, 0xe5, 0xc4, 0xf8, 0x90, 0x47, 0x29,
		0x63, 0x79, 0x90, 0xba, 0x51, 0x6b, 0x88, 0x94, 0x19, 0x24, 0x65, 0x86, 0x49, 0x8d, 0x81, 0xe2,
		0x21, 0xd6, 0x90, 0xba, 0x49, 0x1b, 0x18, 0xa4, 0x6e, 0x16, 0x99, 0x47, 0xa4, 0x6e, 0x72, 0xf6,
		0x83, 0xd4, 0x4d, 0x69, 0xa7, 0x1e, 0xa9, 0x1b, 0x1d, 0xad, 0xee, 0x8e, 0x3c, 0x4a, 0xcd, 0x45,
		0xff, 0x2b, 0xfa, 0x02, 0xd6, 0x06, 0xd6, 0x06, 0xd6, 0x06, 0xd6, 0x06, 0xd6, 0x06, 0xd6, 0x06,
		0xd6, 0x06, 0xd6, 0x06, 0xd6, 0x06, 0xd6, 0xde, 0x72, 0xac, 0xad, 0xe4, 0xa2, 0xff, 0x74, 0x57,
		0x40, 0xda, 0x40, 0xda, 0x40, 0xda, 0x40, 0xda, 0x40, 0xda, 0x40, 0xda, 0x40, 0xda, 0x40, 0xda,
		0x40, 0xda, 0x40, 0xda, 0xe5, 0x42, 0xda, 0x90, 0xab, 0x33, 0x49, 0x9b, 0xa7, 0x97, 0x54, 0xa2,
		0x0a, 0x5b, 0x46, 0x50, 0x83, 0x2a, 0x6c, 0xa5, 0x8d, 0x87, 0x20, 0x33, 0xd4, 0x13, 0xef, 0x40,
		0x66, 0x48, 0xb1, 0x1f, 0x20, 0x33, 0x04, 0x21, 0x03, 0x42, 0x06, 0x84, 0x0c, 0x08, 0x19, 0x10,
		0x32, 0x20, 0x64, 0x40, 0xc8, 0x80, 0x90, 0x01, 0x21, 0x03, 0x99, 0x21, 0x3d, 0xea, 0x83, 0xcc,
		0x10, 0x58, 0x1b, 0x58, 0x1b, 0x58, 0x1b, 0x58, 0x1b, 0x58, 0x1b, 0x58, 0x1b, 0x58, 0x1b, 0x58,
		0x1b, 0x58, 0x7b, 0xe7, 0xb0, 0x36, 0x64, 0x86, 0x40, 0xda, 0x40, 0xda, 0x40, 0xda, 0x40, 0xda,
		0x40, 0xda, 0x40, 0xda, 0x40, 0xda, 0x40, 0xda, 0x40, 0xda, 0x40, 0xda, 0x90, 0x19, 0x72, 0xcb,
		0x0c, 0x51, 0x16, 0x97, 0x6b, 0x72, 0xf5, 0x4d, 0x6a, 0x29, 0xea, 0xe2, 0x4e, 0xe1, 0x54, 0x05,
		0x0b, 0xe3, 0xfa, 0xb6, 0x7b, 0x1f, 0x0f, 0x2b, 0x5d, 0x31, 0xdc, 0xc5, 0x66, 0x51, 0x00, 0x57,
		0x61, 0xdc, 0x8c, 0x02, 0xb8, 0x28, 0x80, 0xbb, 0xa1, 0x21, 0x14, 0xc0, 0x2d, 0x29, 0x95, 0x06,
		0x65, 0xba, 0x06, 0xaa, 0x0c, 0xca, 0x74, 0x89, 0x06, 0xd9, 0x19, 0x7c, 0xf0, 0xf6, 0x35, 0xf0,
		0xf6, 0xda, 0x8d, 0x90, 0x32, 0x63, 0xa4, 0xc6, 0x28, 0xf1, 0xb0, 0x2a, 0xe0, 0xed, 0xd3, 0x06,
		0x06, 0xbc, 0x7d, 0xe2, 0xc1, 0xc1, 0xdb, 0xe7, 0xef, 0x07, 0xbc, 0x7d, 0x69, 0xa7, 0x1e, 0xbc,
		0xbd, 0x8e, 0x56, 0xc1, 0xdb, 0x67, 0x82, 0x0f, 0x15, 0xe5, 0xed, 0x17, 0x48, 0x43, 0x94, 0x04,
		0xc8, 0x0a, 0x64, 0x50, 0x12, 0x00, 0xc4, 0x0b, 0x88, 0x17, 0x10, 0x2f, 0x20, 0x5e, 0x40, 0xbc,
		0x80, 0x78, 0x01, 0xf1, 0x02, 0xe2, 0x05, 0xc4, 0x0b, 0x88, 0x17, 0x10, 0x2f, 0x20, 0x5e, 0x40,
		0xbc, 0x80, 0x78, 0x01, 0xf1, 0x92, 0x97, 0x78, 0x81, 0x48, 0x92, 0x6b, 0x42, 0xd5, 0x4e, 0xa4,
		0x0e, 0x61, 0xe4, 0xd7, 0xc9, 0x03, 0x4c, 0x85, 0x91, 0x95, 0x97, 0x43, 0x1a, 0x8e, 0xed, 0x07,
		0x4c, 0x9a, 0xc8, 0x69, 0xdb, 0x10, 0x46, 0x2a, 0x8c, 0x8f, 0x21, 0x8c, 0x84, 0x30, 0x72, 0x43,
		0x43, 0x10, 0x46, 0x96, 0x94, 0x32, 0x03, 0x3f, 0xaf, 0x81, 0x12, 0x03, 0x3f, 0x2f, 0xd1, 0x60,
		0xc4, 0x70, 0xf9, 0xec, 0x04, 0xbd, 0x0f, 0x86, 0x1e, 0x0c, 0xbd, 0x46, 0x33, 0xa4, 0xcc, 0x1c,
		0xa9, 0x31, 0x4b, 0x3c, 0xfc, 0x09, 0x18, 0xfa, 0xb4, 0x81, 0x01, 0x43, 0x9f, 0x78, 0x70, 0x30,
		0xf4, 0xf9, 0xfb, 0x01, 0x43, 0x5f, 0xda, 0xa9, 0x07, 0x43, 0xaf, 0xa3, 0xd5, 0x6e, 0xa9, 0x7d,
		0xd6, 0x07, 0xdb, 0x0f, 0x2e, 0x82, 0xc0, 0xe3, 0xf1, 0x5b, 0x1f, 0x6d, 0xf7, 0xd2, 0x11, 0x21,
		0x2c, 0xf0, 0x79, 0xd6, 0x79, 0xb8, 0x4f, 0x13, 0x3d, 0x34, 0x4f, 0xdb, 0xed, 0xce, 0x49, 0xbb,
		0xdd, 0x38, 0x39, 0x3a, 0x69, 0x9c, 0x1d, 0x1f, 0x37, 0x3b, 0xcd, 0x63, 0x86, 0x4e, 0x3f, 0x7b,
		0x96, 0xf0, 0x84, 0xf5, 0xdb, 0x73, 0xfd, 0xbc, 0xe6, 0x8e, 0x1c, 0x07, 0x39, 0x98, 0x2c, 0x00,
		0x71, 0x1b, 0x72, 0x30, 0x13, 0x76, 0x18, 0x0a, 0xd8, 0xac, 0x78, 0x15, 0x0a, 0x58, 0x30, 0x6c,
		0x60, 0xd8, 0xc0, 0xb0, 0x81, 0x61, 0x03, 0xc3, 0x06, 0x86, 0x0d, 0x0c, 0x1b, 0x18, 0x36, 0x30,
		0x6c, 0x60, 0xd8, 0xc0, 0xb0, 0x81, 0x61, 0x03, 0xc3, 0x06, 0x86, 0x0d, 0x0c, 0x1b, 0x18, 0x36,
		0x30, 0x6c, 0x2b, 0x19, 0x36, 0x48, 0x9d, 0xb9, 0x66, 0x55, 0xc3, 0x6c, 0xea, 0xd6, 0x3b, 0x87,
		0x16, 0xb8, 0xfa, 0x9a, 0x67, 0x2f, 0xc2, 0xf8, 0x2c, 0xa2, 0x67, 0x8a, 0x82, 0xbd, 0x50, 0x3d,
		0x6b, 0x65, 0x40, 0xa0, 0x7a, 0x2e, 0x83, 0xb5, 0x86, 0xea, 0xb9, 0x0c, 0x5b, 0x9f, 0xc3, 0x04,
		0x30, 0x9a, 0x02, 0x2e, 0x93, 0xc0, 0x6e, 0x1a, 0xd8, 0x4d, 0x04, 0xaf, 0xa9, 0x28, 0x27, 0x8c,
		0x27, 0xcf, 0xc9, 0xa8, 0xb9, 0x40, 0x19, 0x57, 0x27, 0xb3, 0x9a, 0x1d, 0x05, 0xe6, 0x87, 0xdb,
		0x0c, 0x29, 0x33, 0x47, 0xca, 0xcc, 0x92, 0x1a, 0xf3, 0xc4, 0xc3, 0x9c, 0x21, 0x37, 0x93, 0x36,
		0x30, 0xc8, 0xcd, 0x2c, 0x52, 0x8b, 0xc8, 0xcd, 0xe4, 0xec, 0x07, 0xb9, 0x99, 0xd2, 0x4e, 0x3d,
		0x72, 0x33, 0x3a, 0x5a, 0xdd, 0x85, 0xab, 0x93, 0x95, 0x5c, 0x9a, 0x8c, 0xeb, 0x92, 0x81, 0xae,
		0x81, 0xae, 0x81, 0xae, 0x81, 0xae, 0x81, 0xae, 0x81, 0xae, 0x81, 0xae, 0x81, 0xae, 0x81, 0xae,
		0x51, 0xfd, 0x2f, 0x1b, 0x7c, 0xd8, 0x0a, 0x5d, 0xcc, 0xf4, 0xa2, 0x64, 0x1c, 0x3d, 0xcb, 0x08,
		0x67, 0x70, 0xf4, 0xac, 0xb4, 0x91, 0x10, 0xd2, 0x9c, 0x7a, 0x22, 0x1d, 0xa4, 0x39, 0x09, 0xb6,
		0x03, 0xd2, 0x9c, 0x20, 0x62, 0x40, 0xc4, 0x80, 0x88, 0x01, 0x11, 0x03, 0x22, 0x06, 0x44, 0x0c,
		0x88, 0x18, 0x10, 0x31, 0x20, 0x62, 0x90, 0xe6, 0x24, 0x73, 0x7e, 0x48, 0x73, 0x02, 0x5d, 0x03,
		0x5d, 0x03, 0x5d, 0x03, 0x5d, 0x03, 0x5d, 0x03, 0x5d, 0x03, 0x5d, 0x03, 0x5d, 0x03, 0x5d, 0x23,
		0xcd, 0x99, 0x0d, 0x3e, 0x6c, 0x51, 0x9a, 0x13, 0xe7, 0xff, 0xb9, 0xa6, 0x55, 0xc7, 0x74, 0xea,
		0x2e, 0x00, 0x30, 0x45, 0x4f, 0xba, 0x2a, 0x00, 0xec, 0x29, 0x5c, 0x35, 0x54, 0xab, 0x85, 0x7b,
		0x95, 0xd4, 0x65, 0xca, 0x22, 0xe4, 0x5b, 0x09, 0xc5, 0xe6, 0x3d, 0xff, 0xac, 0x15, 0x98, 0x31,
		0x49, 0xed, 0x03, 0x89, 0xd6, 0x41, 0x52, 0xdb, 0x20, 0xad, 0x65, 0xa0, 0xa0, 0x39, 0x08, 0xe9,
		0x0c, 0x2a, 0xda, 0x82, 0x9c, 0x9e, 0x20, 0xa7, 0x21, 0x68, 0xe9, 0x06, 0xb5, 0x56, 0x4e, 0x56,
		0x3b, 0x50, 0xa7, 0xe2, 0x31, 0x89, 0x69, 0x05, 0xa2, 0x70, 0x06, 0x25, 0x54, 0x4a, 0xc6, 0x29,
		0xa2, 0x84, 0x8a, 0x0e, 0x0e, 0x30, 0x5e, 0x71, 0x23, 0x37, 0xc4, 0x43, 0x04, 0xeb, 0x6d, 0xe6,
		0x2b, 0xcf, 0x08, 0xda, 0x8a, 0x7e, 0x26, 0x0d, 0xa3, 0xc7, 0xa0, 0xfb, 0xa3, 0x27, 0x4a, 0x19,
		0x08, 0x52, 0x26, 0x62, 0x94, 0xa7, 0x50, 0x23, 0x63, 0x2e, 0x84, 0x95, 0x05, 0xe3, 0x26, 0x3e,
		0x55, 0x50, 0x5e, 0x63, 0x9e, 0xca, 0x98, 0x95, 0x9f, 0x52, 0x3e, 0x42, 0x53, 0xc9, 0xac, 0x96,
		0x94, 0x18, 0xec, 0x96, 0x89, 0x18, 0x64, 0xf0, 0x0d, 0xff, 0xb3, 0xdd, 0xff, 0xf1, 0xf8, 0x86,
		0xe6, 0x29, 0x61, 0x9b, 0xd7, 0x66, 0x10, 0x08, 0xcf, 0x25, 0x77, 0x0f, 0xf5, 0xdf, 0xf7, 0xdb,
		0x8d, 0xb3, 0x9b, 0x86, 0xd1, 0xee, 0xbe, 0xb4, 0x1b, 0x37, 0x0d, 0xe3, 0xb4, 0x7b, 0xd3, 0x30,
		0xce, 0xba, 0x2f, 0x37, 0x4d, 0xe3, 0x68, 0xfa, 0xf2, 0xd7, 0xd1, 0x38, 0xfc, 0xeb, 0x2c, 0xfa,
		0xab, 0xf9, 0xa6, 0x15, 0xfd, 0x7d, 0xf0, 0xe3, 0xc7, 0xdb, 0x7d, 0x89, 0xaf, 0xbf, 0xfc, 0xf8,
		0xf1, 0xd7, 0x83, 0xbf, 0xd0, 0xe5, 0x85, 0xbb, 0x94, 0xe3, 0xfd, 0xf9, 0xeb, 0xd5, 0x7f, 0x30,
		0xe8, 0xca, 0xec, 0xc3, 0x9e, 0xde, 0xe7, 0x00, 0x27, 0x4a, 0xc5, 0x89, 0x4a, 0xa4, 0x3b, 0x0a,
		0x10, 0x95, 0x7b, 0x8c, 0x83, 0x2e, 0x3b, 0xd8, 0x7c, 0x83, 0x5c, 0x2f, 0xc4, 0xcf, 0x66, 0xa4,
		0x9a, 0xf3, 0xcd, 0x5d, 0xf6, 0x19, 0xc8, 0xf6, 0xc9, 0x8c, 0x73, 0x54, 0xff, 0x97, 0x78, 0x0e,
		0x7f, 0x87, 0xed, 0x5a, 0x22, 0x2b, 0xb3, 0x51, 0xac, 0x7c, 0x7d, 0xf1, 0xb2, 0xf4, 0xa4, 0xe5,
		0xe6, 0x8b, 0x95, 0x91, 0xcf, 0x3a, 0x9a, 0x17, 0xa3, 0xfb, 0xf0, 0x31, 0x85, 0x95, 0xcb, 0xd5,
		0xe5, 0xdb, 0x12, 0x31, 0xe2, 0x3a, 0x1c, 0xf4, 0x0c, 0xbb, 0x7f, 0x9e, 0x58, 0xe0, 0x4b, 0x6f,
		0x44, 0x7f, 0x2f, 0x6e, 0x82, 0xf4, 0x7b, 0x39, 0x77, 0x41, 0xfd, 0x9d, 0xf0, 0x7b, 0x9e, 0x3d,
		0x8c, 0xf6, 0x73, 0xfd, 0xea, 0xfa, 0xa9, 0x5d, 0x33, 0x2d, 0xcb, 0x13, 0xbe, 0x5f, 0xeb, 0x9b,
		0x8f, 0xb6, 0xf3, 0x5c, 0x9b, 0x6e, 0xcf, 0x91, 0x37, 0xd9, 0xf4, 0xb5, 0xfe, 0xc0, 0xfb, 0xe1,
		0xce, 0x1f, 0x21, 0x6f, 0x7f, 0xc5, 0xb2, 0x11, 0x85, 0x09, 0x4f, 0x19, 0x82, 0x33, 0x49, 0x68,
		0xda, 0xc3, 0x22, 0xe6, 0x45, 0x92, 0xbe, 0x24, 0xa3, 0x2b, 0xc9, 0xe8, 0xc9, 0x65, 0x3a, 0xd2,
		0x1e, 0xd6, 0x4b, 0xe6, 0x9e, 0x8a, 0x66, 0x0e, 0xea, 0xf6, 0xf0, 0xa9, 0x2d, 0x9f, 0xa9, 0x9b,
		0xb4, 0x52, 0x34, 0xe9, 0xb1, 0xb8, 0x15, 0xaf, 0x4d, 0xcf, 0x7c, 0x14, 0x81, 0xf0, 0xfc, 0x70,
		0xcf, 0xd5, 0x82, 0x07, 0x51, 0x5b, 0xb1, 0x3b, 0xdf, 0xea, 0x4e, 0x0b, 0x36, 0xca, 0x91, 0x16,
		0x2c, 0xb4, 0x41, 0xa9, 0x36, 0x2a, 0xf9, 0x86, 0x25, 0xdf, 0xb8, 0x94, 0x1b, 0x58, 0x12, 0xe4,
		0x73, 0x1b, 0x8c, 0x3d, 0x06, 0xd3, 0x52, 0x79, 0xa7, 0xde, 0x81, 0x53, 0x87, 0x53, 0xdf, 0x49,
		0xa7, 0xde, 0x21, 0x71, 0xea, 0x1d, 0x56, 0xa7, 0xde, 0x81, 0x53, 0x87, 0x53, 0x87, 0x53, 0x87,
		0x53, 0xcf, 0x61, 0x49, 0x2e, 0x2c, 0xcb, 0xaf, 0x7d, 0xff, 0x70, 0xf1, 0xa9, 0xe6, 0x8b, 0x20,
		0xb0, 0xdd, 0x7b, 0xbf, 0x16, 0x0c, 0x6a, 0xb6, 0x6b, 0xd9, 0x4f, 0xb6, 0x35, 0x32, 0x9d, 0xda,
		0x42, 0xff, 0x3b, 0xe2, 0xd1, 0x8b, 0xf2, 0x80, 0x5b, 0xef, 0xd3, 0x8b, 0xe9, 0x86, 0x4a, 0xea,
		0xd5, 0x27, 0x3f, 0x46, 0xda, 0xab, 0x4b, 0x68, 0xd4, 0x96, 0xf7, 0xe2, 0xa5, 0xdb, 0x73, 0x06,
		0xbe, 0xed, 0xde, 0x87, 0xb0, 0x3a, 0x30, 0x6d, 0x57, 0x78, 0x13, 0xf7, 0x3e, 0xd9, 0x9e, 0xf1,
		0x26, 0x34, 0xfc, 0xa1, 0xe8, 0xd9, 0x7d, 0xbb, 0xf7, 0xc3, 0xb5, 0xcc, 0xc0, 0xac, 0x0d, 0x5c,
		0xa9, 0x3d, 0xba, 0xad, 0x4e, 0x1f, 0x02, 0x5f, 0xa5, 0x7b, 0x7c, 0x6b, 0x1c, 0x7f, 0xa6, 0x4f,
		0x76, 0xb3, 0x72, 0xff, 0xc5, 0xb2, 0x5c, 0x2c, 0xd9, 0xad, 0x1c, 0xeb, 0x2e, 0x53, 0x42, 0x2b,
		0xdb, 0x1a, 0x79, 0x7d, 0x3c, 0x37, 0x7f, 0xe2, 0x15, 0x6f, 0x90, 0x77, 0x84, 0xa9, 0x46, 0x76,
		0xf3, 0x8f, 0x5f, 0xff, 0x93, 0x56, 0xff, 0x97, 0x35, 0x3f, 0x72, 0x96, 0x88, 0x9b, 0xcc, 0xc3,
		0x9a, 0x8f, 0x64, 0xca, 0xbb, 0x65, 0xcf, 0xb3, 0x49, 0xe5, 0xd5, 0xb2, 0xe5, 0xd1, 0xd6, 0xfd,
		0xd8, 0x6c, 0x79, 0xb2, 0xcd, 0x53, 0x9c, 0x1d, 0x5d, 0xbf, 0xb2, 0x1b, 0x56, 0xc2, 0xe4, 0x0f,
		0x17, 0xff, 0x5c, 0x22, 0xbc, 0x82, 0xc1, 0x24, 0xf6, 0x8e, 0x5b, 0xad, 0x3d, 0x0e, 0xac, 0x91,
		0xf3, 0x6a, 0xe3, 0xd9, 0x5c, 0x6d, 0x66, 0x97, 0x9a, 0xc7, 0x75, 0x26, 0x5d, 0xa4, 0x63, 0x66,
		0xb9, 0xe0, 0x31, 0xaf, 0x27, 0x2c, 0xec, 0xf1, 0x0a, 0x7b, 0xb6, 0x65, 0x0f, 0x16, 0xfe, 0x2e,
		0x66, 0xb3, 0x93, 0x15, 0x74, 0xd6, 0xcd, 0xfb, 0x7b, 0x4f, 0xdc, 0xe7, 0x73, 0x01, 0xf1, 0x1c,
		0x25, 0xbf, 0x9c, 0x71, 0x28, 0x96, 0xd6, 0xed, 0xe7, 0xc9, 0xab, 0x29, 0x4b, 0xe4, 0x0c, 0xee,
		0xed, 0x9e, 0xe9, 0xcc, 0x57, 0xab, 0x5f, 0xf3, 0xc4, 0xd0, 0x13, 0xbe, 0x70, 0xc3, 0xc0, 0xef,
		0x87, 0x3b, 0xeb, 0x2e, 0x33, 0x86, 0xcc, 0x89, 0x19, 0x73, 0x63, 0xc4, 0x22, 0x98, 0x30, 0xff,
		0x02, 0x97, 0x85, 0x7c, 0xd2, 0x10, 0x4f, 0x1a, 0xd2, 0x15, 0xda, 0x00, 0xf9, 0x10, 0x8f, 0xb4,
		0x1f, 0xdf, 0x2b, 0xb0, 0xd5, 0x74, 0x1a, 0x7b, 0xd3, 0xb2, 0xc2, 0xbf, 0x4d, 0xa7, 0x76, 0x19,
		0x3c, 0x08, 0xcf, 0x15, 0x41, 0x1c, 0x78, 0xa5, 0x9c, 0x40, 0x32, 0xe9, 0x11, 0xba, 0x00, 0xe1,
		0x54, 0xc4, 0x03, 0x88, 0xe0, 0x61, 0x2b, 0x3d, 0x40, 0xf8, 0xbb, 0xca, 0xe2, 0x01, 0x44, 0xb4,
		0x7c, 0xf2, 0x9b, 0xff, 0xf8, 0x9b, 0xc5, 0x6c, 0xff, 0xb7, 0xc1, 0xd0, 0x70, 0xc4, 0x93, 0x70,
		0x96, 0xe8, 0x84, 0x59, 0xb3, 0x8b, 0xcb, 0xf8, 0x87, 0x6b, 0xba, 0x56, 0x2d, 0xcf, 0x11, 0xe1,
		0xb2, 0x5b, 0xff, 0x6c, 0x8b, 0x7b, 0xfb, 0xac, 0x7f, 0xa6, 0xc5, 0x0f, 0xeb, 0xbf, 0xd1, 0xfa,
		0x2f, 0x5a, 0xf8, 0x78, 0x67, 0x4c, 0xf6, 0x8f, 0x37, 0x18, 0x05, 0xc2, 0x5a, 0x62, 0xe5, 0xfc,
		0x8a, 0x58, 0xfc, 0x8c, 0xb4, 0x58, 0xf5, 0x4c, 0x7e, 0x36, 0xda, 0x4a, 0x91, 0xcd, 0x9f, 0x2e,
		0x11, 0x23, 0x17, 0xc3, 0x1c, 0xcf, 0x52, 0xf2, 0xcb, 0xb4, 0x96, 0x3f, 0x5a, 0xb9, 0x61, 0xcb,
		0x89, 0x95, 0xfb, 0xb6, 0x56, 0xfb, 0xf6, 0x20, 0x7c, 0xf1, 0xc3, 0x5d, 0x11, 0x21, 0x98, 0x9e,
		0xa8, 0x99, 0x8e, 0x3f, 0xa8, 0xfd, 0xe1, 0x0e, 0xfe, 0x74, 0x6b, 0xa6, 0x5f, 0xfb, 0xfa, 0xfd,
		0xaa, 0xb6, 0xef, 0xff, 0x69, 0x07, 0xbd, 0x87, 0xb0, 0x2d, 0xdb, 0x0b, 0x46, 0xa6, 0x93, 0x40,
		0x40, 0x07, 0x6f, 0x6a, 0x57, 0x5f, 0x7e, 0xab, 0xed, 0x87, 0x6f, 0xdc, 0x7b, 0x66, 0xd8, 0x61,
		0xd8, 0xaf, 0xed, 0xde, 0x4f, 0xf6, 0xd1, 0x9d, 0x67, 0x5b, 0xf7, 0xb6, 0x7b, 0x7f, 0xf0, 0xa6,
		0xf6, 0xe5, 0xfb, 0xd5, 0x0f, 0x77, 0x7f, 0xe5, 0x76, 0x3a, 0xd8, 0x12, 0x1f, 0x94, 0x93, 0x85,
		0xde, 0x1e, 0x27, 0x94, 0x8f, 0x45, 0xd6, 0xee, 0x85, 0xf6, 0x72, 0xb0, 0xbc, 0x59, 0x39, 0xc7,
		0xe2, 0x5c, 0xe3, 0x86, 0xc9, 0x5b, 0x47, 0xcd, 0xae, 0x1e, 0xeb, 0xf4, 0xef, 0x5a, 0x7c, 0x67,
		0xc9, 0xe0, 0xbd, 0xf6, 0xcb, 0xf2, 0xfe, 0xa2, 0xc5, 0x87, 0x9a, 0x77, 0x9d, 0xe8, 0xb6, 0xee,
		0x0c, 0x7a, 0xa6, 0x63, 0x4c, 0x8c, 0x80, 0x9f, 0xea, 0x34, 0x51, 0xef, 0x37, 0xf1, 0xa9, 0xa5,
		0x87, 0x5e, 0x6d, 0x02, 0xd6, 0x6e, 0xf5, 0x4d, 0x5b, 0x7a, 0x81, 0x3c, 0x18, 0xf4, 0x0c, 0x6f,
		0x15, 0xf6, 0x7e, 0x6d, 0x93, 0x66, 0xde, 0x8c, 0x99, 0x37, 0x5d, 0x2a, 0xbe, 0x9f, 0x3e, 0x5a,
		0xce, 0xc9, 0x5d, 0xe7, 0xbd, 0xea, 0xbd, 0xd9, 0x48, 0xad, 0xf9, 0x3d, 0xb3, 0x41, 0x89, 0x3e,
		0xb7, 0x8e, 0xac, 0xde, 0x68, 0x89, 0x5f, 0xb5, 0xbc, 0x59, 0x2c, 0x6d, 0xa6, 0xe9, 0xc9, 0x6b,
		0x4b, 0x73, 0xdb, 0xce, 0xdc, 0xb6, 0x32, 0xeb, 0xf4, 0x15, 0x4b, 0x12, 0xc8, 0x5b, 0xa3, 0xf9,
		0xe6, 0xb2, 0xdd, 0xfb, 0xc3, 0xe4, 0x56, 0xdb, 0x78, 0x8f, 0xd8, 0x0a, 0xe3, 0xb2, 0x62, 0xb3,
		0x4c, 0x9b, 0x4b, 0x50, 0x8b, 0xaf, 0x2e, 0xb3, 0xd4, 0x37, 0xb0, 0xe0, 0x4a, 0xb5, 0xe0, 0x5e,
		0x43, 0xc1, 0x31, 0x6d, 0x9d, 0x61, 0x28, 0x96, 0x99, 0xee, 0xca, 0xa4, 0x4e, 0x5e, 0x5b, 0x0c,
		0x15, 0xce, 0x9e, 0xbc, 0xb2, 0x58, 0x14, 0x87, 0x52, 0xaf, 0x38, 0xa7, 0x62, 0xce, 0xaa, 0x72,
		0x89, 0x8c, 0xac, 0xcb, 0x6d, 0x0b, 0x73, 0x19, 0x19, 0x97, 0x63, 0xce, 0x50, 0x22, 0x6b, 0x60,
		0x9d, 0x53, 0x5c, 0x56, 0xb7, 0x16, 0x22, 0xf1, 0x82, 0xda, 0xd0, 0x64, 0x23, 0xc5, 0x14, 0x97,
		0x8d, 0x8a, 0x29, 0x2e, 0x73, 0x2f, 0x70, 0xd9, 0x85, 0x4e, 0xb6, 0xe0, 0xc9, 0x16, 0x3e, 0xd5,
		0x06, 0xc8, 0xb7, 0x11, 0x72, 0x6e, 0x88, 0xf8, 0x21, 0x0b, 0x57, 0x5f, 0x4b, 0x54, 0x23, 0xf5,
		0x6c, 0xf7, 0xbe, 0xc8, 0x94, 0xc7, 0x35, 0x60, 0xf4, 0x8b, 0xbf, 0xeb, 0x96, 0xed, 0xf7, 0x4c,
		0xcf, 0x92, 0xd8, 0xeb, 0x51, 0x03, 0xb9, 0x65, 0xdc, 0x7d, 0x73, 0xe4, 0x4c, 0xd6, 0x48, 0xdf,
		0x74, 0x7c, 0x01, 0x3b, 0x01, 0x3b, 0xb1, 0x9d, 0x76, 0xe2, 0x6e, 0x30, 0x70, 0x44, 0x31, 0x3d,
		0xfe, 0xcc, 0x50, 0x34, 0x4b, 0x60, 0x28, 0x86, 0xc5, 0x36, 0x40, 0x3c, 0x0c, 0xc5, 0xd0, 0x18,
		0xb6, 0x39, 0xb6, 0x79, 0x35, 0xb6, 0xb9, 0x3d, 0x34, 0x0a, 0x0f, 0xb8, 0x4c, 0xc1, 0x55, 0xb9,
		0x02, 0xab, 0x04, 0x67, 0x15, 0xec, 0xe1, 0x53, 0xdb, 0x90, 0x3e, 0x1a, 0x40, 0x51, 0x18, 0x8f,
		0xac, 0x10, 0x5e, 0x7d, 0x7f, 0x3f, 0x2e, 0x9a, 0x16, 0x95, 0x49, 0x7b, 0x69, 0x4e, 0xfe, 0x6f,
		0xfa, 0xba, 0x35, 0xa9, 0xaf, 0x16, 0xbd, 0x3e, 0xbe, 0x69, 0x18, 0xc7, 0x93, 0xd2, 0x6b, 0x07,
		0xbf, 0x8e, 0xc6, 0xf9, 0xbf, 0x78, 0x18, 0x75, 0x76, 0xf0, 0xb2, 0x7f, 0xd3, 0x34, 0x5a, 0xdd,
		0xd9, 0x1f, 0x47, 0x37, 0x0d, 0xa3, 0xd5, 0x3d, 0x38, 0x28, 0x7e, 0x96, 0xa1, 0x2b, 0x33, 0x94,
		0x94, 0x35, 0xee, 0xea, 0xbf, 0x97, 0x69, 0x40, 0x25, 0x0a, 0xdc, 0x75, 0x55, 0x16, 0x74, 0xa3,
		0xd9, 0x9b, 0x9d, 0xed, 0xdc, 0x9b, 0xa6, 0xd1, 0xbf, 0x30, 0xde, 0x77, 0x7f, 0x35, 0xdf, 0xb4,
		0xc7, 0xe7, 0x07, 0xbf, 0x4e, 0xc6, 0xcb, 0x6f, 0xbe, 0xac, 0xfa, 0x58, 0xf3, 0xcd, 0xc9, 0xf8,
		0x7c, 0xcd, 0x7f, 0xe9, 0x8c, 0xcf, 0x33, 0xb6, 0x71, 0x3c, 0xde, 0x4f, 0x7d, 0xf4, 0x60, 0x5a,
		0x47, 0x71, 0xf5, 0x17, 0xda, 0x6b, 0xbe, 0x70, 0xb4, 0xee, 0x0b, 0x47, 0x6b, 0xbe, 0xb0, 0xf6,
		0x91, 0x5a, 0x6b, 0xbe, 0x70, 0x3c, 0x7e, 0x49, 0x7d, 0x7e, 0x7f, 0xf5, 0x47, 0x3b, 0xe3, 0x83,
		0x97, 0x75, 0xff, 0xed, 0x64, 0xfc, 0x72, 0x7e, 0x70, 0x70, 0xb8, 0xdf, 0x6c, 0x4d, 0x2a, 0x4a,
		0x4e, 0xb6, 0x60, 0xb3, 0x9b, 0xda, 0x99, 0xd3, 0x9d, 0xb6, 0x45, 0x06, 0x0b, 0xab, 0xac, 0xb4,
		0xab, 0x4c, 0xbd, 0x15, 0xdf, 0xe3, 0xed, 0x87, 0x27, 0x6c, 0xf3, 0x45, 0x60, 0x04, 0xe6, 0x7d,
		0xf1, 0xb8, 0x6d, 0xd6, 0x00, 0x02, 0x37, 0x04, 0x6e, 0x5b, 0x19, 0xb8, 0x05, 0xe6, 0xbd, 0x11,
		0x84, 0xad, 0xec, 0x58, 0xdc, 0x36, 0xb2, 0xdd, 0xe0, 0xa8, 0x45, 0x00, 0x0b, 0x4f, 0x24, 0x9a,
		0xa0, 0xb9, 0xd7, 0x82, 0xe0, 0x0e, 0x15, 0xca, 0x7b, 0x2b, 0x88, 0x2f, 0x35, 0x88, 0x2f, 0x31,
		0xa0, 0x6a, 0x8f, 0xe1, 0xc6, 0x02, 0x82, 0x1a, 0xfe, 0xa4, 0xf7, 0x4c, 0x70, 0x4d, 0x41, 0xbb,
		0x75, 0xd6, 0x3e, 0xeb, 0x9c, 0xb4, 0xce, 0x8e, 0x4b, 0x3c, 0x17, 0x9a, 0xaa, 0x9d, 0x57, 0x2d,
		0x38, 0x7e, 0x10, 0x3f, 0x8d, 0xc2, 0x49, 0xbc, 0x92, 0xc6, 0xc6, 0x49, 0x58, 0xbd, 0x8c, 0xd6,
		0x5b, 0xe3, 0x83, 0xbf, 0x1e, 0xfc, 0x7d, 0x87, 0x61, 0x33, 0x6d, 0x59, 0x6c, 0xf2, 0xd2, 0x18,
		0x1b, 0x64, 0x8c, 0xcb, 0x92, 0xc2, 0xc3, 0xf8, 0xe5, 0x46, 0x85, 0x63, 0xfe, 0x11, 0xc8, 0xf0,
		0xeb, 0xf3, 0x66, 0x82, 0x8a, 0x65, 0x80, 0x72, 0x1a, 0x70, 0x28, 0x9a, 0xf8, 0x02, 0x82, 0x72,
		0x29, 0x9a, 0x72, 0x03, 0xfe, 0xb9, 0x2e, 0x57, 0x98, 0x7d, 0x4f, 0xf4, 0xf3, 0xcc, 0xd9, 0xcc,
		0xb8, 0xe7, 0x80, 0xb8, 0xa1, 0x31, 0x9f, 0x6c, 0xed, 0xb7, 0x6f, 0xa7, 0xf7, 0x5d, 0x1c, 0x46,
		0xb3, 0xa6, 0x70, 0x87, 0xe6, 0xbb, 0x6f, 0xb7, 0xd0, 0xfd, 0xba, 0x85, 0x15, 0x87, 0x2d, 0xec,
		0xcf, 0xad, 0xde, 0x9f, 0x50, 0x1c, 0x82, 0xa9, 0x02, 0x53, 0xc5, 0xc2, 0x54, 0x41, 0x71, 0x08,
		0xc5, 0x21, 0xec, 0x04, 0xec, 0xc4, 0x6b, 0xb3, 0x0e, 0xc5, 0x21, 0x14, 0x87, 0xd8, 0xe6, 0x50,
		0x1c, 0x66, 0xd9, 0xe8, 0x50, 0x1c, 0x42, 0x71, 0x08, 0xc5, 0x21, 0x14, 0x87, 0x84, 0x7b, 0x13,
		0x8a, 0x43, 0x68, 0xc1, 0xa0, 0x38, 0x2c, 0x68, 0xb0, 0xb0, 0xca, 0xa0, 0x38, 0x2c, 0x06, 0x40,
		0x6b, 0x50, 0x1c, 0x22, 0x70, 0x43, 0xe0, 0x06, 0xc5, 0x61, 0x69, 0xe3, 0x36, 0x28, 0x0e, 0x93,
		0x0f, 0x02, 0xc5, 0xa1, 0xd4, 0x3f, 0x28, 0x0e, 0x4b, 0x34, 0x17, 0x50, 0x1c, 0x66, 0x32, 0x80,
		0x50, 0x1c, 0xee, 0x18, 0x6c, 0xde, 0x4a, 0xc5, 0xe1, 0x54, 0x26, 0x54, 0x8a, 0xdb, 0xb3, 0xa2,
		0x0b, 0xa6, 0xb2, 0x55, 0x21, 0xcc, 0x74, 0xd5, 0x54, 0xd2, 0x3d, 0x67, 0xbb, 0x72, 0x2a, 0xe9,
		0x4d, 0x0a, 0x5f, 0x3d, 0x15, 0x37, 0x92, 0xe9, 0x0a, 0xaa, 0xac, 0xc3, 0x43, 0x77, 0xb9, 0x58,
		0xa1, 0x95, 0x52, 0xcf, 0x24, 0x55, 0x4b, 0x96, 0x03, 0xfe, 0x10, 0xb6, 0xf5, 0x65, 0xd2, 0xee,
		0xed, 0x45, 0xdc, 0x8c, 0x92, 0xbb, 0xca, 0x58, 0xcb, 0x90, 0xa6, 0x4a, 0x82, 0x4a, 0x14, 0x24,
		0xdd, 0x2c, 0xee, 0xcb, 0x24, 0xe6, 0xcb, 0x5c, 0x7a, 0xb4, 0x85, 0xd2, 0xa3, 0xd5, 0xa9, 0x75,
		0xbb, 0xc1, 0x2e, 0x67, 0x5f, 0x59, 0x76, 0x6f, 0x5d, 0x2d, 0xeb, 0x95, 0x2b, 0x6c, 0xfe, 0x71,
		0x14, 0xb9, 0xad, 0x56, 0x91, 0xdb, 0xe9, 0xec, 0x65, 0xaf, 0x70, 0x1b, 0x7d, 0x1e, 0xe5, 0x6d,
		0x51, 0xde, 0x36, 0xf9, 0x41, 0x94, 0xb7, 0x85, 0xd8, 0x1c, 0x62, 0x73, 0x66, 0x92, 0x08, 0x49,
		0x0a, 0x24, 0x29, 0x20, 0x36, 0x2f, 0x30, 0x16, 0xd0, 0x90, 0x62, 0x97, 0x63, 0x97, 0x6f, 0x98,
		0x75, 0x68, 0x48, 0xa1, 0x21, 0x85, 0x86, 0x74, 0x4d, 0x6b, 0xd0, 0x90, 0x6a, 0xdb, 0x9b, 0xd0,
		0x90, 0x42, 0xdd, 0x07, 0x0d, 0x69, 0x41, 0x83, 0x85, 0x55, 0x06, 0x0d, 0x69, 0x31, 0x00, 0x5a,
		0x83, 0x86, 0x14, 0x81, 0x1b, 0x02, 0x37, 0x68, 0x48, 0x4b, 0x1b, 0xb7, 0x41, 0x43, 0x9a, 0x7c,
		0x10, 0x68, 0x48, 0xa5, 0xfe, 0x41, 0x43, 0x5a, 0xa2, 0xb9, 0x80, 0x86, 0x34, 0x93, 0x01, 0x84,
		0x86, 0x74, 0xc7, 0x60, 0x73, 0x75, 0x35, 0xa4, 0x0b, 0x02, 0xa1, 0xe8, 0x2f, 0x0d, 0xf5, 0x2a,
		0x5d, 0xf1, 0x33, 0x30, 0x1e, 0x06, 0x43, 0x3f, 0xbf, 0x4a, 0x61, 0xfe, 0x55, 0x08, 0x15, 0x20,
		0x54, 0x90, 0xd8, 0x77, 0xb9, 0x85, 0x0a, 0xb3, 0x95, 0x57, 0x3c, 0x04, 0x8e, 0x5b, 0x28, 0x16,
		0x03, 0x37, 0x11, 0x03, 0x23, 0x06, 0xe6, 0x8c, 0x81, 0xf3, 0x6e, 0x89, 0xf8, 0x8b, 0x39, 0x25,
		0x67, 0x6b, 0x17, 0x4d, 0x2e, 0x09, 0x1a, 0xd1, 0x36, 0x91, 0xde, 0x2e, 0x14, 0xdb, 0x86, 0x74,
		0xfb, 0x50, 0x6d, 0x23, 0xf2, 0xed, 0x44, 0xbe, 0xad, 0xa8, 0xb7, 0x97, 0x5c, 0xec, 0x52, 0x30,
		0x02, 0x29, 0xbc, 0xed, 0xe2, 0x06, 0x6c, 0xd7, 0x12, 0xf2, 0x21, 0xef, 0x3c, 0xd9, 0x37, 0x69,
		0x4e, 0x72, 0x46, 0x68, 0xe2, 0x66, 0xe9, 0x4d, 0x49, 0xb9, 0x39, 0x59, 0x36, 0x29, 0xf5, 0x66,
		0x65, 0xdb, 0xb4, 0x6c, 0x9b, 0x97, 0x6b, 0x13, 0x13, 0xd1, 0x18, 0x92, 0xeb, 0xae, 0x30, 0xaf,
		0xbc, 0x76, 0xd5, 0x49, 0x53, 0x0d, 0x69, 0xca, 0x41, 0x13, 0xd1, 0x23, 0x31, 0xb6, 0xf5, 0x47,
		0x11, 0x78, 0x19, 0x0e, 0x4b, 0x64, 0x1e, 0xd5, 0xa8, 0x3d, 0x58, 0x3d, 0x58, 0x3d, 0x58, 0xbd,
		0x12, 0x5a, 0x3d, 0xe9, 0x2c, 0xd3, 0xf2, 0x1e, 0x3d, 0x21, 0x68, 0x8a, 0x26, 0xeb, 0x34, 0xfb,
		0x47, 0xb3, 0x05, 0x6a, 0xd4, 0x59, 0x28, 0x62, 0xe3, 0x96, 0x6a, 0x96, 0x38, 0x2b, 0x15, 0xb7,
		0xcb, 0x90, 0x11, 0x21, 0xda, 0x1e, 0x8b, 0x53, 0x45, 0x98, 0xad, 0x52, 0x35, 0x55, 0xd4, 0xd9,
		0x2b, 0x25, 0x73, 0xb6, 0x57, 0x8e, 0x56, 0xba, 0x15, 0x04, 0x5b, 0x85, 0xa9, 0xcf, 0xb5, 0xe6,
		0xbc, 0x20, 0x15, 0x0a, 0xc0, 0x05, 0xc0, 0x05, 0xc0, 0xa5, 0x06, 0x70, 0xb9, 0xf9, 0x0f, 0x53,
		0x6e, 0x8c, 0x32, 0xcf, 0x08, 0xda, 0x92, 0xd2, 0x3a, 0x31, 0xe2, 0xad, 0xc4, 0xe1, 0x1d, 0xd3,
		0xb2, 0x3c, 0xe1, 0xfb, 0x75, 0x42, 0x88, 0x40, 0x38, 0x82, 0x3c, 0x23, 0x49, 0x3f, 0xa2, 0x2b,
		0x46, 0xf6, 0xa9, 0xcd, 0x30, 0xb6, 0x69, 0x2e, 0x84, 0xa1, 0x6d, 0x2a, 0x59, 0xc6, 0xda, 0x0e,
		0x54, 0x9e, 0x8a, 0xa9, 0x93, 0xff, 0x84, 0x2e, 0xc7, 0x90, 0x53, 0xaa, 0xf8, 0xd7, 0xf6, 0xa2,
		0xf4, 0x38, 0xd2, 0x5f, 0x18, 0x46, 0x9e, 0xb4, 0xc5, 0xf1, 0x9b, 0x0a, 0x19, 0x93, 0x0e, 0x8c,
		0xc9, 0x46, 0x63, 0x82, 0x13, 0x2b, 0xea, 0x4f, 0xac, 0xc0, 0xb4, 0xa6, 0x4c, 0x2b, 0x96, 0xa1,
		0xfa, 0x65, 0x58, 0x7e, 0x47, 0xb3, 0x57, 0xae, 0xe7, 0x22, 0x72, 0x7c, 0x0c, 0xf1, 0xc8, 0x54,
		0xfc, 0x69, 0x89, 0xbe, 0xed, 0x0a, 0xcb, 0x20, 0x22, 0x5d, 0x56, 0xba, 0x3a, 0x42, 0x26, 0xb0,
		0x7e, 0x65, 0x09, 0x37, 0xb0, 0x83, 0xe7, 0xdf, 0x4c, 0x5f, 0xd0, 0x73, 0xa3, 0xb3, 0xb1, 0xf9,
		0xf0, 0xf9, 0x1f, 0x17, 0x1f, 0x6e, 0xdf, 0x5d, 0xbe, 0xbf, 0xfa, 0x74, 0xf9, 0xee, 0xf6, 0xd3,
		0xe5, 0x7f, 0xbe, 0xdd, 0xfe, 0xdf, 0xe7, 0xeb, 0x3a, 0x07, 0x65, 0xea, 0xb3, 0xd8, 0xc9, 0x5f,
		0x3c, 0x96, 0x77, 0x71, 0x7c, 0x3e, 0x5c, 0x7d, 0xfa, 0x17, 0xbd, 0x3d, 0x18, 0xbf, 0xa9, 0xda,
		0x68, 0xbc, 0xfb, 0xf2, 0xf9, 0x9a, 0x61, 0x1c, 0xf6, 0xca, 0x69, 0x65, 0x41, 0x96, 0x17, 0x27,
		0xcb, 0x3d, 0xd1, 0x1b, 0x79, 0x04, 0x86, 0x2b, 0x5e, 0x7a, 0xb3, 0x06, 0x25, 0x29, 0x42, 0xc9,
		0xdb, 0x76, 0xd7, 0x59, 0x7e, 0x50, 0xef, 0x59, 0x1b, 0x05, 0xf5, 0x0e, 0xea, 0x3d, 0xd3, 0xaa,
		0x2b, 0x7e, 0x5b, 0xf0, 0x5a, 0x78, 0xd6, 0xd4, 0x65, 0x48, 0x95, 0x2a, 0x69, 0x0b, 0x9e, 0xa5,
		0x4a, 0xb5, 0x43, 0x77, 0xb6, 0x2a, 0x3e, 0xae, 0x14, 0xbf, 0xca, 0x75, 0xdc, 0x4a, 0x7e, 0x38,
		0x0b, 0x0c, 0x65, 0x5d, 0xb8, 0xe6, 0x9d, 0x23, 0x8c, 0xbb, 0xbe, 0x25, 0x2f, 0xe9, 0x4f, 0xb4,
		0x05, 0x59, 0x7f, 0x68, 0xf4, 0x8a, 0x8f, 0x44, 0x6d, 0xa7, 0x35, 0xfd, 0xe1, 0xb8, 0xed, 0x8a,
		0xa0, 0x5f, 0xf2, 0x3c, 0x4d, 0x6a, 0xd9, 0x49, 0x9d, 0xab, 0x21, 0xda, 0x88, 0x95, 0x01, 0x7c,
		0x72, 0x1b, 0x14, 0x68, 0x8f, 0x65, 0x03, 0x97, 0x03, 0xea, 0xc9, 0x6e, 0xec, 0x25, 0x0f, 0x6b,
		0xd1, 0xad, 0x8e, 0x45, 0x77, 0x6b, 0x51, 0xad, 0x0d, 0xe2, 0xea, 0x17, 0x54, 0x5b, 0x9f, 0xc3,
		0x04, 0xf0, 0x99, 0x02, 0x2e, 0x93, 0xc0, 0x6e, 0x1a, 0xd8, 0x4d, 0x04, 0xab, 0xa9, 0x20, 0xe6,
		0xb2, 0x88, 0x56, 0x2c, 0x59, 0xb4, 0xc8, 0x18, 0x35, 0x12, 0x47, 0x8f, 0x74, 0x13, 0xa1, 0xd7,
		0xfa, 0x13, 0x45, 0x97, 0x6a, 0xa2, 0xcc, 0x79, 0xdc, 0x25, 0x15, 0x70, 0x12, 0x30, 0x00, 0x12,
		0xc1, 0xce, 0xe6, 0x8b, 0xb5, 0x72, 0xef, 0x90, 0x4d, 0x17, 0x70, 0x69, 0x43, 0xc1, 0x2d, 0xa0,
		0x60, 0xa0, 0x60, 0xa0, 0x60, 0xa0, 0x60, 0xa0, 0x60, 0xa0, 0x60, 0xa0, 0x60, 0xa0, 0x60, 0xa0,
		0x60, 0x16, 0x14, 0x9c, 0xe3, 0x8e, 0x64, 0x06, 0x10, 0x8c, 0x34, 0xd8, 0xfa, 0xa9, 0xa9, 0x4b,
		0x45, 0x08, 0xeb, 0x2e, 0x2b, 0xfe, 0x3a, 0xe9, 0xf9, 0xf6, 0x93, 0xf8, 0x19, 0xfc, 0xdf, 0x60,
		0x78, 0x7b, 0x39, 0xe9, 0xee, 0xb7, 0xa2, 0x26, 0x55, 0x4d, 0xe2, 0x4d, 0xae, 0x90, 0x0f, 0x49,
		0x01, 0x1f, 0x49, 0xb0, 0x83, 0x2a, 0x5a, 0xca, 0xf0, 0x09, 0xaa, 0x68, 0xd1, 0x42, 0x8a, 0xb9,
		0x68, 0x56, 0x98, 0x7d, 0x4f, 0xf4, 0x29, 0x8a, 0xf9, 0x9e, 0xc8, 0x15, 0xf3, 0x9d, 0xd8, 0xdd,
		0xb7, 0x6f, 0xa7, 0xbe, 0xeb, 0x70, 0xba, 0xad, 0x4b, 0x6d, 0xbe, 0x02, 0xe1, 0xf5, 0xcd, 0x9e,
		0x30, 0xc2, 0xe1, 0x23, 0x30, 0x63, 0xc9, 0xe6, 0xa0, 0x1e, 0x08, 0xf7, 0xa4, 0xdd, 0x87, 0x29,
		0x2b, 0x60, 0xca, 0xec, 0x3e, 0xb4, 0x03, 0x05, 0x17, 0x1d, 0xb4, 0x03, 0xaa, 0xb6, 0x27, 0x48,
		0x53, 0x8e, 0xed, 0xbb, 0x65, 0x9c, 0x69, 0xec, 0x14, 0xe9, 0x59, 0xd3, 0x79, 0xd3, 0xe0, 0x4d,
		0x4b, 0x63, 0x0c, 0x40, 0x9b, 0xea, 0x30, 0x16, 0xbb, 0xc6, 0x9a, 0xca, 0x87, 0x3c, 0x1c, 0x21,
		0xd0, 0xda, 0x90, 0xe8, 0x70, 0x32, 0xcd, 0xe7, 0xb1, 0xc1, 0xf2, 0x97, 0xdf, 0x88, 0xfe, 0x9e,
		0xf0, 0x42, 0x65, 0x61, 0x6d, 0x09, 0x80, 0x81, 0x3f, 0xba, 0x63, 0xb4, 0xff, 0x0b, 0xad, 0xc3,
		0x05, 0xc0, 0x05, 0xc0, 0x05, 0xc0, 0x05, 0x54, 0xd6, 0x05, 0xdc, 0xcc, 0x5d, 0xc0, 0xdf, 0x7a,
		0x23, 0xcf, 0x13, 0x6e, 0xb0, 0x7f, 0x70, 0xf8, 0xf6, 0xed, 0x61, 0xfc, 0x89, 0x6e, 0xf4, 0x95,
		0xa4, 0xdd, 0xf3, 0x57, 0xbc, 0x17, 0xb7, 0x5c, 0x98, 0x7e, 0x63, 0xf0, 0x26, 0x5a, 0xa3, 0x99,
		0xcb, 0x9f, 0x01, 0xcd, 0x91, 0x76, 0xfa, 0x00, 0x77, 0xd0, 0x33, 0xc4, 0xcf, 0xe0, 0x3c, 0x10,
		0x8e, 0x78, 0x14, 0x81, 0xf7, 0x6c, 0x0c, 0x5c, 0xa3, 0xf7, 0x30, 0xa9, 0xd3, 0xcb, 0x12, 0xf4,
		0x4e, 0x8e, 0xd2, 0x32, 0x44, 0xbd, 0xba, 0x03, 0xde, 0xee, 0x2e, 0xa5, 0x89, 0x17, 0x98, 0x66,
		0xe8, 0x25, 0xa1, 0x97, 0x04, 0xf3, 0x07, 0xe6, 0x0f, 0xcc, 0x1f, 0xc2, 0x3e, 0x84, 0x7d, 0x08,
		0xfb, 0x10, 0xf6, 0x81, 0xf9, 0x03, 0xf3, 0x07, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00,
		0xe6, 0x6f, 0xa7, 0x99, 0xbf, 0x0a, 0xd3, 0x3a, 0x38, 0x00, 0x50, 0xe2, 0xd9, 0x51, 0x72, 0x06,
		0xe0, 0x6a, 0xd6, 0xe3, 0x17, 0xd1, 0x2f, 0xb3, 0x8e, 0x56, 0x8e, 0xc6, 0x23, 0xa1, 0xef, 0xc8,
		0x74, 0xb3, 0x2d, 0x1c, 0x03, 0xe0, 0x85, 0x5c, 0x38, 0x06, 0x40, 0x4a, 0xb7, 0xe1, 0x32, 0x6d,
		0xb5, 0xb1, 0x13, 0x4a, 0xad, 0xa2, 0xd4, 0xaa, 0xfa, 0x18, 0x08, 0x97, 0x69, 0x2f, 0x3c, 0x3b,
		0x2e, 0xd3, 0x86, 0xd5, 0x83, 0xd5, 0xdb, 0x1d, 0xab, 0x87, 0xcb, 0xb4, 0xf3, 0x3c, 0x18, 0x2e,
		0xd3, 0xc6, 0x65, 0xda, 0xb8, 0x4c, 0x9b, 0x98, 0xc6, 0xac, 0xe1, 0x32, 0x6d, 0x5c, 0xa6, 0x0d,
		0xc0, 0x05, 0xc0, 0xb5, 0x1b, 0x80, 0x0b, 0x97, 0x69, 0x17, 0xa0, 0xce, 0x70, 0x99, 0x36, 0xed,
		0x3f, 0x5c, 0xa6, 0x9d, 0xa5, 0x03, 0x5c, 0xa6, 0x9d, 0x1a, 0x72, 0x5c, 0xa6, 0xcd, 0x8e, 0x45,
		0x19, 0xa3, 0xa2, 0x1a, 0x2e, 0xd3, 0xd6, 0x6c, 0x4c, 0x70, 0x8b, 0x31, 0x2e, 0xd3, 0x2e, 0x81,
		0x69, 0xc5, 0x32, 0xc4, 0x65, 0xda, 0x4c, 0x54, 0x4e, 0x0d, 0x97, 0x69, 0x13, 0xba, 0x3a, 0x5c,
		0xa6, 0xbd, 0x81, 0x32, 0xc5, 0x65, 0xda, 0xbc, 0x50, 0xb1, 0x86, 0xcb, 0xb4, 0x6b, 0xb8, 0x4c,
		0x9b, 0xb0, 0x7f, 0x5c, 0xa6, 0x9d, 0xd9, 0xf2, 0x83, 0x7a, 0xcf, 0xda, 0x28, 0xa8, 0x77, 0x50,
		0xef, 0x99, 0x56, 0x1d, 0x2e, 0xd3, 0xde, 0xe6, 0x43, 0x04, 0x12, 0x87, 0x3a, 0x0a, 0x68, 0xf9,
		0xf7, 0x18, 0xc7, 0x3d, 0xb4, 0x40, 0x45, 0x05, 0xc3, 0xf5, 0x0f, 0xb6, 0x1f, 0x5c, 0x04, 0x41,
		0x31, 0xe9, 0x73, 0xfd, 0xa3, 0xed, 0x5e, 0x3a, 0x22, 0xb4, 0x25, 0x7e, 0x31, 0xd7, 0x51, 0xff,
		0x68, 0xfe, 0x4c, 0xb4, 0xd0, 0x3c, 0x6d, 0xb7, 0x3b, 0x27, 0xed, 0x76, 0xe3, 0xe4, 0xe8, 0xa4,
		0x71, 0x76, 0x7c, 0xdc, 0xec, 0x14, 0x89, 0x68, 0xea, 0x9f, 0x3d, 0x4b, 0x78, 0xc2, 0xfa, 0x2d,
		0x1c, 0x16, 0x77, 0xe4, 0x38, 0xac, 0xa3, 0x2f, 0xb9, 0xda, 0x59, 0x57, 0x79, 0xbd, 0xd0, 0x19,
		0x92, 0x6c, 0x87, 0x62, 0xf2, 0xed, 0x9d, 0xec, 0x3b, 0x20, 0xdb, 0x27, 0x33, 0xce, 0x52, 0xd1,
		0xd9, 0xe1, 0x98, 0x95, 0x6c, 0x03, 0xf6, 0xfa, 0xcf, 0xcf, 0xf0, 0xd3, 0x67, 0x48, 0x24, 0xeb,
		0x4f, 0x8e, 0x7d, 0x5e, 0x2e, 0x04, 0x93, 0x13, 0x7b, 0xe6, 0xc6, 0x98, 0x45, 0xb0, 0xa4, 0x14,
		0x66, 0x2c, 0x8a, 0x0d, 0xa5, 0x31, 0xa0, 0x34, 0xd6, 0x93, 0xc5, 0x74, 0xb4, 0x9b, 0x2e, 0x37,
		0x16, 0x93, 0x38, 0x51, 0x5c, 0xe4, 0xc4, 0x70, 0xfa, 0x86, 0x8c, 0x68, 0xd6, 0x14, 0xee, 0xd0,
		0x7c, 0x47, 0xf5, 0x0a, 0x1d, 0xcd, 0xcb, 0x79, 0x14, 0x2f, 0xf7, 0xd1, 0x3b, 0xec, 0xcf, 0x8a,
		0xee, 0xcf, 0xbc, 0x47, 0xdd, 0xea, 0x96, 0xf0, 0x7b, 0x9e, 0x3d, 0x2c, 0x04, 0x72, 0xe2, 0x19,
		0x4f, 0x36, 0x92, 0x17, 0xe1, 0x16, 0x22, 0x39, 0x0a, 0x93, 0x1a, 0x32, 0x24, 0x06, 0x09, 0x69,
		0x21, 0x4b, 0x52, 0x90, 0x91, 0x12, 0x64, 0x24, 0x04, 0x15, 0xe9, 0xc0, 0x1b, 0x49, 0x15, 0x26,
		0x11, 0xe4, 0x8f, 0x85, 0x15, 0x3c, 0x06, 0x96, 0x03, 0x57, 0xe7, 0xb0, 0xb3, 0xc3, 0x62, 0xeb,
		0xbf, 0x18, 0x8c, 0xc4, 0x2e, 0xc7, 0x2e, 0xaf, 0xd8, 0x2e, 0xb7, 0x87, 0x46, 0xe1, 0x01, 0x97,
		0xd1, 0x91, 0xca, 0xe9, 0x45, 0x09, 0x0a, 0x22, 0x4c, 0xf4, 0x9f, 0xd2, 0x34, 0x37, 0x85, 0x32,
		0x8b, 0x4c, 0x81, 0xa5, 0x54, 0xb6, 0x79, 0x18, 0x75, 0x76, 0xf0, 0xb2, 0x7f, 0xd3, 0x34, 0x5a,
		0xdd, 0xd9, 0x1f, 0x47, 0x37, 0x0d, 0xa3, 0xd5, 0x95, 0xd1, 0x1e, 0x75, 0x65, 0x86, 0x92, 0x52,
		0x4b, 0xa4, 0x56, 0x8e, 0xf9, 0xda, 0x80, 0x4a, 0xa8, 0x68, 0xba, 0x2a, 0x49, 0x73, 0x9a, 0xbd,
		0xd9, 0xd9, 0xce, 0xbd, 0x09, 0xf9, 0x99, 0x7a, 0xf9, 0xd9, 0xe1, 0x7e, 0x33, 0xdc, 0x6f, 0xa7,
		0xd3, 0x2d, 0xd8, 0xec, 0xa6, 0x76, 0xe6, 0x74, 0xa7, 0x6d, 0x91, 0xc1, 0xc2, 0x2a, 0x2b, 0xed,
		0x2a, 0x53, 0x6f, 0xc5, 0xf7, 0x78, 0xfb, 0xe1, 0x09, 0xdb, 0x7c, 0x11, 0x18, 0x81, 0x79, 0x5f,
		0x3c, 0x6e, 0x9b, 0x35, 0x80, 0xc0, 0x0d, 0x81, 0xdb, 0x56, 0x06, 0x6e, 0x81, 0x79, 0x6f, 0x04,
		0x61, 0x2b, 0x3b, 0x16, 0xb7, 0x49, 0xd7, 0xed, 0x20, 0xa8, 0xd7, 0x41, 0x54, 0xa7, 0x83, 0x40,
		0xe1, 0x43, 0x59, 0x97, 0x83, 0xba, 0x5c, 0x35, 0x71, 0x1d, 0x0e, 0x8e, 0x5a, 0x0e, 0x14, 0x65,
		0xc9, 0x29, 0xeb, 0x6d, 0x70, 0x4d, 0x01, 0x75, 0x7d, 0x0d, 0x96, 0xb9, 0xd0, 0xa4, 0x28, 0xab,
		0x5a, 0x70, 0xfc, 0x20, 0x7e, 0x1a, 0xd2, 0x25, 0xdb, 0x4a, 0x16, 0x1b, 0x27, 0x61, 0xf5, 0x32,
		0x5a, 0x6f, 0x8d, 0x0f, 0xfe, 0x7a, 0xf0, 0xf7, 0x1d, 0x86, 0xcd, 0x5b, 0xa6, 0x22, 0xca, 0x21,
		0x57, 0xcc, 0xa0, 0x4f, 0xd8, 0x93, 0x18, 0x94, 0x99, 0xdc, 0x30, 0x13, 0x70, 0xcd, 0xa7, 0x2f,
		0xcc, 0xaf, 0x27, 0x24, 0xd1, 0x0f, 0xe6, 0xd3, 0x0b, 0xbe, 0x36, 0x3c, 0x39, 0xd7, 0x0a, 0xdd,
		0x1a, 0xa9, 0x67, 0x52, 0x9d, 0x6c, 0x16, 0xf7, 0x6d, 0x5e, 0x61, 0xeb, 0xd7, 0xcd, 0xea, 0xff,
		0xb2, 0x66, 0xa8, 0xb2, 0x0e, 0x11, 0xc1, 0xd0, 0xac, 0xfe, 0x3d, 0xe9, 0xa7, 0x5d, 0x7c, 0x67,
		0xe9, 0xb9, 0x5f, 0x7b, 0xde, 0x42, 0xcf, 0xb9, 0x62, 0xb6, 0xd6, 0xcf, 0xce, 0xe2, 0xcf, 0x98,
		0x3f, 0x6c, 0xe2, 0x41, 0xeb, 0xae, 0x08, 0xfe, 0x1c, 0x78, 0x7f, 0x18, 0xb6, 0xeb, 0x07, 0xa6,
		0xdb, 0x9b, 0x9c, 0x76, 0x5b, 0x7c, 0xd6, 0x44, 0xd9, 0xa7, 0xe5, 0x8f, 0x2e, 0xfd, 0xe0, 0xd5,
		0xc2, 0xa1, 0xb5, 0x01, 0xfb, 0xa6, 0x80, 0x3c, 0x19, 0x70, 0xbb, 0x22, 0x08, 0xbb, 0x5c, 0xf5,
		0xd3, 0x5f, 0x89, 0xa8, 0x33, 0x47, 0xcc, 0x99, 0x23, 0xe2, 0xe5, 0x88, 0x77, 0xf6, 0x6c, 0x39,
		0x97, 0xc6, 0x3a, 0x29, 0x4d, 0x6a, 0x8c, 0xd7, 0xff, 0xb4, 0x75, 0xb3, 0xb2, 0xee, 0x17, 0x6e,
		0x56, 0x75, 0xbd, 0xca, 0xaa, 0x64, 0x61, 0x4f, 0xb2, 0x4d, 0x5a, 0x5e, 0x3a, 0x24, 0x37, 0xed,
		0x91, 0x9b, 0xde, 0xc8, 0x3c, 0xa9, 0xc5, 0xec, 0xd6, 0x6b, 0xba, 0xa9, 0x7a, 0x6f, 0x36, 0xf6,
		0xaf, 0x0c, 0xc4, 0x6c, 0x78, 0xa3, 0xcf, 0xbf, 0xe6, 0x70, 0x33, 0xc9, 0xf8, 0x32, 0xd3, 0x69,
		0x79, 0xe8, 0xb3, 0x7c, 0x0b, 0xa1, 0x28, 0x3f, 0x56, 0x98, 0x0f, 0x2b, 0xcc, 0x7f, 0xe5, 0x5e,
		0x28, 0x34, 0xd0, 0x29, 0xab, 0xf0, 0xae, 0x90, 0xe0, 0x4e, 0x42, 0x68, 0x57, 0x76, 0x25, 0x77,
		0xf6, 0xa5, 0x27, 0x4b, 0xd1, 0x96, 0x4f, 0x2a, 0x9a, 0x79, 0x69, 0xf2, 0x84, 0x3e, 0xc5, 0xb5,
		0xdc, 0xb9, 0xc3, 0xed, 0x9c, 0x12, 0x38, 0x1a, 0x1d, 0xb6, 0x70, 0xcd, 0x3b, 0x47, 0x58, 0xf9,
		0x77, 0xd9, 0xec, 0x8b, 0xd8, 0x61, 0xd8, 0x61, 0x9a, 0x76, 0x58, 0xfe, 0x13, 0xaa, 0x39, 0x4f,
		0xa2, 0x92, 0x6e, 0xb1, 0x59, 0xa9, 0x2f, 0xa3, 0x6f, 0x3e, 0xda, 0x8e, 0xbd, 0x22, 0x40, 0xc9,
		0xba, 0xe7, 0xd2, 0x2d, 0x6d, 0xc9, 0x26, 0xb4, 0x0d, 0xe7, 0x68, 0x37, 0xb7, 0xe0, 0xe4, 0x97,
		0x57, 0x6e, 0x03, 0xda, 0x51, 0x89, 0x9c, 0x82, 0x47, 0x96, 0x72, 0xe4, 0x15, 0xe4, 0xaa, 0xf1,
		0xc4, 0x0f, 0x7c, 0xf1, 0xee, 0xdd, 0x97, 0xcb, 0xaf, 0x5f, 0x6f, 0xdf, 0x5f, 0x7c, 0xbc, 0xfa,
		0xf0, 0xdf, 0xbc, 0xb3, 0x2e, 0x51, 0x45, 0x47, 0xf2, 0x46, 0xb2, 0x8f, 0xd7, 0x1f, 0xbe, 0xd6,
		0x55, 0x5c, 0xa1, 0x26, 0xf9, 0x9c, 0x57, 0xd7, 0xdf, 0x3b, 0x15, 0x79, 0xce, 0x76, 0x15, 0x9e,
		0xf3, 0x43, 0xeb, 0xf6, 0xf2, 0xdb, 0xff, 0x5d, 0x7e, 0xf9, 0x74, 0xf9, 0x8d, 0x5b, 0x8c, 0xd0,
		0xd5, 0x64, 0x7d, 0x0a, 0x9d, 0xc0, 0x2f, 0x7e, 0xf2, 0x9e, 0xf4, 0xc4, 0x7d, 0xb1, 0x93, 0xf6,
		0x34, 0xa8, 0xe2, 0x31, 0x18, 0xe5, 0x07, 0x10, 0xe1, 0x97, 0x00, 0xd8, 0x01, 0xd8, 0x35, 0xe1,
		0x85, 0x91, 0xed, 0x06, 0xcd, 0x4e, 0x01, 0xa8, 0xd0, 0xc9, 0xf1, 0x95, 0x62, 0x32, 0x9b, 0x62,
		0xd5, 0x3f, 0x24, 0x24, 0x70, 0x52, 0x9a, 0x0d, 0x59, 0x99, 0x0c, 0x85, 0x14, 0x63, 0x5c, 0xac,
		0xdc, 0x89, 0xf6, 0x21, 0xeb, 0x1c, 0x1f, 0x1f, 0x1d, 0x6b, 0x1c, 0x36, 0xa6, 0x8c, 0x7f, 0x57,
		0xa1, 0xef, 0x89, 0x52, 0x74, 0x39, 0x9d, 0xcf, 0xe4, 0x5b, 0xf0, 0x3e, 0xf0, 0x3e, 0x20, 0x64,
		0x37, 0xf4, 0x39, 0x49, 0x8f, 0x1b, 0x96, 0xed, 0x07, 0xb6, 0x7b, 0x3f, 0xb2, 0xfd, 0x07, 0xe1,
		0xe5, 0xdf, 0x6a, 0xab, 0x1a, 0xc1, 0xce, 0xc3, 0xce, 0xd3, 0xb4, 0xf3, 0x8a, 0x2f, 0xc7, 0x5a,
		0x41, 0xe5, 0x79, 0x31, 0xc5, 0xb9, 0xde, 0xc2, 0x07, 0x05, 0xbe, 0x2b, 0x2b, 0xa6, 0xac, 0xef,
		0x87, 0x68, 0x68, 0x72, 0x94, 0xf4, 0xa5, 0x73, 0x7c, 0x3c, 0x39, 0x34, 0x3a, 0x3d, 0x78, 0xd4,
		0x39, 0x9e, 0x9f, 0x36, 0xfd, 0xd5, 0x1a, 0xbf, 0x74, 0x12, 0x7f, 0x1e, 0x4d, 0x8e, 0x40, 0x1d,
		0x47, 0x7f, 0xb5, 0xc7, 0x89, 0x03, 0x4b, 0xbf, 0x1a, 0x6f, 0x8e, 0xc6, 0x2f, 0x8d, 0x83, 0xf3,
		0xfd, 0x58, 0x3d, 0x3c, 0x6d, 0x7d, 0xf6, 0xe7, 0xe4, 0xb4, 0xd3, 0xb4, 0x8b, 0xe8, 0xad, 0xf9,
		0xc1, 0xa7, 0xb0, 0x9f, 0xe9, 0x9b, 0x37, 0x0d, 0xa3, 0x33, 0xef, 0x6c, 0xf2, 0xde, 0x62, 0x8f,
		0xe1, 0x5b, 0xf3, 0xa6, 0x7e, 0x1d, 0x4f, 0xde, 0xb9, 0x69, 0x18, 0x47, 0xd1, 0x1b, 0x9d, 0xf0,
		0x8d, 0xc4, 0x07, 0x4e, 0xc6, 0x2f, 0xed, 0x44, 0x47, 0xa7, 0xe3, 0x97, 0xa3, 0xe9, 0xab, 0xb3,
		0xa5, 0xa7, 0x3f, 0x0d, 0x9f, 0x3e, 0x3f, 0xd7, 0xd2, 0x2d, 0x32, 0x79, 0x14, 0xa7, 0xf8, 0xea,
		0xbf, 0xef, 0x63, 0x0e, 0x57, 0xcd, 0x61, 0x91, 0x43, 0x73, 0x5d, 0xce, 0xe3, 0x3b, 0x3b, 0x68,
		0x5c, 0x14, 0x1e, 0x84, 0x3f, 0xe7, 0xda, 0x05, 0x15, 0xb3, 0x05, 0xdb, 0x30, 0xe4, 0xd8, 0xba,
		0xfa, 0xb7, 0x6e, 0x95, 0x4d, 0x3f, 0x6c, 0xc1, 0xd4, 0x16, 0x60, 0x0e, 0xf5, 0x18, 0x97, 0x52,
		0x72, 0x76, 0x93, 0x18, 0xcc, 0x33, 0x6c, 0xab, 0x20, 0x9b, 0x30, 0xf9, 0x2a, 0x38, 0x04, 0x70,
		0x08, 0x9a, 0x38, 0x04, 0x6b, 0x10, 0x04, 0xc2, 0x32, 0xfe, 0x37, 0x32, 0xad, 0x42, 0x14, 0x5e,
		0xbe, 0xf2, 0xb8, 0x85, 0x6c, 0x6f, 0x49, 0x6f, 0x40, 0x55, 0x69, 0x65, 0x82, 0x3c, 0xf3, 0x3b,
		0x2f, 0x4b, 0x90, 0xbd, 0x24, 0x01, 0x6c, 0x0b, 0x6c, 0x0b, 0xb9, 0x6d, 0xa9, 0x9c, 0x8e, 0xed,
		0xd3, 0xe5, 0xb7, 0xff, 0xf7, 0xf9, 0xcb, 0xbf, 0x6e, 0xaf, 0x3e, 0x7d, 0xfd, 0x76, 0xf1, 0xe9,
		0x1f, 0x97, 0xb7, 0xdf, 0xfe, 0x7b, 0x7d, 0x59, 0x1d, 0x39, 0xdb, 0xbb, 0xcb, 0xf7, 0x17, 0xff,
		0xfe, 0xf0, 0x2d, 0x7e, 0xfc, 0x6a, 0x48, 0xb1, 0x3e, 0x1c, 0x55, 0xe3, 0x39, 0xbf, 0x7f, 0xbd,
		0xaa, 0xc6, 0x83, 0x5e, 0xb7, 0xae, 0x2b, 0xf1, 0xa0, 0x47, 0xdf, 0xbf, 0xbc, 0xaf, 0x9c, 0xfc,
		0x8e, 0xf9, 0x28, 0x17, 0xdd, 0x31, 0xef, 0xe5, 0x73, 0x9f, 0x87, 0xa9, 0xe3, 0xb9, 0xa9, 0x77,
		0x0e, 0xa3, 0x83, 0x83, 0x45, 0x4f, 0x6b, 0x6f, 0x38, 0xcb, 0x69, 0xbb, 0x81, 0xf0, 0xfa, 0x66,
		0x2f, 0x83, 0x3c, 0x7f, 0xee, 0x3e, 0xe6, 0xdf, 0xc1, 0x51, 0x46, 0x1c, 0x65, 0x5c, 0xb3, 0xa0,
		0xf2, 0xc3, 0xe2, 0xf9, 0x57, 0x99, 0x2f, 0xbc, 0x00, 0x36, 0xde, 0x76, 0x6c, 0x9c, 0xfb, 0xca,
		0x8b, 0x8c, 0x47, 0xb9, 0xd7, 0x4e, 0x77, 0xa6, 0xa3, 0xdd, 0x92, 0x0b, 0xb8, 0xf0, 0x42, 0x96,
		0x59, 0xd0, 0x34, 0x0b, 0x5b, 0x76, 0x81, 0x93, 0x2d, 0x74, 0xb2, 0x05, 0x4f, 0xb6, 0xf0, 0x8b,
		0xe1, 0xa7, 0xbc, 0xb5, 0x14, 0xf3, 0x6e, 0x88, 0xf8, 0x8b, 0xa6, 0xef, 0x0f, 0x7a, 0xb6, 0x19,
		0xc8, 0x1c, 0xe8, 0x5b, 0xbb, 0x96, 0x36, 0x35, 0xfe, 0x46, 0x8b, 0x6a, 0x56, 0xf6, 0x62, 0x5c,
		0x8a, 0x0b, 0x71, 0x69, 0xb6, 0x1a, 0xd5, 0x96, 0x23, 0xdf, 0x7a, 0xe4, 0x5b, 0x90, 0x7c, 0x2b,
		0x16, 0xdb, 0x92, 0x12, 0x11, 0x5b, 0x8d, 0xe4, 0x4a, 0x5b, 0x49, 0x7e, 0x87, 0x82, 0xef, 0xa1,
		0xe5, 0x7f, 0xd6, 0xfe, 0x40, 0xa9, 0x73, 0x8d, 0x94, 0xc4, 0x10, 0x4d, 0xe8, 0xbd, 0xf6, 0x77,
		0x16, 0x3b, 0x07, 0x49, 0xb4, 0x20, 0x19, 0x7f, 0x57, 0xb1, 0x73, 0x93, 0x95, 0xf8, 0x5d, 0xed,
		0x6d, 0xfc, 0x5d, 0x52, 0xe7, 0x32, 0x69, 0xac, 0x6a, 0x7e, 0xe2, 0x48, 0xaf, 0x35, 0x97, 0xba,
		0x69, 0x39, 0x6e, 0x45, 0xfa, 0xc6, 0xe5, 0x79, 0x4b, 0x0c, 0x37, 0x2f, 0xc7, 0x8d, 0x4b, 0xdd,
		0xc0, 0x5c, 0x7c, 0x7e, 0x8a, 0x1c, 0xc9, 0xca, 0x21, 0x08, 0xd8, 0xe0, 0x5f, 0x81, 0x4e, 0x81,
		0x4e, 0x81, 0x4e, 0x8b, 0xad, 0x1b, 0xc2, 0xba, 0xcc, 0x65, 0xb6, 0x33, 0xb9, 0x79, 0x50, 0x32,
		0x5e, 0x74, 0xdb, 0xad, 0x8e, 0xdd, 0x87, 0xc1, 0x29, 0x60, 0x70, 0xec, 0xfe, 0xee, 0xd9, 0x9a,
		0xfc, 0x17, 0x8c, 0xaf, 0x35, 0x36, 0x27, 0x72, 0x45, 0xe0, 0xa3, 0x3c, 0x60, 0x38, 0x0d, 0xe7,
		0xf3, 0x04, 0xda, 0xf2, 0x1b, 0xd1, 0xdf, 0x93, 0xa3, 0xc3, 0x25, 0x36, 0x6e, 0xfe, 0xe8, 0x8e,
		0xd0, 0xbe, 0x2d, 0xb4, 0x06, 0x13, 0x07, 0x13, 0x07, 0x13, 0xb7, 0xc5, 0x26, 0xee, 0x66, 0x6e,
		0xe2, 0xfe, 0xd6, 0x1b, 0x79, 0x9e, 0x70, 0x83, 0xfd, 0x83, 0xc3, 0xb7, 0x6f, 0x0f, 0xe3, 0x4f,
		0x74, 0xa3, 0xaf, 0x24, 0xed, 0x82, 0xbf, 0xe2, 0xbd, 0xb8, 0x65, 0x4b, 0xfc, 0x54, 0x66, 0x2d,
		0x59, 0xb3, 0x34, 0x05, 0x2f, 0x9e, 0x98, 0xdb, 0x65, 0x52, 0xd5, 0x49, 0x62, 0xf0, 0xe7, 0x63,
		0x9e, 0x45, 0x8a, 0x52, 0x7c, 0xd0, 0xf2, 0x5c, 0x7f, 0x57, 0x20, 0x92, 0x2f, 0x1e, 0xc1, 0x57,
		0xf5, 0xd2, 0x3b, 0xa4, 0x6a, 0x19, 0x22, 0xf0, 0xb2, 0x5f, 0x7b, 0x57, 0xdc, 0x25, 0xc8, 0xb8,
		0x82, 0xd8, 0x05, 0xbc, 0x7d, 0x3b, 0xbd, 0xbf, 0xe6, 0xd0, 0xb6, 0xca, 0x60, 0x27, 0xa6, 0x77,
		0xe9, 0x14, 0xbf, 0x24, 0x73, 0xf2, 0x75, 0xc5, 0xc2, 0x8e, 0x16, 0xac, 0x05, 0xac, 0x45, 0xa6,
		0xa7, 0x84, 0xb0, 0xa3, 0x9a, 0x11, 0x1e, 0xa8, 0x73, 0x0d, 0x5b, 0xb1, 0xea, 0xb1, 0x1e, 0x84,
		0x1d, 0xb9, 0x5a, 0x85, 0xb0, 0x43, 0xf5, 0xef, 0x82, 0xb0, 0xa3, 0x5a, 0xbf, 0x0b, 0xc2, 0x8e,
		0xdc, 0x43, 0x07, 0x61, 0x87, 0x02, 0x96, 0x0d, 0xc2, 0x0e, 0xa0, 0x53, 0xa0, 0xd3, 0x8a, 0xa1,
		0x53, 0x08, 0x3b, 0xf2, 0x9a, 0x1b, 0x64, 0x3d, 0x91, 0xf5, 0x94, 0x37, 0x38, 0xc8, 0x7a, 0x4a,
		0x19, 0x1b, 0x08, 0x3b, 0xe6, 0xbf, 0x07, 0xc2, 0x0e, 0x98, 0x38, 0x98, 0x38, 0x98, 0xb8, 0x22,
		0x26, 0x0e, 0xc2, 0x8e, 0x0d, 0xcb, 0xb9, 0xfc, 0xc2, 0x8e, 0x69, 0x9e, 0x93, 0x2b, 0x5f, 0x4b,
		0x7a, 0xba, 0xff, 0x5f, 0xe2, 0x39, 0x57, 0xb4, 0xbe, 0x8b, 0x97, 0xae, 0x65, 0xad, 0x26, 0x52,
		0x6c, 0x61, 0x2a, 0x58, 0x90, 0xf5, 0x5c, 0x29, 0x7e, 0x6f, 0xd4, 0x0b, 0xdc, 0x59, 0xb5, 0xb0,
		0x69, 0xf3, 0x57, 0x51, 0xeb, 0xb7, 0x57, 0x71, 0x93, 0x28, 0x25, 0x94, 0x18, 0x6a, 0x8e, 0x72,
		0x42, 0x99, 0x6e, 0x4a, 0xca, 0x73, 0x43, 0x52, 0x46, 0xfc, 0x87, 0x12, 0x42, 0xe5, 0x2f, 0x21,
		0x94, 0x19, 0x19, 0x15, 0x40, 0x40, 0x79, 0x90, 0x4e, 0x5a, 0xa7, 0xf4, 0x7a, 0x54, 0x56, 0x6c,
		0x37, 0x64, 0x53, 0x1e, 0xe5, 0x52, 0x1a, 0xe5, 0x2e, 0xa9, 0xd5, 0xc2, 0x7e, 0x28, 0xe9, 0x7e,
		0xc8, 0x5c, 0x52, 0xcb, 0x12, 0x7e, 0xcf, 0xb3, 0x87, 0xb9, 0x9c, 0xf4, 0xbc, 0x8e, 0x70, 0xe2,
		0xcb, 0x28, 0x39, 0x8b, 0xb2, 0x5a, 0x52, 0x68, 0x71, 0xdb, 0x2f, 0xa3, 0x13, 0xae, 0x79, 0xe7,
		0x88, 0x02, 0x25, 0xe3, 0x67, 0x5f, 0xc4, 0x0e, 0xc3, 0x0e, 0xd3, 0xb4, 0xc3, 0xee, 0x06, 0x03,
		0x47, 0x98, 0x6e, 0x91, 0x2d, 0xd6, 0x54, 0xbf, 0xc5, 0x8a, 0x6b, 0x4e, 0x97, 0xf7, 0x5c, 0x51,
		0x81, 0x69, 0xe9, 0x37, 0xa1, 0x6d, 0x38, 0x47, 0xbb, 0xb9, 0x05, 0x27, 0xbf, 0x1c, 0x55, 0xd5,
		0xd7, 0x7f, 0x87, 0xa6, 0xaa, 0xba, 0x94, 0xd8, 0x52, 0x63, 0x39, 0xf5, 0x62, 0xe2, 0x49, 0xf5,
		0x85, 0xb4, 0x8b, 0x89, 0x21, 0xb5, 0x3c, 0x67, 0xbb, 0x1a, 0x15, 0xd4, 0x25, 0xc4, 0x8a, 0x9a,
		0xcb, 0x93, 0x83, 0xa8, 0x66, 0x45, 0x15, 0x8f, 0xc1, 0x28, 0x3f, 0x80, 0x08, 0xbf, 0x04, 0xc0,
		0x0e, 0xc0, 0xae, 0x09, 0x2f, 0x8c, 0x6c, 0x37, 0x68, 0x76, 0x0a, 0x40, 0x85, 0x4e, 0x8e, 0xaf,
		0x7c, 0x31, 0xdd, 0x7b, 0x25, 0x17, 0x43, 0x7f, 0xb4, 0x5d, 0x89, 0xc3, 0x7f, 0x72, 0x22, 0x8f,
		0x09, 0x14, 0x91, 0xf8, 0xfe, 0x7b, 0xcf, 0xec, 0x05, 0xf6, 0xc0, 0x7d, 0x67, 0xdf, 0xdb, 0x53,
		0x13, 0xaa, 0x44, 0x6c, 0xf3, 0xd1, 0xfc, 0xa9, 0x7d, 0xc8, 0x3a, 0xc7, 0xc7, 0x47, 0xc7, 0x1a,
		0x87, 0x6d, 0x0b, 0x6e, 0x1a, 0xcc, 0x94, 0xf3, 0x4a, 0xed, 0xfe, 0x0c, 0xb9, 0x2f, 0x78, 0x1f,
		0x78, 0x9f, 0x1d, 0x27, 0x64, 0x27, 0x57, 0x71, 0x1a, 0x96, 0xed, 0x07, 0xb6, 0x7b, 0x3f, 0xb2,
		0xfd, 0x07, 0xe1, 0x15, 0xbc, 0xcf, 0x73, 0xa9, 0x11, 0xec, 0x3c, 0xec, 0x3c, 0x4d, 0x3b, 0xaf,
		0xf8, 0x72, 0x5c, 0xd8, 0x86, 0x67, 0x39, 0xbe, 0x13, 0x3d, 0xec, 0x0d, 0x6e, 0x01, 0xdf, 0xd8,
		0x00, 0xd7, 0x1d, 0xcc, 0xe7, 0x95, 0xbe, 0x9a, 0xba, 0x62, 0xb7, 0x80, 0x63, 0x0e, 0x57, 0xcc,
		0xa1, 0x82, 0x5b, 0xc0, 0xdf, 0xc0, 0xb8, 0x6c, 0x36, 0x2e, 0x0a, 0x2f, 0x4b, 0x66, 0xbb, 0x4d,
		0xbe, 0x62, 0xb6, 0x60, 0x1b, 0x86, 0x1c, 0x5b, 0x57, 0xff, 0xd6, 0xad, 0xb2, 0xe9, 0x87, 0x2d,
		0x98, 0xda, 0x02, 0xcc, 0xa1, 0x1e, 0xe3, 0x52, 0x4a, 0xce, 0x6e, 0x12, 0x83, 0x79, 0x86, 0x6d,
		0x15, 0x64, 0x13, 0x26, 0x5f, 0x05, 0x87, 0x00, 0x0e, 0x41, 0x13, 0x87, 0x60, 0x0d, 0x82, 0x40,
		0x58, 0xc6, 0xff, 0x46, 0xa6, 0x55, 0x88, 0xc2, 0xcb, 0xf1, 0x9d, 0xa2, 0xb6, 0x57, 0x29, 0xe0,
		0xad, 0x97, 0xd2, 0xca, 0x04, 0x79, 0xe6, 0x37, 0x9e, 0xdb, 0xc9, 0xb7, 0x60, 0x5b, 0x60, 0x5b,
		0x34, 0xd9, 0x96, 0xca, 0xe9, 0xd8, 0x3e, 0x5d, 0x7e, 0xfb, 0x7f, 0x9f, 0xbf, 0xfc, 0xeb, 0xf6,
		0xea, 0xd3, 0xd7, 0x6f, 0x17, 0x9f, 0xfe, 0x71, 0x79, 0xfb, 0xed, 0xbf, 0xd7, 0x97, 0xd5, 0x91,
		0xb3, 0xbd, 0xbb, 0x7c, 0x7f, 0xf1, 0xef, 0x0f, 0xdf, 0xe2, 0xc7, 0xaf, 0x86, 0x14, 0xeb, 0xc3,
		0x51, 0x35, 0x9e, 0xf3, 0xfb, 0xd7, 0xab, 0x6a, 0x3c, 0xe8, 0x75, 0xeb, 0xba, 0x12, 0x0f, 0x7a,
		0xf4, 0xfd, 0xcb, 0xfb, 0xca, 0xc9, 0xef, 0xb6, 0xfa, 0x48, 0x6f, 0x86, 0x93, 0xfb, 0x1b, 0xce,
		0x2f, 0xee, 0xe5, 0xf8, 0xc1, 0xb3, 0x93, 0xf7, 0x1b, 0xc4, 0x0b, 0xd9, 0x24, 0x8c, 0xd9, 0x25,
		0x8b, 0x52, 0x12, 0xc5, 0x6c, 0x92, 0xc4, 0x75, 0x3f, 0x36, 0xe3, 0xac, 0xd2, 0xce, 0x66, 0x7d,
		0xe3, 0x79, 0xd2, 0x0d, 0xc7, 0xdc, 0x57, 0x2f, 0x80, 0xf4, 0xf4, 0x2e, 0xbe, 0xb3, 0xf4, 0xdb,
		0x5f, 0xfb, 0xcd, 0x52, 0xbf, 0x75, 0xf1, 0x09, 0xe7, 0xcf, 0x31, 0x7d, 0x15, 0x3d, 0xc9, 0xba,
		0x27, 0xa8, 0xdb, 0xfe, 0x3f, 0x06, 0x8f, 0x43, 0x4f, 0xf8, 0xbe, 0xb0, 0xbe, 0x4e, 0x9e, 0x22,
		0x05, 0xd3, 0xea, 0xb6, 0xff, 0xde, 0xfc, 0x43, 0x7c, 0x19, 0x0c, 0xd2, 0x10, 0x6e, 0xf9, 0xc9,
		0xeb, 0xc9, 0xff, 0xb4, 0x30, 0xae, 0xef, 0xc4, 0x93, 0x3d, 0x1b, 0xce, 0xf1, 0xde, 0xf8, 0xff,
		0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x83, 0xfc, 0xc7, 0xf2, 0x07, 0xf9,
		0x52, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/bfd/interfaces/interface/micro-bfd-sessions/micro-bfd-session/state/local-diagnostic-code": {
		reflect.TypeOf((E_Bfd_BfdDiagnosticCode)(0)),
	},
	"/bfd/interfaces/interface/micro-bfd-sessions/micro-bfd-session/state/remote-diagnostic-code": {
		reflect.TypeOf((E_Bfd_BfdDiagnosticCode)(0)),
	},
	"/bfd/interfaces/interface/micro-bfd-sessions/micro-bfd-session/state/remote-session-state": {
		reflect.TypeOf((E_Bfd_BfdSessionState)(0)),
	},
	"/bfd/interfaces/interface/micro-bfd-sessions/micro-bfd-session/state/session-state": {
		reflect.TypeOf((E_Bfd_BfdSessionState)(0)),
	},
	"/bfd/interfaces/interface/peers/peer/state/local-diagnostic-code": {
		reflect.TypeOf((E_Bfd_BfdDiagnosticCode)(0)),
	},
	"/bfd/interfaces/interface/peers/peer/state/remote-diagnostic-code": {
		reflect.TypeOf((E_Bfd_BfdDiagnosticCode)(0)),
	},
	"/bfd/interfaces/interface/peers/peer/state/remote-session-state": {
		reflect.TypeOf((E_Bfd_BfdSessionState)(0)),
	},
	"/bfd/interfaces/interface/peers/peer/state/session-state": {
		reflect.TypeOf((E_Bfd_BfdSessionState)(0)),
	},
	"/bfd/interfaces/interface/peers/peer/state/subscribed-protocols": {
		reflect.TypeOf((E_PolicyTypes_INSTALL_PROTOCOL_TYPE)(0)),
	},
	"/bgp/global/afi-safis/afi-safi/state/afi-safi-name": {
		reflect.TypeOf((E_BgpTypes_AFI_SAFI_TYPE)(0)),
	},
	"/bgp/neighbors/neighbor/afi-safis/afi-safi/apply-policy/state/default-export-policy": {
		reflect.TypeOf((E_RoutingPolicy_DefaultPolicyType)(0)),
	},
	"/bgp/neighbors/neighbor/afi-safis/afi-safi/apply-policy/state/default-import-policy": {
		reflect.TypeOf((E_RoutingPolicy_DefaultPolicyType)(0)),
	},
	"/bgp/neighbors/neighbor/afi-safis/afi-safi/state/afi-safi-name": {
		reflect.TypeOf((E_BgpTypes_AFI_SAFI_TYPE)(0)),
	},
	"/bgp/neighbors/neighbor/apply-policy/state/default-export-policy": {
		reflect.TypeOf((E_RoutingPolicy_DefaultPolicyType)(0)),
	},
	"/bgp/neighbors/neighbor/apply-policy/state/default-import-policy": {
		reflect.TypeOf((E_RoutingPolicy_DefaultPolicyType)(0)),
	},
	"/bgp/neighbors/neighbor/graceful-restart/state/mode": {
		reflect.TypeOf((E_GracefulRestart_Mode)(0)),
	},
	"/bgp/neighbors/neighbor/state/messages/received/last-notification-error-code": {
		reflect.TypeOf((E_BgpTypes_BGP_ERROR_CODE)(0)),
	},
	"/bgp/neighbors/neighbor/state/messages/received/last-notification-error-subcode": {
		reflect.TypeOf((E_BgpTypes_BGP_ERROR_SUBCODE)(0)),
	},
	"/bgp/neighbors/neighbor/state/messages/sent/last-notification-error-code": {
		reflect.TypeOf((E_BgpTypes_BGP_ERROR_CODE)(0)),
	},
	"/bgp/neighbors/neighbor/state/messages/sent/last-notification-error-subcode": {
		reflect.TypeOf((E_BgpTypes_BGP_ERROR_SUBCODE)(0)),
	},
	"/bgp/neighbors/neighbor/state/peer-type": {
		reflect.TypeOf((E_BgpTypes_PeerType)(0)),
	},
	"/bgp/neighbors/neighbor/state/remove-private-as": {
		reflect.TypeOf((E_BgpTypes_RemovePrivateAsOption)(0)),
	},
	"/bgp/neighbors/neighbor/state/send-community": {
		reflect.TypeOf((E_BgpTypes_CommunityType)(0)),
	},
	"/bgp/neighbors/neighbor/state/session-state": {
		reflect.TypeOf((E_Neighbor_SessionState)(0)),
	},
	"/bgp/neighbors/neighbor/state/supported-capabilities": {
		reflect.TypeOf((E_BgpTypes_BGP_CAPABILITY)(0)),
	},
	"/bgp/peer-groups/peer-group/afi-safis/afi-safi/apply-policy/state/default-export-policy": {
		reflect.TypeOf((E_RoutingPolicy_DefaultPolicyType)(0)),
	},
	"/bgp/peer-groups/peer-group/afi-safis/afi-safi/apply-policy/state/default-import-policy": {
		reflect.TypeOf((E_RoutingPolicy_DefaultPolicyType)(0)),
	},
	"/bgp/peer-groups/peer-group/afi-safis/afi-safi/state/afi-safi-name": {
		reflect.TypeOf((E_BgpTypes_AFI_SAFI_TYPE)(0)),
	},
	"/bgp/peer-groups/peer-group/apply-policy/state/default-export-policy": {
		reflect.TypeOf((E_RoutingPolicy_DefaultPolicyType)(0)),
	},
	"/bgp/peer-groups/peer-group/apply-policy/state/default-import-policy": {
		reflect.TypeOf((E_RoutingPolicy_DefaultPolicyType)(0)),
	},
	"/bgp/peer-groups/peer-group/state/peer-type": {
		reflect.TypeOf((E_BgpTypes_PeerType)(0)),
	},
	"/bgp/peer-groups/peer-group/state/remove-private-as": {
		reflect.TypeOf((E_BgpTypes_RemovePrivateAsOption)(0)),
	},
	"/bgp/peer-groups/peer-group/state/send-community": {
		reflect.TypeOf((E_BgpTypes_CommunityType)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/loc-rib/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-post/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-pre/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-post/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-pre/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib/routes/route/state/origin": {
		reflect.TypeOf((E_PolicyTypes_INSTALL_PROTOCOL_TYPE)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-post/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-pre/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-pre/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/loc-rib/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-post/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-pre/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-post/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-pre/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib/routes/route/state/origin": {
		reflect.TypeOf((E_PolicyTypes_INSTALL_PROTOCOL_TYPE)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-post/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-pre/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-pre/routes/route/state/invalid-reason": {
		reflect.TypeOf((E_RibBgpTypes_INVALID_ROUTE_REASON)(0)),
	},
	"/bgp/rib/afi-safis/afi-safi/state/afi-safi-name": {
		reflect.TypeOf((E_BgpTypes_AFI_SAFI_TYPE)(0)),
	},
	"/bgp/rib/attr-sets/attr-set/as-path/as-segment/state/type": {
		reflect.TypeOf((E_BgpTypes_AsPathSegmentType)(0)),
	},
	"/bgp/rib/attr-sets/attr-set/as4-path/as4-segment/state/type": {
		reflect.TypeOf((E_BgpTypes_AsPathSegmentType)(0)),
	},
	"/bgp/rib/attr-sets/attr-set/state/origin": {
		reflect.TypeOf((E_BgpTypes_BgpOriginAttrType)(0)),
	},
	"/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/state/type": {
		reflect.TypeOf((E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE)(0)),
	},
	"/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list/segments/segment/state/sid": {
		reflect.TypeOf((E_MplsTypes_MplsLabel_Enum)(0)),
	},
	"/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list/segments/segment/state/type": {
		reflect.TypeOf((E_Segment_Type)(0)),
	},
	"/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/state/binding-sid": {
		reflect.TypeOf((E_MplsTypes_MplsLabel_Enum)(0)),
	},
	"/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/state/type": {
		reflect.TypeOf((E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE)(0)),
	},
	"/bgp/rib/communities/community/state/community": {
		reflect.TypeOf((E_BgpTypes_BGP_WELL_KNOWN_STD_COMMUNITY)(0)),
	},
	"/interfaces/interface/aggregation/state/lag-type": {
		reflect.TypeOf((E_IfAggregate_AggregationType)(0)),
	},
	"/interfaces/interface/aggregation/switched-vlan/state/interface-mode": {
		reflect.TypeOf((E_VlanTypes_VlanModeType)(0)),
	},
	"/interfaces/interface/ethernet/state/duplex-mode": {
		reflect.TypeOf((E_Ethernet_DuplexMode)(0)),
	},
	"/interfaces/interface/ethernet/state/negotiated-duplex-mode": {
		reflect.TypeOf((E_Ethernet_NegotiatedDuplexMode)(0)),
	},
	"/interfaces/interface/ethernet/state/negotiated-port-speed": {
		reflect.TypeOf((E_IfEthernet_ETHERNET_SPEED)(0)),
	},
	"/interfaces/interface/ethernet/state/port-speed": {
		reflect.TypeOf((E_IfEthernet_ETHERNET_SPEED)(0)),
	},
	"/interfaces/interface/ethernet/switched-vlan/state/interface-mode": {
		reflect.TypeOf((E_VlanTypes_VlanModeType)(0)),
	},
	"/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin": {
		reflect.TypeOf((E_IfIp_IpAddressOrigin)(0)),
	},
	"/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin": {
		reflect.TypeOf((E_IfIp_NeighborOrigin)(0)),
	},
	"/interfaces/interface/routed-vlan/ipv4/proxy-arp/state/mode": {
		reflect.TypeOf((E_ProxyArp_Mode)(0)),
	},
	"/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin": {
		reflect.TypeOf((E_IfIp_IpAddressOrigin)(0)),
	},
	"/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status": {
		reflect.TypeOf((E_Address_Status)(0)),
	},
	"/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state": {
		reflect.TypeOf((E_Neighbor_NeighborState)(0)),
	},
	"/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin": {
		reflect.TypeOf((E_IfIp_NeighborOrigin)(0)),
	},
	"/interfaces/interface/state/admin-status": {
		reflect.TypeOf((E_Interface_AdminStatus)(0)),
	},
	"/interfaces/interface/state/oper-status": {
		reflect.TypeOf((E_Interface_OperStatus)(0)),
	},
	"/interfaces/interface/state/tpid": {
		reflect.TypeOf((E_VlanTypes_TPID_TYPES)(0)),
	},
	"/interfaces/interface/state/type": {
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin": {
		reflect.TypeOf((E_IfIp_IpAddressOrigin)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin": {
		reflect.TypeOf((E_IfIp_NeighborOrigin)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/state/mode": {
		reflect.TypeOf((E_ProxyArp_Mode)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin": {
		reflect.TypeOf((E_IfIp_IpAddressOrigin)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status": {
		reflect.TypeOf((E_Address_Status)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state": {
		reflect.TypeOf((E_Neighbor_NeighborState)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin": {
		reflect.TypeOf((E_IfIp_NeighborOrigin)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/admin-status": {
		reflect.TypeOf((E_Interface_AdminStatus)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/oper-status": {
		reflect.TypeOf((E_Interface_OperStatus)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/tpid": {
		reflect.TypeOf((E_VlanTypes_TPID_TYPES)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/state/vlan-stack-action": {
		reflect.TypeOf((E_VlanTypes_VlanStackAction)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/tpid": {
		reflect.TypeOf((E_VlanTypes_TPID_TYPES)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/state/vlan-stack-action": {
		reflect.TypeOf((E_VlanTypes_VlanStackAction)(0)),
	},
	"/local-routes/static-routes/static/next-hops/next-hop/state/next-hop": {
		reflect.TypeOf((E_LocalRouting_LOCAL_DEFINED_NEXT_HOP)(0)),
	},
	"/network-instances/network-instance/interfaces/interface/state/associated-address-families": {
		reflect.TypeOf((E_Types_ADDRESS_FAMILY)(0)),
	},
	"/network-instances/network-instance/state/enabled-address-families": {
		reflect.TypeOf((E_Types_ADDRESS_FAMILY)(0)),
	},
	"/network-instances/network-instance/state/type": {
		reflect.TypeOf((E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE)(0)),
	},
}
